pid /var/run/nginx/nginx.pid;
error_log /var/log/nginx/error.log debug;

events {
    worker_connections 1024;
    multi_accept on;
    use epoll;
}

http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    charset utf-8;

    # Override TypeScript MIME type (will override video/mp2t from mime.types)
    types {
        application/typescript ts;
        application/javascript js;
    }

    # Logging
    log_format debug_format '$remote_addr - $remote_user [$time_local] '
                          '"$request" $status $body_bytes_sent '
                          '"$http_referer" "$http_user_agent" '
                          'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"'
                          ' ws_status="$upstream_http_upgrade"';  # Added WebSocket status logging

    access_log /var/log/nginx/access.log debug_format;

    # Optimization
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 120;  # Increased to match cloudflared keepAliveTimeout
    keepalive_requests 100;

    # Gzip settings
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # WebSocket configuration
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    # Upstream backend definition for the Rust server
    upstream backend {
        server webxr:3001 max_fails=3 fail_timeout=30s;  # Using Docker service name
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    # Main server configuration
    server {
        listen 4000 default_server;  # Listen on port 4000 for external connections
        server_name _;  # Accept any server name
        root /app/data/public/dist;  # Set root to built files directory

        # Security headers
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "same-origin" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline' 'unsafe-eval'; connect-src 'self' ws: wss: http: https: www.visionflow.info;" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Health check endpoint
        location /health {
            access_log off;
            add_header Content-Type application/json;
            return 200 '{"status":"healthy","timestamp":$time_iso8601}';
        }

        # Metrics endpoint
        location /metrics {
            access_log off;
            proxy_pass http://backend/metrics;
        }

        # WebSocket endpoints
        location /wss {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            
            # Cloudflare-specific headers
            proxy_set_header CF-Connecting-IP $http_cf_connecting_ip;
            proxy_set_header CF-Ray $http_cf_ray;
            proxy_set_header CF-Visitor $http_cf_visitor;
            proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
            
            # Increase timeouts for long-lived connections
            proxy_read_timeout 3600s;    # Match Cloudflare's websocket timeout
            proxy_send_timeout 3600s;    # Match Cloudflare's websocket timeout
            proxy_connect_timeout 75s;   # Increased for reliability
            
            # WebSocket optimizations
            proxy_buffering off;
            proxy_cache off;
            proxy_request_buffering off;
            
            # Logging
            access_log /var/log/nginx/websocket.log debug_format;
        }

        # Settings endpoints
        location /api/settings {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            
            # Cloudflare headers
            proxy_set_header CF-Connecting-IP $http_cf_connecting_ip;
            proxy_set_header CF-Ray $http_cf_ray;
            proxy_set_header CF-Visitor $http_cf_visitor;
            proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
            
            # Settings specific configuration
            proxy_read_timeout 30s;
            proxy_send_timeout 30s;
            proxy_connect_timeout 10s;
            proxy_buffering on;
            proxy_buffer_size 64k;
            proxy_buffers 4 128k;
            proxy_busy_buffers_size 128k;
            
            # Cache control
            add_header Cache-Control "no-store" always;
            expires -1;
            
            # CORS headers for settings API
            add_header 'Access-Control-Allow-Methods' 'GET, PUT, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type' always;
        }

        # General API endpoints
        location /api {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # API specific settings
            proxy_read_timeout 60s;
            proxy_send_timeout 60s;
            proxy_connect_timeout 60s;
            proxy_buffering on;       # Enable buffering for API responses
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;
        }

        # Graph endpoints
        location /graph {
            proxy_pass http://backend/graph;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 30s;  # Match HEARTBEAT_INTERVAL
            add_header Cache-Control "no-store" always;
        }

        # Static files
        location / {
            try_files $uri $uri/ /index.html =404;
            expires 1h;
            add_header Cache-Control "public, no-transform";
            error_page 404 = @backend;  # Fallback to backend if file not found
        }

        # Static files with proper MIME types
        location /assets/ {
            expires 7d;
            add_header Cache-Control "public, no-transform" always;
            try_files $uri =404;
            access_log off;
        }

        # Fallback location for static files
        location @backend {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        # Error handling
        proxy_intercept_errors on;
        error_page 502 503 504 /50x.html;
        error_page 497 https://$host$request_uri;  # Handle HTTP to HTTPS redirects

        # Custom error pages location (single definition)
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
            add_header Content-Type text/html;
            return 502 "<!DOCTYPE html><html><head><title>Tunnel Error</title></head><body><h1>Tunnel Connection Error</h1><p>Please try again in a few moments.</p></body></html>";
        }
    }
}
