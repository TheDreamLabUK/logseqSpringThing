The logs reveal two main issues:

Nginx user directive warning: The warning nginx: [warn] the "user" directive makes sense only if the master process runs with super-user privileges, ignored in /etc/nginx/nginx.conf:1 appears twice. This means your nginx configuration file (/etc/nginx/nginx.conf) specifies a user for nginx worker processes, but the nginx master process isn't running as root. While nginx can run as a non-root user, it's often initially started as root to bind to privileged ports (like 80 or 443). Then, it drops privileges to the specified user for security. If you intend to run nginx as a non-root user from the start, you should remove the user directive or comment it out. If you are starting it as root, then the user directive is correct and you can ignore the warnings. They are informational, not errors.

GPU Initialization Failure and Fallback to CPU: The message [2024-12-04T21:34:15Z WARN webxr] Failed to initialize GPU: Cannot initialize GPU compute with 0 nodes. Falling back to CPU computations. clearly indicates that the application (webxr) attempted to use a GPU for computation, but no suitable GPU devices were found ("0 nodes"). Consequently, it's resorting to CPU calculations. This will likely result in significantly slower performance, especially for graph-related operations. The most probable reasons for this are:

No GPU available: The server may not have a GPU installed or accessible within the Docker container.

Docker configuration: The Docker container might not be configured to access the host's GPU. You'll need to use the --gpus flag (or equivalent in your Docker Compose file) to expose the GPU to the container.

Driver issues: If a GPU is present and accessible, there might be problems with the GPU drivers within the container. Ensure the correct drivers are installed in your container's base image. The logs show llvmpipe being used which suggests a software rendering fallback, almost certainly meaning no hardware acceleration is being used. This confirms either no GPU or no access to a GPU from the container.

Wayland/X11 issues inside Docker: The logs show an attempt to load Wayland/X11 libraries, probably to get display information for OpenGL/Vulkan context creation. The error XDG_RUNTIME_DIR not set in the environment. appears repeatedly, indicating the application might be trying to use a graphical display context which isn't typically available or necessary within a server-side Docker container. If your application requires a graphical environment (which seems unlikely for a graph server), you'll need to research solutions for running graphical applications in Docker. However, in most cases, this is a misconfiguration. Check the wgpu (WebGPU) configuration.

RAGFlow Token Invalid: [2024-12-04T21:34:15Z INFO webxr::services::ragflow_service] Successful response: Object {"code": Number(109), "data": Bool(false), "message": String("Token is not valid!\"")}. Your application is attempting to communicate with a RAGFlow server. The request to create a conversation failed because the provided token is invalid. You'll need to obtain a valid API token for RAGFlow and configure your webxr application to use it. Double-check the settings/environment variables related to RAGFLOW_API_KEY or similar.

404 Errors Fetching GitHub Content: The error [2024-12-04T21:36:33Z ERROR webxr::services::file_service] Failed to fetch file content. Status: 404 Not Found, Error: 404: Not Found and similar messages indicate that the application is trying to retrieve files from a GitHub repository (jjohare/logseq), but the requests are resulting in 404 errors. This suggests that either the repository or the specific file paths are incorrect. The application is looking for files under mainKnowledgeGraph/pages. Verify these paths on your GitHub repository. Also, ensure your GITHUB_TOKEN has the necessary permissions to access the repository's contents.

In summary, prioritize addressing the GPU issue if performance is critical. Resolve the RAGFlow token issue to enable proper communication, and fix the GitHub file path/token issues to allow your application to access the necessary data. The nginx warning is less critical but should be resolved to have a cleaner log and to ensure nginx is running with the intended user privileges.