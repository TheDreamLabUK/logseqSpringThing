merge in from e4bc230ee1db19b2aaecb9b00761e2978fd47fdb

Problem Areas and Missing Functionality

Git Integration Removed: The newer main.rs has removed the code responsible for initializing local storage and fetching files from GitHub using FileService::initialize_local_storage. This function was crucial for populating the data/markdown directory with content from the GitHub repository.

Graph Building from Metadata: The newer graph_handler.rs has a refresh_graph function that attempts to build the graph from metadata, but it lacks the crucial file processing logic that was present in the older file_handler::fetch_and_process_files. This logic was responsible for:

Fetching file metadata from GitHub.

Downloading file content.

Extracting references between files.

Calculating node size based on file size.

Generating SHA1 hashes for files.

Updating the MetadataStore.

GPU Compute: The gpu_compute initialization and usage within main.rs and graph_handler::update_graph are commented out or removed. This suggests that GPU-accelerated force calculation is not being utilized.

Settings Handling: The configure_settings_handler function in main.rs is commented out, indicating that the settings API endpoints are disabled. The client-side SettingsStore is initialized with default settings but doesn't load them from the server.

WebSocket Handling: The socket_flow_handler in the newer version is missing the logic for sending the initial graph data to newly connected clients. It also lacks the heartbeat mechanism present in the older version.

Binary Updates: The enableBinaryUpdates call in the client's GraphDataManager is present, but the server-side logic to send binary updates is likely missing or incomplete.

Python Script Execution: The generate_audio.py script is present, but there's no clear indication of how it's being invoked or integrated into the application flow.

Nginx Configuration: The nginx.conf file has been updated, but it's unclear if these changes are fully compatible with the new code structure.

Error Handling: The error handling in several places, especially in graph_handler.rs and file_service.rs, could be improved to provide more specific error messages and potentially recover from transient errors.

Missing Dependencies: The Cargo.toml file is not included in the new code, making it difficult to determine the exact dependencies and their versions.

Client-Side Code: The provided client-side code (TypeScript) is incomplete, missing parts of the index.ts file and other crucial components like NodeManager, EdgeManager, etc.

Plan to Integrate and Restore Functionality

The integration will involve a combination of merging code, adapting existing logic, and potentially rewriting some parts to ensure compatibility. Here's a step-by-step plan:

Phase 1: Server-Side Restoration

Restore Git Integration:

Merge the FileService::initialize_local_storage function from the older file_service.rs into the new one.

Call FileService::initialize_local_storage in main.rs after initializing the github_service.

Ensure that the data/markdown directory is correctly populated with files from GitHub on startup.

Rebuild Graph Building Logic:

Merge the file processing logic from the older file_handler::fetch_and_process_files into the new file_handler::update_graph. This includes:

Fetching file metadata using github_service.fetch_file_metadata().

Downloading file content using github_service.fetch_file_content().

Extracting references using FileService::extract_references().

Calculating node size using FileService::calculate_node_size().

Generating SHA1 hashes using FileService::calculate_sha1().

Updating the MetadataStore with the processed file information.

Modify GraphService::build_graph_from_metadata to properly utilize the updated MetadataStore and create nodes and edges based on the extracted information.

Ensure that graph_handler::update_graph calls FileService::fetch_and_process_files to fetch and process new or updated files before rebuilding the graph.

Reinstate GPU Compute:

Uncomment and integrate the GPUCompute initialization in main.rs.

Ensure that the compute_forces.ptx file is correctly generated and accessible.

Modify GraphService::calculate_layout to use the GPUCompute instance for force calculations.

Update graph_handler::update_graph to call gpu_compute.read().await.get_node_data() after updating the graph data to trigger GPU computations.

Re-enable Settings API:

Uncomment the settings::config call in main.rs to re-enable the settings API endpoints.

Ensure that the settings.toml file is correctly loaded and parsed.

Modify the client-side SettingsStore to fetch initial settings from the server's /api/settings endpoint during initialization.

Implement proper error handling for settings API calls.

Phase 2: Client-Side Integration

Complete Client-Side Code:

Restore or rewrite the missing parts of index.ts, including the initialization of NodeManager, EdgeManager, and other visualization components.

Ensure that the client-side code correctly handles the updated graph data format, including node positions, velocities, and metadata.

Integrate the MetadataVisualizer and HologramManager into the rendering pipeline.

Update WebSocket Handling:

Modify the socket_flow_handler to send the initial graph data to newly connected clients after they send the enableBinaryUpdates message.

Implement the heartbeat mechanism (ping/pong) to maintain connection health.

Ensure that the client-side WebSocketService correctly handles binary position updates and updates the node positions accordingly.

Integrate Binary Updates:

Modify the GraphDataManager to send binary position updates to the server at the specified update_rate.

Ensure that the server-side socket_flow_handler correctly receives and broadcasts these updates to all connected clients.