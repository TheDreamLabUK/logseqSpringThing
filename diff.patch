diff --git a/.env_template b/.env_template
index 42872bc3..8b0ca9c2 100755
--- a/.env_template
+++ b/.env_template
@@ -1,33 +1,64 @@
-# Debug Configuration
-DEBUG_MODE=false                     # When true, only processes Debug Test Page.md
+# Environment Configuration
 
 # Server Configuration
 RUST_LOG=info                        # Log level (debug, info, warn, error)
 BIND_ADDRESS=0.0.0.0                 # Server bind address
+DEBUG_MODE=false                     # When true, only processes Debug Test Page.md
 
 # Cloudflare Tunnel Configuration
 TUNNEL_TOKEN=
 TUNNEL_ID=
 
+# Network Configuration
+DOMAIN=localhost                     # Default domain, override in production
+PORT=3000
+ENABLE_TLS=true
+MIN_TLS_VERSION=TLS1.3
+ENABLE_HTTP2=true
+MAX_REQUEST_SIZE=10485760
+ENABLE_RATE_LIMITING=true
+RATE_LIMIT_REQUESTS=100
+RATE_LIMIT_WINDOW=60
+TUNNEL_ID=""                        # Cloudflare tunnel ID, set in production
+
+# Security Configuration
+ENABLE_CORS=false
+ENABLE_CSRF=true
+CSRF_TOKEN_TIMEOUT=3600
+SESSION_TIMEOUT=3600
+COOKIE_SECURE=true
+COOKIE_HTTPONLY=true
+COOKIE_SAMESITE=Strict
+ENABLE_SECURITY_HEADERS=true
+ENABLE_REQUEST_VALIDATION=true
+ENABLE_AUDIT_LOGGING=true
+AUDIT_LOG_PATH=/app/logs/audit.log
+
 # GitHub Configuration
 GITHUB_ACCESS_TOKEN=
 GITHUB_OWNER=jjohare
 GITHUB_REPO=logseq
 GITHUB_DIRECTORY=mainKnowledgeGraph/pages
+GITHUB_API_VERSION=2022-11-28
+GITHUB_RATE_LIMIT_ENABLED=true
 
 # RAGFlow Configuration
 RAGFLOW_API_KEY=ragflow-
-RAGFLOW_BASE_URL=http://192.168.0.51/v1/
+RAGFLOW_API_BASE_URL=http://192.168.0.51/v1/
+RAGFLOW_TIMEOUT=30
+RAGFLOW_MAX_RETRIES=3
 
 # Perplexity API Configuration
 PERPLEXITY_API_KEY=pplx-
 PERPLEXITY_MODEL=llama-3.1-sonar-small-128k-online
+PERPLEXITY_API_URL=https://api.perplexity.ai/chat/completions
 PERPLEXITY_MAX_TOKENS=4096
 PERPLEXITY_TEMPERATURE=0.5
 PERPLEXITY_TOP_P=0.9
 PERPLEXITY_PRESENCE_PENALTY=0.0
 PERPLEXITY_FREQUENCY_PENALTY=1.0
-PERPLEXITY_API_URL=https://api.perplexity.ai/chat/completions
+PERPLEXITY_TIMEOUT=30
+PERPLEXITY_RATE_LIMIT=100
 
 # OpenAI Configuration
 # Overview
@@ -40,36 +71,78 @@ PERPLEXITY_API_URL=https://api.perplexity.ai/chat/completions
 
 OPENAI_API_KEY=sk-proj-
 OPENAI_BASE_URL=wss://api.openai.com/v1/realtime
+OPENAI_TIMEOUT=30
+OPENAI_RATE_LIMIT=100
 
 # Default Configuration
 MAX_CONCURRENT_REQUESTS=5
 MAX_RETRIES=3
 RETRY_DELAY=5
-# Timeout in seconds
 API_CLIENT_TIMEOUT=30
+MAX_PAYLOAD_SIZE=5242880
+ENABLE_REQUEST_LOGGING=false
+ENABLE_METRICS=true
+METRICS_PORT=9090
+LOG_LEVEL=info
+LOG_FORMAT=json
 
-# Visualization Settings
+# Visualization Settings - Colors
 NODE_COLOR="0x1A0B31"
 EDGE_COLOR="0xff0000"
 HOLOGRAM_COLOR="0xFFD700"
-NODE_SIZE_SCALING_FACTOR=1
-HOLOGRAM_SCALE=5
+NODE_COLOR_NEW="0x00ff88"          # Bright green for very recent files (< 3 days)
+NODE_COLOR_RECENT="0x4444ff"       # Blue for recent files (< 7 days)
+NODE_COLOR_MEDIUM="0xffaa00"       # Orange for medium-age files (< 30 days)
+NODE_COLOR_OLD="0xff4444"          # Red for old files (>= 30 days)
+NODE_COLOR_CORE="0xffa500"         # Orange for core nodes
+NODE_COLOR_SECONDARY="0x00ffff"    # Cyan for secondary nodes
+NODE_COLOR_DEFAULT="0x00ff00"      # Green for default nodes
+
+# Visualization Settings - Physical Dimensions (in meters)
+MIN_NODE_SIZE=0.1                  # 10cm minimum node size
+MAX_NODE_SIZE=0.3                  # 30cm maximum node size
+HOLOGRAM_SCALE=5.0
 HOLOGRAM_OPACITY=0.1
 EDGE_OPACITY=0.3
-LABEL_FONT_SIZE=16
+
+# Visualization Settings - Labels
+LABEL_FONT_SIZE=36
+LABEL_FONT_FAMILY="Arial"
+LABEL_PADDING=20
+LABEL_VERTICAL_OFFSET=2.0
+LABEL_CLOSE_OFFSET=0.2
+LABEL_BACKGROUND_COLOR="rgba(0, 0, 0, 0.8)"
+LABEL_TEXT_COLOR="white"
+LABEL_INFO_TEXT_COLOR="lightgray"
+LABEL_XR_FONT_SIZE=24
+
+# Visualization Settings - Geometry
+GEOMETRY_MIN_SEGMENTS=16
+GEOMETRY_MAX_SEGMENTS=32
+GEOMETRY_SEGMENT_PER_HYPERLINK=0.5
+
+# Visualization Settings - Material
+NODE_MATERIAL_METALNESS=0.2
+NODE_MATERIAL_ROUGHNESS=0.2
+NODE_MATERIAL_CLEARCOAT=0.3
+NODE_MATERIAL_CLEARCOAT_ROUGHNESS=0.2
+NODE_MATERIAL_OPACITY=0.9
+NODE_EMISSIVE_MIN_INTENSITY=0.3
+NODE_EMISSIVE_MAX_INTENSITY=1.0
+
+# Visualization Settings - Interaction
+CLICK_EMISSIVE_BOOST=2.0
+CLICK_FEEDBACK_DURATION=200        # milliseconds
+
+# Visualization Settings - Environment
 FOG_DENSITY=0.002
 
 # Physics Simulation Parameters
-# Number of physics steps per update
 FORCE_DIRECTED_ITERATIONS=250
-# Controls edge stiffness (0.01-1.0)
-FORCE_DIRECTED_SPRING=0.1
-# Controls node spacing (100-5000)
-FORCE_DIRECTED_REPULSION=100.0
-# Controls attraction between nodes (0.01-1.0)
-FORCE_DIRECTED_ATTRACTION=0.02
-# Velocity damping (0.8 recommended)
-FORCE_DIRECTED_DAMPING=0.8
+FORCE_DIRECTED_SPRING=0.01         # Spring force (0.001-1.0)
+FORCE_DIRECTED_REPULSION=1000.0    # Required for backend compatibility
+FORCE_DIRECTED_ATTRACTION=0.01
+FORCE_DIRECTED_DAMPING=0.8         # Damping (0.5-0.95)
 
 # Bloom Settings
 NODE_BLOOM_STRENGTH=0.1
diff --git a/Cargo.lock b/Cargo.lock
old mode 100755
new mode 100644
index f1632bd3..add2ca22
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -679,9 +679,9 @@ checksum = "79296716171880943b8470b5f8d03aa55eb2e645a4874bdbb28adb49162e012c"
 
 [[package]]
 name = "bytemuck"
-version = "1.19.0"
+version = "1.20.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8334215b81e418a0a7bdb8ef0849474f40bb10c8b71f1c4ed315cff49f32494d"
+checksum = "8b37c88a63ffd85d15b406896cc343916d7cf57838a847b3a6f2ca5d39a5695a"
 dependencies = [
  "bytemuck_derive",
 ]
@@ -904,6 +904,16 @@ dependencies = [
  "libc",
 ]
 
+[[package]]
+name = "core-foundation"
+version = "0.10.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b55271e5c8c478ad3f38ad24ef34923091e0548492a266d19b3c0b4d82574c63"
+dependencies = [
+ "core-foundation-sys",
+ "libc",
+]
+
 [[package]]
 name = "core-foundation-sys"
 version = "0.8.7"
@@ -917,7 +927,7 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "45390e6114f68f718cc7a830514a96f903cccd70d02a8f6d9f643ac4ba45afaf"
 dependencies = [
  "bitflags 1.3.2",
- "core-foundation",
+ "core-foundation 0.9.4",
  "libc",
 ]
 
@@ -966,9 +976,9 @@ dependencies = [
 
 [[package]]
 name = "cpufeatures"
-version = "0.2.15"
+version = "0.2.16"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0ca741a962e1b0bff6d724a1a0958b686406e853bb14061f218562e1896f95e6"
+checksum = "16b80225097f2e5ae4e7179dd2266824648f3e2f49d9134d584b76389d31c4c3"
 dependencies = [
  "libc",
 ]
@@ -1531,9 +1541,9 @@ dependencies = [
 
 [[package]]
 name = "h2"
-version = "0.4.6"
+version = "0.4.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "524e8ac6999421f49a846c2d4411f337e53497d8ec55d67753beffa43c5d9205"
+checksum = "ccae279728d634d083c00f6099cb58f01cc99c145b84b8be2f6c74618d79922e"
 dependencies = [
  "atomic-waker",
  "bytes",
@@ -1671,14 +1681,14 @@ checksum = "9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4"
 
 [[package]]
 name = "hyper"
-version = "1.5.0"
+version = "1.5.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "bbbff0a806a4728c99295b254c8838933b5b082d75e3cb70c8dab21fdfbcfa9a"
+checksum = "97818827ef4f364230e16705d4706e2897df2bb60617d6ca15d598025a3c481f"
 dependencies = [
  "bytes",
  "futures-channel",
  "futures-util",
- "h2 0.4.6",
+ "h2 0.4.7",
  "http 1.1.0",
  "http-body",
  "httparse",
@@ -1953,9 +1963,9 @@ dependencies = [
 
 [[package]]
 name = "itoa"
-version = "1.0.11"
+version = "1.0.13"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b"
+checksum = "540654e97a3f4470a492cd30ff187bc95d89557a903a2bbf112e2fae98104ef2"
 
 [[package]]
 name = "jni"
@@ -2269,7 +2279,7 @@ dependencies = [
  "openssl-probe",
  "openssl-sys",
  "schannel",
- "security-framework",
+ "security-framework 2.11.1",
  "security-framework-sys",
  "tempfile",
 ]
@@ -2428,9 +2438,9 @@ checksum = "1261fe7e33c73b354eab43b1273a57c8f967d0391e80353e51f764ac02cf6775"
 
 [[package]]
 name = "openai-api-rs"
-version = "5.2.1"
+version = "5.2.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4bfee9831bc3214d8b4fbf565dace25c3d4aa33805ae1a9c55e2e6b86e5497a8"
+checksum = "e0061068e3cd1d5a538a0c61484fb1e0722f5113d107e7e1c652b62a6fcba148"
 dependencies = [
  "bytes",
  "futures-util",
@@ -2667,9 +2677,9 @@ dependencies = [
 
 [[package]]
 name = "proc-macro2"
-version = "1.0.89"
+version = "1.0.92"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f139b0662de085916d1fb67d2b4169d1addddda1919e696f3252b740b629986e"
+checksum = "37d3544b3f2748c54e147655edb5025752e2303145b5aefb3c3ea2c78b973bb0"
 dependencies = [
  "unicode-ident",
 ]
@@ -2883,7 +2893,7 @@ dependencies = [
  "encoding_rs",
  "futures-core",
  "futures-util",
- "h2 0.4.6",
+ "h2 0.4.7",
  "http 1.1.0",
  "http-body",
  "http-body-util",
@@ -3017,9 +3027,9 @@ dependencies = [
 
 [[package]]
 name = "rustix"
-version = "0.38.40"
+version = "0.38.41"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "99e4ea3e1cdc4b559b8e5650f9c8e5998e3e5c1343b4eaf034565f32318d63c0"
+checksum = "d7f649912bc1495e167a6edee79151c84b1bad49748cb4f1f1167f459f6224f6"
 dependencies = [
  "bitflags 2.6.0",
  "errno",
@@ -3070,15 +3080,14 @@ dependencies = [
 
 [[package]]
 name = "rustls-native-certs"
-version = "0.8.0"
+version = "0.8.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "fcaf18a4f2be7326cd874a5fa579fae794320a0f388d365dca7e480e55f83f8a"
+checksum = "7fcff2dd52b58a8d98a70243663a0d234c4e2b79235637849d15913394a247d3"
 dependencies = [
  "openssl-probe",
- "rustls-pemfile",
  "rustls-pki-types",
  "schannel",
- "security-framework",
+ "security-framework 3.0.1",
 ]
 
 [[package]]
@@ -3138,9 +3147,9 @@ dependencies = [
 
 [[package]]
 name = "schannel"
-version = "0.1.26"
+version = "0.1.27"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "01227be5826fa0690321a2ba6c5cd57a19cf3f6a09e76973b58e61de6ab9d1c1"
+checksum = "1f29ebaa345f945cec9fbbc532eb307f0fdad8161f281b6369539c8d84876b3d"
 dependencies = [
  "windows-sys 0.59.0",
 ]
@@ -3168,7 +3177,20 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "897b2245f0b511c87893af39b033e5ca9cce68824c4d7e7630b5a1d339658d02"
 dependencies = [
  "bitflags 2.6.0",
- "core-foundation",
+ "core-foundation 0.9.4",
+ "core-foundation-sys",
+ "libc",
+ "security-framework-sys",
+]
+
+[[package]]
+name = "security-framework"
+version = "3.0.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e1415a607e92bec364ea2cf9264646dcce0f91e6d65281bd6f2819cca3bf39c8"
+dependencies = [
+ "bitflags 2.6.0",
+ "core-foundation 0.10.0",
  "core-foundation-sys",
  "libc",
  "security-framework-sys",
@@ -3404,9 +3426,9 @@ dependencies = [
 
 [[package]]
 name = "syn"
-version = "2.0.87"
+version = "2.0.89"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "25aa4ce346d03a6dcd68dd8b4010bcb74e54e62c90c573f394c46eae99aba32d"
+checksum = "44d46482f1c1c87acd84dea20c1bf5ebff4c757009ed6bf19cfd36fb10e92c4e"
 dependencies = [
  "proc-macro2",
  "quote",
@@ -3415,9 +3437,9 @@ dependencies = [
 
 [[package]]
 name = "sync_wrapper"
-version = "1.0.1"
+version = "1.0.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a7065abeca94b6a8a577f9bd45aa0867a2238b74e8eb67cf10d492bc39351394"
+checksum = "0bf256ce5efdfa370213c1dabab5935a12e49f2c58d15e9eac2870d3b4f27263"
 dependencies = [
  "futures-core",
 ]
@@ -3807,9 +3829,9 @@ checksum = "7e51b68083f157f853b6379db119d1c1be0e6e4dec98101079dec41f6f5cf6df"
 
 [[package]]
 name = "unicode-ident"
-version = "1.0.13"
+version = "1.0.14"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e91b56cd4cadaeb79bbf1a5645f6b4f8dc5bde8834ad5894a8db35fda9efa1fe"
+checksum = "adb9e6ca4f869e1180728b7950e35922a7fc6397f7b641499e8f3ef06e50dc83"
 
 [[package]]
 name = "unicode-segmentation"
@@ -4039,7 +4061,7 @@ dependencies = [
 ]
 
 [[package]]
-name = "webxr-graph"
+name = "webxr"
 version = "0.1.0"
 dependencies = [
  "actix",
diff --git a/Cargo.toml b/Cargo.toml
index 937ad311..b3bf8d4c 100755
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,5 +1,5 @@
 [package]
-name = "webxr-graph"
+name = "webxr"
 version = "0.1.0"
 edition = "2021"
 
@@ -102,5 +102,5 @@ wiremock = "0.6"
 ignore = [
     "RUSTSEC-2024-0384",  # instant is unmaintained but used by test dependencies
     "RUSTSEC-2024-0320",  # yaml-rust is unmaintained but used by config
-    "RUSTSEC-2024-0336"   # rustls vulnerability in actix-tls - to be addressed later
+    "RUSTSEC-2024-0336"   # rustls vulnerability in actix-tls - acceptable risk for now
 ]
diff --git a/Dockerfile b/Dockerfile
index c8f9d217..03d35621 100755
--- a/Dockerfile
+++ b/Dockerfile
@@ -51,7 +51,7 @@ RUN mkdir src && \
     echo "pub fn add(a: i32, b: i32) -> i32 { a + b }" > src/lib.rs && \
     cargo build --release && \
     rm src/*.rs && \
-    rm -f target/release/deps/webxr_graph* target/release/webxr-graph*
+    rm -f target/release/deps/webxr* target/release/webxr*
 
 # Stage 3: Rust Application Build
 FROM rust-deps-builder AS rust-builder
@@ -108,6 +108,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \
     libgl1-mesa-dri \
     libgl1-mesa-glx \
     netcat-openbsd \
+    gettext-base \
     && rm -rf /var/lib/apt/lists/* \
     && rm -rf /usr/share/doc/* \
     && rm -rf /usr/share/man/*
@@ -158,82 +159,15 @@ RUN mkdir -p /app/data/public/dist \
 COPY --from=python-builder --chown=appuser:appuser /app/venv /app/venv
 
 # Copy built artifacts
-COPY --from=rust-builder --chown=appuser:appuser /usr/src/app/target/release/webxr-graph /app/
+COPY --from=rust-builder --chown=appuser:appuser /usr/src/app/target/release/webxr /app/
 COPY --from=rust-builder --chown=appuser:appuser /usr/src/app/settings.toml /app/
 COPY --from=frontend-builder --chown=appuser:appuser /app/data/public/dist /app/data/public/dist
 
 # Copy configuration and scripts
 COPY --chown=appuser:appuser src/generate_audio.py /app/src/
 COPY --chown=root:root nginx.conf /etc/nginx/nginx.conf
-
-# Create and configure startup script with proper permissions
-RUN echo '#!/bin/bash\n\
-set -euo pipefail\n\
-\n\
-# Function to log messages with timestamps\n\
-log() {\n\
-    echo "[$(date "+%Y-%m-%d %H:%M:%S")] $1"\n\
-}\n\
-\n\
-# Function to check if a port is available\n\
-wait_for_port() {\n\
-    local port=$1\n\
-    local retries=60\n\
-    local wait=5\n\
-    while ! timeout 1 bash -c "cat < /dev/null > /dev/tcp/0.0.0.0/$port" 2>/dev/null && [ $retries -gt 0 ]; do\n\
-        log "Waiting for port $port to become available... ($retries retries left)"\n\
-        sleep $wait\n\
-        retries=$((retries-1))\n\
-    done\n\
-    if [ $retries -eq 0 ]; then\n\
-        log "Timeout waiting for port $port"\n\
-        return 1\n\
-    fi\n\
-    log "Port $port is available"\n\
-    return 0\n\
-}\n\
-\n\
-# Function to check RAGFlow connectivity\n\
-check_ragflow() {\n\
-    log "Checking RAGFlow connectivity..."\n\
-    if curl -s -f --max-time 5 "http://ragflow-server/v1/" > /dev/null; then\n\
-        log "RAGFlow server is reachable"\n\
-        return 0\n\
-    else\n\
-        log "Warning: Cannot reach RAGFlow server"\n\
-        return 1\n\
-    fi\n\
-}\n\
-\n\
-# Wait for RAGFlow to be available\n\
-log "Waiting for RAGFlow server..."\n\
-retries=24\n\
-while ! check_ragflow && [ $retries -gt 0 ]; do\n\
-    log "Retrying RAGFlow connection... ($retries attempts left)"\n\
-    retries=$((retries-1))\n\
-    sleep 5\n\
-done\n\
-\n\
-if [ $retries -eq 0 ]; then\n\
-    log "Failed to connect to RAGFlow server after multiple attempts"\n\
-    exit 1\n\
-fi\n\
-\n\
-# Start nginx\n\
-log "Starting nginx..."\n\
-nginx -t && nginx\n\
-if [ $? -ne 0 ]; then\n\
-    log "Failed to start nginx"\n\
-    exit 1\n\
-fi\n\
-log "nginx started successfully"\n\
-\n\
-# Start the Rust backend\n\
-log "Starting webxr-graph..."\n\
-exec /app/webxr-graph\n\
-' > /app/start.sh && \
-    chown appuser:appuser /app/start.sh && \
-    chmod 755 /app/start.sh
+COPY --chown=appuser:appuser start.sh /app/start.sh
+RUN chmod 755 /app/start.sh
 
 # Add security labels
 LABEL org.opencontainers.image.source="https://github.com/yourusername/logseq-xr" \
diff --git a/data/public/js/components/visualization/core.js b/data/public/js/components/visualization/core.js
index 60dafbaa..7bbdf2a3 100755
--- a/data/public/js/components/visualization/core.js
+++ b/data/public/js/components/visualization/core.js
@@ -1,5 +1,5 @@
 import * as THREE from 'three';
-import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
+import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
 import { NodeManager } from './nodes.js';
 import { EffectsManager } from './effects.js';
 import { LayoutManager } from './layout.js';
@@ -10,6 +10,7 @@ import { initXRInteraction, handleXRInput, XRLabelManager } from '../../xr/xrInt
 // Constants for Spacemouse sensitivity
 const TRANSLATION_SPEED = 0.01;
 const ROTATION_SPEED = 0.01;
+const VR_MOVEMENT_SPEED = 0.05; // Speed for VR joystick movement
 
 function updateNodeDynamics(nodeManager, updates, isInitialLayout, timeStep) {
     if (isInitialLayout) {
@@ -36,14 +37,36 @@ export class WebXRVisualization {
         // Initialize the scene, camera, and renderer
         this.scene = new THREE.Scene();
         this.scene.background = new THREE.Color(0x000000);
+        
+        // Create camera
         this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 2000);
+        this.camera.matrixAutoUpdate = true;
+
+        // Create VR camera rig
+        this.cameraRig = new THREE.Group();
+        this.cameraRig.name = 'cameraRig';
+        this.scene.add(this.cameraRig);
+
+        // Create user movement group
+        this.userGroup = new THREE.Group();
+        this.userGroup.name = 'userGroup';
+        this.cameraRig.add(this.userGroup);
+        
+        // Set initial camera position and add to user group
         this.camera.position.set(0, 1.6, 3); // Set initial position at standing height
+        this.userGroup.add(this.camera);
+        
+        console.log('Camera hierarchy:', {
+            camera: this.camera.name || 'camera',
+            parent: this.camera.parent?.name || 'none',
+            grandparent: this.camera.parent?.parent?.name || 'none'
+        });
 
         // Initialize renderer with XR support
         this.renderer = new THREE.WebGLRenderer({ 
             antialias: true,
-            alpha: true, // Enable alpha for AR
-            logarithmicDepthBuffer: true // Better depth precision for XR
+            alpha: true,
+            logarithmicDepthBuffer: true
         });
         this.renderer.setSize(window.innerWidth, window.innerHeight);
         this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
@@ -63,6 +86,10 @@ export class WebXRVisualization {
         this.layoutManager = new LayoutManager(visualizationSettings.getLayoutSettings());
 
         this.controls = null;
+        this.xrControllers = [];
+        this.xrHands = [];
+        this.xrLabelManager = null;
+
         this.animationFrameId = null;
         this.lastPositionUpdate = 0;
         this.positionUpdateThreshold = 16;
@@ -71,6 +98,10 @@ export class WebXRVisualization {
         this.previousTimes = new Map();
         this.lastUpdateTime = performance.now();
 
+        // Bind methods
+        this.onWindowResize = this.onWindowResize.bind(this);
+        this.animate = this.animate.bind(this);
+
         // Initialize settings and add event listeners
         this.initializeSettings();
         this.setupEventListeners();
@@ -78,6 +109,17 @@ export class WebXRVisualization {
         console.log('WebXRVisualization constructor completed');
     }
 
+    onWindowResize() {
+        if (this.camera && this.renderer) {
+            this.camera.aspect = window.innerWidth / window.innerHeight;
+            this.camera.updateProjectionMatrix();
+            this.renderer.setSize(window.innerWidth, window.innerHeight);
+            if (this.effectsManager) {
+                this.effectsManager.handleResize();
+            }
+        }
+    }
+
     setupEventListeners() {
         window.addEventListener('graphDataUpdated', (event) => {
             if (event.detail && Array.isArray(event.detail.nodes)) {
@@ -174,33 +216,74 @@ export class WebXRVisualization {
 
         // Disable OrbitControls when in XR
         this.renderer.xr.addEventListener('sessionstart', () => {
+            console.log('XR session started - Disabling OrbitControls');
             this.controls.enabled = false;
+            
+            // Reset positions when entering VR
+            this.userGroup.position.set(0, 0, 0);
+            this.cameraRig.position.set(0, 0, 0);
+            
+            console.log('VR Session Start - Camera hierarchy:', {
+                camera: this.camera.name || 'camera',
+                parent: this.camera.parent?.name || 'none',
+                grandparent: this.camera.parent?.parent?.name || 'none',
+                positions: {
+                    camera: this.camera.position.toArray(),
+                    userGroup: this.userGroup.position.toArray(),
+                    cameraRig: this.cameraRig.position.toArray()
+                }
+            });
         });
 
         this.renderer.xr.addEventListener('sessionend', () => {
+            console.log('XR session ended - Enabling OrbitControls');
             this.controls.enabled = true;
+            
+            // Reset positions when exiting VR
+            this.camera.position.set(0, 1.6, 3);
+            this.userGroup.position.set(0, 0, 0);
+            this.cameraRig.position.set(0, 0, 0);
+            
+            console.log('VR Session End - Camera hierarchy:', {
+                camera: this.camera.name || 'camera',
+                parent: this.camera.parent?.name || 'none',
+                grandparent: this.camera.parent?.parent?.name || 'none',
+                positions: {
+                    camera: this.camera.position.toArray(),
+                    userGroup: this.userGroup.position.toArray(),
+                    cameraRig: this.cameraRig.position.toArray()
+                }
+            });
         });
 
         this.effectsManager.initPostProcessing();
         this.effectsManager.createHologramStructure();
 
-        window.addEventListener('resize', this.onWindowResize.bind(this), false);
+        window.addEventListener('resize', this.onWindowResize);
 
         this.animate();
     }
 
-    onWindowResize() {
-        this.camera.aspect = window.innerWidth / window.innerHeight;
-        this.camera.updateProjectionMatrix();
-        this.renderer.setSize(window.innerWidth, window.innerHeight);
-        this.effectsManager.handleResize();
-    }
-
     animate() {
-        // Use XR animation loop
         this.renderer.setAnimationLoop((timestamp, frame) => {
-            // Update non-XR controls if not in XR session
-            if (!this.renderer.xr.isPresenting) {
+            // Handle VR movement if in XR session
+            if (this.renderer.xr.isPresenting && frame) {
+                const session = this.renderer.xr.getSession();
+                if (session) {
+                    // Log camera hierarchy and positions for debugging
+                    console.log('Animation Frame - Camera hierarchy:', {
+                        camera: this.camera.name || 'camera',
+                        parent: this.camera.parent?.name || 'none',
+                        grandparent: this.camera.parent?.parent?.name || 'none',
+                        positions: {
+                            camera: this.camera.position.toArray(),
+                            userGroup: this.userGroup.position.toArray(),
+                            cameraRig: this.cameraRig.position.toArray()
+                        }
+                    });
+                }
+            } else {
+                // Update non-XR controls
                 this.controls.update();
             }
 
@@ -258,6 +341,8 @@ export class WebXRVisualization {
         console.log('Disposing WebXRVisualization');
         this.renderer.setAnimationLoop(null);
 
+        window.removeEventListener('resize', this.onWindowResize);
+
         this.nodeManager.dispose();
         this.effectsManager.dispose();
         this.layoutManager.stopSimulation();
diff --git a/data/public/js/components/visualization/nodes.js b/data/public/js/components/visualization/nodes.js
index dc8cafca..122f050a 100755
--- a/data/public/js/components/visualization/nodes.js
+++ b/data/public/js/components/visualization/nodes.js
@@ -1,16 +1,10 @@
 import * as THREE from 'three';
+import { visualizationSettings } from '../../services/visualizationSettings.js';
 
 // Constants
 export const BLOOM_LAYER = 1;
 export const NORMAL_LAYER = 0;
 
-export const NODE_COLORS = {
-    NEW: new THREE.Color(0x00ff88),      // Bright green for very recent files (< 3 days)
-    RECENT: new THREE.Color(0x4444ff),    // Blue for recent files (< 7 days)
-    MEDIUM: new THREE.Color(0xffaa00),    // Orange for medium-age files (< 30 days)
-    OLD: new THREE.Color(0xff4444)        // Red for old files (>= 30 days)
-};
-
 export class NodeManager {
     constructor(scene, camera, settings = {}) {
         this.scene = scene;
@@ -18,127 +12,145 @@ export class NodeManager {
         this.nodeMeshes = new Map();
         this.nodeLabels = new Map();
         this.edgeMeshes = new Map();
-        this.nodeData = new Map(); // Store node data for click handling
+        this.nodeData = new Map();
         
-        // Initialize raycaster for click detection
         this.raycaster = new THREE.Raycaster();
         this.mouse = new THREE.Vector2();
         
-        // Node settings with defaults
-        this.minNodeSize = settings.minNodeSize || 0.01;
-        this.maxNodeSize = settings.maxNodeSize || 0.5;
-        this.nodeSizeScalingFactor = settings.nodeSizeScalingFactor || 1;
-        this.labelFontSize = settings.labelFontSize || 18;
-        this.nodeColor = new THREE.Color(settings.nodeColor || 0x4444ff);
+        // Get settings from visualization settings service
+        const nodeSettings = visualizationSettings.getNodeSettings();
+        
+        // Physical dimensions in meters
+        this.minNodeSize = settings.minNodeSize || nodeSettings.minNodeSize; // 0.1m = 10cm
+        this.maxNodeSize = settings.maxNodeSize || nodeSettings.maxNodeSize; // 0.3m = 30cm
+        
+        // Visual settings
+        this.labelFontSize = settings.labelFontSize || nodeSettings.labelFontSize;
+        this.nodeColor = new THREE.Color(settings.nodeColor || nodeSettings.color);
+        this.materialSettings = nodeSettings.material;
+        this.ageColors = {
+            NEW: new THREE.Color(nodeSettings.colorNew),
+            RECENT: new THREE.Color(nodeSettings.colorRecent),
+            MEDIUM: new THREE.Color(nodeSettings.colorMedium),
+            OLD: new THREE.Color(nodeSettings.colorOld)
+        };
+        this.maxAge = nodeSettings.ageMaxDays;
 
         // Edge settings
-        this.edgeColor = new THREE.Color(settings.edgeColor || 0x4444ff);
-        this.edgeOpacity = settings.edgeOpacity || 0.6;
-
-        // Server-side node size range (must match constants in file_service.rs)
-        this.serverMinNodeSize = 0.5;
-        this.serverMaxNodeSize = 5.0;
+        const edgeSettings = visualizationSettings.getEdgeSettings();
+        this.edgeColor = new THREE.Color(settings.edgeColor || edgeSettings.color);
+        this.edgeOpacity = settings.edgeOpacity || edgeSettings.opacity;
 
-        // Bind click handler
         this.handleClick = this.handleClick.bind(this);
-
-        // Add XR support
         this.xrEnabled = false;
         this.xrLabelManager = null;
     }
 
     getNodeSize(metadata) {
-        // Use the node_size from metadata if available
+        // Calculate node size in meters based on metadata
         if (metadata.node_size) {
-            // Convert from server's range to visualization range
-            const serverSize = parseFloat(metadata.node_size);
-            const normalizedSize = (serverSize - this.serverMinNodeSize) / 
-                                 (this.serverMaxNodeSize - this.serverMinNodeSize);
-            return this.minNodeSize + 
-                   (this.maxNodeSize - this.minNodeSize) * 
-                   normalizedSize * 
-                   this.nodeSizeScalingFactor;
+            const size = parseFloat(metadata.node_size);
+            // Normalize size between minNodeSize (0.1m) and maxNodeSize (0.3m)
+            return this.minNodeSize + (size * (this.maxNodeSize - this.minNodeSize));
         }
-        
-        // Fallback to minimum size if node_size is not available
-        return this.minNodeSize;
+        return this.minNodeSize; // Default to minimum size (10cm)
     }
 
-    calculateNodeColor(lastModified) {
+    calculateNodeColor(metadata) {
+        // Use github_last_modified if available, otherwise fall back to last_modified
+        const lastModified = metadata.github_last_modified || metadata.last_modified || new Date().toISOString();
         const now = Date.now();
         const age = now - new Date(lastModified).getTime();
         const dayInMs = 24 * 60 * 60 * 1000;
         
-        if (age < 3 * dayInMs) return NODE_COLORS.NEW;        // Less than 3 days old
-        if (age < 7 * dayInMs) return NODE_COLORS.RECENT;     // Less than 7 days old
-        if (age < 30 * dayInMs) return NODE_COLORS.MEDIUM;    // Less than 30 days old
-        return NODE_COLORS.OLD;                               // 30 days or older
+        if (age < 3 * dayInMs) return this.ageColors.NEW;        // Less than 3 days old
+        if (age < 7 * dayInMs) return this.ageColors.RECENT;     // Less than 7 days old
+        if (age < 30 * dayInMs) return this.ageColors.MEDIUM;    // Less than 30 days old
+        return this.ageColors.OLD;                               // 30 days or older
     }
 
     createNodeGeometry(size, hyperlinkCount) {
-        // Create a smooth sphere with more segments for better quality
-        // Scale detail level based on hyperlink count for performance
-        const segments = Math.min(32, Math.max(16, Math.floor(hyperlinkCount / 2) + 16));
+        // Create a sphere with radius in meters
+        // Scale segments based on hyperlink count for performance vs. quality
+        const minSegments = visualizationSettings.getNodeSettings().geometryMinSegments;
+        const maxSegments = visualizationSettings.getNodeSettings().geometryMaxSegments;
+        const segmentPerLink = visualizationSettings.getNodeSettings().geometrySegmentPerHyperlink;
+        
+        const segments = Math.min(
+            maxSegments,
+            Math.max(minSegments, Math.floor(hyperlinkCount * segmentPerLink) + minSegments)
+        );
+        
         return new THREE.SphereGeometry(size, segments, segments);
     }
 
-    createNodeMaterial(color, age) {
-        // Calculate emissive intensity based on age
-        // Newer nodes glow more brightly
+    createNodeMaterial(color, metadata) {
+        // Use github_last_modified if available, otherwise fall back to last_modified
+        const lastModified = metadata.github_last_modified || metadata.last_modified || new Date().toISOString();
         const now = Date.now();
-        const ageInDays = (now - new Date(age).getTime()) / (24 * 60 * 60 * 1000);
-        const maxAge = 30; // days
-        const minIntensity = 0.3;
-        const maxIntensity = 1.0;
+        const ageInDays = (now - new Date(lastModified).getTime()) / (24 * 60 * 60 * 1000);
         
         // Normalize age to 0-1 range and invert (newer = brighter)
-        const normalizedAge = Math.min(ageInDays / maxAge, 1);
-        const emissiveIntensity = maxIntensity - (normalizedAge * (maxIntensity - minIntensity));
+        const normalizedAge = Math.min(ageInDays / this.maxAge, 1);
+        const emissiveIntensity = this.materialSettings.emissiveMaxIntensity - 
+            (normalizedAge * (this.materialSettings.emissiveMaxIntensity - this.materialSettings.emissiveMinIntensity));
 
         return new THREE.MeshPhysicalMaterial({
             color: color,
             emissive: color,
             emissiveIntensity: emissiveIntensity,
-            metalness: 0.2,
-            roughness: 0.2,
+            metalness: this.materialSettings.metalness,
+            roughness: this.materialSettings.roughness,
             transparent: true,
-            opacity: 0.9,
+            opacity: this.materialSettings.opacity,
             envMapIntensity: 1.0,
-            clearcoat: 0.3,
-            clearcoatRoughness: 0.2
+            clearcoat: this.materialSettings.clearcoat,
+            clearcoatRoughness: this.materialSettings.clearcoatRoughness
         });
     }
 
-    createNodeLabel(text, fileSize, lastModified, hyperlinkCount) {
+    createNodeLabel(text, metadata) {
         const canvas = document.createElement('canvas');
         const context = canvas.getContext('2d');
         context.font = `${this.labelFontSize}px Arial`;
         
-        // Measure text dimensions
+        // Get metadata values
+        const fileSize = parseInt(metadata.file_size) || 1;
+        const lastModified = metadata.github_last_modified || metadata.last_modified || new Date().toISOString();
+        const hyperlinkCount = parseInt(metadata.hyperlink_count) || 0;
+        const githubInfo = metadata.github_info || {};
+        
+        // Measure and create text
         const nameMetrics = context.measureText(text);
-        const infoText = `${this.formatFileSize(fileSize)} | ${this.formatAge(lastModified)} | ${hyperlinkCount} links`;
-        const infoMetrics = context.measureText(infoText);
+        let infoText = `${this.formatFileSize(fileSize)} | ${this.formatAge(lastModified)} | ${hyperlinkCount} links`;
+        if (githubInfo.author) {
+            infoText += ` | ${githubInfo.author}`;
+        }
+        if (githubInfo.commit_message) {
+            const shortMessage = githubInfo.commit_message.split('\n')[0].slice(0, 30);
+            infoText += ` | ${shortMessage}${githubInfo.commit_message.length > 30 ? '...' : ''}`;
+        }
         
-        // Set canvas size to fit text with padding
+        const infoMetrics = context.measureText(infoText);
         const textWidth = Math.max(nameMetrics.width, infoMetrics.width);
-        canvas.width = textWidth + 20;  // Add padding
-        canvas.height = this.labelFontSize * 2 + 30;  // Height for two lines plus padding
+        
+        // Set canvas size
+        canvas.width = textWidth + 20;
+        canvas.height = this.labelFontSize * 2 + 30;
 
-        // Draw semi-transparent background
-        context.fillStyle = 'rgba(0, 0, 0, 0.8)';
+        // Draw background and text
+        context.fillStyle = visualizationSettings.getLabelSettings().backgroundColor;
         context.fillRect(0, 0, canvas.width, canvas.height);
 
-        // Draw node name
-        context.font = `${this.labelFontSize}px Arial`;
-        context.fillStyle = 'white';
+        context.font = `${this.labelFontSize}px ${visualizationSettings.getLabelSettings().fontFamily}`;
+        context.fillStyle = visualizationSettings.getLabelSettings().textColor;
         context.fillText(text, 10, this.labelFontSize);
         
-        // Draw info text in smaller size
-        context.font = `${this.labelFontSize / 2}px Arial`;
-        context.fillStyle = 'lightgray';
+        context.font = `${this.labelFontSize / 2}px ${visualizationSettings.getLabelSettings().fontFamily}`;
+        context.fillStyle = visualizationSettings.getLabelSettings().infoTextColor;
         context.fillText(infoText, 10, this.labelFontSize + 20);
 
-        // Create sprite from canvas
+        // Create sprite
         const texture = new THREE.CanvasTexture(canvas);
         const spriteMaterial = new THREE.SpriteMaterial({
             map: texture,
@@ -147,8 +159,13 @@ export class NodeManager {
         });
         const sprite = new THREE.Sprite(spriteMaterial);
         
-        // Scale sprite to maintain readable text size
-        sprite.scale.set(canvas.width / 20, canvas.height / 20, 1);
+        // Scale sprite to maintain readable text size in meters
+        const labelScale = visualizationSettings.getLabelSettings().verticalOffset;
+        sprite.scale.set(
+            (canvas.width / this.labelFontSize) * labelScale,
+            (canvas.height / this.labelFontSize) * labelScale,
+            1
+        );
         sprite.layers.set(NORMAL_LAYER);
 
         return sprite;
@@ -185,81 +202,81 @@ export class NodeManager {
         return `${baseUrl}/#/page/${formattedName}`;
     }
 
-    handleClick(event, isXR = false, intersectedObject = null) {
-        let clickedMesh;
-
-        if (isXR && intersectedObject) {
-            // In XR mode, use the passed intersected object directly
-            clickedMesh = intersectedObject;
-        } else if (!isXR && event) {
-            // Regular mouse click handling
-            const rect = event.target.getBoundingClientRect();
-            this.mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
-            this.mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;
-
-            this.raycaster.setFromCamera(this.mouse, this.camera);
-            const intersects = this.raycaster.intersectObjects(Array.from(this.nodeMeshes.values()));
-            
-            if (intersects.length > 0) {
-                clickedMesh = intersects[0].object;
+        handleClick(event, isXR = false, intersectedObject = null) {
+            let clickedMesh;
+    
+            if (isXR && intersectedObject) {
+                // In XR mode, use the passed intersected object directly
+                clickedMesh = intersectedObject;
+            } else if (!isXR && event) {
+                // Regular mouse click handling
+                const rect = event.target.getBoundingClientRect();
+                this.mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
+                this.mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;
+    
+                this.raycaster.setFromCamera(this.mouse, this.camera);
+                const intersects = this.raycaster.intersectObjects(Array.from(this.nodeMeshes.values()));
+                
+                if (intersects.length > 0) {
+                    clickedMesh = intersects[0].object;
+                }
             }
-        }
-
-        if (clickedMesh) {
-            // Find the clicked node
-            const nodeId = Array.from(this.nodeMeshes.entries())
-                .find(([_, mesh]) => mesh === clickedMesh)?.[0];
-
-            if (nodeId) {
-                const nodeData = this.nodeData.get(nodeId);
-                if (nodeData) {
-                    // Open URL in new tab
-                    const url = this.formatNodeNameToUrl(nodeData.label || nodeId);
-                    window.open(url, '_blank');
-
-                    // Visual feedback
-                    const originalEmissive = clickedMesh.material.emissiveIntensity;
-                    clickedMesh.material.emissiveIntensity = 2.0;
-                    setTimeout(() => {
-                        clickedMesh.material.emissiveIntensity = originalEmissive;
-                    }, 200);
-
-                    // Show XR label if in XR mode
-                    if (isXR && this.xrLabelManager) {
-                        this.xrLabelManager.showLabel(
-                            nodeData.label || nodeId,
-                            clickedMesh.position,
-                            {
-                                backgroundColor: 'rgba(0, 0, 0, 0.8)',
-                                color: '#ffffff',
-                                font: '24px Arial'
+    
+            if (clickedMesh) {
+                // Find the clicked node
+                const nodeId = Array.from(this.nodeMeshes.entries())
+                    .find(([_, mesh]) => mesh === clickedMesh)?.[0];
+    
+                if (nodeId) {
+                    const nodeData = this.nodeData.get(nodeId);
+                    if (nodeData) {
+                        // Open URL in new tab
+                        const url = this.formatNodeNameToUrl(nodeData.label || nodeId);
+                        window.open(url, '_blank');
+    
+                        // Visual feedback
+                        const originalEmissive = clickedMesh.material.emissiveIntensity;
+                        clickedMesh.material.emissiveIntensity = 2.0;
+                        setTimeout(() => {
+                            clickedMesh.material.emissiveIntensity = originalEmissive;
+                        }, 200);
+    
+                        // Show XR label if in XR mode
+                        if (isXR && this.xrLabelManager) {
+                            this.xrLabelManager.showLabel(
+                                nodeData.label || nodeId,
+                                clickedMesh.position,
+                                {
+                                    backgroundColor: 'rgba(0, 0, 0, 0.8)',
+                                    color: '#ffffff',
+                                    font: '24px Arial'
+                                }
+                            );
+                        }
+    
+                        // Trigger haptic feedback in XR mode
+                        if (isXR && window.xrSession) {
+                            const inputSource = Array.from(window.xrSession.inputSources).find(source => 
+                                source.handedness === 'right' || source.handedness === 'left'
+                            );
+                            if (inputSource?.gamepad?.hapticActuators?.length > 0) {
+                                inputSource.gamepad.hapticActuators[0].pulse(0.5, 100);
                             }
-                        );
-                    }
-
-                    // Trigger haptic feedback in XR mode
-                    if (isXR && window.xrSession) {
-                        const inputSource = Array.from(window.xrSession.inputSources).find(source => 
-                            source.handedness === 'right' || source.handedness === 'left'
-                        );
-                        if (inputSource?.gamepad?.hapticActuators?.length > 0) {
-                            inputSource.gamepad.hapticActuators[0].pulse(0.5, 100);
                         }
                     }
                 }
             }
         }
-    }
-
-    initClickHandling(renderer) {
-        // Add click event listener to renderer's DOM element
-        renderer.domElement.addEventListener('click', this.handleClick);
-    }
-
-    removeClickHandling(renderer) {
-        // Remove click event listener
-        renderer.domElement.removeEventListener('click', this.handleClick);
-    }
+    
+        initClickHandling(renderer) {
+            // Add click event listener to renderer's DOM element
+            renderer.domElement.addEventListener('click', this.handleClick);
+        }
+    
+        removeClickHandling(renderer) {
+            // Remove click event listener
+            renderer.domElement.removeEventListener('click', this.handleClick);
+        }
 
     centerNodes(nodes) {
         if (!nodes || (!Array.isArray(nodes) && typeof nodes !== 'object')) {
@@ -267,9 +284,7 @@ export class NodeManager {
             return;
         }
 
-        // Convert position arrays to node objects if necessary
         const nodeArray = Array.isArray(nodes) ? nodes.map((node, index) => {
-            // If node is an array of positions [x, y, z, vx, vy, vz]
             if (Array.isArray(node)) {
                 return {
                     id: index,
@@ -300,14 +315,14 @@ export class NodeManager {
         centerY /= nodeArray.length;
         centerZ /= nodeArray.length;
 
-        // Subtract center from all positions to center around origin
+        // Center around origin
         nodeArray.forEach(node => {
             node.x = (node.x || 0) - centerX;
             node.y = (node.y || 0) - centerY;
             node.z = (node.z || 0) - centerZ;
         });
 
-        // Scale positions to reasonable range
+        // Scale positions to reasonable range in meters
         const maxDist = nodeArray.reduce((max, node) => {
             const dist = Math.sqrt(
                 (node.x || 0) * (node.x || 0) + 
@@ -318,7 +333,9 @@ export class NodeManager {
         }, 0);
 
         if (maxDist > 0) {
-            const scale = 100 / maxDist; // Scale to fit in 100 unit radius
+            // Scale to fit in 5 meter radius by default
+            const targetRadius = 5.0; // meters
+            const scale = targetRadius / maxDist;
             nodeArray.forEach(node => {
                 node.x = (node.x || 0) * scale;
                 node.y = (node.y || 0) * scale;
@@ -329,72 +346,68 @@ export class NodeManager {
         return nodeArray;
     }
 
-    updateNodes(nodes) {
-        if (!Array.isArray(nodes)) {
-            console.error('updateNodes received invalid nodes:', nodes);
-            return;
-        }
-
-        console.log(`Updating nodes: ${nodes.length}`);
-        
-        // Center and scale nodes
-        const centeredNodes = this.centerNodes(nodes);
-        if (!centeredNodes) return;
-        
-        const existingNodeIds = new Set(centeredNodes.map(node => node.id));
-
-        // Remove non-existent nodes
-        this.nodeMeshes.forEach((mesh, nodeId) => {
-            if (!existingNodeIds.has(nodeId)) {
-                this.scene.remove(mesh);
-                this.nodeMeshes.delete(nodeId);
-                this.nodeData.delete(nodeId);
-                const label = this.nodeLabels.get(nodeId);
-                if (label) {
-                    this.scene.remove(label);
-                    this.nodeLabels.delete(nodeId);
-                }
-            }
-        });
-
-        // Update or create nodes
-        centeredNodes.forEach(node => {
-            if (!node.id || typeof node.x !== 'number' || typeof node.y !== 'number' || typeof node.z !== 'number') {
-                console.warn('Invalid node data:', node);
+        updateNodes(nodes) {
+            if (!Array.isArray(nodes)) {
+                console.error('updateNodes received invalid nodes:', nodes);
                 return;
             }
-
-            // Store node data for click handling
-            this.nodeData.set(node.id, node);
-
-            const metadata = node.metadata || {};
-            const fileSize = parseInt(metadata.file_size) || 1;
-            const lastModified = metadata.last_modified || new Date().toISOString();
-            const hyperlinkCount = parseInt(metadata.hyperlink_count) || 0;
-
-            const size = this.getNodeSize(metadata);
-            const color = this.calculateNodeColor(lastModified);
-
-            let mesh = this.nodeMeshes.get(node.id);
-
-            if (!mesh) {
-                const geometry = this.createNodeGeometry(size, hyperlinkCount);
-                const material = this.createNodeMaterial(color, lastModified);
-
-                mesh = new THREE.Mesh(geometry, material);
-                mesh.layers.enable(BLOOM_LAYER);
-                this.scene.add(mesh);
-                this.nodeMeshes.set(node.id, mesh);
-
-                const label = this.createNodeLabel(node.label || node.id, fileSize, lastModified, hyperlinkCount);
-                this.scene.add(label);
-                this.nodeLabels.set(node.id, label);
-            } else {
-                mesh.geometry.dispose();
-                mesh.geometry = this.createNodeGeometry(size, hyperlinkCount);
-                mesh.material.dispose();
-                mesh.material = this.createNodeMaterial(color, lastModified);
-            }
+    
+            console.log(`Updating nodes: ${nodes.length}`);
+            
+            // Center and scale nodes
+            const centeredNodes = this.centerNodes(nodes);
+            if (!centeredNodes) return;
+            
+            const existingNodeIds = new Set(centeredNodes.map(node => node.id));
+    
+            // Remove non-existent nodes
+            this.nodeMeshes.forEach((mesh, nodeId) => {
+                if (!existingNodeIds.has(nodeId)) {
+                    this.scene.remove(mesh);
+                    this.nodeMeshes.delete(nodeId);
+                    this.nodeData.delete(nodeId);
+                    const label = this.nodeLabels.get(nodeId);
+                    if (label) {
+                        this.scene.remove(label);
+                        this.nodeLabels.delete(nodeId);
+                    }
+                }
+            });
+    
+            // Update or create nodes
+            centeredNodes.forEach(node => {
+                if (!node.id || typeof node.x !== 'number' || typeof node.y !== 'number' || typeof node.z !== 'number') {
+                    console.warn('Invalid node data:', node);
+                    return;
+                }
+    
+                // Store node data for click handling
+                this.nodeData.set(node.id, node);
+    
+                const metadata = node.metadata || {};
+                const size = this.getNodeSize(metadata);
+                const color = this.calculateNodeColor(metadata);
+    
+                let mesh = this.nodeMeshes.get(node.id);
+    
+                if (!mesh) {
+                    const geometry = this.createNodeGeometry(size, metadata.hyperlink_count || 0);
+                    const material = this.createNodeMaterial(color, metadata);
+    
+                    mesh = new THREE.Mesh(geometry, material);
+                    mesh.layers.enable(BLOOM_LAYER);
+                    this.scene.add(mesh);
+                    this.nodeMeshes.set(node.id, mesh);
+    
+                    const label = this.createNodeLabel(node.label || node.id, metadata);
+                    this.scene.add(label);
+                    this.nodeLabels.set(node.id, label);
+                } else {
+                    mesh.geometry.dispose();
+                    mesh.geometry = this.createNodeGeometry(size, metadata.hyperlink_count || 0);
+                    mesh.material.dispose();
+                    mesh.material = this.createNodeMaterial(color, metadata);
+    }
 
             mesh.position.set(node.x, node.y, node.z);
             const label = this.nodeLabels.get(node.id);
@@ -506,8 +519,11 @@ export class NodeManager {
                     });
                 }
                 break;
-            case 'nodeSizeScalingFactor':
-                this.nodeSizeScalingFactor = value;
+            case 'minNodeSize':
+                this.minNodeSize = value; // Value in meters
+                break;
+            case 'maxNodeSize':
+                this.maxNodeSize = value; // Value in meters
                 break;
             case 'labelFontSize':
                 this.labelFontSize = value;
diff --git a/data/public/js/services/visualizationSettings.js b/data/public/js/services/visualizationSettings.js
index 4de809f5..d341f401 100755
--- a/data/public/js/services/visualizationSettings.js
+++ b/data/public/js/services/visualizationSettings.js
@@ -1,15 +1,29 @@
 // Manages visualization settings received from the server and provides defaults
 export class VisualizationSettings {
     constructor() {
-        // Default values matching .env_template
+        // Default values matching settings.toml
         this.settings = {
-            // Node settings
+            // Node colors
             nodeColor: process.env.NODE_COLOR || '0x1A0B31',
-            nodeSizeScalingFactor: parseInt(process.env.NODE_SIZE_SCALING_FACTOR) || 5,
+            nodeColorNew: process.env.NODE_COLOR_NEW || '0x00ff88',
+            nodeColorRecent: process.env.NODE_COLOR_RECENT || '0x4444ff',
+            nodeColorMedium: process.env.NODE_COLOR_MEDIUM || '0xffaa00',
+            nodeColorOld: process.env.NODE_COLOR_OLD || '0xff4444',
+            nodeColorCore: process.env.NODE_COLOR_CORE || '0xffa500',
+            nodeColorSecondary: process.env.NODE_COLOR_SECONDARY || '0x00ffff',
+            nodeColorDefault: process.env.NODE_COLOR_DEFAULT || '0x00ff00',
             
             // Edge settings
             edgeColor: process.env.EDGE_COLOR || '0xff0000',
             edgeOpacity: parseFloat(process.env.EDGE_OPACITY) || 0.3,
+            edgeWeightNormalization: parseFloat(process.env.EDGE_WEIGHT_NORMALIZATION) || 10.0,
+            edgeMinWidth: parseFloat(process.env.EDGE_MIN_WIDTH) || 1.0,
+            edgeMaxWidth: parseFloat(process.env.EDGE_MAX_WIDTH) || 5.0,
+            
+            // Node sizes and dimensions (in meters)
+            minNodeSize: parseFloat(process.env.MIN_NODE_SIZE) || 0.1,  // 10cm
+            maxNodeSize: parseFloat(process.env.MAX_NODE_SIZE) || 0.3,  // 30cm
+            nodeAgeMaxDays: parseInt(process.env.NODE_AGE_MAX_DAYS) || 30,
             
             // Hologram settings
             hologramColor: process.env.HOLOGRAM_COLOR || '0xFFD700',
@@ -18,13 +32,41 @@ export class VisualizationSettings {
             
             // Label settings
             labelFontSize: parseInt(process.env.LABEL_FONT_SIZE) || 36,
+            labelFontFamily: process.env.LABEL_FONT_FAMILY || 'Arial',
+            labelPadding: parseInt(process.env.LABEL_PADDING) || 20,
+            labelVerticalOffset: parseFloat(process.env.LABEL_VERTICAL_OFFSET) || 2.0,
+            labelCloseOffset: parseFloat(process.env.LABEL_CLOSE_OFFSET) || 0.2,
+            labelBackgroundColor: process.env.LABEL_BACKGROUND_COLOR || 'rgba(0, 0, 0, 0.8)',
+            labelTextColor: process.env.LABEL_TEXT_COLOR || 'white',
+            labelInfoTextColor: process.env.LABEL_INFO_TEXT_COLOR || 'lightgray',
+            labelXRFontSize: parseInt(process.env.LABEL_XR_FONT_SIZE) || 24,
             
             // Environment settings
             fogDensity: parseFloat(process.env.FOG_DENSITY) || 0.002,
             
+            // Geometry settings
+            geometryMinSegments: parseInt(process.env.GEOMETRY_MIN_SEGMENTS) || 16,
+            geometryMaxSegments: parseInt(process.env.GEOMETRY_MAX_SEGMENTS) || 32,
+            geometrySegmentPerHyperlink: parseFloat(process.env.GEOMETRY_SEGMENT_PER_HYPERLINK) || 0.5,
+            
+            // Interaction settings
+            clickEmissiveBoost: parseFloat(process.env.CLICK_EMISSIVE_BOOST) || 2.0,
+            clickFeedbackDuration: parseInt(process.env.CLICK_FEEDBACK_DURATION) || 200,
+            
+            // Material settings
+            material: {
+                metalness: parseFloat(process.env.NODE_MATERIAL_METALNESS) || 0.2,
+                roughness: parseFloat(process.env.NODE_MATERIAL_ROUGHNESS) || 0.2,
+                clearcoat: parseFloat(process.env.NODE_MATERIAL_CLEARCOAT) || 0.3,
+                clearcoatRoughness: parseFloat(process.env.NODE_MATERIAL_CLEARCOAT_ROUGHNESS) || 0.2,
+                opacity: parseFloat(process.env.NODE_MATERIAL_OPACITY) || 0.9,
+                emissiveMinIntensity: parseFloat(process.env.NODE_EMISSIVE_MIN_INTENSITY) || 0.3,
+                emissiveMaxIntensity: parseFloat(process.env.NODE_EMISSIVE_MAX_INTENSITY) || 1.0
+            },
+            
             // Force-directed layout settings
-            iterations: parseInt(process.env.FORCE_DIRECTED_ITERATIONS) || 100,
-            spring_strength: parseFloat(process.env.FORCE_DIRECTED_SPRING) || 0.1,
+            iterations: parseInt(process.env.FORCE_DIRECTED_ITERATIONS) || 250,
+            spring_strength: parseFloat(process.env.FORCE_DIRECTED_SPRING) || 0.01,
             repulsion_strength: parseFloat(process.env.FORCE_DIRECTED_REPULSION) || 1000.0,
             attraction_strength: parseFloat(process.env.FORCE_DIRECTED_ATTRACTION) || 0.01,
             damping: parseFloat(process.env.FORCE_DIRECTED_DAMPING) || 0.8,
@@ -41,10 +83,14 @@ export class VisualizationSettings {
             environmentBloomThreshold: parseFloat(process.env.ENVIRONMENT_BLOOM_THRESHOLD) || 0.0,
 
             // Fisheye settings
-            fisheyeEnabled: false,
-            fisheyeStrength: 0.5,
-            fisheyeFocusPoint: [0, 0, 0],
-            fisheyeRadius: 100.0
+            fisheye: {
+                enabled: process.env.FISHEYE_ENABLED === 'true',
+                strength: parseFloat(process.env.FISHEYE_STRENGTH) || 0.5,
+                radius: parseFloat(process.env.FISHEYE_RADIUS) || 100.0,
+                focusX: parseFloat(process.env.FISHEYE_FOCUS_X) || 0.0,
+                focusY: parseFloat(process.env.FISHEYE_FOCUS_Y) || 0.0,
+                focusZ: parseFloat(process.env.FISHEYE_FOCUS_Z) || 0.0
+            }
         };
 
         // Bind the WebSocket message handler
@@ -54,13 +100,14 @@ export class VisualizationSettings {
 
     handleServerSettings(event) {
         const serverSettings = event.detail;
-        // Update settings with values from server, maintaining defaults for any missing values
-        this.settings = {
-            ...this.settings,
+        
+        // Deep merge settings with server values
+        this.settings = this.deepMerge(this.settings, {
             ...serverSettings.visualization,
-            ...serverSettings.bloom,
-            ...serverSettings.fisheye
-        };
+            material: serverSettings.visualization?.material || this.settings.material,
+            fisheye: serverSettings.fisheye || this.settings.fisheye,
+            ...serverSettings.bloom
+        });
 
         // Dispatch event to notify components of updated settings
         window.dispatchEvent(new CustomEvent('visualizationSettingsUpdated', {
@@ -68,6 +115,25 @@ export class VisualizationSettings {
         }));
     }
 
+    // Deep merge helper function
+    deepMerge(target, source) {
+        const result = { ...target };
+        
+        Object.keys(source).forEach(key => {
+            if (source[key] instanceof Object && !Array.isArray(source[key])) {
+                if (key in target) {
+                    result[key] = this.deepMerge(target[key], source[key]);
+                } else {
+                    result[key] = { ...source[key] };
+                }
+            } else if (source[key] !== undefined) {
+                result[key] = source[key];
+            }
+        });
+        
+        return result;
+    }
+
     getSettings() {
         return this.settings;
     }
@@ -76,10 +142,22 @@ export class VisualizationSettings {
     getNodeSettings() {
         return {
             color: this.settings.nodeColor,
-            sizeScalingFactor: this.settings.nodeSizeScalingFactor,
-            bloomStrength: this.settings.nodeBloomStrength,
-            bloomRadius: this.settings.nodeBloomRadius,
-            bloomThreshold: this.settings.nodeBloomThreshold
+            colorNew: this.settings.nodeColorNew,
+            colorRecent: this.settings.nodeColorRecent,
+            colorMedium: this.settings.nodeColorMedium,
+            colorOld: this.settings.nodeColorOld,
+            colorCore: this.settings.nodeColorCore,
+            colorSecondary: this.settings.nodeColorSecondary,
+            colorDefault: this.settings.nodeColorDefault,
+            minNodeSize: this.settings.minNodeSize,
+            maxNodeSize: this.settings.maxNodeSize,
+            material: this.settings.material,
+            ageMaxDays: this.settings.nodeAgeMaxDays,
+            geometryMinSegments: this.settings.geometryMinSegments,
+            geometryMaxSegments: this.settings.geometryMaxSegments,
+            geometrySegmentPerHyperlink: this.settings.geometrySegmentPerHyperlink,
+            clickEmissiveBoost: this.settings.clickEmissiveBoost,
+            clickFeedbackDuration: this.settings.clickFeedbackDuration
         };
     }
 
@@ -87,12 +165,29 @@ export class VisualizationSettings {
         return {
             color: this.settings.edgeColor,
             opacity: this.settings.edgeOpacity,
+            weightNormalization: this.settings.edgeWeightNormalization,
+            minWidth: this.settings.edgeMinWidth,
+            maxWidth: this.settings.edgeMaxWidth,
             bloomStrength: this.settings.edgeBloomStrength,
             bloomRadius: this.settings.edgeBloomRadius,
             bloomThreshold: this.settings.edgeBloomThreshold
         };
     }
 
+    getLabelSettings() {
+        return {
+            fontSize: this.settings.labelFontSize,
+            fontFamily: this.settings.labelFontFamily,
+            padding: this.settings.labelPadding,
+            verticalOffset: this.settings.labelVerticalOffset,
+            closeOffset: this.settings.labelCloseOffset,
+            backgroundColor: this.settings.labelBackgroundColor,
+            textColor: this.settings.labelTextColor,
+            infoTextColor: this.settings.labelInfoTextColor,
+            xrFontSize: this.settings.labelXRFontSize
+        };
+    }
+
     getHologramSettings() {
         return {
             color: this.settings.hologramColor,
@@ -121,12 +216,7 @@ export class VisualizationSettings {
     }
 
     getFisheyeSettings() {
-        return {
-            enabled: this.settings.fisheyeEnabled,
-            strength: this.settings.fisheyeStrength,
-            focusPoint: this.settings.fisheyeFocusPoint,
-            radius: this.settings.fisheyeRadius
-        };
+        return this.settings.fisheye;
     }
 }
 
diff --git a/data/public/js/threeJS/threeGraph.js b/data/public/js/threeJS/threeGraph.js
index d76124de..fdfbfd1a 100755
--- a/data/public/js/threeJS/threeGraph.js
+++ b/data/public/js/threeJS/threeGraph.js
@@ -1,6 +1,7 @@
 // public/js/threeJS/threeGraph.js
 
 import * as THREE from 'three';
+import { visualizationSettings } from '../services/visualizationSettings.js';
 
 /**
  * ForceGraph class manages the creation and updating of nodes and edges in the Three.js scene.
@@ -32,6 +33,96 @@ export class ForceGraph {
         // Level of Detail
         this.lod = new THREE.LOD();
         this.scene.add(this.lod);
+
+        // Get settings
+        const nodeSettings = visualizationSettings.getNodeSettings();
+        const edgeSettings = visualizationSettings.getEdgeSettings();
+        
+        // Store settings
+        this.nodeColors = {
+            NEW: new THREE.Color(nodeSettings.colorNew),
+            RECENT: new THREE.Color(nodeSettings.colorRecent),
+            MEDIUM: new THREE.Color(nodeSettings.colorMedium),
+            OLD: new THREE.Color(nodeSettings.colorOld),
+            CORE: new THREE.Color(nodeSettings.colorCore),
+            SECONDARY: new THREE.Color(nodeSettings.colorSecondary),
+            DEFAULT: new THREE.Color(nodeSettings.colorDefault)
+        };
+        this.edgeColor = new THREE.Color(edgeSettings.color);
+        this.edgeOpacity = edgeSettings.opacity;
+        this.minNodeSize = nodeSettings.minNodeSize;  // In meters (0.1m = 10cm)
+        this.maxNodeSize = nodeSettings.maxNodeSize;  // In meters (0.3m = 30cm)
+        this.materialSettings = nodeSettings.material;
+    }
+
+    /**
+     * Calculates node size in meters based on metadata.
+     * @param {object} node - The node object with metadata.
+     * @returns {number} - The node size in meters.
+     */
+    getNodeSize(node) {
+        if (node.metadata?.node_size) {
+            const size = parseFloat(node.metadata.node_size);
+            // Normalize size between minNodeSize (0.1m) and maxNodeSize (0.3m)
+            return this.minNodeSize + (size * (this.maxNodeSize - this.minNodeSize));
+        }
+        return this.minNodeSize; // Default to minimum size (10cm)
+    }
+
+    /**
+     * Calculates node color based on age and type.
+     * @param {object} node - The node object with metadata.
+     * @returns {THREE.Color} - The color of the node.
+     */
+    getNodeColor(node) {
+        // First check node type
+        if (node.type === 'core') return this.nodeColors.CORE;
+        if (node.type === 'secondary') return this.nodeColors.SECONDARY;
+
+        // Then check age if type is not special
+        const lastModified = node.metadata?.github_last_modified || 
+                           node.metadata?.last_modified || 
+                           new Date().toISOString();
+        const now = Date.now();
+        const age = now - new Date(lastModified).getTime();
+        const dayInMs = 24 * 60 * 60 * 1000;
+        
+        if (age < 3 * dayInMs) return this.nodeColors.NEW;        // Less than 3 days old
+        if (age < 7 * dayInMs) return this.nodeColors.RECENT;     // Less than 7 days old
+        if (age < 30 * dayInMs) return this.nodeColors.MEDIUM;    // Less than 30 days old
+        return this.nodeColors.OLD;                               // 30 days or older
+    }
+
+    /**
+     * Creates a material for a node.
+     * @param {THREE.Color} color - The base color for the node.
+     * @param {object} node - The node object with metadata.
+     * @returns {THREE.MeshPhysicalMaterial} - The material for the node.
+     */
+    createNodeMaterial(color, node) {
+        const lastModified = node.metadata?.github_last_modified || 
+                           node.metadata?.last_modified || 
+                           new Date().toISOString();
+        const now = Date.now();
+        const ageInDays = (now - new Date(lastModified).getTime()) / (24 * 60 * 60 * 1000);
+        
+        // Normalize age to 0-1 range and invert (newer = brighter)
+        const normalizedAge = Math.min(ageInDays / 30, 1);
+        const emissiveIntensity = this.materialSettings.emissiveMaxIntensity - 
+            (normalizedAge * (this.materialSettings.emissiveMaxIntensity - this.materialSettings.emissiveMinIntensity));
+
+        return new THREE.MeshPhysicalMaterial({
+            color: color,
+            emissive: color,
+            emissiveIntensity: emissiveIntensity,
+            metalness: this.materialSettings.metalness,
+            roughness: this.materialSettings.roughness,
+            transparent: true,
+            opacity: this.materialSettings.opacity,
+            envMapIntensity: 1.0,
+            clearcoat: this.materialSettings.clearcoat,
+            clearcoatRoughness: this.materialSettings.clearcoatRoughness
+        });
     }
 
     /**
@@ -69,25 +160,38 @@ export class ForceGraph {
 
         // Add or update nodes
         this.nodes.forEach((node) => {
+            const nodeSize = this.getNodeSize(node);
+            const nodeColor = this.getNodeColor(node);
+
             if (this.nodeMeshes.has(node.id)) {
                 const mesh = this.nodeMeshes.get(node.id);
                 mesh.position.set(node.x, node.y, node.z);
-                // Optionally update node properties like color or size
+                
+                // Update geometry and material if needed
+                if (mesh.geometry.parameters.radius !== nodeSize) {
+                    mesh.geometry.dispose();
+                    mesh.geometry = new THREE.SphereGeometry(nodeSize, 32, 32);
+                }
+                mesh.material.dispose();
+                mesh.material = this.createNodeMaterial(nodeColor, node);
             } else {
                 // Get mesh from pool or create new one
                 let mesh;
                 if (this.nodeMeshPool.length > 0) {
                     mesh = this.nodeMeshPool.pop();
+                    mesh.geometry.dispose();
+                    mesh.material.dispose();
+                    mesh.geometry = new THREE.SphereGeometry(nodeSize, 32, 32);
+                    mesh.material = this.createNodeMaterial(nodeColor, node);
                 } else {
-                    // Create a new node mesh
-                    const geometry = new THREE.SphereGeometry(2, 16, 16);
-                    const material = new THREE.MeshStandardMaterial({ color: this.getNodeColor(node) });
+                    const geometry = new THREE.SphereGeometry(nodeSize, 32, 32);
+                    const material = this.createNodeMaterial(nodeColor, node);
                     mesh = new THREE.Mesh(geometry, material);
                 }
 
                 mesh.position.set(node.x, node.y, node.z);
                 mesh.userData = { id: node.id, name: node.label };
-                this.lod.addLevel(mesh, 0); // Add to LOD
+                this.lod.addLevel(mesh, 0);
 
                 this.nodeMeshes.set(node.id, mesh);
             }
@@ -105,13 +209,16 @@ export class ForceGraph {
             if (!newLinkKeys.has(linkKey)) {
                 this.scene.remove(line);
                 this.linkMeshes.delete(linkKey);
-                this.linkMeshPool.push(line); // Return to pool
+                this.linkMeshPool.push(line);
             }
         });
 
         // Add or update edges
         this.links.forEach((link) => {
             const linkKey = `${link.source}-${link.target}`;
+            const weight = link.weight || 1;
+            const normalizedWeight = Math.min(weight / 10, 1);
+
             if (this.linkMeshes.has(linkKey)) {
                 const line = this.linkMeshes.get(linkKey);
                 const sourceMesh = this.nodeMeshes.get(link.source);
@@ -125,6 +232,9 @@ export class ForceGraph {
                     positions[4] = targetMesh.position.y;
                     positions[5] = targetMesh.position.z;
                     line.geometry.attributes.position.needsUpdate = true;
+                    
+                    // Update edge appearance
+                    line.material.opacity = this.edgeOpacity * normalizedWeight;
                 }
             } else {
                 // Get line from pool or create new one
@@ -133,10 +243,15 @@ export class ForceGraph {
                     line = this.linkMeshPool.pop();
                 } else {
                     const geometry = new THREE.BufferGeometry();
-                    const positions = new Float32Array(6); // 2 points * 3 coordinates
+                    const positions = new Float32Array(6);
                     geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
 
-                    const material = new THREE.LineBasicMaterial({ color: 0xffffff, opacity: 0.5, transparent: true });
+                    const material = new THREE.LineBasicMaterial({ 
+                        color: this.edgeColor, 
+                        opacity: this.edgeOpacity * normalizedWeight, 
+                        transparent: true,
+                        linewidth: Math.max(1, Math.min(weight, 5))
+                    });
                     line = new THREE.Line(geometry, material);
                 }
 
@@ -158,20 +273,4 @@ export class ForceGraph {
             }
         });
     }
-
-    /**
-     * Determines the color of a node based on its properties.
-     * @param {object} node - The node object.
-     * @returns {THREE.Color} - The color of the node.
-     */
-    getNodeColor(node) {
-        // Example: Color nodes based on a 'type' property
-        if (node.type === 'core') {
-            return new THREE.Color(0xffa500); // Orange for core nodes
-        } else if (node.type === 'secondary') {
-            return new THREE.Color(0x00ffff); // Cyan for secondary nodes
-        } else {
-            return new THREE.Color(0x00ff00); // Green for default nodes
-        }
-    }
 }
diff --git a/data/public/js/xr/xrInteraction.js b/data/public/js/xr/xrInteraction.js
index 4d38f1b8..7d8785d5 100755
--- a/data/public/js/xr/xrInteraction.js
+++ b/data/public/js/xr/xrInteraction.js
@@ -1,8 +1,13 @@
 import * as THREE from 'three';
-import { XRControllerModelFactory } from 'three/addons/webxr/XRControllerModelFactory.js';
-import { XRHandModelFactory } from 'three/addons/webxr/XRHandModelFactory.js';
+import { XRControllerModelFactory } from 'three/examples/jsm/webxr/XRControllerModelFactory.js';
+import { XRHandModelFactory } from 'three/examples/jsm/webxr/XRHandModelFactory.js';
+import { visualizationSettings } from '../services/visualizationSettings.js';
+
+// Get visualization settings
+const settings = visualizationSettings.getSettings();
 
 // Create a web panel for displaying node content
+// Using standard dimensions that work well in VR space (in meters)
 const webPanelGeometry = new THREE.PlaneGeometry(2, 1.5); // 2 meters wide, 1.5 meters tall
 let webPanel = null;
 let webPanelTexture = null;
@@ -303,15 +308,16 @@ function setupHands(scene, renderer, modelFactory) {
  * Creates visual rays for controllers
  */
 function createControllerRays(controllers) {
+    const rayLength = 5.0; // 5 meter ray length
     return controllers.map(() => {
         const geometry = new THREE.BufferGeometry().setFromPoints([
             new THREE.Vector3(0, 0, 0),
-            new THREE.Vector3(0, 0, -5)  // 5 meter ray
+            new THREE.Vector3(0, 0, -rayLength)
         ]);
         const material = new THREE.LineBasicMaterial({
-            color: 0x00ff00,
+            color: settings.nodeColorDefault,
             transparent: true,
-            opacity: 0.5
+            opacity: settings.edgeOpacity
         });
         return new THREE.Line(geometry, material);
     });
@@ -330,17 +336,17 @@ function buildController(data) {
             geometry = new THREE.BufferGeometry();
             geometry.setAttribute('position', new THREE.Float32BufferAttribute([0, 0, 0, 0, 0, -1], 3));
             material = new THREE.LineBasicMaterial({
-                color: 0x00ff00,
+                color: settings.nodeColorDefault,
                 transparent: true,
-                opacity: 0.5
+                opacity: settings.edgeOpacity
             });
             return new THREE.Line(geometry, material);
 
         case 'gaze':
-            geometry = new THREE.RingGeometry(0.02, 0.04, 32).translate(0, 0, -1);
+            geometry = new THREE.RingGeometry(settings.minNodeSize/5, settings.minNodeSize/2.5, 32).translate(0, 0, -1);
             material = new THREE.MeshBasicMaterial({
-                color: 0x00ff00,
-                opacity: 0.5,
+                color: settings.nodeColorDefault,
+                opacity: settings.edgeOpacity,
                 transparent: true
             });
             return new THREE.Mesh(geometry, material);
@@ -363,11 +369,11 @@ function setupHandJoints(hand, data) {
         if (data.joints.hasOwnProperty(jointName)) {
             const joint = data.joints[jointName];
             if (joint) {
-                const geometry = new THREE.SphereGeometry(0.008);
+                const geometry = new THREE.SphereGeometry(settings.minNodeSize/12); // Small spheres for joints
                 const material = new THREE.MeshPhongMaterial({
-                    color: 0x00ff00,
+                    color: settings.nodeColorDefault,
                     transparent: true,
-                    opacity: 0.5
+                    opacity: settings.edgeOpacity
                 });
                 const mesh = new THREE.Mesh(geometry, material);
                 mesh.visible = false;
@@ -422,7 +428,7 @@ export function handleXRInput(frame, referenceSpace, controllers, hands, scene,
         if (indexTip && thumbTip) {
             // Detect pinch gesture
             const distance = indexTip.position.distanceTo(thumbTip.position);
-            if (distance < 0.02) {  // 2cm threshold for pinch
+            if (distance < settings.minNodeSize * 0.2) {  // Pinch threshold based on node size
                 const position = indexTip.position.clone().add(thumbTip.position).multiplyScalar(0.5);
                 const direction = new THREE.Vector3().subVectors(indexTip.position, thumbTip.position).normalize();
                 
@@ -458,6 +464,7 @@ export class XRLabelManager {
         this.camera = camera;
         this.labels = new Map();
         this.labelTimeout = 2000;  // Labels disappear after 2 seconds
+        this.labelSettings = visualizationSettings.getLabelSettings();
     }
 
     showLabel(text, position, options = {}) {
@@ -466,22 +473,23 @@ export class XRLabelManager {
         // Remove existing label if present
         this.hideLabel(text);
 
-        // Create label sprite
+        // Create canvas for text rendering
         const canvas = document.createElement('canvas');
         const context = canvas.getContext('2d');
         if (!context) return;
         
-        // Configure canvas
+        // Configure canvas using settings
+        const fontSize = this.labelSettings.xrFontSize;
         canvas.width = 256;
         canvas.height = 128;
         
         // Draw background
-        context.fillStyle = options.backgroundColor || 'rgba(0, 0, 0, 0.8)';
+        context.fillStyle = this.labelSettings.backgroundColor;
         context.fillRect(0, 0, canvas.width, canvas.height);
         
         // Draw text
-        context.font = options.font || '24px Arial';
-        context.fillStyle = options.color || '#ffffff';
+        context.font = `${fontSize}px ${this.labelSettings.fontFamily}`;
+        context.fillStyle = this.labelSettings.textColor;
         context.textAlign = 'center';
         context.textBaseline = 'middle';
         context.fillText(text, canvas.width / 2, canvas.height / 2);
@@ -491,14 +499,21 @@ export class XRLabelManager {
         const spriteMaterial = new THREE.SpriteMaterial({ 
             map: texture,
             transparent: true,
-            opacity: 0.8
+            opacity: settings.hologramOpacity
         });
         const sprite = new THREE.Sprite(spriteMaterial);
         
-        // Position and scale sprite
+        // Position and scale sprite using meter-based settings
         sprite.position.copy(position);
-        sprite.position.y += 0.1;  // Offset slightly above node
-        sprite.scale.set(0.2, 0.1, 1);
+        sprite.position.y += this.labelSettings.verticalOffset; // Offset in meters
+        
+        // Scale sprite based on settings
+        const labelScale = settings.hologramScale * 0.2; // Scale relative to hologram size
+        sprite.scale.set(
+            (canvas.width / canvas.height) * labelScale,
+            labelScale,
+            1
+        );
 
         this.scene.add(sprite);
         this.labels.set(text, sprite);
@@ -540,3 +555,5 @@ export class XRLabelManager {
         this.labels.clear();
     }
 }
+
+export { createWebPanel };
diff --git a/data/public/js/xr/xrSetup.js b/data/public/js/xr/xrSetup.js
index cbca3cd3..c8426755 100755
--- a/data/public/js/xr/xrSetup.js
+++ b/data/public/js/xr/xrSetup.js
@@ -1,9 +1,10 @@
 // public/js/xr/xrSetup.js
 
 import * as THREE from 'three';
-import { XRButton } from 'three/addons/webxr/XRButton.js';
+import { XRButton } from 'three/examples/jsm/webxr/XRButton.js';
 
-let cameraGroup; // Group to hold and move the camera in VR
+// Movement speed constant
+const MOVEMENT_SPEED = 0.05;
 
 /**
  * Initializes the WebXR session for immersive experiences.
@@ -17,18 +18,6 @@ export function initXRSession(renderer, scene, camera) {
         return;
     }
 
-    // Create camera group for VR movement
-    cameraGroup = new THREE.Group();
-    scene.add(cameraGroup);
-    
-    // Store original camera parent
-    const originalParent = camera.parent;
-    
-    // Add camera to group only if it's not already in a group
-    if (!camera.parent || camera.parent === scene) {
-        cameraGroup.add(camera);
-    }
-
     // Configure renderer for XR
     renderer.xr.enabled = true;
     renderer.setPixelRatio(window.devicePixelRatio);
@@ -37,53 +26,67 @@ export function initXRSession(renderer, scene, camera) {
     renderer.alpha = true;
 
     if ('xr' in navigator) {
-        navigator.xr.isSessionSupported('immersive-vr')
-            .then(vrSupported => {
-                if (vrSupported) {
+        // Check for AR support first
+        navigator.xr.isSessionSupported('immersive-ar')
+            .then(arSupported => {
+                if (arSupported) {
                     const sessionInit = {
-                        optionalFeatures: ['local-floor', 'bounded-floor']
+                        optionalFeatures: [
+                            'dom-overlay',
+                            'local-floor',
+                            'bounded-floor',
+                            'hand-tracking',
+                            'layers',
+                            'passthrough'  // Enable passthrough for Quest 3
+                        ],
+                        domOverlay: { root: document.body }
                     };
 
                     const xrButton = XRButton.createButton(renderer, {
-                        mode: 'immersive-vr',
+                        mode: 'immersive-ar',
                         sessionInit: sessionInit,
                         onSessionStarted: (session) => {
-                            console.log('VR session started');
+                            console.log('AR session started');
                             session.addEventListener('end', () => {
-                                console.log('VR session ended');
-                                // Restore original camera parent when session ends
-                                if (originalParent) {
-                                    originalParent.add(camera);
-                                } else {
-                                    scene.add(camera);
-                                }
+                                console.log('AR session ended');
                                 window.dispatchEvent(new CustomEvent('xrsessionend'));
                             });
                             window.dispatchEvent(new CustomEvent('xrsessionstart'));
                         },
                         onSessionEnded: () => {
-                            console.log('VR session cleanup');
+                            console.log('AR session cleanup');
                         }
                     });
 
                     document.body.appendChild(xrButton);
                 } else {
-                    return navigator.xr.isSessionSupported('immersive-ar')
-                        .then(arSupported => {
-                            if (arSupported) {
+                    // Fall back to VR if AR is not supported
+                    return navigator.xr.isSessionSupported('immersive-vr')
+                        .then(vrSupported => {
+                            if (vrSupported) {
                                 const sessionInit = {
-                                    optionalFeatures: ['dom-overlay'],
-                                    domOverlay: { root: document.body }
+                                    optionalFeatures: ['local-floor', 'bounded-floor']
                                 };
 
                                 const xrButton = XRButton.createButton(renderer, {
-                                    mode: 'immersive-ar',
-                                    sessionInit: sessionInit
+                                    mode: 'immersive-vr',
+                                    sessionInit: sessionInit,
+                                    onSessionStarted: (session) => {
+                                        console.log('VR session started');
+                                        session.addEventListener('end', () => {
+                                            console.log('VR session ended');
+                                            window.dispatchEvent(new CustomEvent('xrsessionend'));
+                                        });
+                                        window.dispatchEvent(new CustomEvent('xrsessionstart'));
+                                    },
+                                    onSessionEnded: () => {
+                                        console.log('VR session cleanup');
+                                    }
                                 });
 
                                 document.body.appendChild(xrButton);
                             } else {
-                                console.warn('Neither VR nor AR is supported');
+                                console.warn('Neither AR nor VR is supported');
                             }
                         });
                 }
@@ -97,10 +100,12 @@ export function initXRSession(renderer, scene, camera) {
             const session = event.target.getSession();
             
             session.requestReferenceSpace('local-floor').then(refSpace => {
+                console.log('Got local-floor reference space');
                 renderer.xr.setReferenceSpace(refSpace);
             }).catch(err => {
                 console.warn('Failed to get local-floor reference space:', err);
                 session.requestReferenceSpace('local').then(refSpace => {
+                    console.log('Falling back to local reference space');
                     renderer.xr.setReferenceSpace(refSpace);
                 });
             });
@@ -122,54 +127,36 @@ export function initXRSession(renderer, scene, camera) {
     });
 }
 
-// Movement speed for joystick controls
-const MOVEMENT_SPEED = 0.1;
-
 /**
- * Handles gamepad input in XR.
- * @param {Gamepad} gamepad - The XR gamepad object.
+ * Updates camera position based on XR pose
+ * @param {XRFrame} frame - The XR frame
+ * @param {XRReferenceSpace} refSpace - The XR reference space
+ * @param {THREE.Camera} camera - The Three.js camera
  */
-function handleGamepadInput(gamepad) {
-    if (!gamepad || !cameraGroup) return;
+function updateCameraFromXRPose(frame, refSpace, camera) {
+    if (!frame || !refSpace || !camera) return;
 
-    // Handle joystick movement
-    if (gamepad.axes.length >= 2) {
-        const [x, y] = gamepad.axes;
-        if (Math.abs(x) > 0.1 || Math.abs(y) > 0.1) {
-            // Get camera's forward and right vectors
-            const cameraForward = new THREE.Vector3();
-            const cameraRight = new THREE.Vector3();
+    const pose = frame.getViewerPose(refSpace);
+    if (pose) {
+        // Get the position from the first view (center eye in VR)
+        const view = pose.views[0];
+        if (view) {
+            const position = new THREE.Vector3();
+            position.set(
+                view.transform.position.x,
+                view.transform.position.y,
+                view.transform.position.z
+            );
             
-            // Get the camera's direction
-            if (cameraGroup.children[0]) {
-                cameraGroup.children[0].getWorldDirection(cameraForward);
-                cameraRight.crossVectors(new THREE.Vector3(0, 1, 0), cameraForward).normalize();
-                
-                // Zero out y component for horizontal movement only
-                cameraForward.y = 0;
-                cameraForward.normalize();
-
-                // Calculate movement
-                const moveX = x * MOVEMENT_SPEED;
-                const moveZ = -y * MOVEMENT_SPEED;
-
-                // Apply movement
-                const movement = new THREE.Vector3();
-                movement.addScaledVector(cameraRight, moveX);
-                movement.addScaledVector(cameraForward, moveZ);
-                cameraGroup.position.add(movement);
-            }
+            // Update the camera's local position within its parent group
+            camera.position.copy(position);
+            
+            console.log('XR Pose Update - Camera Position:', 
+                position.toArray().map(v => v.toFixed(3)),
+                'Parent Position:', 
+                camera.parent ? camera.parent.position.toArray().map(v => v.toFixed(3)) : 'No parent');
         }
     }
-
-    // Handle buttons
-    if (gamepad.buttons) {
-        gamepad.buttons.forEach((button, index) => {
-            if (button && button.pressed) {
-                console.log(`XR Controller button ${index} pressed`);
-            }
-        });
-    }
 }
 
 /**
@@ -191,15 +178,16 @@ export function handleXRSession(renderer, scene, camera) {
                 const refSpace = renderer.xr.getReferenceSpace();
 
                 if (session && refSpace) {
-                    const pose = frame.getViewerPose(refSpace);
-                    
+                    // Update camera position from XR pose
+                    updateCameraFromXRPose(frame, refSpace, camera);
+
                     // Handle input sources
                     for (const source of session.inputSources) {
-                        if (source && source.gamepad) {
-                            handleGamepadInput(source.gamepad);
-                        }
-                        if (source && source.hand) {
-                            handleHandInput(source.hand, frame, refSpace);
+                        if (source && source.gamepad && source.handedness === 'left') {
+                            handleGamepadInput(source.gamepad, camera);
+                            console.log('Processing left controller input:', 
+                                source.gamepad.axes[0].toFixed(2), 
+                                source.gamepad.axes[1].toFixed(2));
                         }
                     }
                 }
@@ -212,65 +200,48 @@ export function handleXRSession(renderer, scene, camera) {
 }
 
 /**
- * Handles hand tracking input in XR.
- * @param {XRHand} hand - The XR hand object.
- * @param {XRFrame} frame - The current XR frame.
- * @param {XRReferenceSpace} refSpace - The XR reference space.
+ * Handles gamepad input in XR.
+ * @param {Gamepad} gamepad - The XR gamepad object.
+ * @param {THREE.Camera} camera - The Three.js camera.
  */
-function handleHandInput(hand, frame, refSpace) {
-    if (!hand || !frame || !refSpace) return;
+function handleGamepadInput(gamepad, camera) {
+    if (!gamepad || !camera || !camera.parent) return;
 
-    try {
-        // Get joint poses
-        for (const joint of hand.values()) {
-            const pose = frame.getJointPose(joint, refSpace);
-            if (pose) {
-                // Handle joint pose data
-                // pose.transform.position
-                // pose.transform.orientation
-            }
-        }
+    // Handle joystick movement
+    if (gamepad.axes.length >= 2) {
+        const [x, y] = gamepad.axes;
 
-        // Check for specific gestures
-        const indexTip = hand.get('index-finger-tip');
-        const thumbTip = hand.get('thumb-tip');
-        
-        if (indexTip && thumbTip) {
-            const indexPose = frame.getJointPose(indexTip, refSpace);
-            const thumbPose = frame.getJointPose(thumbTip, refSpace);
+        // Only process if joystick is moved significantly
+        if (Math.abs(x) > 0.1 || Math.abs(y) > 0.1) {
+            console.log('Joystick input:', x.toFixed(2), y.toFixed(2));
+
+            // Get camera's forward and right vectors
+            const forward = new THREE.Vector3();
+            camera.getWorldDirection(forward);
+            forward.y = 0; // Keep movement horizontal
+            forward.normalize();
+
+            const right = new THREE.Vector3();
+            right.crossVectors(new THREE.Vector3(0, 1, 0), forward);
+
+            // Calculate movement
+            const movement = new THREE.Vector3();
+            movement.addScaledVector(right, x * MOVEMENT_SPEED);
+            movement.addScaledVector(forward, -y * MOVEMENT_SPEED);
+
+            // Move the camera's parent (user group)
+            const userGroup = camera.parent;
+            const oldPosition = userGroup.position.clone();
+            userGroup.position.add(movement);
             
-            if (indexPose && thumbPose) {
-                // Calculate distance between index and thumb tips
-                const distance = calculateDistance(
-                    indexPose.transform.position,
-                    thumbPose.transform.position
-                );
-                
-                // Detect pinch gesture (2cm threshold)
-                if (distance < 0.02) {
-                    console.log('Pinch gesture detected');
-                    // Handle pinch gesture
-                }
-            }
+            console.log('Movement:', 
+                movement.toArray().map(v => v.toFixed(2)),
+                'Old pos:', oldPosition.toArray().map(v => v.toFixed(2)),
+                'New pos:', userGroup.position.toArray().map(v => v.toFixed(2)));
         }
-    } catch (error) {
-        console.error('Error handling hand input:', error);
     }
 }
 
-/**
- * Calculates distance between two XR positions.
- * @param {XRRigidTransform} pos1 - First position.
- * @param {XRRigidTransform} pos2 - Second position.
- * @returns {number} Distance between positions.
- */
-function calculateDistance(pos1, pos2) {
-    const dx = pos1.x - pos2.x;
-    const dy = pos1.y - pos2.y;
-    const dz = pos1.z - pos2.z;
-    return Math.sqrt(dx * dx + dy * dy + dz * dz);
-}
-
 /**
  * Updates the XR frame, if necessary.
  * @param {THREE.WebGLRenderer} renderer - The Three.js renderer.
diff --git a/docker-compose.yml b/docker-compose.yml
index d23cf027..7c5fc272 100755
--- a/docker-compose.yml
+++ b/docker-compose.yml
@@ -1,7 +1,7 @@
 name: logseq-xr
 
 services:
-  webxr-graph:
+  webxr:  # Changed from webxr-graph to match health check expectations
     build: .
     image: logseq-xr-image:latest
     container_name: logseq-xr-webxr
diff --git a/launch-docker.sh b/launch-docker.sh
index 3d13450d..c2d61a57 100755
--- a/launch-docker.sh
+++ b/launch-docker.sh
@@ -98,16 +98,26 @@ check_docker() {
 # Function to clean up existing processes
 cleanup_existing_processes() {
     echo -e "${YELLOW}Cleaning up...${NC}"
-    # Stop all services except cloudflared
-    $DOCKER_COMPOSE stop $(docker compose ps --services | grep -v cloudflared) >/dev/null 2>&1
-    $DOCKER_COMPOSE rm -f $(docker compose ps --services | grep -v cloudflared) >/dev/null 2>&1
+    
+    # Stop and remove all containers from the compose project
+    $DOCKER_COMPOSE down --remove-orphans
+    
+    # Explicitly remove containers if they still exist
+    if docker ps -a | grep -q "logseq-xr-webxr"; then
+        docker rm -f logseq-xr-webxr
+    fi
+    if docker ps -a | grep -q "cloudflared-tunnel"; then
+        docker rm -f cloudflared-tunnel
+    fi
 
+    # Clean up port if in use
     if netstat -tuln | grep -q ":$PORT "; then
         local pid=$(lsof -t -i:"$PORT")
         if [ ! -z "$pid" ]; then
-            kill -9 $pid >/dev/null 2>&1
+            kill -9 $pid
         fi
     fi
+    
     sleep 2
 }
 
@@ -300,22 +310,15 @@ check_system_resources
 
 # Run security checks
 echo -e "\n${YELLOW}Running security checks...${NC}"
-if ! check_pnpm_security; then
-    echo -e "${RED}Critical vulnerabilities found in pnpm dependencies. Aborting startup.${NC}"
-    exit 1
-fi
-
-if ! check_rust_security; then
-    echo -e "${RED}Critical vulnerabilities found in Rust dependencies. Aborting startup.${NC}"
-    exit 1
-fi
+check_pnpm_security || true  # Continue even if check fails
+check_rust_security || true  # Continue even if check fails
 
 cleanup_existing_processes
 
 # Clean up old resources
 echo -e "${YELLOW}Cleaning up old resources...${NC}"
-docker volume ls -q | grep "logseqXR" | xargs -r docker volume rm >/dev/null 2>&1
-docker image prune -f >/dev/null 2>&1
+docker volume ls -q | grep "logseqXR" | xargs -r docker volume rm
+docker image prune -f
 
 # Ensure data directory exists
 mkdir -p data/markdown
@@ -342,7 +345,7 @@ fi
 
 if ! check_application_readiness; then
     echo -e "${RED}Startup failed${NC}"
-    $DOCKER_COMPOSE logs --tail=50 webxr-graph
+    $DOCKER_COMPOSE logs --tail=50 webxr
     exit 1
 fi
 
diff --git a/nginx.conf b/nginx.conf
index c746d60a..6247e05d 100755
--- a/nginx.conf
+++ b/nginx.conf
@@ -28,19 +28,37 @@ http {
     keepalive_timeout 65;
     keepalive_requests 100;
 
-    # Upstream backend definition
+    # Gzip settings
+    gzip on;
+    gzip_disable "msie6";
+    gzip_vary on;
+    gzip_proxied any;
+    gzip_comp_level 6;
+    gzip_buffers 16 8k;
+    gzip_http_version 1.1;
+    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
+
+    # Upstream backend definition for the Rust server
     upstream backend {
-        server 127.0.0.1:3000;  # Rust server on port 3000
+        server 127.0.0.1:4000;  # Connect to the Rust server on port 4000
         keepalive 32;
     }
 
     # Main server configuration
     server {
-        listen 80 default_server;
-        listen [::]:80 default_server;
-        server_name visionflow.info;
+        listen 3000 default_server;  # Listen on port 3000 for internal connections
+        listen [::]:3000 default_server;
+        server_name ${DOMAIN};
         root /app/data/public/dist;
 
+        # Security headers
+        add_header X-Frame-Options "SAMEORIGIN" always;
+        add_header X-XSS-Protection "1; mode=block" always;
+        add_header X-Content-Type-Options "nosniff" always;
+        add_header Referrer-Policy "same-origin" always;
+        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
+        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
+
         # Allow Cloudflare IPs
         real_ip_header CF-Connecting-IP;
         real_ip_recursive on;
@@ -88,5 +106,12 @@ http {
             add_header X-Content-Type-Options "nosniff" always;
             add_header Referrer-Policy "same-origin" always;
         }
+
+        # Error pages
+        error_page 404 /404.html;
+        error_page 500 502 503 504 /50x.html;
+        location = /50x.html {
+            root /usr/share/nginx/html;
+        }
     }
 }
diff --git a/package.json b/package.json
index 79cb7833..b71a0237 100755
--- a/package.json
+++ b/package.json
@@ -1,25 +1,22 @@
 {
-    "name": "public",
-    "version": "1.0.0",
-    "description": "Public assets for the project",
-    "main": "index.js",
-    "scripts": {
-        "dev": "vite",
-        "build": "vite build",
-        "preview": "vite preview",
-        "serve": "vite serve"
-    },
-    "dependencies": {
-        "@types/three": "0.169.0",
-        "node-hid": "3.1.0",
-        "pako": "2.1.0",
-        "three": "0.160.0",
-        "toml": "3.0.0",
-        "vue": "3.5.12"
-    },
-    "devDependencies": {
-        "@vitejs/plugin-vue": "5.0.0",
-        "vite": "5.0.0",
-        "vite-plugin-html": "3.2.2"
-    }
+  "name": "logseq-xr",
+  "private": true,
+  "version": "0.1.0",
+  "type": "module",
+  "scripts": {
+    "dev": "vite",
+    "build": "vite build",
+    "preview": "vite preview"
+  },
+  "dependencies": {
+    "@vitejs/plugin-vue": "^5.0.0",
+    "pako": "^2.1.0",
+    "three": "^0.162.0",
+    "vite": "^5.0.0",
+    "vite-plugin-html": "^3.2.2",
+    "vue": "^3.4.0"
+  },
+  "devDependencies": {
+    "@types/three": "^0.162.0"
+  }
 }
diff --git a/pnpm-lock.yaml b/pnpm-lock.yaml
index 960d6e84..ee33db36 100644
--- a/pnpm-lock.yaml
+++ b/pnpm-lock.yaml
@@ -8,34 +8,28 @@ importers:
 
   .:
     dependencies:
-      '@types/three':
-        specifier: 0.169.0
-        version: 0.169.0
-      node-hid:
-        specifier: 3.1.0
-        version: 3.1.0
+      '@vitejs/plugin-vue':
+        specifier: ^5.0.0
+        version: 5.0.0(vite@5.0.0(terser@5.34.1))(vue@3.5.12)
       pako:
-        specifier: 2.1.0
+        specifier: ^2.1.0
         version: 2.1.0
       three:
-        specifier: 0.160.0
-        version: 0.160.0
-      toml:
-        specifier: 3.0.0
-        version: 3.0.0
-      vue:
-        specifier: 3.5.12
-        version: 3.5.12
-    devDependencies:
-      '@vitejs/plugin-vue':
-        specifier: 5.0.0
-        version: 5.0.0(vite@5.0.0(terser@5.34.1))(vue@3.5.12)
+        specifier: ^0.162.0
+        version: 0.162.0
       vite:
-        specifier: 5.0.0
+        specifier: ^5.0.0
         version: 5.0.0(terser@5.34.1)
       vite-plugin-html:
-        specifier: 3.2.2
+        specifier: ^3.2.2
         version: 3.2.2(vite@5.0.0(terser@5.34.1))
+      vue:
+        specifier: ^3.4.0
+        version: 3.5.12
+    devDependencies:
+      '@types/three':
+        specifier: ^0.162.0
+        version: 0.162.0
 
 packages:
 
@@ -330,8 +324,8 @@ packages:
   '@types/stats.js@0.17.3':
     resolution: {integrity: sha512-pXNfAD3KHOdif9EQXZ9deK82HVNaXP5ZIF5RP2QG6OQFNTaY2YIetfrE9t528vEreGQvEPRDDc8muaoYeK0SxQ==}
 
-  '@types/three@0.169.0':
-    resolution: {integrity: sha512-oan7qCgJBt03wIaK+4xPWclYRPG9wzcg7Z2f5T8xYTNEF95kh0t0lklxLLYBDo7gQiGLYzE6iF4ta7nXF2bcsw==}
+  '@types/three@0.162.0':
+    resolution: {integrity: sha512-0j5yZcVukVIhrhSIC7+LmBPkkMoMuEJ1AfYBZfgNytdYqYREMuiyXWhYOMeZLBElTEAlJIZn7r2W3vqTIgjWlg==}
 
   '@types/webxr@0.5.20':
     resolution: {integrity: sha512-JGpU6qiIJQKUuVSKx1GtQnHJGxRjtfGIhzO2ilq43VZZS//f1h1Sgexbdk+Lq+7569a6EYhOWrUpIruR/1Enmg==}
@@ -372,18 +366,11 @@ packages:
   '@vue/shared@3.5.12':
     resolution: {integrity: sha512-L2RPSAwUFbgZH20etwrXyVyCBu9OxRSi8T/38QsvnkJyvq2LufW2lDCOzm7t/U9C1mkhJGWYfCuFBCmIuNivrg==}
 
-  '@webgpu/types@0.1.49':
-    resolution: {integrity: sha512-NMmS8/DofhH/IFeW+876XrHVWel+J/vdcFCHLDqeJgkH9x0DeiwjVd8LcBdaxdG/T7Rf8VUAYsA8X1efMzLjRQ==}
-
   acorn@8.12.1:
     resolution: {integrity: sha512-tcpGyI9zbizT9JbV6oYE477V6mTlXvvi0T0G3SNIYE2apm/G5huBa1+K89VGeovbg+jycCrfhl3ADxErOuO6Jg==}
     engines: {node: '>=0.4.0'}
     hasBin: true
 
-  ansi-regex@5.0.1:
-    resolution: {integrity: sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==}
-    engines: {node: '>=8'}
-
   ansi-styles@4.3.0:
     resolution: {integrity: sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==}
     engines: {node: '>=8'}
@@ -421,10 +408,6 @@ packages:
     resolution: {integrity: sha512-D5J+kHaVb/wKSFcyyV75uCn8fiY4sV38XJoe4CUyGQ+mOU/fMVYUdH1hJC+CJQ5uY3EnW27SbJYS4X8BiLrAFg==}
     engines: {node: '>= 10.0'}
 
-  cliui@8.0.1:
-    resolution: {integrity: sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==}
-    engines: {node: '>=12'}
-
   color-convert@2.0.1:
     resolution: {integrity: sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==}
     engines: {node: '>=7.0.0'}
@@ -491,9 +474,6 @@ packages:
     engines: {node: '>=0.10.0'}
     hasBin: true
 
-  emoji-regex@8.0.0:
-    resolution: {integrity: sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==}
-
   entities@2.2.0:
     resolution: {integrity: sha512-p92if5Nz619I0w+akJrLZH0MX0Pb5DX39XOwQTtXSdQQOaYH03S1uIQp4mhOZtAXrxq4ViO67YTiLBo2638o9A==}
 
@@ -506,10 +486,6 @@ packages:
     engines: {node: '>=12'}
     hasBin: true
 
-  escalade@3.2.0:
-    resolution: {integrity: sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==}
-    engines: {node: '>=6'}
-
   estree-walker@2.0.2:
     resolution: {integrity: sha512-Rfkk/Mp/DL7JVje3u18FxFujQlTNR2q6QfMSMB7AvCBx91NGj/ba3kCfza0f6dVDbw7YlRf/nDrn7pQrCCyQ/w==}
 
@@ -520,8 +496,8 @@ packages:
   fastq@1.17.1:
     resolution: {integrity: sha512-sRVD3lWVIXWg6By68ZN7vho9a1pQcN/WBFaAAsDDFzlJjvoGx0P8z7V1t72grFJfJhu3YPZBuu25f7Kaw2jN1w==}
 
-  fflate@0.8.2:
-    resolution: {integrity: sha512-cPJU47OaAoCbg0pBvzsgpTPhmhqI5eJjh/JIu8tPj5q+T7iLvW/JAYUqmE7KOB4R1ZyEhzBaIQpQpardBF5z8A==}
+  fflate@0.6.10:
+    resolution: {integrity: sha512-IQrh3lEPM93wVCEczc9SaAOvkmcoQn/G8Bo1e8ZPlY3X3bnAxWaBdvTdvM1hP62iZp0BXWDy4vTAy4fF0+Dlpg==}
 
   filelist@1.0.4:
     resolution: {integrity: sha512-w1cEuf3S+DrLCQL7ET6kz+gmlJdbq9J7yXCSjK/OZCPA+qEN1WyF4ZAf0YYJa4/shHJra2t/d/r8SV4Ji+x+8Q==}
@@ -539,10 +515,6 @@ packages:
     engines: {node: ^8.16.0 || ^10.6.0 || >=11.0.0}
     os: [darwin]
 
-  get-caller-file@2.0.5:
-    resolution: {integrity: sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==}
-    engines: {node: 6.* || 8.* || >= 10.*}
-
   glob-parent@5.1.2:
     resolution: {integrity: sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==}
     engines: {node: '>= 6'}
@@ -567,10 +539,6 @@ packages:
     resolution: {integrity: sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==}
     engines: {node: '>=0.10.0'}
 
-  is-fullwidth-code-point@3.0.0:
-    resolution: {integrity: sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==}
-    engines: {node: '>=8'}
-
   is-glob@4.0.3:
     resolution: {integrity: sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==}
     engines: {node: '>=0.10.0'}
@@ -619,14 +587,6 @@ packages:
   no-case@3.0.4:
     resolution: {integrity: sha512-fgAN3jGAh+RoxUGZHTSOLJIqUc2wmoBwGR4tbpNAKmmovFoWq0OdRkb0VkldReO2a2iBT/OEulG9XSUc10r3zg==}
 
-  node-addon-api@3.2.1:
-    resolution: {integrity: sha512-mmcei9JghVNDYydghQmeDX8KoAm0FAiYyIcUt/N4nhyAipB17pllZQDOJD2fotxABnt4Mdz+dKTO7eftLg4d0A==}
-
-  node-hid@3.1.0:
-    resolution: {integrity: sha512-YCTD1Ad3PHavx2+hY0QA468pn/gKa44U+fWB1KkRswisWtTROtBzdbmY+Xrm+QZSBCGTkdkgke7Ce606WcGxiQ==}
-    engines: {node: '>=10.16'}
-    hasBin: true
-
   node-html-parser@5.4.2:
     resolution: {integrity: sha512-RaBPP3+51hPne/OolXxcz89iYvQvKOydaqoePpOgXcrOKZhjVIzmpKZz+Hd/RBO2/zN2q6CNJhQzucVz+u3Jyw==}
 
@@ -652,11 +612,6 @@ packages:
     resolution: {integrity: sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==}
     engines: {node: '>=8.6'}
 
-  pkg-prebuilds@1.0.0:
-    resolution: {integrity: sha512-D9wlkXZCmjxj2kBHTw3fGSyjoahr33breGBoJcoezpi7ouYS59DJVOHMZ+dgqacSrZiJo4qtkXxLQTE+BqXJmQ==}
-    engines: {node: '>= 14.15.0'}
-    hasBin: true
-
   postcss@8.4.47:
     resolution: {integrity: sha512-56rxCq7G/XfB4EkXq9Egn5GCqugWvDFjafDOThIdMBsI15iqPqR5r15TfSr1YPYeEI19YeaXMCbY6u88Y76GLQ==}
     engines: {node: ^10 || ^12 || >=14}
@@ -668,10 +623,6 @@ packages:
     resolution: {integrity: sha512-G08Dxvm4iDN3MLM0EsP62EDV9IuhXPR6blNz6Utcp7zyV3tr4HVNINt6MpaRWbxoOHT3Q7YN2P+jaHX8vUbgog==}
     engines: {node: '>= 0.10'}
 
-  require-directory@2.1.1:
-    resolution: {integrity: sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==}
-    engines: {node: '>=0.10.0'}
-
   reusify@1.0.4:
     resolution: {integrity: sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==}
     engines: {iojs: '>=1.0.0', node: '>=0.10.0'}
@@ -695,14 +646,6 @@ packages:
     resolution: {integrity: sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==}
     engines: {node: '>=0.10.0'}
 
-  string-width@4.2.3:
-    resolution: {integrity: sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==}
-    engines: {node: '>=8'}
-
-  strip-ansi@6.0.1:
-    resolution: {integrity: sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==}
-    engines: {node: '>=8'}
-
   supports-color@7.2.0:
     resolution: {integrity: sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==}
     engines: {node: '>=8'}
@@ -712,8 +655,8 @@ packages:
     engines: {node: '>=10'}
     hasBin: true
 
-  three@0.160.0:
-    resolution: {integrity: sha512-DLU8lc0zNIPkM7rH5/e1Ks1Z8tWCGRq6g8mPowdDJpw1CFBJMU7UoJjC6PefXW7z//SSl0b2+GCw14LB+uDhng==}
+  three@0.162.0:
+    resolution: {integrity: sha512-xfCYj4RnlozReCmUd+XQzj6/5OjDNHBy5nT6rVwrOKGENAvpXe2z1jL+DZYaMu4/9pNsjH/4Os/VvS9IrH7IOQ==}
 
   to-fast-properties@2.0.0:
     resolution: {integrity: sha512-/OaKK0xYrs3DmxRYqL/yDc+FxFUVYhDlXMhRmv3z915w2HF1tnN1omB354j8VUGO/hbRzyD6Y3sA7v7GS/ceog==}
@@ -723,9 +666,6 @@ packages:
     resolution: {integrity: sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==}
     engines: {node: '>=8.0'}
 
-  toml@3.0.0:
-    resolution: {integrity: sha512-y/mWCZinnvxjTKYhJ+pYxwD0mRLVvOtdS2Awbgxln6iEnt4rk0yBxeSBHkGJcPucRiG0e55mwWp+g/05rsrd6w==}
-
   tslib@2.7.0:
     resolution: {integrity: sha512-gLXCKdN1/j47AiHiOkJN69hJmcbGTHI0ImLmbYLHykhgeN0jVGola9yVjFgzCUklsZQMW55o+dW7IXv3RCXDzA==}
 
@@ -774,22 +714,6 @@ packages:
       typescript:
         optional: true
 
-  wrap-ansi@7.0.0:
-    resolution: {integrity: sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==}
-    engines: {node: '>=10'}
-
-  y18n@5.0.8:
-    resolution: {integrity: sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==}
-    engines: {node: '>=10'}
-
-  yargs-parser@21.1.1:
-    resolution: {integrity: sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==}
-    engines: {node: '>=12'}
-
-  yargs@17.7.2:
-    resolution: {integrity: sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==}
-    engines: {node: '>=12'}
-
 snapshots:
 
   '@babel/helper-string-parser@7.25.7': {}
@@ -974,13 +898,12 @@ snapshots:
 
   '@types/stats.js@0.17.3': {}
 
-  '@types/three@0.169.0':
+  '@types/three@0.162.0':
     dependencies:
       '@tweenjs/tween.js': 23.1.3
       '@types/stats.js': 0.17.3
       '@types/webxr': 0.5.20
-      '@webgpu/types': 0.1.49
-      fflate: 0.8.2
+      fflate: 0.6.10
       meshoptimizer: 0.18.1
 
   '@types/webxr@0.5.20': {}
@@ -1044,12 +967,8 @@ snapshots:
 
   '@vue/shared@3.5.12': {}
 
-  '@webgpu/types@0.1.49': {}
-
   acorn@8.12.1: {}
 
-  ansi-regex@5.0.1: {}
-
   ansi-styles@4.3.0:
     dependencies:
       color-convert: 2.0.1
@@ -1089,12 +1008,6 @@ snapshots:
     dependencies:
       source-map: 0.6.1
 
-  cliui@8.0.1:
-    dependencies:
-      string-width: 4.2.3
-      strip-ansi: 6.0.1
-      wrap-ansi: 7.0.0
-
   color-convert@2.0.1:
     dependencies:
       color-name: 1.1.4
@@ -1156,8 +1069,6 @@ snapshots:
     dependencies:
       jake: 10.9.2
 
-  emoji-regex@8.0.0: {}
-
   entities@2.2.0: {}
 
   entities@4.5.0: {}
@@ -1188,8 +1099,6 @@ snapshots:
       '@esbuild/win32-ia32': 0.19.12
       '@esbuild/win32-x64': 0.19.12
 
-  escalade@3.2.0: {}
-
   estree-walker@2.0.2: {}
 
   fast-glob@3.3.2:
@@ -1204,7 +1113,7 @@ snapshots:
     dependencies:
       reusify: 1.0.4
 
-  fflate@0.8.2: {}
+  fflate@0.6.10: {}
 
   filelist@1.0.4:
     dependencies:
@@ -1223,8 +1132,6 @@ snapshots:
   fsevents@2.3.3:
     optional: true
 
-  get-caller-file@2.0.5: {}
-
   glob-parent@5.1.2:
     dependencies:
       is-glob: 4.0.3
@@ -1247,8 +1154,6 @@ snapshots:
 
   is-extglob@2.1.1: {}
 
-  is-fullwidth-code-point@3.0.0: {}
-
   is-glob@4.0.3:
     dependencies:
       is-extglob: 2.1.1
@@ -1300,13 +1205,6 @@ snapshots:
       lower-case: 2.0.2
       tslib: 2.7.0
 
-  node-addon-api@3.2.1: {}
-
-  node-hid@3.1.0:
-    dependencies:
-      node-addon-api: 3.2.1
-      pkg-prebuilds: 1.0.0
-
   node-html-parser@5.4.2:
     dependencies:
       css-select: 4.3.0
@@ -1334,10 +1232,6 @@ snapshots:
 
   picomatch@2.3.1: {}
 
-  pkg-prebuilds@1.0.0:
-    dependencies:
-      yargs: 17.7.2
-
   postcss@8.4.47:
     dependencies:
       nanoid: 3.3.7
@@ -1348,8 +1242,6 @@ snapshots:
 
   relateurl@0.2.7: {}
 
-  require-directory@2.1.1: {}
-
   reusify@1.0.4: {}
 
   rollup@4.24.3:
@@ -1389,16 +1281,6 @@ snapshots:
 
   source-map@0.6.1: {}
 
-  string-width@4.2.3:
-    dependencies:
-      emoji-regex: 8.0.0
-      is-fullwidth-code-point: 3.0.0
-      strip-ansi: 6.0.1
-
-  strip-ansi@6.0.1:
-    dependencies:
-      ansi-regex: 5.0.1
-
   supports-color@7.2.0:
     dependencies:
       has-flag: 4.0.0
@@ -1410,7 +1292,7 @@ snapshots:
       commander: 2.20.3
       source-map-support: 0.5.21
 
-  three@0.160.0: {}
+  three@0.162.0: {}
 
   to-fast-properties@2.0.0: {}
 
@@ -1418,8 +1300,6 @@ snapshots:
     dependencies:
       is-number: 7.0.0
 
-  toml@3.0.0: {}
-
   tslib@2.7.0: {}
 
   universalify@2.0.1: {}
@@ -1456,23 +1336,3 @@ snapshots:
       '@vue/runtime-dom': 3.5.12
       '@vue/server-renderer': 3.5.12(vue@3.5.12)
       '@vue/shared': 3.5.12
-
-  wrap-ansi@7.0.0:
-    dependencies:
-      ansi-styles: 4.3.0
-      string-width: 4.2.3
-      strip-ansi: 6.0.1
-
-  y18n@5.0.8: {}
-
-  yargs-parser@21.1.1: {}
-
-  yargs@17.7.2:
-    dependencies:
-      cliui: 8.0.1
-      escalade: 3.2.0
-      get-caller-file: 2.0.5
-      require-directory: 2.1.1
-      string-width: 4.2.3
-      y18n: 5.0.8
-      yargs-parser: 21.1.1
diff --git a/settings.toml b/settings.toml
index 40807a15..66e64c2a 100755
--- a/settings.toml
+++ b/settings.toml
@@ -13,7 +13,7 @@ embedding the topic in Logseq double square brackets once in the returned text.
 """
 
 [network]
-domain = "visionflow.info"
+domain = "localhost"  # Default domain, override in .env for production
 port = 3000
 bind_address = "0.0.0.0"  # should bind to localhost for security
 enable_tls = true
@@ -23,6 +23,7 @@ max_request_size = 10485760  # 10MB in bytes
 enable_rate_limiting = true
 rate_limit_requests = 100
 rate_limit_window = 60
+tunnel_id = ""  # Cloudflare tunnel ID, set in .env for production
 
 [security]
 enable_cors = false
@@ -39,37 +40,36 @@ enable_audit_logging = true
 audit_log_path = "/app/logs/audit.log"
 
 [github]
-github_access_token = "default_github_token"
-github_owner = "default_owner"
-github_repo = "default_repo"
-github_directory = "default_directory"
-github_api_version = "2022-11-28"
-github_rate_limit_enabled = true
+access_token = "default_github_token"
+owner = "default_owner"
+repo = "default_repo"
+directory = "default_directory"
+api_version = "2022-11-28"
+rate_limit_enabled = true
 
 [ragflow]
-ragflow_api_key = "default_ragflow_key"
-ragflow_api_base_url = "http://192.168.0.51/v1/"
-ragflow_timeout = 30
-ragflow_max_retries = 3
+api_key = "default_ragflow_key"
+base_url = "http://192.168.0.51/v1/"
+timeout = 30
+max_retries = 3
 
 [perplexity]
-perplexity_api_key = "default_perplexity_key"
-perplexity_model = "llama-3.1-sonar-small-128k-online"
-perplexity_api_url = "https://api.perplexity.ai/chat/completions"
-perplexity_max_tokens = 4096
-perplexity_temperature = 0.5
-perplexity_top_p = 0.9
-perplexity_presence_penalty = 0.0
-perplexity_frequency_penalty = 1.0
-perplexity_timeout = 30
-perplexity_rate_limit = 100
+api_key = "default_perplexity_key"
+model = "llama-3.1-sonar-small-128k-online"
+api_url = "https://api.perplexity.ai/chat/completions"
+max_tokens = 4096
+temperature = 0.5
+top_p = 0.9
+presence_penalty = 0.0
+frequency_penalty = 1.0
+timeout = 30
+rate_limit = 100
 
 [openai]
-openai_api_key = "default_openai_key"
-openai_base_url = "wss://api.openai.com/v1/realtime"
-openai_timeout = 30
-openai_rate_limit = 100
-
+api_key = "default_openai_key"
+base_url = "wss://api.openai.com/v1/realtime"
+timeout = 30
+rate_limit = 100
 
 [default]
 max_concurrent_requests = 5
@@ -78,54 +78,103 @@ retry_delay = 5
 api_client_timeout = 30
 max_payload_size = 5242880  # 5MB in bytes
 enable_request_logging = false
-
-[monitoring]
 enable_metrics = true
 metrics_port = 9090
 log_level = "info"
 log_format = "json"
 
 [visualization]
-node_color = "0x1A0B31"
-edge_color = "0xff0000"
-hologram_color = "0xFFD700"
-node_size_scaling_factor = 1
-hologram_scale = 5
-hologram_opacity = 0.1
-edge_opacity = 0.3
-label_font_size = 36
-fog_density = 0.002
+# Colors in hex format - warm golden palette
+node_color = "0xFFA500"             # Base orange
+edge_color = "0xFFD700"             # Golden
+hologram_color = "0xFFC125"         # Deep golden yellow
+
+# Node age-based colors - warm palette
+node_color_new = "0xFFD700"         # Bright gold for very recent files
+node_color_recent = "0xFFA500"      # Orange for recent files
+node_color_medium = "0xDAA520"      # Goldenrod for medium-age files
+node_color_old = "0xCD853F"         # Peru/bronze for old files
+node_age_max_days = 30              # Maximum age in days for color calculation
+
+# Node type colors
+node_color_core = "0xFFB90F"        # Dark golden for core nodes
+node_color_secondary = "0xFFC125"   # Golden yellow for secondary nodes
+node_color_default = "0xFFD700"     # Gold for default nodes
+
+# Physical dimensions in meters
+min_node_size = 0.15                # 15cm minimum node size
+max_node_size = 0.4                 # 40cm maximum node size
+hologram_scale = 6.0                # Increased for better visibility
+hologram_opacity = 0.15             # Slightly increased for better visibility
+edge_opacity = 0.4                  # Increased for better visibility
+label_font_size = 42                # Increased for better readability
+fog_density = 0.001                 # Reduced for clearer distant nodes
+
+# Layout dimensions in meters
+target_radius = 250.0               # Increased target radius
+natural_length = 120.0              # Increased natural length
+boundary_limit = 600.0              # Increased boundary
+
+# Material properties - enhanced metallic look
+node_material_metalness = 0.7       # Increased for more metallic appearance
+node_material_roughness = 0.1       # Reduced for more shine
+node_material_clearcoat = 0.8       # Increased for more glossiness
+node_material_clearcoat_roughness = 0.1
+node_material_opacity = 0.95
+node_emissive_min_intensity = 0.4   # Increased base glow
+node_emissive_max_intensity = 1.2   # Increased maximum glow
+
+# Label properties
+label_font_family = "Arial"
+label_padding = 24
+label_vertical_offset = 2.5
+label_close_offset = 0.25
+label_background_color = "rgba(0, 0, 0, 0.85)"
+label_text_color = "white"
+label_info_text_color = "lightgray"
+label_xr_font_size = 28
+
+# Edge properties
+edge_weight_normalization = 12.0    # Increased for better visibility
+edge_min_width = 1.5               # Increased minimum width
+edge_max_width = 6.0               # Increased maximum width
+
+# Geometry properties
+geometry_min_segments = 24          # Increased for smoother curves
+geometry_max_segments = 48          # Increased for smoother curves
+geometry_segment_per_hyperlink = 0.6
+
+# Interaction properties
+click_emissive_boost = 2.5         # Increased feedback intensity
+click_feedback_duration = 250       # Longer feedback duration
 
 # Physics simulation parameters
-force_directed_iterations = 250
-# Spring force (0.001-1.0)
-force_directed_spring = 0.01
-# Required for backend compatibility
-force_directed_repulsion = 1000.0
-force_directed_attraction = 0.01
-# Damping (0.5-0.95)
-force_directed_damping = 0.8
+force_directed_iterations = 300     # More iterations for better layout
+force_directed_spring = 0.015      # Adjusted for better spacing
+force_directed_repulsion = 1200.0  # Increased repulsion
+force_directed_attraction = 0.012
+force_directed_damping = 0.85      # Adjusted damping
 
 [bloom]
-# Bloom settings for nodes
-node_bloom_strength = 0.1
-node_bloom_radius = 0.1
-node_bloom_threshold = 0.0
+# Enhanced bloom settings for ethereal glow
+node_bloom_strength = 0.8          # Significantly increased
+node_bloom_radius = 0.3           # Increased radius
+node_bloom_threshold = 0.2        # Adjusted threshold
 
-# Bloom settings for edges
-edge_bloom_strength = 0.2
-edge_bloom_radius = 0.3
-edge_bloom_threshold = 0.0
+# Edge bloom for golden trails
+edge_bloom_strength = 0.6         # Increased
+edge_bloom_radius = 0.4          # Increased
+edge_bloom_threshold = 0.1       # Adjusted
 
-# Bloom settings for environmental elements
-environment_bloom_strength = 0.5
-environment_bloom_radius = 0.1
-environment_bloom_threshold = 0.0
+# Environmental bloom for ambient glow
+environment_bloom_strength = 0.7   # Increased
+environment_bloom_radius = 0.3    # Increased
+environment_bloom_threshold = 0.1  # Adjusted
 
 [fisheye]
-fisheye_enabled = false
-fisheye_strength = 0.5
-fisheye_radius = 100.0
-fisheye_focus_x = 0.0
-fisheye_focus_y = 0.0
-fisheye_focus_z = 0.0
+enabled = false
+strength = 0.5
+radius = 100.0
+focus_x = 0.0
+focus_y = 0.0
+focus_z = 0.0
diff --git a/src/config.rs b/src/config.rs
index bbff12dd..58bc6dc3 100755
--- a/src/config.rs
+++ b/src/config.rs
@@ -5,6 +5,8 @@ use std::{env, fmt};
 #[derive(Debug, Serialize, Deserialize, Clone)]
 pub struct Settings {
     pub debug_mode: bool,
+    pub network: NetworkSettings,
+    pub security: SecuritySettings,
     pub github: GitHubSettings,
     pub ragflow: RagFlowSettings,
     pub perplexity: PerplexitySettings,
@@ -16,36 +18,75 @@ pub struct Settings {
     pub prompt: String,
 }
 
+#[derive(Debug, Serialize, Deserialize, Clone)]
+pub struct NetworkSettings {
+    pub domain: String,
+    pub port: u16,
+    pub bind_address: String,
+    pub enable_tls: bool,
+    pub min_tls_version: String,
+    pub enable_http2: bool,
+    pub max_request_size: usize,
+    pub enable_rate_limiting: bool,
+    pub rate_limit_requests: u32,
+    pub rate_limit_window: u32,
+    pub tunnel_id: String,  // Added tunnel_id field
+}
+
+#[derive(Debug, Serialize, Deserialize, Clone)]
+pub struct SecuritySettings {
+    pub enable_cors: bool,
+    pub allowed_origins: Vec<String>,
+    pub enable_csrf: bool,
+    pub csrf_token_timeout: u32,
+    pub session_timeout: u32,
+    pub cookie_secure: bool,
+    pub cookie_httponly: bool,
+    pub cookie_samesite: String,
+    pub enable_security_headers: bool,
+    pub enable_request_validation: bool,
+    pub enable_audit_logging: bool,
+    pub audit_log_path: String,
+}
+
 #[derive(Debug, Serialize, Deserialize, Clone)]
 pub struct GitHubSettings {
-    pub github_access_token: String,
-    pub github_owner: String,
-    pub github_repo: String,
-    pub github_directory: String,
+    pub access_token: String,
+    pub owner: String,
+    pub repo: String,
+    pub directory: String,
+    pub api_version: String,
+    pub rate_limit_enabled: bool,
 }
 
 #[derive(Debug, Serialize, Deserialize, Clone)]
 pub struct RagFlowSettings {
-    pub ragflow_api_key: String,
-    pub ragflow_api_base_url: String,
+    pub api_key: String,
+    pub base_url: String,
+    pub timeout: u32,
+    pub max_retries: u32,
 }
 
 #[derive(Debug, Serialize, Deserialize, Clone)]
 pub struct PerplexitySettings {
-    pub perplexity_api_key: String,
-    pub perplexity_model: String,
-    pub perplexity_api_url: String,
-    pub perplexity_max_tokens: u32,
-    pub perplexity_temperature: f32,
-    pub perplexity_top_p: f32,
-    pub perplexity_presence_penalty: f32,
-    pub perplexity_frequency_penalty: f32,
+    pub api_key: String,
+    pub model: String,
+    pub api_url: String,
+    pub max_tokens: u32,
+    pub temperature: f32,
+    pub top_p: f32,
+    pub presence_penalty: f32,
+    pub frequency_penalty: f32,
+    pub timeout: u32,
+    pub rate_limit: u32,
 }
 
 #[derive(Debug, Serialize, Deserialize, Clone)]
 pub struct OpenAISettings {
-    pub openai_api_key: String,
-    pub openai_base_url: String,
+    pub api_key: String,
+    pub base_url: String,
+    pub timeout: u32,
+    pub rate_limit: u32,
 }
 
 #[derive(Debug, Serialize, Deserialize, Clone)]
@@ -54,19 +95,68 @@ pub struct DefaultSettings {
     pub max_retries: u32,
     pub retry_delay: u64,
     pub api_client_timeout: u64,
+    pub max_payload_size: usize,
+    pub enable_request_logging: bool,
+    pub enable_metrics: bool,
+    pub metrics_port: u16,
+    pub log_level: String,
+    pub log_format: String,
 }
 
 #[derive(Debug, Serialize, Deserialize, Clone)]
 pub struct VisualizationSettings {
+    // Colors
     pub node_color: String,
     pub edge_color: String,
     pub hologram_color: String,
-    pub node_size_scaling_factor: f32,
+    pub node_color_new: String,
+    pub node_color_recent: String,
+    pub node_color_medium: String,
+    pub node_color_old: String,
+    pub node_color_core: String,
+    pub node_color_secondary: String,
+    pub node_color_default: String,
+
+    // Physical dimensions
+    pub min_node_size: f32,    // In meters (0.1m = 10cm)
+    pub max_node_size: f32,    // In meters (0.3m = 30cm)
     pub hologram_scale: f32,
     pub hologram_opacity: f32,
     pub edge_opacity: f32,
+
+    // Label settings
     pub label_font_size: u32,
+    pub label_font_family: String,
+    pub label_padding: u32,
+    pub label_vertical_offset: f32,
+    pub label_close_offset: f32,
+    pub label_background_color: String,
+    pub label_text_color: String,
+    pub label_info_text_color: String,
+    pub label_xr_font_size: u32,
+
+    // Geometry settings
+    pub geometry_min_segments: u32,
+    pub geometry_max_segments: u32,
+    pub geometry_segment_per_hyperlink: f32,
+
+    // Material settings
+    pub node_material_metalness: f32,
+    pub node_material_roughness: f32,
+    pub node_material_clearcoat: f32,
+    pub node_material_clearcoat_roughness: f32,
+    pub node_material_opacity: f32,
+    pub node_emissive_min_intensity: f32,
+    pub node_emissive_max_intensity: f32,
+
+    // Interaction settings
+    pub click_emissive_boost: f32,
+    pub click_feedback_duration: u32,
+
+    // Environment settings
     pub fog_density: f32,
+
+    // Physics simulation parameters
     pub force_directed_iterations: u32,
     pub force_directed_spring: f32,
     pub force_directed_repulsion: f32,
@@ -89,12 +179,12 @@ pub struct BloomSettings {
 
 #[derive(Debug, Serialize, Deserialize, Clone)]
 pub struct FisheyeSettings {
-    pub fisheye_enabled: bool,
-    pub fisheye_strength: f32,
-    pub fisheye_radius: f32,
-    pub fisheye_focus_x: f32,
-    pub fisheye_focus_y: f32,
-    pub fisheye_focus_z: f32,
+    pub enabled: bool,
+    pub strength: f32,
+    pub radius: f32,
+    pub focus_x: f32,
+    pub focus_y: f32,
+    pub focus_z: f32,
 }
 
 impl Settings {
@@ -103,58 +193,157 @@ impl Settings {
             .add_source(File::with_name("settings"))
             .add_source(Environment::with_prefix("APP"));
 
-        // Override settings with environment variables if they exist
-        if let Ok(value) = env::var("DEBUG_MODE") {
-            builder = builder.set_override("debug_mode", value)?;
+        // Network settings
+        if let Ok(value) = env::var("DOMAIN") {
+            builder = builder.set_override("network.domain", value)?;
+        }
+        if let Ok(value) = env::var("PORT") {
+            builder = builder.set_override("network.port", value)?;
+        }
+        if let Ok(value) = env::var("BIND_ADDRESS") {
+            builder = builder.set_override("network.bind_address", value)?;
+        }
+        if let Ok(value) = env::var("ENABLE_TLS") {
+            builder = builder.set_override("network.enable_tls", value)?;
+        }
+        if let Ok(value) = env::var("MIN_TLS_VERSION") {
+            builder = builder.set_override("network.min_tls_version", value)?;
+        }
+        if let Ok(value) = env::var("ENABLE_HTTP2") {
+            builder = builder.set_override("network.enable_http2", value)?;
+        }
+        if let Ok(value) = env::var("MAX_REQUEST_SIZE") {
+            builder = builder.set_override("network.max_request_size", value)?;
+        }
+        if let Ok(value) = env::var("ENABLE_RATE_LIMITING") {
+            builder = builder.set_override("network.enable_rate_limiting", value)?;
+        }
+        if let Ok(value) = env::var("RATE_LIMIT_REQUESTS") {
+            builder = builder.set_override("network.rate_limit_requests", value)?;
+        }
+        if let Ok(value) = env::var("RATE_LIMIT_WINDOW") {
+            builder = builder.set_override("network.rate_limit_window", value)?;
+        }
+        if let Ok(value) = env::var("TUNNEL_ID") {
+            builder = builder.set_override("network.tunnel_id", value)?;
+        }
+
+        // Security settings
+        if let Ok(value) = env::var("ENABLE_CORS") {
+            builder = builder.set_override("security.enable_cors", value)?;
+        }
+        if let Ok(value) = env::var("ENABLE_CSRF") {
+            builder = builder.set_override("security.enable_csrf", value)?;
+        }
+        if let Ok(value) = env::var("CSRF_TOKEN_TIMEOUT") {
+            builder = builder.set_override("security.csrf_token_timeout", value)?;
+        }
+        if let Ok(value) = env::var("SESSION_TIMEOUT") {
+            builder = builder.set_override("security.session_timeout", value)?;
+        }
+        if let Ok(value) = env::var("COOKIE_SECURE") {
+            builder = builder.set_override("security.cookie_secure", value)?;
         }
+        if let Ok(value) = env::var("COOKIE_HTTPONLY") {
+            builder = builder.set_override("security.cookie_httponly", value)?;
+        }
+        if let Ok(value) = env::var("COOKIE_SAMESITE") {
+            builder = builder.set_override("security.cookie_samesite", value)?;
+        }
+        if let Ok(value) = env::var("ENABLE_SECURITY_HEADERS") {
+            builder = builder.set_override("security.enable_security_headers", value)?;
+        }
+        if let Ok(value) = env::var("ENABLE_REQUEST_VALIDATION") {
+            builder = builder.set_override("security.enable_request_validation", value)?;
+        }
+        if let Ok(value) = env::var("ENABLE_AUDIT_LOGGING") {
+            builder = builder.set_override("security.enable_audit_logging", value)?;
+        }
+        if let Ok(value) = env::var("AUDIT_LOG_PATH") {
+            builder = builder.set_override("security.audit_log_path", value)?;
+        }
+
+        // GitHub settings
         if let Ok(value) = env::var("GITHUB_ACCESS_TOKEN") {
-            builder = builder.set_override("github.github_access_token", value)?;
+            builder = builder.set_override("github.access_token", value)?;
         }
         if let Ok(value) = env::var("GITHUB_OWNER") {
-            builder = builder.set_override("github.github_owner", value)?;
+            builder = builder.set_override("github.owner", value)?;
         }
         if let Ok(value) = env::var("GITHUB_REPO") {
-            builder = builder.set_override("github.github_repo", value)?;
+            builder = builder.set_override("github.repo", value)?;
         }
         if let Ok(value) = env::var("GITHUB_DIRECTORY") {
-            builder = builder.set_override("github.github_directory", value)?;
+            builder = builder.set_override("github.directory", value)?;
+        }
+        if let Ok(value) = env::var("GITHUB_API_VERSION") {
+            builder = builder.set_override("github.api_version", value)?;
         }
+        if let Ok(value) = env::var("GITHUB_RATE_LIMIT_ENABLED") {
+            builder = builder.set_override("github.rate_limit_enabled", value)?;
+        }
+
+        // RAGFlow settings
         if let Ok(value) = env::var("RAGFLOW_API_KEY") {
-            builder = builder.set_override("ragflow.ragflow_api_key", value)?;
+            builder = builder.set_override("ragflow.api_key", value)?;
         }
         if let Ok(value) = env::var("RAGFLOW_BASE_URL") {
-            builder = builder.set_override("ragflow.ragflow_api_base_url", value)?;
+            builder = builder.set_override("ragflow.base_url", value)?;
         }
+        if let Ok(value) = env::var("RAGFLOW_TIMEOUT") {
+            builder = builder.set_override("ragflow.timeout", value)?;
+        }
+        if let Ok(value) = env::var("RAGFLOW_MAX_RETRIES") {
+            builder = builder.set_override("ragflow.max_retries", value)?;
+        }
+
+        // Perplexity settings
         if let Ok(value) = env::var("PERPLEXITY_API_KEY") {
-            builder = builder.set_override("perplexity.perplexity_api_key", value)?;
+            builder = builder.set_override("perplexity.api_key", value)?;
         }
         if let Ok(value) = env::var("PERPLEXITY_MODEL") {
-            builder = builder.set_override("perplexity.perplexity_model", value)?;
+            builder = builder.set_override("perplexity.model", value)?;
         }
         if let Ok(value) = env::var("PERPLEXITY_API_URL") {
-            builder = builder.set_override("perplexity.perplexity_api_url", value)?;
+            builder = builder.set_override("perplexity.api_url", value)?;
         }
         if let Ok(value) = env::var("PERPLEXITY_MAX_TOKENS") {
-            builder = builder.set_override("perplexity.perplexity_max_tokens", value)?;
+            builder = builder.set_override("perplexity.max_tokens", value)?;
         }
         if let Ok(value) = env::var("PERPLEXITY_TEMPERATURE") {
-            builder = builder.set_override("perplexity.perplexity_temperature", value)?;
+            builder = builder.set_override("perplexity.temperature", value)?;
         }
         if let Ok(value) = env::var("PERPLEXITY_TOP_P") {
-            builder = builder.set_override("perplexity.perplexity_top_p", value)?;
+            builder = builder.set_override("perplexity.top_p", value)?;
         }
         if let Ok(value) = env::var("PERPLEXITY_PRESENCE_PENALTY") {
-            builder = builder.set_override("perplexity.perplexity_presence_penalty", value)?;
+            builder = builder.set_override("perplexity.presence_penalty", value)?;
         }
         if let Ok(value) = env::var("PERPLEXITY_FREQUENCY_PENALTY") {
-            builder = builder.set_override("perplexity.perplexity_frequency_penalty", value)?;
+            builder = builder.set_override("perplexity.frequency_penalty", value)?;
+        }
+        if let Ok(value) = env::var("PERPLEXITY_TIMEOUT") {
+            builder = builder.set_override("perplexity.timeout", value)?;
+        }
+        if let Ok(value) = env::var("PERPLEXITY_RATE_LIMIT") {
+            builder = builder.set_override("perplexity.rate_limit", value)?;
         }
+
+        // OpenAI settings
         if let Ok(value) = env::var("OPENAI_API_KEY") {
-            builder = builder.set_override("openai.openai_api_key", value)?;
+            builder = builder.set_override("openai.api_key", value)?;
         }
         if let Ok(value) = env::var("OPENAI_BASE_URL") {
-            builder = builder.set_override("openai.openai_base_url", value)?;
+            builder = builder.set_override("openai.base_url", value)?;
+        }
+        if let Ok(value) = env::var("OPENAI_TIMEOUT") {
+            builder = builder.set_override("openai.timeout", value)?;
+        }
+        if let Ok(value) = env::var("OPENAI_RATE_LIMIT") {
+            builder = builder.set_override("openai.rate_limit", value)?;
         }
+
+        // Default settings
         if let Ok(value) = env::var("MAX_CONCURRENT_REQUESTS") {
             builder = builder.set_override("default.max_concurrent_requests", value)?;
         }
@@ -167,6 +356,26 @@ impl Settings {
         if let Ok(value) = env::var("API_CLIENT_TIMEOUT") {
             builder = builder.set_override("default.api_client_timeout", value)?;
         }
+        if let Ok(value) = env::var("MAX_PAYLOAD_SIZE") {
+            builder = builder.set_override("default.max_payload_size", value)?;
+        }
+        if let Ok(value) = env::var("ENABLE_REQUEST_LOGGING") {
+            builder = builder.set_override("default.enable_request_logging", value)?;
+        }
+        if let Ok(value) = env::var("ENABLE_METRICS") {
+            builder = builder.set_override("default.enable_metrics", value)?;
+        }
+        if let Ok(value) = env::var("METRICS_PORT") {
+            builder = builder.set_override("default.metrics_port", value)?;
+        }
+        if let Ok(value) = env::var("LOG_LEVEL") {
+            builder = builder.set_override("default.log_level", value)?;
+        }
+        if let Ok(value) = env::var("LOG_FORMAT") {
+            builder = builder.set_override("default.log_format", value)?;
+        }
+
+        // Visualization settings
         if let Ok(value) = env::var("NODE_COLOR") {
             builder = builder.set_override("visualization.node_color", value)?;
         }
@@ -176,8 +385,34 @@ impl Settings {
         if let Ok(value) = env::var("HOLOGRAM_COLOR") {
             builder = builder.set_override("visualization.hologram_color", value)?;
         }
-        if let Ok(value) = env::var("NODE_SIZE_SCALING_FACTOR") {
-            builder = builder.set_override("visualization.node_size_scaling_factor", value)?;
+        if let Ok(value) = env::var("NODE_COLOR_NEW") {
+            builder = builder.set_override("visualization.node_color_new", value)?;
+        }
+        if let Ok(value) = env::var("NODE_COLOR_RECENT") {
+            builder = builder.set_override("visualization.node_color_recent", value)?;
+        }
+        if let Ok(value) = env::var("NODE_COLOR_MEDIUM") {
+            builder = builder.set_override("visualization.node_color_medium", value)?;
+        }
+        if let Ok(value) = env::var("NODE_COLOR_OLD") {
+            builder = builder.set_override("visualization.node_color_old", value)?;
+        }
+        if let Ok(value) = env::var("NODE_COLOR_CORE") {
+            builder = builder.set_override("visualization.node_color_core", value)?;
+        }
+        if let Ok(value) = env::var("NODE_COLOR_SECONDARY") {
+            builder = builder.set_override("visualization.node_color_secondary", value)?;
+        }
+        if let Ok(value) = env::var("NODE_COLOR_DEFAULT") {
+            builder = builder.set_override("visualization.node_color_default", value)?;
+        }
+
+        // Visualization settings - Dimensions
+        if let Ok(value) = env::var("MIN_NODE_SIZE") {
+            builder = builder.set_override("visualization.min_node_size", value)?;
+        }
+        if let Ok(value) = env::var("MAX_NODE_SIZE") {
+            builder = builder.set_override("visualization.max_node_size", value)?;
         }
         if let Ok(value) = env::var("HOLOGRAM_SCALE") {
             builder = builder.set_override("visualization.hologram_scale", value)?;
@@ -188,73 +423,98 @@ impl Settings {
         if let Ok(value) = env::var("EDGE_OPACITY") {
             builder = builder.set_override("visualization.edge_opacity", value)?;
         }
+
+        // Visualization settings - Labels
         if let Ok(value) = env::var("LABEL_FONT_SIZE") {
             builder = builder.set_override("visualization.label_font_size", value)?;
         }
-        if let Ok(value) = env::var("FOG_DENSITY") {
-            builder = builder.set_override("visualization.fog_density", value)?;
+        if let Ok(value) = env::var("LABEL_FONT_FAMILY") {
+            builder = builder.set_override("visualization.label_font_family", value)?;
+        }
+        if let Ok(value) = env::var("LABEL_PADDING") {
+            builder = builder.set_override("visualization.label_padding", value)?;
+        }
+        if let Ok(value) = env::var("LABEL_VERTICAL_OFFSET") {
+            builder = builder.set_override("visualization.label_vertical_offset", value)?;
         }
-        if let Ok(value) = env::var("FORCE_DIRECTED_ITERATIONS") {
-            builder = builder.set_override("visualization.force_directed_iterations", value)?;
+        if let Ok(value) = env::var("LABEL_CLOSE_OFFSET") {
+            builder = builder.set_override("visualization.label_close_offset", value)?;
         }
-        if let Ok(value) = env::var("FORCE_DIRECTED_SPRING") {
-            builder = builder.set_override("visualization.force_directed_spring", value)?;
+        if let Ok(value) = env::var("LABEL_BACKGROUND_COLOR") {
+            builder = builder.set_override("visualization.label_background_color", value)?;
         }
-        if let Ok(value) = env::var("FORCE_DIRECTED_REPULSION") {
-            builder = builder.set_override("visualization.force_directed_repulsion", value)?;
+        if let Ok(value) = env::var("LABEL_TEXT_COLOR") {
+            builder = builder.set_override("visualization.label_text_color", value)?;
         }
-        if let Ok(value) = env::var("FORCE_DIRECTED_ATTRACTION") {
-            builder = builder.set_override("visualization.force_directed_attraction", value)?;
+        if let Ok(value) = env::var("LABEL_INFO_TEXT_COLOR") {
+            builder = builder.set_override("visualization.label_info_text_color", value)?;
         }
-        if let Ok(value) = env::var("FORCE_DIRECTED_DAMPING") {
-            builder = builder.set_override("visualization.force_directed_damping", value)?;
+        if let Ok(value) = env::var("LABEL_XR_FONT_SIZE") {
+            builder = builder.set_override("visualization.label_xr_font_size", value)?;
+        }
+
+        // Visualization settings - Geometry
+        if let Ok(value) = env::var("GEOMETRY_MIN_SEGMENTS") {
+            builder = builder.set_override("visualization.geometry_min_segments", value)?;
         }
-        if let Ok(value) = env::var("NODE_BLOOM_STRENGTH") {
-            builder = builder.set_override("bloom.node_bloom_strength", value)?;
+        if let Ok(value) = env::var("GEOMETRY_MAX_SEGMENTS") {
+            builder = builder.set_override("visualization.geometry_max_segments", value)?;
         }
-        if let Ok(value) = env::var("NODE_BLOOM_RADIUS") {
-            builder = builder.set_override("bloom.node_bloom_radius", value)?;
+        if let Ok(value) = env::var("GEOMETRY_SEGMENT_PER_HYPERLINK") {
+            builder = builder.set_override("visualization.geometry_segment_per_hyperlink", value)?;
         }
-        if let Ok(value) = env::var("NODE_BLOOM_THRESHOLD") {
-            builder = builder.set_override("bloom.node_bloom_threshold", value)?;
+
+        // Visualization settings - Material
+        if let Ok(value) = env::var("NODE_MATERIAL_METALNESS") {
+            builder = builder.set_override("visualization.node_material_metalness", value)?;
         }
-        if let Ok(value) = env::var("EDGE_BLOOM_STRENGTH") {
-            builder = builder.set_override("bloom.edge_bloom_strength", value)?;
+        if let Ok(value) = env::var("NODE_MATERIAL_ROUGHNESS") {
+            builder = builder.set_override("visualization.node_material_roughness", value)?;
         }
-        if let Ok(value) = env::var("EDGE_BLOOM_RADIUS") {
-            builder = builder.set_override("bloom.edge_bloom_radius", value)?;
+        if let Ok(value) = env::var("NODE_MATERIAL_CLEARCOAT") {
+            builder = builder.set_override("visualization.node_material_clearcoat", value)?;
         }
-        if let Ok(value) = env::var("EDGE_BLOOM_THRESHOLD") {
-            builder = builder.set_override("bloom.edge_bloom_threshold", value)?;
+        if let Ok(value) = env::var("NODE_MATERIAL_CLEARCOAT_ROUGHNESS") {
+            builder = builder.set_override("visualization.node_material_clearcoat_roughness", value)?;
         }
-        if let Ok(value) = env::var("ENVIRONMENT_BLOOM_STRENGTH") {
-            builder = builder.set_override("bloom.environment_bloom_strength", value)?;
+        if let Ok(value) = env::var("NODE_MATERIAL_OPACITY") {
+            builder = builder.set_override("visualization.node_material_opacity", value)?;
         }
-        if let Ok(value) = env::var("ENVIRONMENT_BLOOM_RADIUS") {
-            builder = builder.set_override("bloom.environment_bloom_radius", value)?;
+        if let Ok(value) = env::var("NODE_EMISSIVE_MIN_INTENSITY") {
+            builder = builder.set_override("visualization.node_emissive_min_intensity", value)?;
         }
-        if let Ok(value) = env::var("ENVIRONMENT_BLOOM_THRESHOLD") {
-            builder = builder.set_override("bloom.environment_bloom_threshold", value)?;
+        if let Ok(value) = env::var("NODE_EMISSIVE_MAX_INTENSITY") {
+            builder = builder.set_override("visualization.node_emissive_max_intensity", value)?;
         }
-        if let Ok(value) = env::var("FISHEYE_ENABLED") {
-            builder = builder.set_override("fisheye.enabled", value)?;
+
+        // Visualization settings - Interaction
+        if let Ok(value) = env::var("CLICK_EMISSIVE_BOOST") {
+            builder = builder.set_override("visualization.click_emissive_boost", value)?;
         }
-        if let Ok(value) = env::var("FISHEYE_STRENGTH") {
-            builder = builder.set_override("fisheye.strength", value)?;
+        if let Ok(value) = env::var("CLICK_FEEDBACK_DURATION") {
+            builder = builder.set_override("visualization.click_feedback_duration", value)?;
         }
-        if let Ok(value) = env::var("FISHEYE_RADIUS") {
-            builder = builder.set_override("fisheye.radius", value)?;
+        if let Ok(value) = env::var("FISHEYE_FOCUS_Z") {
+            builder = builder.set_override("fisheye.focus_z", value)?;
         }
-        
+
         builder.build()?.try_deserialize()
     }
 }
 
 impl fmt::Display for VisualizationSettings {
     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
-        write!(f, "VisualizationSettings {{ node_color: {}, edge_color: {}, iterations: {}, repulsion: {}, attraction: {} }}",
-               self.node_color, self.edge_color, self.force_directed_iterations,
-               self.force_directed_repulsion, self.force_directed_attraction)
+        write!(
+            f,
+            "VisualizationSettings {{ node_color: {}, edge_color: {}, min_node_size: {}m, max_node_size: {}m, iterations: {}, repulsion: {}, attraction: {} }}",
+            self.node_color,
+            self.edge_color,
+            self.min_node_size,
+            self.max_node_size,
+            self.force_directed_iterations,
+            self.force_directed_repulsion,
+            self.force_directed_attraction
+        )
     }
 }
 
@@ -266,15 +526,58 @@ mod tests {
     #[test]
     fn test_simulation_params_from_config() {
         let config = VisualizationSettings {
+            // Colors
             node_color: "0x1A0B31".to_string(),
             edge_color: "0xff0000".to_string(),
             hologram_color: "0xFFD700".to_string(),
-            node_size_scaling_factor: 1.0,
+            node_color_new: "0x00ff88".to_string(),
+            node_color_recent: "0x4444ff".to_string(),
+            node_color_medium: "0xffaa00".to_string(),
+            node_color_old: "0xff4444".to_string(),
+            node_color_core: "0xffa500".to_string(),
+            node_color_secondary: "0x00ffff".to_string(),
+            node_color_default: "0x00ff00".to_string(),
+
+            // Physical dimensions
+            min_node_size: 0.1,
+            max_node_size: 0.3,
             hologram_scale: 5.0,
             hologram_opacity: 0.1,
             edge_opacity: 0.3,
-            label_font_size: 16,
+
+            // Label settings
+            label_font_size: 36,
+            label_font_family: "Arial".to_string(),
+            label_padding: 20,
+            label_vertical_offset: 2.0,
+            label_close_offset: 0.2,
+            label_background_color: "rgba(0, 0, 0, 0.8)".to_string(),
+            label_text_color: "white".to_string(),
+            label_info_text_color: "lightgray".to_string(),
+            label_xr_font_size: 24,
+
+            // Geometry settings
+            geometry_min_segments: 16,
+            geometry_max_segments: 32,
+            geometry_segment_per_hyperlink: 0.5,
+
+            // Material settings
+            node_material_metalness: 0.2,
+            node_material_roughness: 0.2,
+            node_material_clearcoat: 0.3,
+            node_material_clearcoat_roughness: 0.2,
+            node_material_opacity: 0.9,
+            node_emissive_min_intensity: 0.3,
+            node_emissive_max_intensity: 1.0,
+
+            // Interaction settings
+            click_emissive_boost: 2.0,
+            click_feedback_duration: 200,
+
+            // Environment settings
             fog_density: 0.002,
+
+            // Physics simulation parameters
             force_directed_iterations: 100,
             force_directed_spring: 0.1,
             force_directed_repulsion: 1000.0,
diff --git a/src/handlers/visualization_handler.rs b/src/handlers/visualization_handler.rs
index 1371dd13..369783e4 100755
--- a/src/handlers/visualization_handler.rs
+++ b/src/handlers/visualization_handler.rs
@@ -12,7 +12,6 @@ pub async fn get_visualization_settings(
             "nodeColor": settings.visualization.node_color,
             "edgeColor": settings.visualization.edge_color,
             "hologramColor": settings.visualization.hologram_color,
-            "nodeSizeScalingFactor": settings.visualization.node_size_scaling_factor,
             "hologramScale": settings.visualization.hologram_scale,
             "hologramOpacity": settings.visualization.hologram_opacity,
             "edgeOpacity": settings.visualization.edge_opacity,
@@ -34,14 +33,14 @@ pub async fn get_visualization_settings(
             "environmentBloomThreshold": settings.bloom.environment_bloom_threshold,
         },
         "fisheye": {
-            "enabled": settings.fisheye.fisheye_enabled,
-            "strength": settings.fisheye.fisheye_strength,
+            "enabled": settings.fisheye.enabled,
+            "strength": settings.fisheye.strength,
             "focusPoint": [
-                settings.fisheye.fisheye_focus_x,
-                settings.fisheye.fisheye_focus_y,
-                settings.fisheye.fisheye_focus_z
+                settings.fisheye.focus_x,
+                settings.fisheye.focus_y,
+                settings.fisheye.focus_z
             ],
-            "radius": settings.fisheye.fisheye_radius,
+            "radius": settings.fisheye.radius,
         }
     });
 
diff --git a/src/handlers/websocket_handlers.rs b/src/handlers/websocket_handlers.rs
index 852bacbb..67296d14 100755
--- a/src/handlers/websocket_handlers.rs
+++ b/src/handlers/websocket_handlers.rs
@@ -49,6 +49,13 @@ pub fn format_color(color: &str) -> String {
     let color = color.trim_matches('"')
         .trim_start_matches("0x")
         .trim_start_matches('#');
+    
+    // Handle rgba format
+    if color.starts_with("rgba(") {
+        return color.to_string();
+    }
+    
+    // Handle regular hex colors
     format!("#{}", color)
 }
 
@@ -465,69 +472,91 @@ impl WebSocketSessionHandler for WebSocketSession {
             let graph_data = state.graph_data.read().await;
             let settings = state.settings.read().await;
             
-            // Send full graph data and settings
-            let response = json!({
-                "type": "getInitialData",
-                "graph_data": &*graph_data,
-                "settings": {
-                    "visualization": {
-                        "nodeColor": format_color(&settings.visualization.node_color),
-                        "edgeColor": format_color(&settings.visualization.edge_color),
-                        "hologramColor": format_color(&settings.visualization.hologram_color),
-                        "nodeSizeScalingFactor": settings.visualization.node_size_scaling_factor,
-                        "hologramScale": settings.visualization.hologram_scale,
-                        "hologramOpacity": settings.visualization.hologram_opacity,
-                        "edgeOpacity": settings.visualization.edge_opacity,
-                        "labelFontSize": settings.visualization.label_font_size,
-                        "fogDensity": settings.visualization.fog_density,
-                        "forceDirectedIterations": settings.visualization.force_directed_iterations,
-                        "forceDirectedRepulsion": settings.visualization.force_directed_repulsion,
-                        "forceDirectedAttraction": settings.visualization.force_directed_attraction,
-                    },
-                    "bloom": {
-                        "nodeBloomStrength": settings.bloom.node_bloom_strength,
-                        "nodeBloomRadius": settings.bloom.node_bloom_radius,
-                        "nodeBloomThreshold": settings.bloom.node_bloom_threshold,
-                        "edgeBloomStrength": settings.bloom.edge_bloom_strength,
-                        "edgeBloomRadius": settings.bloom.edge_bloom_radius,
-                        "edgeBloomThreshold": settings.bloom.edge_bloom_threshold,
-                        "environmentBloomStrength": settings.bloom.environment_bloom_strength,
-                        "environmentBloomRadius": settings.bloom.environment_bloom_radius,
-                        "environmentBloomThreshold": settings.bloom.environment_bloom_threshold,
-                    },
-                    "fisheye": {
-                        "fisheye_enabled": settings.fisheye.fisheye_enabled,
-                        "fisheye_strength": settings.fisheye.fisheye_strength,
-                        "fisheye_focus_x": settings.fisheye.fisheye_focus_x,
-                        "fisheye_focus_y": settings.fisheye.fisheye_focus_y,
-                        "fisheye_focus_z": settings.fisheye.fisheye_focus_z,
-                        "fisheye_radius": settings.fisheye.fisheye_radius,
-                    }
+            // Helper function to send a simple JSON message
+            let send_settings = |msg_type: &str, fields: Vec<(&str, serde_json::Value)>| {
+                let mut map = serde_json::Map::new();
+                map.insert("type".to_string(), serde_json::Value::String(msg_type.to_string()));
+                for (key, value) in fields {
+                    map.insert(key.to_string(), value);
                 }
-            });
-
-            debug!("Sending initial data response: {:?}", response);
-
-            if let Ok(response_str) = serde_json::to_string(&response) {
-                ctx_addr.do_send(SendText(response_str));
-            }
+                if let Ok(response_str) = serde_json::to_string(&serde_json::Value::Object(map)) {
+                    ctx_addr.do_send(SendText(response_str));
+                }
+            };
 
-            // Send completion as proper JSON
+            // Send graph data
+            send_settings("graphData", vec![
+                ("nodes", serde_json::to_value(&graph_data.nodes).unwrap_or_default()),
+                ("edges", serde_json::to_value(&graph_data.edges).unwrap_or_default())
+            ]);
+
+            // Send basic visualization settings
+            send_settings("visualSettings", vec![
+                ("nodeColor", serde_json::Value::String(format_color(&settings.visualization.node_color))),
+                ("edgeColor", serde_json::Value::String(format_color(&settings.visualization.edge_color))),
+                ("hologramColor", serde_json::Value::String(format_color(&settings.visualization.hologram_color))),
+                ("minNodeSize", serde_json::Value::Number(serde_json::Number::from_f64(settings.visualization.min_node_size as f64).unwrap())),
+                ("maxNodeSize", serde_json::Value::Number(serde_json::Number::from_f64(settings.visualization.max_node_size as f64).unwrap())),
+                ("hologramScale", serde_json::Value::Number(serde_json::Number::from_f64(settings.visualization.hologram_scale as f64).unwrap())),
+                ("hologramOpacity", serde_json::Value::Number(serde_json::Number::from_f64(settings.visualization.hologram_opacity as f64).unwrap())),
+                ("edgeOpacity", serde_json::Value::Number(serde_json::Number::from_f64(settings.visualization.edge_opacity as f64).unwrap())),
+                ("fogDensity", serde_json::Value::Number(serde_json::Number::from_f64(settings.visualization.fog_density as f64).unwrap()))
+            ]);
+
+            // Send material settings
+            send_settings("materialSettings", vec![
+                ("metalness", serde_json::Value::Number(serde_json::Number::from_f64(settings.visualization.node_material_metalness as f64).unwrap())),
+                ("roughness", serde_json::Value::Number(serde_json::Number::from_f64(settings.visualization.node_material_roughness as f64).unwrap())),
+                ("clearcoat", serde_json::Value::Number(serde_json::Number::from_f64(settings.visualization.node_material_clearcoat as f64).unwrap())),
+                ("clearcoatRoughness", serde_json::Value::Number(serde_json::Number::from_f64(settings.visualization.node_material_clearcoat_roughness as f64).unwrap())),
+                ("opacity", serde_json::Value::Number(serde_json::Number::from_f64(settings.visualization.node_material_opacity as f64).unwrap())),
+                ("emissiveMin", serde_json::Value::Number(serde_json::Number::from_f64(settings.visualization.node_emissive_min_intensity as f64).unwrap())),
+                ("emissiveMax", serde_json::Value::Number(serde_json::Number::from_f64(settings.visualization.node_emissive_max_intensity as f64).unwrap()))
+            ]);
+
+            // Send physics settings
+            send_settings("physicsSettings", vec![
+                ("iterations", serde_json::Value::Number(serde_json::Number::from(settings.visualization.force_directed_iterations))),
+                ("spring", serde_json::Value::Number(serde_json::Number::from_f64(settings.visualization.force_directed_spring as f64).unwrap())),
+                ("repulsion", serde_json::Value::Number(serde_json::Number::from_f64(settings.visualization.force_directed_repulsion as f64).unwrap())),
+                ("attraction", serde_json::Value::Number(serde_json::Number::from_f64(settings.visualization.force_directed_attraction as f64).unwrap())),
+                ("damping", serde_json::Value::Number(serde_json::Number::from_f64(settings.visualization.force_directed_damping as f64).unwrap()))
+            ]);
+
+            // Send bloom settings
+            send_settings("bloomSettings", vec![
+                ("nodeStrength", serde_json::Value::Number(serde_json::Number::from_f64(settings.bloom.node_bloom_strength as f64).unwrap())),
+                ("nodeRadius", serde_json::Value::Number(serde_json::Number::from_f64(settings.bloom.node_bloom_radius as f64).unwrap())),
+                ("nodeThreshold", serde_json::Value::Number(serde_json::Number::from_f64(settings.bloom.node_bloom_threshold as f64).unwrap())),
+                ("edgeStrength", serde_json::Value::Number(serde_json::Number::from_f64(settings.bloom.edge_bloom_strength as f64).unwrap())),
+                ("edgeRadius", serde_json::Value::Number(serde_json::Number::from_f64(settings.bloom.edge_bloom_radius as f64).unwrap())),
+                ("edgeThreshold", serde_json::Value::Number(serde_json::Number::from_f64(settings.bloom.edge_bloom_threshold as f64).unwrap())),
+                ("envStrength", serde_json::Value::Number(serde_json::Number::from_f64(settings.bloom.environment_bloom_strength as f64).unwrap())),
+                ("envRadius", serde_json::Value::Number(serde_json::Number::from_f64(settings.bloom.environment_bloom_radius as f64).unwrap())),
+                ("envThreshold", serde_json::Value::Number(serde_json::Number::from_f64(settings.bloom.environment_bloom_threshold as f64).unwrap()))
+            ]);
+
+            // Send fisheye settings
+            send_settings("fisheyeSettings", vec![
+                ("enabled", serde_json::Value::Bool(settings.fisheye.enabled)),
+                ("strength", serde_json::Value::Number(serde_json::Number::from_f64(settings.fisheye.strength as f64).unwrap())),
+                ("radius", serde_json::Value::Number(serde_json::Number::from_f64(settings.fisheye.radius as f64).unwrap())),
+                ("focusX", serde_json::Value::Number(serde_json::Number::from_f64(settings.fisheye.focus_x as f64).unwrap())),
+                ("focusY", serde_json::Value::Number(serde_json::Number::from_f64(settings.fisheye.focus_y as f64).unwrap())),
+                ("focusZ", serde_json::Value::Number(serde_json::Number::from_f64(settings.fisheye.focus_z as f64).unwrap()))
+            ]);
+
+            // Send completion
             if let Some(addr) = weak_addr.upgrade() {
-                let completion = json!({
-                    "type": "completion",
-                    "message": "Initial data sent"
-                });
-                if let Ok(completion_str) = serde_json::to_string(&completion) {
-                    addr.do_send(SendText(completion_str));
-                }
+                send_settings("completion", vec![
+                    ("message", serde_json::Value::String("Initial data sent".to_string()))
+                ]);
             }
         };
 
         ctx.spawn(fut.into_actor(self));
     }
 
-    // Handle fisheye distortion settings updates
     fn handle_fisheye_settings(&mut self, ctx: &mut WebsocketContext<WebSocketSession>, enabled: bool, strength: f32, focus_point: [f32; 3], radius: f32) {
         let state = self.state.clone();
         let ctx_addr = ctx.address();
@@ -541,12 +570,12 @@ impl WebSocketSessionHandler for WebSocketSession {
                 // Send updated fisheye settings
                 let response = json!({
                     "type": "fisheye_settings_updated",
-                    "fisheye_enabled": enabled,
-                    "fisheye_strength": strength,
-                    "fisheye_focus_x": focus_point[0],
-                    "fisheye_focus_y": focus_point[1],
-                    "fisheye_focus_z": focus_point[2],
-                    "fisheye_radius": radius
+                    "enabled": enabled,
+                    "strength": strength,
+                    "focusX": focus_point[0],
+                    "focusY": focus_point[1],
+                    "focusZ": focus_point[2],
+                    "radius": radius
                 });
                 if let Ok(response_str) = serde_json::to_string(&response) {
                     ctx_addr.do_send(SendText(response_str));
@@ -562,7 +591,7 @@ impl WebSocketSessionHandler for WebSocketSession {
                 }
             }
 
-            // Send completion as proper JSON
+            // Send completion
             if let Some(addr) = weak_addr.upgrade() {
                 let completion = json!({
                     "type": "completion",
diff --git a/src/lib.rs b/src/lib.rs
index d0559fea..9438bf85 100755
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,3 +1,5 @@
+#![recursion_limit = "1024"]
+
 pub mod app_state;
 pub mod config;
 pub mod handlers;
diff --git a/src/main.rs b/src/main.rs
index 13421520..517dce2a 100755
--- a/src/main.rs
+++ b/src/main.rs
@@ -186,10 +186,10 @@ async fn main() -> std::io::Result<()> {
     let github_service: Arc<dyn GitHubService + Send + Sync> = {
         let settings_read = settings.read().await;
         match RealGitHubService::new(
-            settings_read.github.github_access_token.clone(),
-            settings_read.github.github_owner.clone(),
-            settings_read.github.github_repo.clone(),
-            settings_read.github.github_directory.clone(),
+            settings_read.github.access_token.clone(),
+            settings_read.github.owner.clone(),
+            settings_read.github.repo.clone(),
+            settings_read.github.directory.clone(),
             settings.clone(),
         ) {
             Ok(service) => Arc::new(service),
@@ -205,10 +205,10 @@ async fn main() -> std::io::Result<()> {
     let github_pr_service: Arc<dyn GitHubPRService + Send + Sync> = {
         let settings_read = settings.read().await;
         match RealGitHubPRService::new(
-            settings_read.github.github_access_token.clone(),
-            settings_read.github.github_owner.clone(),
-            settings_read.github.github_repo.clone(),
-            settings_read.github.github_directory.clone(),
+            settings_read.github.access_token.clone(),
+            settings_read.github.owner.clone(),
+            settings_read.github.repo.clone(),
+            settings_read.github.directory.clone(),
         ) {
             Ok(service) => Arc::new(service),
             Err(e) => {
diff --git a/src/services/perplexity_service.rs b/src/services/perplexity_service.rs
index f8a41f9b..7e5e73c5 100755
--- a/src/services/perplexity_service.rs
+++ b/src/services/perplexity_service.rs
@@ -247,7 +247,7 @@ pub trait ApiClient: Send + Sync {
         &self,
         url: &str,
         body: &PerplexityRequest,
-        perplexity_api_key: &str,
+        api_key: &str,
     ) -> Result<String, PerplexityError>;
 }
 
@@ -269,12 +269,12 @@ impl ApiClient for ApiClientImpl {
         &self,
         url: &str,
         body: &PerplexityRequest,
-        perplexity_api_key: &str,
+        api_key: &str,
     ) -> Result<String, PerplexityError> {
         let response = self
             .client
             .post(url)
-            .header("Authorization", format!("Bearer {}", perplexity_api_key))
+            .header("Authorization", format!("Bearer {}", api_key))
             .json(body)
             .send()
             .await?
@@ -303,7 +303,7 @@ pub async fn call_perplexity_api(
     );
 
     let request = PerplexityRequest {
-        model: perplexity_settings.perplexity_model.clone(),
+        model: perplexity_settings.model.clone(),
         messages: vec![
             Message {
                 role: "system".to_string(),
@@ -317,17 +317,17 @@ pub async fn call_perplexity_api(
                 ),
             },
         ],
-        max_tokens: Some(perplexity_settings.perplexity_max_tokens),
-        temperature: Some(perplexity_settings.perplexity_temperature),
-        top_p: Some(perplexity_settings.perplexity_top_p),
+        max_tokens: Some(perplexity_settings.max_tokens),
+        temperature: Some(perplexity_settings.temperature),
+        top_p: Some(perplexity_settings.top_p),
         return_citations: Some(true),
         stream: Some(false),
-        presence_penalty: Some(perplexity_settings.perplexity_presence_penalty),
-        frequency_penalty: Some(perplexity_settings.perplexity_frequency_penalty),
+        presence_penalty: Some(perplexity_settings.presence_penalty),
+        frequency_penalty: Some(perplexity_settings.frequency_penalty),
     };
 
     for attempt in 1..=max_retries {
-        match api_client.post_json(&perplexity_settings.perplexity_api_url, &request, &perplexity_settings.perplexity_api_key).await {
+        match api_client.post_json(&perplexity_settings.api_url, &request, &perplexity_settings.api_key).await {
             Ok(response_text) => {
                 return parse_perplexity_response(&response_text);
             }
diff --git a/src/services/ragflow_service.rs b/src/services/ragflow_service.rs
index d04dd181..9bad14fb 100755
--- a/src/services/ragflow_service.rs
+++ b/src/services/ragflow_service.rs
@@ -43,8 +43,8 @@ impl From<std::io::Error> for RAGFlowError {
 
 pub struct RAGFlowService {
     client: Client,
-    ragflow_api_key: String,
-    ragflow_api_base_url: String,
+    api_key: String,
+    base_url: String,
 }
 
 impl RAGFlowService {
@@ -54,18 +54,18 @@ impl RAGFlowService {
 
         Ok(RAGFlowService {
             client,
-            ragflow_api_key: settings.ragflow.ragflow_api_key.clone(),
-            ragflow_api_base_url: settings.ragflow.ragflow_api_base_url.clone(),
+            api_key: settings.ragflow.api_key.clone(),
+            base_url: settings.ragflow.base_url.clone(),
         })
     }
 
     pub async fn create_conversation(&self, user_id: String) -> Result<String, RAGFlowError> {
         info!("Creating conversation for user: {}", user_id);
-        let url = format!("{}api/new_conversation", self.ragflow_api_base_url);
+        let url = format!("{}api/new_conversation", self.base_url);
         info!("Full URL for create_conversation: {}", url);
         
         let response = self.client.get(&url)
-            .header("Authorization", format!("Bearer {}", self.ragflow_api_key))
+            .header("Authorization", format!("Bearer {}", self.api_key))
             .query(&[("user_id", user_id)])
             .send()
             .await?;
@@ -93,7 +93,7 @@ impl RAGFlowService {
         stream: bool,
     ) -> Result<Pin<Box<dyn Stream<Item = Result<String, RAGFlowError>> + Send + 'static>>, RAGFlowError> {
         info!("Sending message to conversation: {}", conversation_id);
-        let url = format!("{}api/completion", self.ragflow_api_base_url);
+        let url = format!("{}api/completion", self.base_url);
         info!("Full URL for send_message: {}", url);
         
         let mut request_body = json!({
@@ -110,7 +110,7 @@ impl RAGFlowService {
         info!("Request body: {:?}", request_body);
 
         let response = self.client.post(&url)
-            .header("Authorization", format!("Bearer {}", self.ragflow_api_key))
+            .header("Authorization", format!("Bearer {}", self.api_key))
             .header("Content-Type", "application/json")
             .json(&request_body)
             .send()
@@ -148,9 +148,9 @@ impl RAGFlowService {
     }
 
     pub async fn get_conversation_history(&self, conversation_id: String) -> Result<serde_json::Value, RAGFlowError> {
-        let url = format!("{}api/conversation/{}", self.ragflow_api_base_url, conversation_id);
+        let url = format!("{}api/conversation/{}", self.base_url, conversation_id);
         let response = self.client.get(&url)
-            .header("Authorization", format!("Bearer {}", self.ragflow_api_key))
+            .header("Authorization", format!("Bearer {}", self.api_key))
             .send()
             .await?;
 
@@ -170,8 +170,8 @@ impl Clone for RAGFlowService {
     fn clone(&self) -> Self {
         RAGFlowService {
             client: self.client.clone(),
-            ragflow_api_key: self.ragflow_api_key.clone(),
-            ragflow_api_base_url: self.ragflow_api_base_url.clone(),
+            api_key: self.api_key.clone(),
+            base_url: self.base_url.clone(),
         }
     }
 }
diff --git a/src/services/speech_service.rs b/src/services/speech_service.rs
index 9b916001..c9a4a51f 100755
--- a/src/services/speech_service.rs
+++ b/src/services/speech_service.rs
@@ -84,7 +84,7 @@ impl SpeechService {
                             
                             let request = Request::builder()
                                 .uri(url.as_str())
-                                .header("Authorization", format!("Bearer {}", settings.openai.openai_api_key))
+                                .header("Authorization", format!("Bearer {}", settings.openai.api_key))
                                 .header("OpenAI-Beta", "realtime=v1")
                                 .header("Content-Type", "application/json")
                                 .header("User-Agent", "WebXR Graph")
diff --git a/src/utils/websocket_openai.rs b/src/utils/websocket_openai.rs
index 8fd975ba..6ba8058f 100755
--- a/src/utils/websocket_openai.rs
+++ b/src/utils/websocket_openai.rs
@@ -82,8 +82,8 @@ impl OpenAIWebSocket {
         debug!("Starting OpenAI WebSocket connection process");
 
         let settings = self.settings.read().await;
-        let api_key = settings.openai.openai_api_key.clone();
-        let mut url = settings.openai.openai_base_url.clone();
+        let api_key = settings.openai.api_key.clone();
+        let mut url = settings.openai.base_url.clone();
         
         if !url.starts_with("wss://") && !url.starts_with("ws://") {
             url = format!("wss://{}", url.trim_start_matches("https://").trim_start_matches("http://"));
diff --git a/start.sh b/start.sh
new file mode 100644
index 00000000..5fe2196c
--- /dev/null
+++ b/start.sh
@@ -0,0 +1,67 @@
+#!/bin/bash
+set -euo pipefail
+
+# Function to log messages with timestamps
+log() {
+    echo "[$(date "+%Y-%m-%d %H:%M:%S")] $1"
+}
+
+# Function to check if a port is available
+wait_for_port() {
+    local port=$1
+    local retries=60
+    local wait=5
+    while ! timeout 1 bash -c "cat < /dev/null > /dev/tcp/0.0.0.0/$port" 2>/dev/null && [ $retries -gt 0 ]; do
+        log "Waiting for port $port to become available... ($retries retries left)"
+        sleep $wait
+        retries=$((retries-1))
+    done
+    if [ $retries -eq 0 ]; then
+        log "Timeout waiting for port $port"
+        return 1
+    fi
+    log "Port $port is available"
+    return 0
+}
+
+# Function to check RAGFlow connectivity
+check_ragflow() {
+    log "Checking RAGFlow connectivity..."
+    if curl -s -f --max-time 5 "http://ragflow-server/v1/" > /dev/null; then
+        log "RAGFlow server is reachable"
+        return 0
+    else
+        log "Warning: Cannot reach RAGFlow server"
+        return 1
+    fi
+}
+
+# Wait for RAGFlow to be available
+log "Waiting for RAGFlow server..."
+retries=24
+while ! check_ragflow && [ $retries -gt 0 ]; do
+    log "Retrying RAGFlow connection... ($retries attempts left)"
+    retries=$((retries-1))
+    sleep 5
+done
+
+if [ $retries -eq 0 ]; then
+    log "Failed to connect to RAGFlow server after multiple attempts"
+    exit 1
+fi
+
+# Update nginx configuration with environment variables
+envsubst '${DOMAIN}' < /etc/nginx/nginx.conf > /etc/nginx/nginx.conf.tmp && mv /etc/nginx/nginx.conf.tmp /etc/nginx/nginx.conf
+
+# Start nginx
+log "Starting nginx..."
+nginx -t && nginx
+if [ $? -ne 0 ]; then
+    log "Failed to start nginx"
+    exit 1
+fi
+log "nginx started successfully"
+
+# Start the Rust backend
+log "Starting webxr..."
+exec /app/webxr
diff --git a/variables.md b/variables.md
new file mode 100644
index 00000000..d31f2c80
--- /dev/null
+++ b/variables.md
@@ -0,0 +1,97 @@
+| Variable | Initialized In | Updated In |
+| --- | --- | --- |
+| debug_mode | Settings::new() in config.rs | N/A |
+| prompt | Settings::new() in config.rs | N/A |
+| domain | Settings::new() in config.rs | N/A |
+| port | Settings::new() in config.rs | N/A |
+| bind_address | Settings::new() in config.rs | N/A |
+| enable_tls | Settings::new() in config.rs | N/A |
+| min_tls_version | Settings::new() in config.rs | N/A |
+| enable_http2 | Settings::new() in config.rs | N/A |
+| max_request_size | Settings::new() in config.rs | N/A |
+| enable_rate_limiting | Settings::new() in config.rs | N/A |
+| rate_limit_requests | Settings::new() in config.rs | N/A |
+| rate_limit_window | Settings::new() in config.rs | N/A |
+| enable_cors | Settings::new() in config.rs | N/A |
+| allowed_origins | Settings::new() in config.rs | N/A |
+| enable_csrf | Settings::new() in config.rs | N/A |
+| csrf_token_timeout | Settings::new() in config.rs | N/A |
+| session_timeout | Settings::new() in config.rs | N/A |
+| cookie_secure | Settings::new() in config.rs | N/A |
+| cookie_httponly | Settings::new() in config.rs | N/A |
+| cookie_samesite | Settings::new() in config.rs | N/A |
+| enable_security_headers | Settings::new() in config.rs | N/A |
+| enable_request_validation | Settings::new() in config.rs | N/A |
+| enable_audit_logging | Settings::new() in config.rs | N/A |
+| audit_log_path | Settings::new() in config.rs | N/A |
+| github_access_token | Settings::new() in config.rs | N/A |
+| github_owner | Settings::new() in config.rs | N/A |
+| github_repo | Settings::new() in config.rs | N/A |
+| github_directory | Settings::new() in config.rs | N/A |
+| github_api_version | Settings::new() in config.rs | N/A |
+| github_rate_limit_enabled | Settings::new() in config.rs | N/A |
+| ragflow_api_key | Settings::new() in config.rs | N/A |
+| ragflow_api_base_url | Settings::new() in config.rs | N/A |
+| ragflow_timeout | Settings::new() in config.rs | N/A |
+| ragflow_max_retries | Settings::new() in config.rs | N/A |
+| perplexity_api_key | Settings::new() in config.rs | N/A |
+| perplexity_model | Settings::new() in config.rs | N/A |
+| perplexity_api_url | Settings::new() in config.rs | N/A |
+| perplexity_max_tokens | Settings::new() in config.rs | N/A |
+| perplexity_temperature | Settings::new() in config.rs | N/A |
+| perplexity_top_p | Settings::new() in config.rs | N/A |
+| perplexity_presence_penalty | Settings::new() in config.rs | N/A |
+| perplexity_frequency_penalty | Settings::new() in config.rs | N/A |
+| perplexity_timeout | Settings::new() in config.rs | N/A |
+| perplexity_rate_limit | Settings::new() in config.rs | N/A |
+| openai_api_key | Settings::new() in config.rs | N/A |
+| openai_base_url | Settings::new() in config.rs | N/A |
+| openai_timeout | Settings::new() in config.rs | N/A |
+| openai_rate_limit | Settings::new() in config.rs | N/A |
+| max_concurrent_requests | Settings::new() in config.rs | N/A |
+| max_retries | Settings::new() in config.rs | N/A |
+| retry_delay | Settings::new() in config.rs | N/A |
+| api_client_timeout | Settings::new() in config.rs | N/A |
+| max_payload_size | Settings::new() in config.rs | N/A |
+| enable_request_logging | Settings::new() in config.rs | N/A |
+| enable_metrics | Settings::new() in config.rs | N/A |
+| metrics_port | Settings::new() in config.rs | N/A |
+| log_level | Settings::new() in config.rs | N/A |
+| log_format | Settings::new() in config.rs | N/A |
+| node_color | Settings::new() in config.rs | updateFeature in NodeManager |
+| edge_color | Settings::new() in config.rs | updateFeature in NodeManager |
+| hologram_color | Settings::new() in config.rs | N/A |
+| min_node_size | Settings::new() in config.rs | updateFeature in NodeManager |
+| max_node_size | Settings::new() in config.rs | updateFeature in NodeManager |
+| hologram_scale | Settings::new() in config.rs | N/A |
+| hologram_opacity | Settings::new() in config.rs | N/A |
+| edge_opacity | Settings::new() in config.rs | updateFeature in NodeManager |
+| label_font_size | Settings::new() in config.rs | updateFeature in NodeManager |
+| fog_density | Settings::new() in config.rs | N/A |
+| force_directed_iterations | Settings::new() in config.rs | updateFeature in GraphDataManager |
+| force_directed_spring | Settings::new() in config.rs | updateFeature in GraphDataManager |
+| force_directed_repulsion | Settings::new() in config.rs | updateFeature in GraphDataManager |
+| force_directed_attraction | Settings::new() in config.rs | updateFeature in GraphDataManager |
+| force_directed_damping | Settings::new() in config.rs | updateFeature in GraphDataManager |
+| node_bloom_strength | Settings::new() in config.rs | N/A |
+| node_bloom_radius | Settings::new() in config.rs | N/A |
+| node_bloom_threshold | Settings::new() in config.rs | N/A |
+| edge_bloom_strength | Settings::new() in config.rs | N/A |
+| edge_bloom_radius | Settings::new() in config.rs | N/A |
+| edge_bloom_threshold | Settings::new() in config.rs | N/A |
+| environment_bloom_strength | Settings::new() in config.rs | N/A |
+| environment_bloom_radius | Settings::new() in config.rs | N/A |
+| environment_bloom_threshold | Settings::new() in config.rs | N/A |
+| fisheye_enabled | Settings::new() in config.rs | updateFisheyeParams in GPUCompute |
+| fisheye_strength | Settings::new() in config.rs | updateFisheyeParams in GPUCompute |
+| fisheye_radius | Settings::new() in config.rs | updateFisheyeParams in GPUCompute |
+| fisheye_focus_x | Settings::new() in config.rs | updateFisheyeParams in GPUCompute |
+| fisheye_focus_y | Settings::new() in config.rs | updateFisheyeParams in GPUCompute |
+| fisheye_focus_z | Settings::new() in config.rs | updateFisheyeParams in GPUCompute |
+| tunnel_id | Settings::new() in config.rs | N/A |
+
+The variables in the .env_template file are used to override the default values in the Settings struct, which is initialized in the Settings::new() function in the config.rs file. The variables in the settings.toml file are also used to initialize the Settings struct.
+
+The variables in the JavaScript files (app.js, ControlPanel.vue, chatManager.vue, core.js, etc.) are initialized and updated within the corresponding components and services.
+
+The variables in the Rust files (main.rs, app_state.rs, config.rs, handlers/*.rs, services/*.rs, utils/*.rs) are initialized and updated within the corresponding modules and functions.
diff --git a/vite.config.js b/vite.config.js
index e98325e2..136475be 100755
--- a/vite.config.js
+++ b/vite.config.js
@@ -33,7 +33,17 @@ export default defineConfig({
       },
       output: {
         manualChunks: {
-          'vendor-three': ['three'],
+          'vendor-three': [
+            'three',
+            'three/examples/jsm/controls/OrbitControls',
+            'three/examples/jsm/postprocessing/EffectComposer',
+            'three/examples/jsm/postprocessing/RenderPass',
+            'three/examples/jsm/postprocessing/UnrealBloomPass',
+            'three/examples/jsm/postprocessing/ShaderPass',
+            'three/examples/jsm/webxr/XRButton',
+            'three/examples/jsm/webxr/XRControllerModelFactory',
+            'three/examples/jsm/webxr/XRHandModelFactory'
+          ],
           'vendor-vue': ['vue'],
           'vendor-utils': ['pako']
         },
@@ -60,7 +70,8 @@ export default defineConfig({
   resolve: {
     alias: {
       '@': path.resolve(__dirname, 'data/public/js'),
-      'vue': 'vue/dist/vue.runtime.esm-bundler.js'  // Use runtime build
+      'vue': 'vue/dist/vue.runtime.esm-bundler.js',  // Use runtime build
+      'three/addons/': 'three/examples/jsm/'  // Map addons to examples/jsm
     },
     extensions: ['.js', '.json', '.vue']
   },
@@ -69,7 +80,19 @@ export default defineConfig({
     port: 3000
   },
   optimizeDeps: {
-    include: ['three', 'vue', 'pako'],
+    include: [
+      'three', 
+      'vue', 
+      'pako',
+      'three/examples/jsm/controls/OrbitControls',
+      'three/examples/jsm/postprocessing/EffectComposer',
+      'three/examples/jsm/postprocessing/RenderPass',
+      'three/examples/jsm/postprocessing/UnrealBloomPass',
+      'three/examples/jsm/postprocessing/ShaderPass',
+      'three/examples/jsm/webxr/XRButton',
+      'three/examples/jsm/webxr/XRControllerModelFactory',
+      'three/examples/jsm/webxr/XRHandModelFactory'
+    ],
     exclude: []
   }
 });
