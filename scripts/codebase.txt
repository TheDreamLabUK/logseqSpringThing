The following text represents a project with code. The structure of the text consists of sections beginning with ----, followed by a single line containing the file path and file name, and then a variable number of lines containing the file contents. The text representing the project ends when the symbols --END-- are encountered. Any further text beyond --END-- is meant to be interpreted as instructions using the aforementioned project as context.
----
config.rs
use serde::{Deserialize, Serialize};
use config::{ConfigBuilder, ConfigError, Environment, File};
use log::{debug, error};
use std::path::PathBuf;

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "snake_case")]
pub struct Settings {
    // UI/Rendering settings from settings.toml
    #[serde(default)]
    pub animations: AnimationSettings,
    #[serde(default)]
    pub ar: ARSettings,
    #[serde(default)]
    pub audio: AudioSettings,
    #[serde(default)]
    pub bloom: BloomSettings,
    #[serde(default)]
    pub client_debug: DebugSettings,
    #[serde(default)]
    pub default: DefaultSettings,
    #[serde(default)]
    pub edges: EdgeSettings,
    #[serde(default)]
    pub hologram: HologramSettings,
    #[serde(default)]
    pub labels: LabelSettings,
    #[serde(default)]
    pub network: NetworkSettings,
    #[serde(default)]
    pub nodes: NodeSettings,
    #[serde(default)]
    pub physics: PhysicsSettings,
    #[serde(default)]
    pub rendering: RenderingSettings,
    #[serde(default)]
    pub security: SecuritySettings,
    #[serde(default)]
    pub server_debug: DebugSettings,
    #[serde(default)]
    pub websocket: WebSocketSettings,
    
    // Service settings from .env (server-side only)
    #[serde(default)]
    pub github: GitHubSettings,
    #[serde(default)]
    pub ragflow: RagFlowSettings,
    #[serde(default)]
    pub perplexity: PerplexitySettings,
    #[serde(default)]
    pub openai: OpenAISettings,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "snake_case")]
pub struct DebugSettings {
    pub enable_data_debug: bool,
    pub enable_websocket_debug: bool,
    pub enabled: bool,
    pub log_binary_headers: bool,
    pub log_full_json: bool,
}

impl Default for DebugSettings {
    fn default() -> Self {
        Self {
            enable_data_debug: false,
            enable_websocket_debug: false,
            enabled: false,
            log_binary_headers: false,
            log_full_json: false,
        }
    }
}

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "snake_case")]
#[serde(default)]
pub struct DefaultSettings {
    pub api_client_timeout: u32,
    pub enable_metrics: bool,
    pub enable_request_logging: bool,
    pub log_format: String,
    pub log_level: String,
    pub max_concurrent_requests: u32,
    pub max_payload_size: usize,
    pub max_retries: u32,
    pub metrics_port: u16,
    pub retry_delay: u32,
}

impl Default for DefaultSettings {
    fn default() -> Self {
        Self {
            api_client_timeout: 30,
            enable_metrics: true,
            enable_request_logging: true,
            log_format: "json".to_string(),
            log_level: "debug".to_string(),
            max_concurrent_requests: 5,
            max_payload_size: 5242880,
            max_retries: 3,
            metrics_port: 9090,
            retry_delay: 5,
        }
    }
}

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "snake_case")]
#[serde(default)]
pub struct NetworkSettings {
    pub bind_address: String,
    pub domain: String,
    pub enable_http2: bool,
    pub enable_rate_limiting: bool,
    pub enable_tls: bool,
    pub max_request_size: usize,
    pub min_tls_version: String,
    pub port: u16,
    pub rate_limit_requests: u32,
    pub rate_limit_window: u32,
    pub tunnel_id: String,
}

impl Default for NetworkSettings {
    fn default() -> Self {
        Self {
            bind_address: "0.0.0.0".to_string(),
            domain: "localhost".to_string(),
            enable_http2: false,
            enable_rate_limiting: true,
            enable_tls: false,
            max_request_size: 10485760,
            min_tls_version: String::new(),
            port: 3001,
            rate_limit_requests: 100,
            rate_limit_window: 60,
            tunnel_id: "dummy".to_string(),
        }
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GitHubSettings {
    #[serde(default)]
    pub token: String,
    #[serde(default)]
    pub owner: String,
    #[serde(default)]
    pub repo: String,
    #[serde(default)]
    pub base_path: String,
    #[serde(default)]
    pub version: String,
    #[serde(default = "default_true")]
    pub rate_limit: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct RagFlowSettings {
    #[serde(default)]
    pub api_key: String,
    #[serde(default)]
    pub api_base_url: String,
    #[serde(default = "default_timeout")]
    pub timeout: u64,
    #[serde(default = "default_max_retries")]
    pub max_retries: u32,
    #[serde(default)]
    pub chat_id: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct PerplexitySettings {
    #[serde(default)]
    pub api_key: String,
    #[serde(default)]
    pub model: String,
    #[serde(default)]
    pub api_url: String,
    #[serde(default = "default_max_tokens")]
    pub max_tokens: u32,
    #[serde(default = "default_temperature")]
    pub temperature: f32,
    #[serde(default = "default_top_p")]
    pub top_p: f32,
    #[serde(default)]
    pub presence_penalty: f32,
    #[serde(default)]
    pub frequency_penalty: f32,
    #[serde(default = "default_timeout")]
    pub timeout: u64,
    #[serde(default = "default_rate_limit")]
    pub rate_limit: u32,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct OpenAISettings {
    #[serde(default)]
    pub api_key: String,
    #[serde(default)]
    pub base_url: String,
    #[serde(default = "default_timeout")]
    pub timeout: u64,
    #[serde(default = "default_rate_limit")]
    pub rate_limit: u32,
}

// Default value functions
fn default_true() -> bool {
    true
}

fn default_timeout() -> u64 {
    30
}

fn default_max_retries() -> u32 {
    3
}

fn default_max_tokens() -> u32 {
    4096
}

fn default_temperature() -> f32 {
    0.5
}

fn default_top_p() -> f32 {
    0.9
}

fn default_rate_limit() -> u32 {
    100
}

// UI/Rendering settings from settings.toml (using snake_case as they're shared with client)

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "snake_case")]
#[serde(default)]
pub struct AnimationSettings {
    pub enable_motion_blur: bool,
    pub enable_node_animations: bool,
    pub motion_blur_strength: f32,
    pub pulse_enabled: bool,
    pub ripple_enabled: bool,
    pub edge_animation_enabled: bool,
    pub flow_particles_enabled: bool,
}

impl Default for AnimationSettings {
    fn default() -> Self {
        Self {
            enable_motion_blur: false,
            enable_node_animations: false,
            motion_blur_strength: 0.4,
            pulse_enabled: false,
            ripple_enabled: false,
            edge_animation_enabled: false,
            flow_particles_enabled: false,
        }
    }
}

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "snake_case")]
#[serde(default)]
pub struct ARSettings {
    pub drag_threshold: f32,
    pub enable_hand_tracking: bool,
    pub enable_haptics: bool,
    pub enable_light_estimation: bool,
    pub enable_passthrough_portal: bool,
    pub enable_plane_detection: bool,
    pub enable_scene_understanding: bool,
    pub gesture_smoothing: f32,
    pub hand_mesh_color: String,
    pub hand_mesh_enabled: bool,
    pub hand_mesh_opacity: f32,
    pub hand_point_size: f32,
    pub hand_ray_color: String,
    pub hand_ray_enabled: bool,
    pub hand_ray_width: f32,
    pub haptic_intensity: f32,
    pub interaction_radius: f32,
    pub passthrough_brightness: f32,
    pub passthrough_contrast: f32,
    pub passthrough_opacity: f32,
    pub pinch_threshold: f32,
    pub plane_color: String,
    pub plane_opacity: f32,
    pub portal_edge_color: String,
    pub portal_edge_width: f32,
    pub portal_size: f32,
    pub room_scale: bool,
    pub rotation_threshold: f32,
    pub show_plane_overlay: bool,
    pub snap_to_floor: bool,
}

impl Default for ARSettings {
    fn default() -> Self {
        Self {
            drag_threshold: 0.04,
            enable_hand_tracking: true,
            enable_haptics: true,
            enable_light_estimation: true,
            enable_passthrough_portal: false,
            enable_plane_detection: true,
            enable_scene_understanding: true,
            gesture_smoothing: 0.9,
            hand_mesh_color: "#FFD700".to_string(),
            hand_mesh_enabled: true,
            hand_mesh_opacity: 0.3,
            hand_point_size: 0.01,
            hand_ray_color: "#FFD700".to_string(),
            hand_ray_enabled: true,
            hand_ray_width: 0.002,
            haptic_intensity: 0.7,
            interaction_radius: 0.5,
            passthrough_brightness: 1.0,
            passthrough_contrast: 1.0,
            passthrough_opacity: 1.0,
            pinch_threshold: 0.015,
            plane_color: "#4A90E2".to_string(),
            plane_opacity: 0.3,
            portal_edge_color: "#FFD700".to_string(),
            portal_edge_width: 0.02,
            portal_size: 1.0,
            room_scale: true,
            rotation_threshold: 0.08,
            show_plane_overlay: true,
            snap_to_floor: true,
        }
    }
}

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "snake_case")]
#[serde(default)]
pub struct AudioSettings {
    pub enable_spatial_audio: bool,
    pub enable_interaction_sounds: bool,
    pub enable_ambient_sounds: bool,
}

impl Default for AudioSettings {
    fn default() -> Self {
        Self {
            enable_spatial_audio: false,
            enable_interaction_sounds: false,
            enable_ambient_sounds: false,
        }
    }
}

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "snake_case")]
#[serde(default)]
pub struct BloomSettings {
    pub edge_bloom_strength: f32,
    pub enabled: bool,
    pub environment_bloom_strength: f32,
    pub node_bloom_strength: f32,
    pub radius: f32,
    pub strength: f32,
}

impl Default for BloomSettings {
    fn default() -> Self {
        Self {
            edge_bloom_strength: 0.3,
            enabled: false,
            environment_bloom_strength: 0.5,
            node_bloom_strength: 0.2,
            radius: 0.5,
            strength: 1.8,
        }
    }
}

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "snake_case")]
#[serde(default)]
pub struct EdgeSettings {
    pub color: String,
    pub enable_arrows: bool,
    pub opacity: f32,
    pub width_range: Vec<f32>,
}

impl Default for EdgeSettings {
    fn default() -> Self {
        Self {
            color: "#917f18".to_string(),
            enable_arrows: false,
            opacity: 0.6,
            width_range: vec![1.0, 3.0],
        }
    }
}

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "snake_case")]
#[serde(default)]
pub struct LabelSettings {
    pub desktop_font_size: u32,
    pub enable_labels: bool,
    pub text_color: String,
    pub text_rendering_mode: String,
    pub text_resolution: u32,
    pub text_padding: u32,
    pub text_outline_width: f32,
    pub text_outline_color: String,
    pub billboard_mode: String,
}

impl Default for LabelSettings {
    fn default() -> Self {
        Self {
            desktop_font_size: 48,
            enable_labels: true,
            text_color: "#FFFFFF".to_string(),
            text_rendering_mode: "sdf".to_string(),
            text_resolution: 64,
            text_padding: 4,
            text_outline_width: 0.4,
            text_outline_color: "#000000".to_string(),
            billboard_mode: "camera".to_string(),
        }
    }
}

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "snake_case")]
#[serde(default)]
pub struct NodeSettings {
    pub base_color: String,
    pub base_size: f32,
    pub clearcoat: f32,
    pub enable_hover_effect: bool,
    pub enable_instancing: bool,
    pub highlight_color: String,
    pub highlight_duration: u32,
    pub hover_scale: f32,
    pub material_type: String,
    pub metalness: f32,
    pub opacity: f32,
    pub roughness: f32,
    pub size_by_connections: bool,
    pub size_range: Vec<f32>,
    pub use_metadata_size: bool,
    pub use_metadata_shape: bool,
    pub use_metadata_color: bool,
    pub shape_age_ranges: Vec<u32>,
    pub hyperlink_color_min: String,
    pub hyperlink_color_max: String,
}

impl Default for NodeSettings {
    fn default() -> Self {
        Self {
            base_color: "#c3ab6f".to_string(),
            base_size: 1.0,
            clearcoat: 1.0,
            enable_hover_effect: false,
            enable_instancing: false,
            highlight_color: "#822626".to_string(),
            highlight_duration: 300,
            hover_scale: 1.2,
            material_type: "basic".to_string(),
            metalness: 0.3,
            opacity: 0.4,
            roughness: 0.35,
            size_by_connections: true,
            size_range: vec![1.0, 5.0],
            use_metadata_size: true,
            use_metadata_shape: true,
            use_metadata_color: true,
            shape_age_ranges: vec![7, 30, 90, 365],
            hyperlink_color_min: "#c3ab6f".to_string(),
            hyperlink_color_max: "#822626".to_string(),
        }
    }
}

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "snake_case")]
#[serde(default)]
pub struct PhysicsSettings {
    pub attraction_strength: f32,
    pub bounds_size: f32,
    pub collision_radius: f32,
    pub damping: f32,
    pub enable_bounds: bool,
    pub enabled: bool,
    pub iterations: u32,
    pub max_velocity: f32,
    pub repulsion_strength: f32,
    pub spring_strength: f32,
}

impl Default for PhysicsSettings {
    fn default() -> Self {
        Self {
            attraction_strength: 0.015,
            bounds_size: 12.0,
            collision_radius: 0.25,
            damping: 0.88,
            enable_bounds: true,
            enabled: false,
            iterations: 500,
            max_velocity: 2.5,
            repulsion_strength: 1500.0,
            spring_strength: 0.018,
        }
    }
}

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "snake_case")]
#[serde(default)]
pub struct RenderingSettings {
    pub ambient_light_intensity: f32,
    pub background_color: String,
    pub directional_light_intensity: f32,
    pub enable_ambient_occlusion: bool,
    pub enable_antialiasing: bool,
    pub enable_shadows: bool,
    pub environment_intensity: f32,
}

impl Default for RenderingSettings {
    fn default() -> Self {
        Self {
            ambient_light_intensity: 0.7,
            background_color: "#000000".to_string(),
            directional_light_intensity: 1.0,
            enable_ambient_occlusion: false,
            enable_antialiasing: true,
            enable_shadows: false,
            environment_intensity: 1.2,
        }
    }
}

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "snake_case")]
#[serde(default)]
pub struct SecuritySettings {
    pub allowed_origins: Vec<String>,
    pub audit_log_path: String,
    pub cookie_httponly: bool,
    pub cookie_samesite: String,
    pub cookie_secure: bool,
    pub csrf_token_timeout: u32,
    pub enable_audit_logging: bool,
    pub enable_request_validation: bool,
    pub session_timeout: u32,
}

impl Default for SecuritySettings {
    fn default() -> Self {
        Self {
            allowed_origins: Vec::new(),
            audit_log_path: "/app/logs/audit.log".to_string(),
            cookie_httponly: true,
            cookie_samesite: "Strict".to_string(),
            cookie_secure: true,
            csrf_token_timeout: 3600,
            enable_audit_logging: true,
            enable_request_validation: true,
            session_timeout: 3600,
        }
    }
}

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "snake_case")]
#[serde(default)]
pub struct HologramSettings {
    pub xr_quality: String,
    pub desktop_quality: String,
    pub ring_count: u32,
    pub ring_color: String,
    pub ring_opacity: f32,
    pub ring_sizes: Vec<f32>,
    pub ring_rotation_speed: f32,
    pub enable_buckminster: bool,
    pub buckminster_scale: f32,
    pub buckminster_opacity: f32,
    pub enable_geodesic: bool,
    pub geodesic_scale: f32,
    pub geodesic_opacity: f32,
    pub enable_triangle_sphere: bool,
    pub triangle_sphere_scale: f32,
    pub triangle_sphere_opacity: f32,
    pub global_rotation_speed: f32,
}

impl Default for HologramSettings {
    fn default() -> Self {
        Self {
            xr_quality: "medium".to_string(),
            desktop_quality: "high".to_string(),
            ring_count: 3,
            ring_color: "#00FFFF".to_string(),
            ring_opacity: 0.5,
            ring_sizes: vec![1.0, 1.5, 2.0],
            ring_rotation_speed: 0.1,
            enable_buckminster: true,
            buckminster_scale: 1.0,
            buckminster_opacity: 0.3,
            enable_geodesic: true,
            geodesic_scale: 1.2,
            geodesic_opacity: 0.4,
            enable_triangle_sphere: true,
            triangle_sphere_scale: 1.1,
            triangle_sphere_opacity: 0.35,
            global_rotation_speed: 0.05,
        }
    }
}

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "snake_case")]
#[serde(default)]
pub struct WebSocketSettings {
    pub binary_chunk_size: usize,
    pub compression_enabled: bool,
    pub compression_threshold: usize,
    pub heartbeat_interval: u64,
    pub heartbeat_timeout: u64,
    pub max_connections: usize,
    pub max_message_size: usize,
    pub reconnect_attempts: u32,
    pub reconnect_delay: u64,
    pub update_rate: u32,
}

impl Default for WebSocketSettings {
    fn default() -> Self {
        Self {
            binary_chunk_size: 65536,
            compression_enabled: true,
            compression_threshold: 1024,
            heartbeat_interval: 15000,
            heartbeat_timeout: 60000,
            max_connections: 1000,
            max_message_size: 100485760,
            reconnect_attempts: 3,
            reconnect_delay: 5000,
            update_rate: 90,
        }
    }
}

impl Settings {
    pub fn new() -> Result<Self, ConfigError> {
        debug!("Initializing settings");
        
        // Load .env file first
        dotenvy::dotenv().ok();
        
        // Use environment variable or default to /app/settings.toml
        let settings_path = std::env::var("SETTINGS_FILE_PATH")
            .map(PathBuf::from)
            .unwrap_or_else(|_| PathBuf::from("/app/settings.toml"));
        
        debug!("Loading settings from: {:?}", settings_path);
        
        let builder = ConfigBuilder::<config::builder::DefaultState>::default();
        let config = builder
            .add_source(File::from(settings_path))
            .add_source(
                Environment::default()
                    .separator("_")
                    .try_parsing(true)
            )
            .build()?;

        debug!("Deserializing settings");
        let mut settings: Settings = match config.try_deserialize() {
            Ok(s) => {
                debug!("Successfully deserialized settings");
                s
            },
            Err(e) => {
                error!("Failed to deserialize settings: {}", e);
                return Err(e);
            }
        };
        
        debug!("Checking for environment variables");
        
        // Network settings from environment variables
        if let Ok(domain) = std::env::var("DOMAIN") {
            settings.network.domain = domain;
        }
        if let Ok(port) = std::env::var("PORT") {
            settings.network.port = port.parse().unwrap_or(4000);
        }
        if let Ok(bind_address) = std::env::var("BIND_ADDRESS") {
            settings.network.bind_address = bind_address;
        }
        if let Ok(tunnel_id) = std::env::var("TUNNEL_ID") {
            settings.network.tunnel_id = tunnel_id;
        }
        if let Ok(enable_http2) = std::env::var("HTTP2_ENABLED") {
            settings.network.enable_http2 = enable_http2.parse().unwrap_or(true);
        }

        // GitHub settings from environment variables
        if let Ok(token) = std::env::var("GITHUB_TOKEN") {
            settings.github.token = token;
        }
        if let Ok(owner) = std::env::var("GITHUB_OWNER") {
            settings.github.owner = owner;
        }
        if let Ok(repo) = std::env::var("GITHUB_REPO") {
            settings.github.repo = repo;
        }
        if let Ok(path) = std::env::var("GITHUB_PATH") {
            settings.github.base_path = path;
        }
        if let Ok(version) = std::env::var("GITHUB_VERSION") {
            settings.github.version = version;
        }
        if let Ok(rate_limit) = std::env::var("GITHUB_RATE_LIMIT") {
            settings.github.rate_limit = rate_limit.parse().unwrap_or(true);
        }

        // RAGFlow settings from environment variables
        if let Ok(api_key) = std::env::var("RAGFLOW_API_KEY") {
            settings.ragflow.api_key = api_key;
        }
        if let Ok(base_url) = std::env::var("RAGFLOW_API_BASE_URL") {
            settings.ragflow.api_base_url = base_url;
        }
        if let Ok(timeout) = std::env::var("RAGFLOW_TIMEOUT") {
            settings.ragflow.timeout = timeout.parse().unwrap_or(30);
        }
        if let Ok(max_retries) = std::env::var("RAGFLOW_MAX_RETRIES") {
            settings.ragflow.max_retries = max_retries.parse().unwrap_or(3);
        }
        if let Ok(chat_id) = std::env::var("RAGFLOW_CHAT_ID") {
            settings.ragflow.chat_id = chat_id;
        }

        // Perplexity settings from environment variables
        if let Ok(api_key) = std::env::var("PERPLEXITY_API_KEY") {
            settings.perplexity.api_key = api_key;
        }
        if let Ok(api_url) = std::env::var("PERPLEXITY_API_URL") {
            settings.perplexity.api_url = api_url;
        }
        if let Ok(model) = std::env::var("PERPLEXITY_MODEL") {
            settings.perplexity.model = model;
        }
        if let Ok(max_tokens) = std::env::var("PERPLEXITY_MAX_TOKENS") {
            settings.perplexity.max_tokens = max_tokens.parse().unwrap_or(4096);
        }
        if let Ok(temperature) = std::env::var("PERPLEXITY_TEMPERATURE") {
            settings.perplexity.temperature = temperature.parse().unwrap_or(0.5);
        }
        if let Ok(top_p) = std::env::var("PERPLEXITY_TOP_P") {
            settings.perplexity.top_p = top_p.parse().unwrap_or(0.9);
        }
        if let Ok(presence_penalty) = std::env::var("PERPLEXITY_PRESENCE_PENALTY") {
            settings.perplexity.presence_penalty = presence_penalty.parse().unwrap_or(0.0);
        }
        if let Ok(frequency_penalty) = std::env::var("PERPLEXITY_FREQUENCY_PENALTY") {
            settings.perplexity.frequency_penalty = frequency_penalty.parse().unwrap_or(1.0);
        }
        if let Ok(timeout) = std::env::var("PERPLEXITY_TIMEOUT") {
            settings.perplexity.timeout = timeout.parse().unwrap_or(30);
        }
        if let Ok(rate_limit) = std::env::var("PERPLEXITY_RATE_LIMIT") {
            settings.perplexity.rate_limit = rate_limit.parse().unwrap_or(100);
        }

        // OpenAI settings from environment variables
        if let Ok(api_key) = std::env::var("OPENAI_API_KEY") {
            settings.openai.api_key = api_key;
        }
        if let Ok(base_url) = std::env::var("OPENAI_BASE_URL") {
            settings.openai.base_url = base_url;
        }
        if let Ok(timeout) = std::env::var("OPENAI_TIMEOUT") {
            settings.openai.timeout = timeout.parse().unwrap_or(30);
        }
        if let Ok(rate_limit) = std::env::var("OPENAI_RATE_LIMIT") {
            settings.openai.rate_limit = rate_limit.parse().unwrap_or(100);
        }

        debug!("Successfully loaded settings");
        Ok(settings)
    }

    pub fn from_env() -> Result<Self, ConfigError> {
        let builder = ConfigBuilder::<config::builder::DefaultState>::default();
        let config = builder
            .add_source(
                Environment::default()
                    .separator("_")
                    .try_parsing(true)
            )
            .build()?;

        config.try_deserialize()
    }
}

impl Default for Settings {
    fn default() -> Self {
        Self {
            animations: AnimationSettings::default(),
            ar: ARSettings::default(),
            audio: AudioSettings::default(),
            bloom: BloomSettings::default(),
            client_debug: DebugSettings::default(),
            default: DefaultSettings::default(),
            edges: EdgeSettings::default(),
            hologram: HologramSettings::default(),
            labels: LabelSettings::default(),
            nodes: NodeSettings::default(),
            physics: PhysicsSettings::default(),
            rendering: RenderingSettings::default(),
            security: SecuritySettings::default(),
            server_debug: DebugSettings::default(),
            websocket: WebSocketSettings::default(),
            network: NetworkSettings::default(),
            github: GitHubSettings::default(),
            ragflow: RagFlowSettings::default(),
            perplexity: PerplexitySettings::default(),
            openai: OpenAISettings::default(),
        }
    }
}

----
main.rs
use crate::{
    config::Settings,
    handlers::{
        file_handler,
        graph_handler,
        settings,
        socket_flow_handler::{self, socket_flow_handler},
    },
    services::file_service::FileService,
    app_state::AppState,
};

use actix_web::{web, App, HttpServer, middleware};
use actix_cors::Cors;
use actix_files::Files;
use std::sync::Arc;
use tokio::sync::RwLock;
use dotenvy::dotenv;

// Handler configuration functions
fn configure_file_handler(cfg: &mut web::ServiceConfig) {
    cfg.service(web::resource("/fetch").to(file_handler::fetch_and_process_files))
       .service(web::resource("/content/{file_name}").to(file_handler::get_file_content))
       .service(web::resource("/refresh").to(file_handler::refresh_graph))
       .service(web::resource("/update").to(file_handler::update_graph));
}

fn configure_graph_handler(cfg: &mut web::ServiceConfig) {
    cfg.service(web::resource("/data").to(graph_handler::get_graph_data))
       .service(web::resource("/data/paginated").to(graph_handler::get_paginated_graph_data))
       .service(
           web::resource("/update")
               .route(web::post().to(graph_handler::update_graph))
       );
}

#[actix_web::main]
async fn main() -> std::io::Result<()> {
    dotenv().ok();

    // Load settings first to get the log level
    let settings = match Settings::new() {
        Ok(s) => {
            debug!("Successfully loaded settings: {:?}", s);
            Arc::new(RwLock::new(s))
        },
        Err(e) => {
            eprintln!("Failed to load settings: {:?}", e);
            return Err(std::io::Error::new(std::io::ErrorKind::Other, format!("Failed to initialize settings: {:?}", e)));
        }
    };

    // Create web::Data instances first
    let settings_data = web::Data::new(settings.clone());
    let app_state = web::Data::new(AppState::new());

    // Configure app with services
    HttpServer::new(move || {
        App::new()
            .wrap(Cors::default()
                .allow_any_origin()
                .allow_any_method()
                .allow_any_header()
                .max_age(3600))
            .wrap(middleware::Logger::default())
            .app_data(settings_data.clone())
            .app_data(app_state.clone())
            .service(
                web::scope("/api")
                    .service(web::scope("/files").configure(file_handler::config))
                    .service(web::scope("/graph").configure(graph_handler::config))
                    .service(web::scope("/visualization").configure(settings::config))
            )
            .service(
                web::resource("/wss")
                    .app_data(web::PayloadConfig::new(1 << 25))  // 32MB max payload
                    .route(web::get().to(socket_flow_handler))
            )
            .service(Files::new("/", "static").index_file("index.html"))
    })
    .bind("0.0.0.0:8080")?
    .run()
    .await
}

----
app_state.rs
use std::sync::{Arc, atomic::{AtomicUsize, Ordering}};
use tokio::sync::RwLock;

use crate::config::Settings;
use crate::models::metadata::MetadataStore;
use crate::services::graph_service::GraphService;
use crate::services::file_service::RealGitHubService;
use crate::services::github_service::RealGitHubPRService;
use crate::services::perplexity_service::PerplexityService;
use crate::services::ragflow_service::RAGFlowService;
use crate::utils::gpu_compute::GPUCompute;

#[derive(Clone)]
pub struct AppState {
    pub graph_service: GraphService,
    pub gpu_compute: Option<Arc<RwLock<GPUCompute>>>,
    pub settings: Arc<RwLock<Settings>>,
    pub metadata: Arc<RwLock<MetadataStore>>,
    pub github_service: Arc<RealGitHubService>,
    pub perplexity_service: Option<Arc<PerplexityService>>,
    pub ragflow_service: Option<Arc<RAGFlowService>>,
    pub ragflow_conversation_id: String,
    pub github_pr_service: Arc<RealGitHubPRService>,
    pub active_connections: Arc<AtomicUsize>,
}

impl AppState {
    pub fn new(
        settings: Arc<RwLock<Settings>>,
        github_service: Arc<RealGitHubService>,
        perplexity_service: Option<Arc<PerplexityService>>,
        ragflow_service: Option<Arc<RAGFlowService>>,
        gpu_compute: Option<Arc<RwLock<GPUCompute>>>,
        ragflow_conversation_id: String,
        github_pr_service: Arc<RealGitHubPRService>,
    ) -> Self {
        Self {
            graph_service: GraphService::new(),
            gpu_compute,
            settings,
            metadata: Arc::new(RwLock::new(MetadataStore::new())),
            github_service,
            perplexity_service,
            ragflow_service,
            ragflow_conversation_id,
            github_pr_service,
            active_connections: Arc::new(AtomicUsize::new(0)),
        }
    }

    pub fn increment_connections(&self) -> usize {
        self.active_connections.fetch_add(1, Ordering::SeqCst)
    }

    pub fn decrement_connections(&self) -> usize {
        self.active_connections.fetch_sub(1, Ordering::SeqCst)
    }
}

----
generate_audio.py
import sys
import io
import wave
import numpy as np
from piper import PiperVoice

def generate_audio_stream(text):
    try:
        voice = PiperVoice.load("/app/piper/en_GB-alan-medium.onnx")
        audio = voice.synthesize(text)
        
        # Convert audio to WAV format
        with io.BytesIO() as wav_io:
            with wave.open(wav_io, 'wb') as wav_file:
                wav_file.setnchannels(1)  # mono
                wav_file.setsampwidth(2)  # 16-bit
                wav_file.setframerate(voice.config.sample_rate)
                wav_file.writeframes(audio.tobytes())
            
            wav_data = wav_io.getvalue()
        
        # Verify WAV header
        if wav_data[:4] != b'RIFF' or wav_data[8:12] != b'WAVE':
            raise ValueError("Invalid WAV header")
        
        # Write WAV data to stdout
        sys.stdout.buffer.write(wav_data)
        sys.stdout.buffer.flush()
    except Exception as e:
        print(f"Error generating audio: {str(e)}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    input_text = sys.stdin.read().strip()
    if input_text:
        generate_audio_stream(input_text)
    else:
        print("No input received", file=sys.stderr)
        sys.exit(1)

----
lib.rs
#![recursion_limit = "256"]

extern crate log;

// Declare modules
pub mod utils;
pub mod app_state;
pub mod config;
pub mod handlers;
pub mod models;
pub mod services;
pub mod types;

// Re-export debug settings
pub use crate::utils::debug_logging::init_debug_settings;

// Re-export GPU compute
pub use crate::utils::gpu_compute::GPUCompute;

// Re-export socket flow handler
pub use crate::handlers::socket_flow_handler::{SocketFlowServer, socket_flow_handler};

// Public re-exports
pub use app_state::AppState;
pub use config::Settings;
pub use models::position_update::PositionUpdate;
pub use models::metadata::MetadataStore;
pub use models::simulation_params::SimulationParams;
pub use models::graph::GraphData;
pub use services::graph_service::GraphService;
pub use services::file_service::{RealGitHubService, FileService};
pub use services::perplexity_service::PerplexityService;
pub use services::ragflow_service::{RAGFlowService, RAGFlowError};
pub use services::github_service::RealGitHubPRService;

// Re-export handlers
pub use handlers::file_handler;
pub use handlers::graph_handler;
pub use handlers::perplexity_handler;
pub use handlers::ragflow_handler;
pub use handlers::visualization_handler;

----
generate_welcome_audio.py
import sys
from piper import PiperVoice

def generate_welcome_audio():
    voice = PiperVoice.load("/app/piper/en_GB-alan-medium.onnx")
    text = "Welcome to the WebXR Graph Visualization. Your virtual environment is now ready."
    audio = voice.synthesize(text)
    sys.stdout.buffer.write(audio)

if __name__ == "__main__":
    generate_welcome_audio()
----
utils/compute_forces.cu
// Node data structure matching Rust's NodeData
struct NodeData {
    float position[3];    // 12 bytes
    float velocity[3];    // 12 bytes
    unsigned char mass;   // 1 byte
    unsigned char flags;  // 1 byte
    unsigned char padding[2]; // 2 bytes padding
};

extern "C" __global__ void compute_forces(
    NodeData* nodes,
    int num_nodes,
    float spring_strength,
    float repulsion,
    float damping
) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx >= num_nodes) return;

    // Load node data
    NodeData node_i = nodes[idx];
    float3 pos_i = make_float3(
        node_i.position[0],
        node_i.position[1],
        node_i.position[2]
    );
    float mass_i = (float)node_i.mass;
    float3 force = make_float3(0.0f, 0.0f, 0.0f);

    __shared__ float3 shared_positions[256];
    __shared__ float shared_masses[256];

    // Process nodes in tiles to maximize shared memory usage
    for (int tile = 0; tile < (num_nodes + blockDim.x - 1) / blockDim.x; tile++) {
        int shared_idx = tile * blockDim.x + threadIdx.x;
        
        // Load tile into shared memory
        if (shared_idx < num_nodes) {
            NodeData shared_node = nodes[shared_idx];
            shared_positions[threadIdx.x] = make_float3(
                shared_node.position[0],
                shared_node.position[1],
                shared_node.position[2]
            );
            shared_masses[threadIdx.x] = (float)shared_node.mass;
        }
        __syncthreads();

        // Compute forces between current node and all nodes in tile
        #pragma unroll 8
        for (int j = 0; j < blockDim.x && tile * blockDim.x + j < num_nodes; j++) {
            if (tile * blockDim.x + j == idx) continue;

            // Skip nodes with inactive flag
            if ((nodes[tile * blockDim.x + j].flags & 0x1) == 0) continue;

            float3 pos_j = shared_positions[j];
            float mass_j = shared_masses[j];
            
            // Calculate displacement vector
            float3 diff = make_float3(
                pos_i.x - pos_j.x,
                pos_i.y - pos_j.y,
                pos_i.z - pos_j.z
            );

            // Calculate force magnitude with minimum distance clamp
            float dist = fmaxf(sqrtf(diff.x * diff.x + diff.y * diff.y + diff.z * diff.z), 0.0001f);
            float force_mag = repulsion * mass_i * mass_j / (dist * dist);

            // Add spring force if nodes are connected (check flags)
            if ((node_i.flags & 0x2) && (nodes[tile * blockDim.x + j].flags & 0x2)) {
                float spring_force = spring_strength * (dist - 1.0f); // Natural length = 1.0
                force_mag += spring_force;
            }

            // Accumulate force
            force.x += force_mag * diff.x / dist;
            force.y += force_mag * diff.y / dist;
            force.z += force_mag * diff.z / dist;
        }
        __syncthreads();
    }

    // Load current velocity
    float3 vel = make_float3(
        node_i.velocity[0],
        node_i.velocity[1],
        node_i.velocity[2]
    );

    // Update velocity with damping
    vel.x = (vel.x + force.x) * damping;
    vel.y = (vel.y + force.y) * damping;
    vel.z = (vel.z + force.z) * damping;

    // Update position
    pos_i.x += vel.x;
    pos_i.y += vel.y;
    pos_i.z += vel.z;

    // Store updated position and velocity
    nodes[idx].position[0] = pos_i.x;
    nodes[idx].position[1] = pos_i.y;
    nodes[idx].position[2] = pos_i.z;
    nodes[idx].velocity[0] = vel.x;
    nodes[idx].velocity[1] = vel.y;
    nodes[idx].velocity[2] = vel.z;

    // Flags and mass remain unchanged
}

----
utils/audio_processor.rs
use serde_json::Value;
use base64::{Engine as _, engine::general_purpose::STANDARD as BASE64};
use std::sync::Arc;
use tokio::sync::RwLock;
use crate::config::Settings;
use crate::{log_error, log_warn, log_data};

pub struct AudioProcessor {
    settings: Arc<RwLock<Settings>>,
}

impl AudioProcessor {
    pub fn new(settings: Arc<RwLock<Settings>>) -> Self {
        Self { settings }
    }

    pub async fn process_json_response(&self, response_data: &[u8]) -> Result<(String, Vec<u8>), String> {
        let _settings = self.settings.read().await;
        
        // Parse the JSON response
        let json_response: Value = serde_json::from_slice(response_data)
            .map_err(|e| format!("Failed to parse JSON response: {}", e))?;
        
        // Log the entire JSON response if data debug is enabled
        log_data!("Received JSON response: {}", 
            serde_json::to_string_pretty(&json_response).unwrap_or_else(|_| "Unable to prettify JSON".to_string())
        );
        
        // Check if the response contains an error message
        if let Some(error_msg) = json_response["error"].as_str() {
            log_error!("Error in JSON response: {}", error_msg);
            return Err(format!("Error in JSON response: {}", error_msg));
        }

        // Extract the text answer with better error handling
        let answer = json_response["data"]["answer"]
            .as_str()
            .or_else(|| json_response["answer"].as_str())
            .ok_or_else(|| {
                log_error!("Text answer not found in JSON response");
                "Text answer not found in JSON response".to_string()
            })?
            .to_string();

        // Try to extract the audio data from different possible locations with detailed logging
        let audio_data = if let Some(audio) = json_response["data"]["audio"].as_str() {
            log_data!("Found audio data in data.audio");
            BASE64.decode(audio).map_err(|e| format!("Failed to decode base64 audio data from data.audio: {}", e))?
        } else if let Some(audio) = json_response["audio"].as_str() {
            log_data!("Found audio data in root.audio");
            BASE64.decode(audio).map_err(|e| format!("Failed to decode base64 audio data from root.audio: {}", e))?
        } else {
            // Log available paths in the JSON for debugging
            log_warn!("Audio data not found in JSON response. Available paths:");
            if let Some(obj) = json_response.as_object() {
                for (key, value) in obj {
                    log_warn!("- {}: {}", key, match value {
                        Value::Null => "null",
                        Value::Bool(_) => "boolean",
                        Value::Number(_) => "number",
                        Value::String(_) => "string",
                        Value::Array(_) => "array",
                        Value::Object(_) => "object",
                    });
                }
            }
            return Err("Audio data not found in JSON response".to_string());
        };
        
        log_data!("Successfully processed audio data: {} bytes", audio_data.len());
        
        // Validate WAV header
        if audio_data.len() >= 44 {
            log_data!("WAV header: {:?}", &audio_data[..44]);
            
            if &audio_data[..4] != b"RIFF" || &audio_data[8..12] != b"WAVE" {
                log_error!("Invalid WAV header detected");
                return Err("Invalid WAV header".to_string());
            }
            
            // Extract and log WAV format information
            let channels = u16::from_le_bytes([audio_data[22], audio_data[23]]);
            let sample_rate = u32::from_le_bytes([audio_data[24], audio_data[25], audio_data[26], audio_data[27]]);
            let bits_per_sample = u16::from_le_bytes([audio_data[34], audio_data[35]]);
            
            log_data!("WAV format: {} channels, {} Hz, {} bits per sample", 
                channels, sample_rate, bits_per_sample);
        } else {
            log_error!("Audio data too short to contain WAV header: {} bytes", audio_data.len());
            return Err("Audio data too short".to_string());
        }
        
        Ok((answer, audio_data))
    }

    pub async fn validate_wav_header(&self, audio_data: &[u8]) -> Result<(), String> {
        if audio_data.len() < 44 {
            return Err("Audio data too short for WAV header".to_string());
        }

        if &audio_data[..4] != b"RIFF" {
            return Err("Missing RIFF header".to_string());
        }

        if &audio_data[8..12] != b"WAVE" {
            return Err("Missing WAVE format".to_string());
        }

        let channels = u16::from_le_bytes([audio_data[22], audio_data[23]]);
        let sample_rate = u32::from_le_bytes([audio_data[24], audio_data[25], audio_data[26], audio_data[27]]);
        let bits_per_sample = u16::from_le_bytes([audio_data[34], audio_data[35]]);

        log_data!("Validated WAV format: {} channels, {} Hz, {} bits per sample",
            channels, sample_rate, bits_per_sample);

        Ok(())
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use serde_json::json;
    use tokio::runtime::Runtime;

    fn create_test_settings() -> Arc<RwLock<Settings>> {
        let settings = Settings {
            debug_mode: false,
            debug: crate::config::DebugSettings {
                enable_websocket_debug: false,
                enable_data_debug: false,
                log_binary_headers: false,
                log_full_json: false,
            },
            // Add other required fields with default values
            ..Default::default()
        };
        Arc::new(RwLock::new(settings))
    }

    #[test]
    fn test_process_json_response_valid() {
        let rt = Runtime::new().unwrap();
        let settings = create_test_settings();
        let processor = AudioProcessor::new(settings);

        let test_wav = vec![
            b'R', b'I', b'F', b'F', // ChunkID
            0x24, 0x00, 0x00, 0x00, // ChunkSize
            b'W', b'A', b'V', b'E', // Format
            b'f', b'm', b't', b' ', // Subchunk1ID
            0x10, 0x00, 0x00, 0x00, // Subchunk1Size
            0x01, 0x00,             // AudioFormat (PCM)
            0x01, 0x00,             // NumChannels (Mono)
            0x44, 0xAC, 0x00, 0x00, // SampleRate (44100)
            0x88, 0x58, 0x01, 0x00, // ByteRate
            0x02, 0x00,             // BlockAlign
            0x10, 0x00,             // BitsPerSample (16)
            b'd', b'a', b't', b'a', // Subchunk2ID
            0x00, 0x00, 0x00, 0x00  // Subchunk2Size
        ];

        let json_data = json!({
            "data": {
                "answer": "Test answer",
                "audio": BASE64.encode(test_wav)
            }
        });

        let result = rt.block_on(processor.process_json_response(
            serde_json::to_vec(&json_data).unwrap().as_slice()
        ));

        assert!(result.is_ok());
        let (answer, audio) = result.unwrap();
        assert_eq!(answer, "Test answer");
        assert_eq!(&audio[..4], b"RIFF");
    }

    #[test]
    fn test_process_json_response_invalid_wav() {
        let rt = Runtime::new().unwrap();
        let settings = create_test_settings();
        let processor = AudioProcessor::new(settings);

        let invalid_wav = vec![0x00; 44]; // Invalid WAV header
        let json_data = json!({
            "data": {
                "answer": "Test answer",
                "audio": BASE64.encode(invalid_wav)
            }
        });

        let result = rt.block_on(processor.process_json_response(
            serde_json::to_vec(&json_data).unwrap().as_slice()
        ));

        assert!(result.is_err());
    }
}

----
utils/force_calculation.wgsl
// Node structure exactly matching Rust NodeData memory layout (28 bytes total)
struct Node {
    position: vec3<f32>,  // 12 bytes - matches THREE.Vector3
    velocity: vec3<f32>,  // 12 bytes - matches THREE.Vector3
    mass: u32,            // 1 byte - quantized mass
    flags: u32,           // 1 byte - node state flags
    padding: vec2<u32>,   // 2 bytes - alignment padding
}

// Edge structure matching Rust GPUEdge layout
struct Edge {
    source: u32,      // 4 bytes
    target_idx: u32,  // 4 bytes (renamed from 'target' as it's a reserved keyword)
    weight: f32,      // 4 bytes
}

struct NodesBuffer {
    nodes: array<Node>,
}

struct EdgesBuffer {
    edges: array<Edge>,
}

// Matches Rust SimulationParams exactly
struct SimulationParams {
    iterations: u32,           // Range: 1-500
    spring_strength: f32,      // Range: 0.001-1.0
    repulsion_strength: f32,   // Range: 1.0-10000.0
    attraction_strength: f32,  // Range: 0.001-1.0
    damping: f32,             // Range: 0.5-0.95
    is_initial_layout: u32,   // bool converted to u32
    time_step: f32,           // Range: 0.1-1.0
    padding: u32,             // Explicit padding for alignment
}

@group(0) @binding(0) var<storage, read_write> nodes_buffer: NodesBuffer;
@group(0) @binding(1) var<storage, read> edges_buffer: EdgesBuffer;
@group(0) @binding(2) var<uniform> params: SimulationParams;

// Physics constants - aligned with settings.toml
const WORKGROUP_SIZE: u32 = 256;
const MAX_FORCE: f32 = 100.0;          // Increased for stronger forces
const MIN_DISTANCE: f32 = 5.0;         // Increased minimum distance
const CENTER_RADIUS: f32 = 250.0;      // Matches target_radius from settings
const MAX_VELOCITY: f32 = 20.0;        // Increased for faster movement
const NATURAL_LENGTH: f32 = 120.0;     // Matches natural_length from settings
const BOUNDARY_LIMIT: f32 = 600.0;     // Matches boundary_limit from settings

// Validation functions
fn is_valid_float(x: f32) -> bool {
    return x == x && abs(x) < 1e10;  // Check for NaN and infinity
}

fn is_valid_float3(v: vec3<f32>) -> bool {
    return is_valid_float(v.x) && is_valid_float(v.y) && is_valid_float(v.z);
}

fn clamp_force(force: vec3<f32>) -> vec3<f32> {
    let magnitude = length(force);
    if (magnitude > MAX_FORCE) {
        return (force / magnitude) * MAX_FORCE;
    }
    return force;
}

// Convert quantized mass (0-255 in lower byte) to float (0.0-2.0)
fn decode_mass(mass_packed: u32) -> f32 {
    return f32(mass_packed & 0xFFu) / 127.5;
}

// Get node position as vec3
fn get_position(node: Node) -> vec3<f32> {
    return node.position;
}

// Get node velocity as vec3
fn get_velocity(node: Node) -> vec3<f32> {
    return node.velocity;
}

// Calculate spring force between connected nodes
fn calculate_spring_force(pos1: vec3<f32>, pos2: vec3<f32>, mass1: f32, mass2: f32, weight: f32) -> vec3<f32> {
    let displacement = pos2 - pos1;
    let distance = length(displacement);
    
    if (distance < MIN_DISTANCE) {
        return normalize(displacement) * MAX_FORCE;
    }
    
    // Combined spring and attraction forces with weight scaling
    let spring_force = params.spring_strength * weight * (distance - NATURAL_LENGTH);
    let attraction_force = params.attraction_strength * weight * distance;
    
    let total_force = normalize(displacement) * (spring_force + attraction_force);
    return clamp_force(total_force);
}

// Calculate repulsion force between nodes
fn calculate_repulsion_force(pos1: vec3<f32>, pos2: vec3<f32>, mass1: f32, mass2: f32) -> vec3<f32> {
    let displacement = pos2 - pos1;
    let distance_sq = dot(displacement, displacement);
    
    if (distance_sq < MIN_DISTANCE * MIN_DISTANCE) {
        return normalize(displacement) * -MAX_FORCE;
    }
    
    // Coulomb-like repulsion scaled by masses and adjusted for graph size
    let force_magnitude = -params.repulsion_strength * mass1 * mass2 / max(distance_sq, 0.1);
    let force = normalize(displacement) * min(abs(force_magnitude), MAX_FORCE) * sign(force_magnitude);
    return clamp_force(force);
}

// Calculate center gravity force
fn calculate_center_force(position: vec3<f32>) -> vec3<f32> {
    let to_center = -position;
    let distance = length(to_center);
    
    if (distance > CENTER_RADIUS) {
        // Stronger centering force during initial layout
        let center_strength = select(0.1, 0.2, params.is_initial_layout == 1u);
        let force = normalize(to_center) * center_strength * (distance - CENTER_RADIUS);
        return clamp_force(force);
    }
    return vec3<f32>(0.0);
}

@compute @workgroup_size(WORKGROUP_SIZE)
fn compute_main(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let node_id = global_id.x;
    let n_nodes = arrayLength(&nodes_buffer.nodes);

    if (node_id >= n_nodes) {
        return;
    }

    var node = nodes_buffer.nodes[node_id];
    
    // Validate input node data
    if (!is_valid_float3(get_position(node)) || !is_valid_float3(get_velocity(node))) {
        // Reset invalid node to origin
        node.position = vec3<f32>(0.0);
        node.velocity = vec3<f32>(0.0);
        nodes_buffer.nodes[node_id] = node;
        return;
    }

    var total_force = vec3<f32>(0.0);
    let node_mass = decode_mass(node.mass);
    let node_pos = get_position(node);

    // Calculate forces from edges (bi-directional)
    let n_edges = arrayLength(&edges_buffer.edges);
    for (var i = 0u; i < n_edges; i = i + 1u) {
        let edge = edges_buffer.edges[i];
        if (edge.source == node_id || edge.target_idx == node_id) {
            let other_id = select(edge.source, edge.target_idx, edge.source == node_id);
            let other_node = nodes_buffer.nodes[other_id];
            
            // Validate other node
            if (!is_valid_float3(get_position(other_node))) {
                continue;
            }
            
            let other_mass = decode_mass(other_node.mass);
            let other_pos = get_position(other_node);
            
            // Accumulate spring force
            let spring_force = calculate_spring_force(
                node_pos,
                other_pos,
                node_mass,
                other_mass,
                edge.weight
            );
            total_force += spring_force;
        }
    }

    // Calculate repulsion forces with all other nodes
    for (var i = 0u; i < n_nodes; i = i + 1u) {
        if (i != node_id) {
            let other_node = nodes_buffer.nodes[i];
            
            // Validate other node
            if (!is_valid_float3(get_position(other_node))) {
                continue;
            }
            
            let other_mass = decode_mass(other_node.mass);
            let other_pos = get_position(other_node);
            
            let repulsion_force = calculate_repulsion_force(
                node_pos,
                other_pos,
                node_mass,
                other_mass
            );
            total_force += repulsion_force;
        }
    }

    // Add center gravity force
    let center_force = calculate_center_force(node_pos);
    total_force += center_force;

    // Scale forces based on layout phase
    let force_scale = select(1.0, 2.0, params.is_initial_layout == 1u);
    total_force *= force_scale;
    total_force = clamp_force(total_force);

    // Update velocity with damping
    var velocity = get_velocity(node);
    velocity = (velocity + total_force * params.time_step) * params.damping;

    // Apply velocity limits
    let speed = length(velocity);
    if (speed > MAX_VELOCITY) {
        velocity = (velocity / speed) * MAX_VELOCITY;
    }

    // Update position
    let new_pos = node_pos + velocity * params.time_step;

    // Apply position bounds
    let bounded_pos = clamp(
        new_pos,
        vec3<f32>(-BOUNDARY_LIMIT),
        vec3<f32>(BOUNDARY_LIMIT)
    );

    // Validate final values
    if (!is_valid_float3(bounded_pos) || !is_valid_float3(velocity)) {
        // Reset to origin if invalid
        node.position = vec3<f32>(0.0);
        node.velocity = vec3<f32>(0.0);
    } else {
        // Update node with new values
        node.position = bounded_pos;
        node.velocity = velocity;
    }

    nodes_buffer.nodes[node_id] = node;
}

----
utils/update_positions.wgsl
struct PositionUpdate {
    position: vec3<f32>,  // 12 bytes (x, y, z)
    velocity: vec3<f32>,  // 12 bytes (vx, vy, vz)
}

@group(0) @binding(0) var<storage, read_write> position_updates: array<PositionUpdate>;

// Constants
const MAX_VELOCITY: f32 = 100.0;
const MAX_POSITION: f32 = 1000.0;  // Maximum distance from origin

// Utility functions
fn is_valid_float(x: f32) -> bool {
    return x == x && abs(x) < 1e10;  // Check for NaN and infinity
}

fn is_valid_float3(v: vec3<f32>) -> bool {
    return is_valid_float(v.x) && is_valid_float(v.y) && is_valid_float(v.z);
}

fn clamp_position(pos: vec3<f32>) -> vec3<f32> {
    return clamp(pos, vec3<f32>(-MAX_POSITION), vec3<f32>(MAX_POSITION));
}

fn clamp_velocity(vel: vec3<f32>) -> vec3<f32> {
    let speed = length(vel);
    if (speed > MAX_VELOCITY) {
        return (vel / speed) * MAX_VELOCITY;
    }
    return vel;
}

@compute @workgroup_size(256)
fn update_positions(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let node_id = global_id.x;
    let n_nodes = arrayLength(&position_updates);

    if (node_id >= n_nodes) { return; }

    var update = position_updates[node_id];
    
    // Validate and clamp position
    if (!is_valid_float3(update.position)) {
        update.position = vec3<f32>(0.0);
    } else {
        update.position = clamp_position(update.position);
    }
    
    // Validate and clamp velocity
    if (!is_valid_float3(update.velocity)) {
        update.velocity = vec3<f32>(0.0);
    } else {
        update.velocity = clamp_velocity(update.velocity);
    }
    
    position_updates[node_id] = update;
}

----
utils/socket_flow_messages.rs
use serde::{Deserialize, Serialize};
use bytemuck::{Pod, Zeroable};
use std::collections::HashMap;
use cudarc::driver::{DeviceRepr, ValidAsZeroBits};

#[repr(C)]
#[derive(Debug, Clone, Copy, Pod, Zeroable, Serialize, Deserialize)]
pub struct NodeData {
    pub position: [f32; 3],  // 12 bytes - matches THREE.Vector3
    pub velocity: [f32; 3],  // 12 bytes - matches THREE.Vector3
    pub mass: u8,            // 1 byte - quantized mass
    pub flags: u8,           // 1 byte - node state flags
    pub padding: [u8; 2],    // 2 bytes - alignment padding
}

// Implement DeviceRepr for NodeData
unsafe impl DeviceRepr for NodeData {}

// Implement ValidAsZeroBits for NodeData
unsafe impl ValidAsZeroBits for NodeData {}

#[derive(Debug, Serialize, Deserialize)]
pub struct PingMessage {
    pub type_: String,
    pub timestamp: u64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct PongMessage {
    pub type_: String,
    pub timestamp: u64,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "camelCase")]
pub struct Node {
    // Core data
    pub id: String,
    pub label: String,
    pub data: NodeData,

    // Metadata
    #[serde(skip_serializing_if = "HashMap::is_empty")]
    pub metadata: HashMap<String, String>,
    #[serde(skip)]
    pub file_size: u64,

    // Rendering properties
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub node_type: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub size: Option<f32>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub color: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub weight: Option<f32>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub user_data: Option<HashMap<String, String>>,
}

impl Node {
    pub fn new(id: String) -> Self {
        Self {
            id: id.clone(),
            label: id,
            data: NodeData {
                position: [0.0; 3],
                velocity: [0.0; 3],
                mass: 127, // Default mass
                flags: 0,
                padding: [0; 2],
            },
            metadata: HashMap::new(),
            file_size: 0,
            node_type: None,
            size: None,
            color: None,
            weight: None,
            group: None,
            user_data: None,
        }
    }

    pub fn update_mass(&mut self) {
        if self.file_size == 0 {
            self.data.mass = 127; // Default mass
            return;
        }
        
        // Scale file size logarithmically to 0-255 range
        let log_size = (self.file_size as f64).log2();
        let max_log = (1024.0 * 1024.0 * 1024.0_f64).log2(); // 1GB
        let normalized = (log_size / max_log).min(1.0);
        self.data.mass = (normalized * 255.0) as u8;
    }

    pub fn update_from_gpu_node(&mut self, gpu_node: &NodeData) {
        self.data = *gpu_node;
    }

    // Convenience getters/setters for x, y, z coordinates
    pub fn x(&self) -> f32 { self.data.position[0] }
    pub fn y(&self) -> f32 { self.data.position[1] }
    pub fn z(&self) -> f32 { self.data.position[2] }
    pub fn vx(&self) -> f32 { self.data.velocity[0] }
    pub fn vy(&self) -> f32 { self.data.velocity[1] }
    pub fn vz(&self) -> f32 { self.data.velocity[2] }
    
    pub fn set_x(&mut self, val: f32) { self.data.position[0] = val; }
    pub fn set_y(&mut self, val: f32) { self.data.position[1] = val; }
    pub fn set_z(&mut self, val: f32) { self.data.position[2] = val; }
    pub fn set_vx(&mut self, val: f32) { self.data.velocity[0] = val; }
    pub fn set_vy(&mut self, val: f32) { self.data.velocity[1] = val; }
    pub fn set_vz(&mut self, val: f32) { self.data.velocity[2] = val; }
}

#[repr(C)]
#[derive(Debug, Clone, Copy, Pod, Zeroable, Serialize, Deserialize)]
pub struct BinaryNodeData {
    pub position: [f32; 3],  // x, y, z
    pub velocity: [f32; 3],  // vx, vy, vz
}

// Implement DeviceRepr for BinaryNodeData
unsafe impl DeviceRepr for BinaryNodeData {}

// Implement ValidAsZeroBits for BinaryNodeData
unsafe impl ValidAsZeroBits for BinaryNodeData {}

impl BinaryNodeData {
    pub fn from_node_data(data: &NodeData) -> Self {
        Self {
            position: data.position,
            velocity: data.velocity,
        }
    }
}

#[derive(Debug, Serialize, Deserialize)]
#[serde(tag = "type")]
pub enum Message {
    #[serde(rename = "ping")]
    Ping { timestamp: u64 },
    
    #[serde(rename = "pong")]
    Pong { timestamp: u64 },
}

----
utils/socket_flow_constants.rs
// Node and graph constants
pub const NODE_SIZE: f32 = 1.0;
pub const EDGE_WIDTH: f32 = 0.1;
pub const MIN_DISTANCE: f32 = 2.0;
pub const MAX_DISTANCE: f32 = 10.0;

// WebSocket constants - matching nginx configuration
pub const HEARTBEAT_INTERVAL: u64 = 30; // seconds - matches nginx proxy_connect_timeout
pub const CLIENT_TIMEOUT: u64 = 60; // seconds - double heartbeat interval for safety
pub const MAX_CLIENT_TIMEOUT: u64 = 3600; // seconds - matches nginx proxy_read_timeout
pub const MAX_MESSAGE_SIZE: usize = 100 * 1024 * 1024; // 100MB
pub const BINARY_CHUNK_SIZE: usize = 64 * 1024; // 64KB

// Update rate constants
pub const POSITION_UPDATE_RATE: u32 = 5; // Hz (matching client's MAX_UPDATES_PER_SECOND)
pub const METADATA_UPDATE_RATE: u32 = 1; // Hz

// Binary message constants
pub const NODE_POSITION_SIZE: usize = 24; // 6 f32s (x,y,z,vx,vy,vz) * 4 bytes
pub const BINARY_HEADER_SIZE: usize = 4; // 1 f32 for header

// Compression constants
pub const COMPRESSION_THRESHOLD: usize = 1024; // 1KB
pub const ENABLE_COMPRESSION: bool = true;

----
utils/mod.rs
pub mod audio_processor;
pub mod case_conversion;
pub mod debug_logging;
pub mod gpu_compute;
pub mod socket_flow_constants;
pub mod socket_flow_messages;

----
utils/case_conversion.rs
use regex::Regex;
use lazy_static::lazy_static;

lazy_static! {
    static ref CAMEL_TO_SNAKE: Regex = Regex::new(r"([a-z0-9])([A-Z])").unwrap();
    static ref SNAKE_TO_CAMEL: Regex = Regex::new(r"[_-]([a-z])").unwrap();
    static ref CAMEL_TO_KEBAB: Regex = Regex::new(r"([a-z0-9])([A-Z])").unwrap();
    static ref SNAKE_TO_KEBAB: Regex = Regex::new(r"_").unwrap();
    static ref KEBAB_TO_SNAKE: Regex = Regex::new(r"-").unwrap();
}

pub fn to_snake_case(s: &str) -> String {
    // First convert kebab-case to snake_case
    let s = KEBAB_TO_SNAKE.replace_all(s, "_");
    // Then convert camelCase to snake_case
    CAMEL_TO_SNAKE.replace_all(&s, "${1}_${2}").to_lowercase()
}

pub fn to_camel_case(s: &str) -> String {
    // First convert kebab-case to snake_case
    let s = KEBAB_TO_SNAKE.replace_all(s, "_").to_string();
    
    // Then convert snake_case to camelCase
    let s = SNAKE_TO_CAMEL.replace_all(&s, |caps: &regex::Captures| {
        caps[1].to_uppercase()
    }).to_string();
    
    // Handle the first character
    let mut chars = s.chars();
    match chars.next() {
        None => String::new(),
        Some(first) => first.to_lowercase().collect::<String>() + chars.as_str(),
    }
}

pub fn to_kebab_case(s: &str) -> String {
    // First convert to snake case (handles both camelCase and existing snake_case)
    let snake = to_snake_case(s);
    // Then replace underscores with hyphens
    SNAKE_TO_KEBAB.replace_all(&snake, "-").to_string()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_to_snake_case() {
        // Test camelCase to snake_case
        assert_eq!(to_snake_case("baseSize"), "base_size");
        assert_eq!(to_snake_case("enableHoverEffect"), "enable_hover_effect");
        assert_eq!(to_snake_case("backgroundColor"), "background_color");
        
        // Test kebab-case to snake_case
        assert_eq!(to_snake_case("base-size"), "base_size");
        assert_eq!(to_snake_case("enable-hover-effect"), "enable_hover_effect");
        
        // Test already snake_case
        assert_eq!(to_snake_case("base_size"), "base_size");
        assert_eq!(to_snake_case("enable_hover_effect"), "enable_hover_effect");
        
        // Test mixed cases
        assert_eq!(to_snake_case("base-Size"), "base_size");
        assert_eq!(to_snake_case("enable_hoverEffect"), "enable_hover_effect");
    }

    #[test]
    fn test_to_camel_case() {
        // Test snake_case to camelCase
        assert_eq!(to_camel_case("base_size"), "baseSize");
        assert_eq!(to_camel_case("enable_hover_effect"), "enableHoverEffect");
        
        // Test kebab-case to camelCase
        assert_eq!(to_camel_case("base-size"), "baseSize");
        assert_eq!(to_camel_case("enable-hover-effect"), "enableHoverEffect");
        
        // Test already camelCase
        assert_eq!(to_camel_case("baseSize"), "baseSize");
        assert_eq!(to_camel_case("enableHoverEffect"), "enableHoverEffect");
        
        // Test mixed cases
        assert_eq!(to_camel_case("base-Size"), "baseSize");
        assert_eq!(to_camel_case("enable_hoverEffect"), "enableHoverEffect");
    }

    #[test]
    fn test_to_kebab_case() {
        // Test camelCase to kebab-case
        assert_eq!(to_kebab_case("baseSize"), "base-size");
        assert_eq!(to_kebab_case("enableHoverEffect"), "enable-hover-effect");
        
        // Test snake_case to kebab-case
        assert_eq!(to_kebab_case("base_size"), "base-size");
        assert_eq!(to_kebab_case("enable_hover_effect"), "enable-hover-effect");
        
        // Test already kebab-case
        assert_eq!(to_kebab_case("base-size"), "base-size");
        assert_eq!(to_kebab_case("enable-hover-effect"), "enable-hover-effect");
        
        // Test mixed cases
        assert_eq!(to_kebab_case("base_Size"), "base-size");
        assert_eq!(to_kebab_case("enable-hoverEffect"), "enable-hover-effect");
    }
}

----
utils/gpu_compute.rs
use cudarc::driver::{CudaDevice, CudaFunction, CudaSlice, LaunchConfig, LaunchAsync};
use cudarc::nvrtc::Ptx;
use std::io::Error;
use std::sync::Arc;
use log::debug;
use crate::models::graph::GraphData;
use crate::utils::socket_flow_messages::NodeData;
use crate::models::simulation_params::SimulationParams;
use tokio::sync::RwLock;

const BLOCK_SIZE: u32 = 256;
const MAX_NODES: u32 = 1_000_000;
const NODE_SIZE: u32 = 28; // 24 bytes for position/velocity + 4 bytes for mass/flags/padding
const SHARED_MEM_SIZE: u32 = BLOCK_SIZE * NODE_SIZE;

pub struct GPUCompute {
    device: Arc<CudaDevice>,
    force_kernel: CudaFunction,
    node_data: CudaSlice<NodeData>,
    num_nodes: u32,
    simulation_params: SimulationParams,
}

impl GPUCompute {
    pub async fn new(graph: &GraphData) -> Result<Arc<RwLock<Self>>, Error> {
        let num_nodes = graph.nodes.len() as u32;
        if num_nodes > MAX_NODES {
            return Err(Error::new(
                std::io::ErrorKind::Other,
                format!("Node count exceeds limit: {}", MAX_NODES),
            ));
        }

        debug!("Initializing CUDA device");
        let device = Arc::new(CudaDevice::new(0)
            .map_err(|e| Error::new(std::io::ErrorKind::Other, e.to_string()))?);

        debug!("Loading force computation kernel");
        let ptx = Ptx::from_file("/app/compute_forces.ptx");
            
        device.load_ptx(ptx, "compute_forces", &["compute_forces"])
            .map_err(|e| Error::new(std::io::ErrorKind::Other, e.to_string()))?;
            
        let force_kernel = device.get_func("compute_forces", "compute_forces")
            .ok_or_else(|| Error::new(std::io::ErrorKind::Other, "Function compute_forces not found"))?;

        debug!("Allocating device memory for {} nodes", num_nodes);
        let node_data = device.alloc_zeros::<NodeData>(num_nodes as usize)
            .map_err(|e| Error::new(std::io::ErrorKind::Other, e.to_string()))?;

        debug!("Creating GPU compute instance");
        let mut instance = Self {
            device: Arc::clone(&device),
            force_kernel,
            node_data,
            num_nodes,
            simulation_params: SimulationParams::default(),
        };

        debug!("Copying initial graph data to device memory");
        instance.update_graph_data(graph)?;

        Ok(Arc::new(RwLock::new(instance)))
    }

    pub fn update_graph_data(&mut self, graph: &GraphData) -> Result<(), Error> {
        debug!("Updating graph data for {} nodes", graph.nodes.len());

        // Extract NodeData from graph nodes
        let node_data: Vec<NodeData> = graph.nodes.iter()
            .map(|node| node.data)
            .collect();

        // Copy data to GPU
        self.device.htod_sync_copy_into(&node_data, &mut self.node_data)
            .map_err(|e| Error::new(std::io::ErrorKind::Other, e.to_string()))?;

        self.num_nodes = graph.nodes.len() as u32;
        Ok(())
    }

    pub fn update_simulation_params(&mut self, params: &SimulationParams) -> Result<(), Error> {
        debug!("Updating simulation parameters: {:?}", params);
        self.simulation_params = params.clone();
        Ok(())
    }

    pub fn step(&mut self) -> Result<(), Error> {
        let blocks = (self.num_nodes + BLOCK_SIZE - 1) / BLOCK_SIZE;
        let cfg = LaunchConfig {
            grid_dim: (blocks, 1, 1),
            block_dim: (BLOCK_SIZE, 1, 1),
            shared_mem_bytes: SHARED_MEM_SIZE,
        };

        let params = &self.simulation_params;
        unsafe {
            self.force_kernel.clone().launch(cfg, (
                &mut self.node_data,
                self.num_nodes as i32,
                params.spring_strength,
                params.repulsion,
                params.damping,
            )).map_err(|e| std::io::Error::new(std::io::ErrorKind::Other, e.to_string()))?;
        }
        Ok(())
    }

    pub fn get_node_data(&self) -> Result<Vec<NodeData>, Error> {
        let mut node_data = vec![NodeData {
            position: [0.0; 3],
            velocity: [0.0; 3],
            mass: 0,
            flags: 0,
            padding: [0; 2],
        }; self.num_nodes as usize];

        self.device.dtoh_sync_copy_into(&self.node_data, &mut node_data)
            .map_err(|e| Error::new(std::io::ErrorKind::Other, e.to_string()))?;

        Ok(node_data)
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::models::graph::GraphData;

    #[tokio::test]
    async fn test_gpu_compute_initialization() {
        let graph = GraphData::default();
        let gpu_compute = GPUCompute::new(&graph).await;
        assert!(gpu_compute.is_ok());
    }

    #[tokio::test]
    async fn test_node_data_transfer() {
        let mut graph = GraphData::default();
        // Add test nodes...
        let gpu_compute = GPUCompute::new(&graph).await.unwrap();
        let gpu_compute = Arc::try_unwrap(gpu_compute).unwrap().into_inner();
        let node_data = gpu_compute.get_node_data().unwrap();
        assert_eq!(node_data.len(), graph.nodes.len());
    }
}

----
utils/compute_forces.ptx
//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-34097967
// Cuda compilation tools, release 12.4, V12.4.131
// Based on NVVM 7.0.1
//

.version 8.4
.target sm_86
.address_size 64

	// .globl	compute_forces
// _ZZ14compute_forcesE16shared_positions has been demoted
// _ZZ14compute_forcesE13shared_masses has been demoted

.visible .entry compute_forces(
	.param .u64 compute_forces_param_0,
	.param .u64 compute_forces_param_1,
	.param .u64 compute_forces_param_2,
	.param .u32 compute_forces_param_3,
	.param .f32 compute_forces_param_4,
	.param .f32 compute_forces_param_5,
	.param .f32 compute_forces_param_6
)
{
	.reg .pred 	%p<31>;
	.reg .b16 	%rs<3>;
	.reg .f32 	%f<528>;
	.reg .b32 	%r<106>;
	.reg .b64 	%rd<20>;
	// demoted variable
	.shared .align 4 .b8 _ZZ14compute_forcesE16shared_positions[3072];
	// demoted variable
	.shared .align 4 .b8 _ZZ14compute_forcesE13shared_masses[1024];

	ld.param.u64 	%rd6, [compute_forces_param_0];
	ld.param.u64 	%rd7, [compute_forces_param_2];
	ld.param.u32 	%r26, [compute_forces_param_3];
	cvta.to.global.u64 	%rd1, %rd7;
	cvta.to.global.u64 	%rd2, %rd6;
	mov.u32 	%r27, %ntid.x;
	mov.u32 	%r28, %ctaid.x;
	mov.u32 	%r1, %tid.x;
	mad.lo.s32 	%r2, %r28, %r27, %r1;
	setp.ge.s32 	%p1, %r2, %r26;
	@%p1 bra 	$L__BB0_47;

	mul.lo.s32 	%r29, %r2, 3;
	mul.wide.s32 	%rd8, %r29, 4;
	add.s64 	%rd4, %rd2, %rd8;
	ld.global.f32 	%f1, [%rd4];
	ld.global.f32 	%f2, [%rd4+4];
	ld.global.f32 	%f3, [%rd4+8];
	setp.lt.s32 	%p2, %r26, 1;
	mov.f32 	%f474, 0f00000000;
	mov.f32 	%f475, %f474;
	mov.f32 	%f476, %f474;
	@%p2 bra 	$L__BB0_46;

	ld.param.f32 	%f467, [compute_forces_param_5];
	cvt.s64.s32 	%rd9, %r2;
	add.s64 	%rd10, %rd1, %rd9;
	ld.global.u8 	%rs1, [%rd10];
	cvt.rn.f32.u16 	%f118, %rs1;
	mov.u32 	%r31, _ZZ14compute_forcesE16shared_positions;
	mad.lo.s32 	%r3, %r1, 12, %r31;
	shl.b32 	%r32, %r1, 2;
	mov.u32 	%r33, _ZZ14compute_forcesE13shared_masses;
	add.s32 	%r4, %r33, %r32;
	mul.f32 	%f4, %f118, %f467;
	add.s32 	%r34, %r26, 255;
	shr.s32 	%r35, %r34, 31;
	shr.u32 	%r36, %r35, 24;
	add.s32 	%r37, %r34, %r36;
	shr.s32 	%r5, %r37, 8;
	mov.f32 	%f476, 0f00000000;
	mov.u32 	%r100, 0;
	mov.f32 	%f475, %f476;
	mov.f32 	%f474, %f476;

$L__BB0_3:
	shl.b32 	%r7, %r100, 8;
	sub.s32 	%r38, %r7, %r26;
	add.s32 	%r10, %r7, %r1;
	setp.ge.s32 	%p3, %r10, %r26;
	@%p3 bra 	$L__BB0_5;

	mul.lo.s32 	%r39, %r10, 3;
	mul.wide.s32 	%rd11, %r39, 4;
	add.s64 	%rd12, %rd2, %rd11;
	ld.global.f32 	%f119, [%rd12];
	ld.global.f32 	%f120, [%rd12+4];
	ld.global.f32 	%f121, [%rd12+8];
	st.shared.f32 	[%r3], %f119;
	st.shared.f32 	[%r3+4], %f120;
	st.shared.f32 	[%r3+8], %f121;
	cvt.s64.s32 	%rd13, %r10;
	add.s64 	%rd14, %rd1, %rd13;
	ld.global.u8 	%rs2, [%rd14];
	cvt.rn.f32.u16 	%f122, %rs2;
	st.shared.f32 	[%r4], %f122;

$L__BB0_5:
	shl.b32 	%r78, %r100, 8;
	bar.sync 	0;
	setp.ge.s32 	%p4, %r78, %r26;
	@%p4 bra 	$L__BB0_45;

	max.u32 	%r85, %r38, -256;
	shl.b32 	%r84, %r100, 8;
	sub.s32 	%r83, %r84, %r26;
	max.u32 	%r82, %r83, -256;
	neg.s32 	%r81, %r82;
	shl.b32 	%r104, %r100, 8;
	and.b32  	%r11, %r81, 7;
	setp.gt.u32 	%p5, %r82, -8;
	mov.u32 	%r105, 0;
	@%p5 bra 	$L__BB0_25;

	shl.b32 	%r89, %r100, 8;
	sub.s32 	%r88, %r89, %r26;
	max.u32 	%r87, %r88, -256;
	neg.s32 	%r86, %r87;
	shl.b32 	%r104, %r100, 8;
	sub.s32 	%r103, %r86, %r11;
	mov.u32 	%r105, 0;

$L__BB0_8:
	.pragma "nounroll";
	mad.lo.s32 	%r16, %r105, 12, %r31;
	shl.b32 	%r43, %r105, 2;
	add.s32 	%r17, %r33, %r43;
	setp.eq.s32 	%p6, %r104, %r2;
	@%p6 bra 	$L__BB0_10;

	ld.shared.f32 	%f124, [%r16];
	sub.f32 	%f125, %f1, %f124;
	ld.shared.f32 	%f126, [%r16+4];
	sub.f32 	%f127, %f2, %f126;
	ld.shared.f32 	%f128, [%r16+8];
	sub.f32 	%f129, %f3, %f128;
	mul.f32 	%f130, %f127, %f127;
	fma.rn.f32 	%f131, %f125, %f125, %f130;
	fma.rn.f32 	%f132, %f129, %f129, %f131;
	sqrt.rn.f32 	%f133, %f132;
	mov.f32 	%f134, 0f38D1B717;
	max.f32 	%f135, %f133, %f134;
	ld.shared.f32 	%f136, [%r17];
	mul.f32 	%f137, %f4, %f136;
	mul.f32 	%f138, %f135, %f135;
	div.rn.f32 	%f139, %f137, %f138;
	mul.f32 	%f140, %f125, %f139;
	div.rn.f32 	%f141, %f140, %f135;
	add.f32 	%f474, %f474, %f141;
	mul.f32 	%f142, %f127, %f139;
	div.rn.f32 	%f143, %f142, %f135;
	add.f32 	%f475, %f475, %f143;
	mul.f32 	%f144, %f129, %f139;
	div.rn.f32 	%f145, %f144, %f135;
	add.f32 	%f476, %f476, %f145;

$L__BB0_10:
	shl.b32 	%r75, %r100, 8;
	add.s32 	%r45, %r105, %r75;
	add.s32 	%r46, %r45, 1;
	setp.eq.s32 	%p7, %r46, %r2;
	@%p7 bra 	$L__BB0_12;

	ld.shared.f32 	%f146, [%r16+12];
	sub.f32 	%f147, %f1, %f146;
	ld.shared.f32 	%f148, [%r16+16];
	sub.f32 	%f149, %f2, %f148;
	ld.shared.f32 	%f150, [%r16+20];
	sub.f32 	%f151, %f3, %f150;
	mul.f32 	%f152, %f149, %f149;
	fma.rn.f32 	%f153, %f147, %f147, %f152;
	fma.rn.f32 	%f154, %f151, %f151, %f153;
	sqrt.rn.f32 	%f155, %f154;
	mov.f32 	%f156, 0f38D1B717;
	max.f32 	%f157, %f155, %f156;
	ld.shared.f32 	%f158, [%r17+4];
	mul.f32 	%f159, %f4, %f158;
	mul.f32 	%f160, %f157, %f157;
	div.rn.f32 	%f161, %f159, %f160;
	mul.f32 	%f162, %f147, %f161;
	div.rn.f32 	%f163, %f162, %f157;
	add.f32 	%f474, %f474, %f163;
	mul.f32 	%f164, %f149, %f161;
	div.rn.f32 	%f165, %f164, %f157;
	add.f32 	%f475, %f475, %f165;
	mul.f32 	%f166, %f151, %f161;
	div.rn.f32 	%f167, %f166, %f157;
	add.f32 	%f476, %f476, %f167;

$L__BB0_12:
	add.s32 	%r48, %r45, 2;
	setp.eq.s32 	%p8, %r48, %r2;
	@%p8 bra 	$L__BB0_14;

	ld.shared.f32 	%f168, [%r16+24];
	sub.f32 	%f169, %f1, %f168;
	ld.shared.f32 	%f170, [%r16+28];
	sub.f32 	%f171, %f2, %f170;
	ld.shared.f32 	%f172, [%r16+32];
	sub.f32 	%f173, %f3, %f172;
	mul.f32 	%f174, %f171, %f171;
	fma.rn.f32 	%f175, %f169, %f169, %f174;
	fma.rn.f32 	%f176, %f173, %f173, %f175;
	sqrt.rn.f32 	%f177, %f176;
	mov.f32 	%f178, 0f38D1B717;
	max.f32 	%f179, %f177, %f178;
	ld.shared.f32 	%f180, [%r17+8];
	mul.f32 	%f181, %f4, %f180;
	mul.f32 	%f182, %f179, %f179;
	div.rn.f32 	%f183, %f181, %f182;
	mul.f32 	%f184, %f169, %f183;
	div.rn.f32 	%f185, %f184, %f179;
	add.f32 	%f474, %f474, %f185;
	mul.f32 	%f186, %f171, %f183;
	div.rn.f32 	%f187, %f186, %f179;
	add.f32 	%f475, %f475, %f187;
	mul.f32 	%f188, %f173, %f183;
	div.rn.f32 	%f189, %f188, %f179;
	add.f32 	%f476, %f476, %f189;

$L__BB0_14:
	add.s32 	%r50, %r45, 3;
	setp.eq.s32 	%p9, %r50, %r2;
	@%p9 bra 	$L__BB0_16;

	ld.shared.f32 	%f190, [%r16+36];
	sub.f32 	%f191, %f1, %f190;
	ld.shared.f32 	%f192, [%r16+40];
	sub.f32 	%f193, %f2, %f192;
	ld.shared.f32 	%f194, [%r16+44];
	sub.f32 	%f195, %f3, %f194;
	mul.f32 	%f196, %f193, %f193;
	fma.rn.f32 	%f197, %f191, %f191, %f196;
	fma.rn.f32 	%f198, %f195, %f195, %f197;
	sqrt.rn.f32 	%f199, %f198;
	mov.f32 	%f200, 0f38D1B717;
	max.f32 	%f201, %f199, %f200;
	ld.shared.f32 	%f202, [%r17+12];
	mul.f32 	%f203, %f4, %f202;
	mul.f32 	%f204, %f201, %f201;
	div.rn.f32 	%f205, %f203, %f204;
	mul.f32 	%f206, %f191, %f205;
	div.rn.f32 	%f207, %f206, %f201;
	add.f32 	%f474, %f474, %f207;
	mul.f32 	%f208, %f193, %f205;
	div.rn.f32 	%f209, %f208, %f201;
	add.f32 	%f475, %f475, %f209;
	mul.f32 	%f210, %f195, %f205;
	div.rn.f32 	%f211, %f210, %f201;
	add.f32 	%f476, %f476, %f211;

$L__BB0_16:
	add.s32 	%r52, %r45, 4;
	setp.eq.s32 	%p10, %r52, %r2;
	@%p10 bra 	$L__BB0_18;

	ld.shared.f32 	%f212, [%r16+48];
	sub.f32 	%f213, %f1, %f212;
	ld.shared.f32 	%f214, [%r16+52];
	sub.f32 	%f215, %f2, %f214;
	ld.shared.f32 	%f216, [%r16+56];
	sub.f32 	%f217, %f3, %f216;
	mul.f32 	%f218, %f215, %f215;
	fma.rn.f32 	%f219, %f213, %f213, %f218;
	fma.rn.f32 	%f220, %f217, %f217, %f219;
	sqrt.rn.f32 	%f221, %f220;
	mov.f32 	%f222, 0f38D1B717;
	max.f32 	%f223, %f221, %f222;
	ld.shared.f32 	%f224, [%r17+16];
	mul.f32 	%f225, %f4, %f224;
	mul.f32 	%f226, %f223, %f223;
	div.rn.f32 	%f227, %f225, %f226;
	mul.f32 	%f228, %f213, %f227;
	div.rn.f32 	%f229, %f228, %f223;
	add.f32 	%f474, %f474, %f229;
	mul.f32 	%f230, %f215, %f227;
	div.rn.f32 	%f231, %f230, %f223;
	add.f32 	%f475, %f475, %f231;
	mul.f32 	%f232, %f217, %f227;
	div.rn.f32 	%f233, %f232, %f223;
	add.f32 	%f476, %f476, %f233;

$L__BB0_18:
	add.s32 	%r54, %r45, 5;
	setp.eq.s32 	%p11, %r54, %r2;
	@%p11 bra 	$L__BB0_20;

	ld.shared.f32 	%f234, [%r16+60];
	sub.f32 	%f235, %f1, %f234;
	ld.shared.f32 	%f236, [%r16+64];
	sub.f32 	%f237, %f2, %f236;
	ld.shared.f32 	%f238, [%r16+68];
	sub.f32 	%f239, %f3, %f238;
	mul.f32 	%f240, %f237, %f237;
	fma.rn.f32 	%f241, %f235, %f235, %f240;
	fma.rn.f32 	%f242, %f239, %f239, %f241;
	sqrt.rn.f32 	%f243, %f242;
	mov.f32 	%f244, 0f38D1B717;
	max.f32 	%f245, %f243, %f244;
	ld.shared.f32 	%f246, [%r17+20];
	mul.f32 	%f247, %f4, %f246;
	mul.f32 	%f248, %f245, %f245;
	div.rn.f32 	%f249, %f247, %f248;
	mul.f32 	%f250, %f235, %f249;
	div.rn.f32 	%f251, %f250, %f245;
	add.f32 	%f474, %f474, %f251;
	mul.f32 	%f252, %f237, %f249;
	div.rn.f32 	%f253, %f252, %f245;
	add.f32 	%f475, %f475, %f253;
	mul.f32 	%f254, %f239, %f249;
	div.rn.f32 	%f255, %f254, %f245;
	add.f32 	%f476, %f476, %f255;

$L__BB0_20:
	add.s32 	%r56, %r45, 6;
	setp.eq.s32 	%p12, %r56, %r2;
	@%p12 bra 	$L__BB0_22;

	ld.shared.f32 	%f256, [%r16+72];
	sub.f32 	%f257, %f1, %f256;
	ld.shared.f32 	%f258, [%r16+76];
	sub.f32 	%f259, %f2, %f258;
	ld.shared.f32 	%f260, [%r16+80];
	sub.f32 	%f261, %f3, %f260;
	mul.f32 	%f262, %f259, %f259;
	fma.rn.f32 	%f263, %f257, %f257, %f262;
	fma.rn.f32 	%f264, %f261, %f261, %f263;
	sqrt.rn.f32 	%f265, %f264;
	mov.f32 	%f266, 0f38D1B717;
	max.f32 	%f267, %f265, %f266;
	ld.shared.f32 	%f268, [%r17+24];
	mul.f32 	%f269, %f4, %f268;
	mul.f32 	%f270, %f267, %f267;
	div.rn.f32 	%f271, %f269, %f270;
	mul.f32 	%f272, %f257, %f271;
	div.rn.f32 	%f273, %f272, %f267;
	add.f32 	%f474, %f474, %f273;
	mul.f32 	%f274, %f259, %f271;
	div.rn.f32 	%f275, %f274, %f267;
	add.f32 	%f475, %f475, %f275;
	mul.f32 	%f276, %f261, %f271;
	div.rn.f32 	%f277, %f276, %f267;
	add.f32 	%f476, %f476, %f277;

$L__BB0_22:
	add.s32 	%r58, %r45, 7;
	setp.eq.s32 	%p13, %r58, %r2;
	@%p13 bra 	$L__BB0_24;

	ld.shared.f32 	%f278, [%r16+84];
	sub.f32 	%f279, %f1, %f278;
	ld.shared.f32 	%f280, [%r16+88];
	sub.f32 	%f281, %f2, %f280;
	ld.shared.f32 	%f282, [%r16+92];
	sub.f32 	%f283, %f3, %f282;
	mul.f32 	%f284, %f281, %f281;
	fma.rn.f32 	%f285, %f279, %f279, %f284;
	fma.rn.f32 	%f286, %f283, %f283, %f285;
	sqrt.rn.f32 	%f287, %f286;
	mov.f32 	%f288, 0f38D1B717;
	max.f32 	%f289, %f287, %f288;
	ld.shared.f32 	%f290, [%r17+28];
	mul.f32 	%f291, %f4, %f290;
	mul.f32 	%f292, %f289, %f289;
	div.rn.f32 	%f293, %f291, %f292;
	mul.f32 	%f294, %f279, %f293;
	div.rn.f32 	%f295, %f294, %f289;
	add.f32 	%f474, %f474, %f295;
	mul.f32 	%f296, %f281, %f293;
	div.rn.f32 	%f297, %f296, %f289;
	add.f32 	%f475, %f475, %f297;
	mul.f32 	%f298, %f283, %f293;
	div.rn.f32 	%f299, %f298, %f289;
	add.f32 	%f476, %f476, %f299;

$L__BB0_24:
	shl.b32 	%r74, %r100, 8;
	add.s32 	%r105, %r105, 8;
	add.s32 	%r104, %r105, %r74;
	add.s32 	%r103, %r103, -8;
	setp.ne.s32 	%p14, %r103, 0;
	@%p14 bra 	$L__BB0_8;

$L__BB0_25:
	setp.eq.s32 	%p15, %r11, 0;
	@%p15 bra 	$L__BB0_45;

	setp.eq.s32 	%p16, %r104, %r2;
	mad.lo.s32 	%r23, %r105, 12, %r31;
	shl.b32 	%r60, %r105, 2;
	add.s32 	%r24, %r33, %r60;
	@%p16 bra 	$L__BB0_28;

	ld.shared.f32 	%f300, [%r23];
	sub.f32 	%f301, %f1, %f300;
	ld.shared.f32 	%f302, [%r23+4];
	sub.f32 	%f303, %f2, %f302;
	ld.shared.f32 	%f304, [%r23+8];
	sub.f32 	%f305, %f3, %f304;
	mul.f32 	%f306, %f303, %f303;
	fma.rn.f32 	%f307, %f301, %f301, %f306;
	fma.rn.f32 	%f308, %f305, %f305, %f307;
	sqrt.rn.f32 	%f309, %f308;
	mov.f32 	%f310, 0f38D1B717;
	max.f32 	%f311, %f309, %f310;
	ld.shared.f32 	%f312, [%r24];
	mul.f32 	%f313, %f4, %f312;
	mul.f32 	%f314, %f311, %f311;
	div.rn.f32 	%f315, %f313, %f314;
	mul.f32 	%f316, %f301, %f315;
	div.rn.f32 	%f317, %f316, %f311;
	add.f32 	%f474, %f474, %f317;
	mul.f32 	%f318, %f303, %f315;
	div.rn.f32 	%f319, %f318, %f311;
	add.f32 	%f475, %f475, %f319;
	mul.f32 	%f320, %f305, %f315;
	div.rn.f32 	%f321, %f320, %f311;
	add.f32 	%f476, %f476, %f321;

$L__BB0_28:
	setp.eq.s32 	%p17, %r11, 1;
	@%p17 bra 	$L__BB0_45;

	shl.b32 	%r76, %r100, 8;
	add.s32 	%r62, %r105, %r76;
	add.s32 	%r63, %r62, 1;
	setp.eq.s32 	%p18, %r63, %r2;
	@%p18 bra 	$L__BB0_31;

	ld.shared.f32 	%f322, [%r23+12];
	sub.f32 	%f323, %f1, %f322;
	ld.shared.f32 	%f324, [%r23+16];
	sub.f32 	%f325, %f2, %f324;
	ld.shared.f32 	%f326, [%r23+20];
	sub.f32 	%f327, %f3, %f326;
	mul.f32 	%f328, %f325, %f325;
	fma.rn.f32 	%f329, %f323, %f323, %f328;
	fma.rn.f32 	%f330, %f327, %f327, %f329;
	sqrt.rn.f32 	%f331, %f330;
	mov.f32 	%f332, 0f38D1B717;
	max.f32 	%f333, %f331, %f332;
	ld.shared.f32 	%f334, [%r24+4];
	mul.f32 	%f335, %f4, %f334;
	mul.f32 	%f336, %f333, %f333;
	div.rn.f32 	%f337, %f335, %f336;
	mul.f32 	%f338, %f323, %f337;
	div.rn.f32 	%f339, %f338, %f333;
	add.f32 	%f474, %f474, %f339;
	mul.f32 	%f340, %f325, %f337;
	div.rn.f32 	%f341, %f340, %f333;
	add.f32 	%f475, %f475, %f341;
	mul.f32 	%f342, %f327, %f337;
	div.rn.f32 	%f343, %f342, %f333;
	add.f32 	%f476, %f476, %f343;

$L__BB0_31:
	setp.eq.s32 	%p19, %r11, 2;
	@%p19 bra 	$L__BB0_45;

	shl.b32 	%r91, %r100, 8;
	add.s32 	%r90, %r105, %r91;
	add.s32 	%r65, %r90, 2;
	setp.eq.s32 	%p20, %r65, %r2;
	@%p20 bra 	$L__BB0_34;

	ld.shared.f32 	%f344, [%r23+24];
	sub.f32 	%f345, %f1, %f344;
	ld.shared.f32 	%f346, [%r23+28];
	sub.f32 	%f347, %f2, %f346;
	ld.shared.f32 	%f348, [%r23+32];
	sub.f32 	%f349, %f3, %f348;
	mul.f32 	%f350, %f347, %f347;
	fma.rn.f32 	%f351, %f345, %f345, %f350;
	fma.rn.f32 	%f352, %f349, %f349, %f351;
	sqrt.rn.f32 	%f353, %f352;
	mov.f32 	%f354, 0f38D1B717;
	max.f32 	%f355, %f353, %f354;
	ld.shared.f32 	%f356, [%r24+8];
	mul.f32 	%f357, %f4, %f356;
	mul.f32 	%f358, %f355, %f355;
	div.rn.f32 	%f359, %f357, %f358;
	mul.f32 	%f360, %f345, %f359;
	div.rn.f32 	%f361, %f360, %f355;
	add.f32 	%f474, %f474, %f361;
	mul.f32 	%f362, %f347, %f359;
	div.rn.f32 	%f363, %f362, %f355;
	add.f32 	%f475, %f475, %f363;
	mul.f32 	%f364, %f349, %f359;
	div.rn.f32 	%f365, %f364, %f355;
	add.f32 	%f476, %f476, %f365;

$L__BB0_34:
	setp.eq.s32 	%p21, %r11, 3;
	@%p21 bra 	$L__BB0_45;

	shl.b32 	%r93, %r100, 8;
	add.s32 	%r92, %r105, %r93;
	add.s32 	%r67, %r92, 3;
	setp.eq.s32 	%p22, %r67, %r2;
	@%p22 bra 	$L__BB0_37;

	ld.shared.f32 	%f366, [%r23+36];
	sub.f32 	%f367, %f1, %f366;
	ld.shared.f32 	%f368, [%r23+40];
	sub.f32 	%f369, %f2, %f368;
	ld.shared.f32 	%f370, [%r23+44];
	sub.f32 	%f371, %f3, %f370;
	mul.f32 	%f372, %f369, %f369;
	fma.rn.f32 	%f373, %f367, %f367, %f372;
	fma.rn.f32 	%f374, %f371, %f371, %f373;
	sqrt.rn.f32 	%f375, %f374;
	mov.f32 	%f376, 0f38D1B717;
	max.f32 	%f377, %f375, %f376;
	ld.shared.f32 	%f378, [%r24+12];
	mul.f32 	%f379, %f4, %f378;
	mul.f32 	%f380, %f377, %f377;
	div.rn.f32 	%f381, %f379, %f380;
	mul.f32 	%f382, %f367, %f381;
	div.rn.f32 	%f383, %f382, %f377;
	add.f32 	%f474, %f474, %f383;
	mul.f32 	%f384, %f369, %f381;
	div.rn.f32 	%f385, %f384, %f377;
	add.f32 	%f475, %f475, %f385;
	mul.f32 	%f386, %f371, %f381;
	div.rn.f32 	%f387, %f386, %f377;
	add.f32 	%f476, %f476, %f387;

$L__BB0_37:
	setp.eq.s32 	%p23, %r11, 4;
	@%p23 bra 	$L__BB0_45;

	shl.b32 	%r95, %r100, 8;
	add.s32 	%r94, %r105, %r95;
	add.s32 	%r69, %r94, 4;
	setp.eq.s32 	%p24, %r69, %r2;
	@%p24 bra 	$L__BB0_40;

	ld.shared.f32 	%f388, [%r23+48];
	sub.f32 	%f389, %f1, %f388;
	ld.shared.f32 	%f390, [%r23+52];
	sub.f32 	%f391, %f2, %f390;
	ld.shared.f32 	%f392, [%r23+56];
	sub.f32 	%f393, %f3, %f392;
	mul.f32 	%f394, %f391, %f391;
	fma.rn.f32 	%f395, %f389, %f389, %f394;
	fma.rn.f32 	%f396, %f393, %f393, %f395;
	sqrt.rn.f32 	%f397, %f396;
	mov.f32 	%f398, 0f38D1B717;
	max.f32 	%f399, %f397, %f398;
	ld.shared.f32 	%f400, [%r24+16];
	mul.f32 	%f401, %f4, %f400;
	mul.f32 	%f402, %f399, %f399;
	div.rn.f32 	%f403, %f401, %f402;
	mul.f32 	%f404, %f389, %f403;
	div.rn.f32 	%f405, %f404, %f399;
	add.f32 	%f474, %f474, %f405;
	mul.f32 	%f406, %f391, %f403;
	div.rn.f32 	%f407, %f406, %f399;
	add.f32 	%f475, %f475, %f407;
	mul.f32 	%f408, %f393, %f403;
	div.rn.f32 	%f409, %f408, %f399;
	add.f32 	%f476, %f476, %f409;

$L__BB0_40:
	setp.eq.s32 	%p25, %r11, 5;
	@%p25 bra 	$L__BB0_45;

	shl.b32 	%r97, %r100, 8;
	add.s32 	%r96, %r105, %r97;
	add.s32 	%r71, %r96, 5;
	setp.eq.s32 	%p26, %r71, %r2;
	@%p26 bra 	$L__BB0_43;

	ld.shared.f32 	%f410, [%r23+60];
	sub.f32 	%f411, %f1, %f410;
	ld.shared.f32 	%f412, [%r23+64];
	sub.f32 	%f413, %f2, %f412;
	ld.shared.f32 	%f414, [%r23+68];
	sub.f32 	%f415, %f3, %f414;
	mul.f32 	%f416, %f413, %f413;
	fma.rn.f32 	%f417, %f411, %f411, %f416;
	fma.rn.f32 	%f418, %f415, %f415, %f417;
	sqrt.rn.f32 	%f419, %f418;
	mov.f32 	%f420, 0f38D1B717;
	max.f32 	%f421, %f419, %f420;
	ld.shared.f32 	%f422, [%r24+20];
	mul.f32 	%f423, %f4, %f422;
	mul.f32 	%f424, %f421, %f421;
	div.rn.f32 	%f425, %f423, %f424;
	mul.f32 	%f426, %f411, %f425;
	div.rn.f32 	%f427, %f426, %f421;
	add.f32 	%f474, %f474, %f427;
	mul.f32 	%f428, %f413, %f425;
	div.rn.f32 	%f429, %f428, %f421;
	add.f32 	%f475, %f475, %f429;
	mul.f32 	%f430, %f415, %f425;
	div.rn.f32 	%f431, %f430, %f421;
	add.f32 	%f476, %f476, %f431;

$L__BB0_43:
	shl.b32 	%r99, %r100, 8;
	add.s32 	%r98, %r105, %r99;
	add.s32 	%r73, %r98, 6;
	setp.eq.s32 	%p27, %r73, %r2;
	setp.eq.s32 	%p28, %r11, 6;
	or.pred  	%p29, %p28, %p27;
	@%p29 bra 	$L__BB0_45;

	ld.shared.f32 	%f432, [%r23+72];
	sub.f32 	%f433, %f1, %f432;
	ld.shared.f32 	%f434, [%r23+76];
	sub.f32 	%f435, %f2, %f434;
	ld.shared.f32 	%f436, [%r23+80];
	sub.f32 	%f437, %f3, %f436;
	mul.f32 	%f438, %f435, %f435;
	fma.rn.f32 	%f439, %f433, %f433, %f438;
	fma.rn.f32 	%f440, %f437, %f437, %f439;
	sqrt.rn.f32 	%f441, %f440;
	mov.f32 	%f442, 0f38D1B717;
	max.f32 	%f443, %f441, %f442;
	ld.shared.f32 	%f444, [%r24+24];
	mul.f32 	%f445, %f4, %f444;
	mul.f32 	%f446, %f443, %f443;
	div.rn.f32 	%f447, %f445, %f446;
	mul.f32 	%f448, %f433, %f447;
	div.rn.f32 	%f449, %f448, %f443;
	add.f32 	%f474, %f474, %f449;
	mul.f32 	%f450, %f435, %f447;
	div.rn.f32 	%f451, %f450, %f443;
	add.f32 	%f475, %f475, %f451;
	mul.f32 	%f452, %f437, %f447;
	div.rn.f32 	%f453, %f452, %f443;
	add.f32 	%f476, %f476, %f453;

$L__BB0_45:
	bar.sync 	0;
	add.s32 	%r100, %r100, 1;
	setp.lt.s32 	%p30, %r100, %r5;
	@%p30 bra 	$L__BB0_3;

$L__BB0_46:
	ld.param.f32 	%f466, [compute_forces_param_6];
	mul.lo.s32 	%r77, %r2, 3;
	cvt.s64.s32 	%rd19, %r77;
	ld.param.u64 	%rd18, [compute_forces_param_1];
	cvta.to.global.u64 	%rd15, %rd18;
	shl.b64 	%rd16, %rd19, 2;
	add.s64 	%rd17, %rd15, %rd16;
	ld.global.f32 	%f454, [%rd17];
	add.f32 	%f455, %f474, %f454;
	mul.f32 	%f456, %f455, %f466;
	ld.global.f32 	%f457, [%rd17+4];
	add.f32 	%f458, %f475, %f457;
	mul.f32 	%f459, %f458, %f466;
	ld.global.f32 	%f460, [%rd17+8];
	add.f32 	%f461, %f476, %f460;
	mul.f32 	%f462, %f461, %f466;
	add.f32 	%f463, %f1, %f456;
	add.f32 	%f464, %f2, %f459;
	add.f32 	%f465, %f3, %f462;
	st.global.f32 	[%rd4], %f463;
	st.global.f32 	[%rd4+4], %f464;
	st.global.f32 	[%rd4+8], %f465;
	st.global.f32 	[%rd17], %f456;
	st.global.f32 	[%rd17+4], %f459;
	st.global.f32 	[%rd17+8], %f462;

$L__BB0_47:
	ret;

}


----
utils/debug_logging.rs
use serde_json::Value;
use std::sync::atomic::{AtomicBool, Ordering};
use log::debug;

// Global debug state
pub static DEBUG_MODE: AtomicBool = AtomicBool::new(false);
pub static WEBSOCKET_DEBUG: AtomicBool = AtomicBool::new(false);
pub static DATA_DEBUG: AtomicBool = AtomicBool::new(false);

// Initialize debug settings
pub fn init_debug_settings(debug_mode: bool, websocket_debug: bool, data_debug: bool) {
    DEBUG_MODE.store(debug_mode, Ordering::SeqCst);
    WEBSOCKET_DEBUG.store(websocket_debug, Ordering::SeqCst);
    DATA_DEBUG.store(data_debug, Ordering::SeqCst);
}

// Data types for debug logging
#[derive(Debug)]
pub enum WsDebugData<'a> {
    Binary {
        data: &'a [u8],
        is_initial: bool,
        node_count: usize,
    },
    Json(Value),
    Text(String),
}

impl<'a> std::fmt::Display for WsDebugData<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            WsDebugData::Binary { data, is_initial, node_count } => {
                write!(f, "Binary message: {} bytes, initial: {}, nodes: {}", 
                    data.len(), is_initial, node_count)
            },
            WsDebugData::Json(value) => {
                write!(f, "JSON message: {}", value)
            },
            WsDebugData::Text(text) => {
                write!(f, "Text message: {}", text)
            }
        }
    }
}

// Logging macros with different levels
#[macro_export]
macro_rules! log_error {
    ($($arg:tt)*) => {{
        use log::error;
        error!($($arg)*);
    }}
}

#[macro_export]
macro_rules! log_warn {
    ($($arg:tt)*) => {{
        use log::warn;
        if $crate::utils::debug_logging::DEBUG_MODE.load(std::sync::atomic::Ordering::SeqCst) {
            warn!($($arg)*);
        }
    }}
}

#[macro_export]
macro_rules! log_websocket {
    ($($arg:tt)*) => {{
        use log::debug;
        if $crate::utils::debug_logging::WEBSOCKET_DEBUG.load(std::sync::atomic::Ordering::SeqCst) {
            debug!("[WS] {}", format!($($arg)*));
        }
    }}
}

#[macro_export]
macro_rules! log_data {
    ($($arg:tt)*) => {{
        use log::debug;
        if $crate::utils::debug_logging::DATA_DEBUG.load(std::sync::atomic::Ordering::SeqCst) {
            debug!("[DATA] {}", format!($($arg)*));
        }
    }}
}

// Helper functions for common debug scenarios
pub fn log_ws_message(data: WsDebugData) {
    if !WEBSOCKET_DEBUG.load(Ordering::SeqCst) {
        return;
    }

    match data {
        WsDebugData::Binary { data, is_initial, node_count } => {
            debug!(
                "WebSocket Binary Message:\n  Size: {} bytes\n  Initial: {}\n  Node Count: {}\n  Header: {:?}",
                data.len(),
                is_initial,
                node_count,
                &data[..std::cmp::min(data.len(), 32)]
            );
        },
        WsDebugData::Json(value) => {
            if let Ok(pretty) = serde_json::to_string_pretty(&value) {
                debug!("WebSocket JSON Message:\n{}", pretty);
            } else {
                debug!("WebSocket JSON Message: {}", value);
            }
        },
        WsDebugData::Text(text) => {
            debug!("WebSocket Text Message: {}", text);
        }
    }
}

pub fn log_data_operation(operation: &str, details: &str) {
    if !DATA_DEBUG.load(Ordering::SeqCst) {
        return;
    }
    debug!("Data Operation - {}: {}", operation, details);
}

pub fn log_binary_headers(data: &[u8], context: &str) {
    if !DEBUG_MODE.load(Ordering::SeqCst) {
        return;
    }
    debug!(
        "Binary Headers [{}]:\n  Size: {} bytes\n  Header: {:?}",
        context,
        data.len(),
        &data[..std::cmp::min(data.len(), 32)]
    );
}

pub fn log_json_data(context: &str, value: &Value) {
    if !DEBUG_MODE.load(Ordering::SeqCst) {
        return;
    }
    if let Ok(pretty) = serde_json::to_string_pretty(value) {
        debug!("JSON Data [{}]:\n{}", context, pretty);
    } else {
        debug!("JSON Data [{}]: {}", context, value);
    }
}

// Test that debug settings are working
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_debug_settings() {
        init_debug_settings(true, true, false);
        assert!(DEBUG_MODE.load(Ordering::SeqCst));
        assert!(WEBSOCKET_DEBUG.load(Ordering::SeqCst));
        assert!(!DATA_DEBUG.load(Ordering::SeqCst));
    }
}

----
utils/tests/socket_flow_tests.rs
use std::sync::Arc;
use tokio::sync::RwLock;
use crate::utils::socket_flow_messages::{Node, NodeData};
use crate::models::edge::Edge;
use crate::config::Settings;
use crate::models::graph::GraphData;
use crate::utils::socket_flow_messages::{ServerMessage, ClientMessage, BinaryNodeData, UpdatePositionsMessage};
use crate::AppState;

#[tokio::test]
async fn test_binary_node_data_conversion() {
    // Create test node data
    let node_data = NodeData {
        position: [1.0, 2.0, 3.0],
        velocity: [0.1, 0.2, 0.3],
        mass: 127,
        flags: 0,
        padding: [0; 2],
    };

    // Create test node
    let node = Node {
        id: "test_node".to_string(),
        label: "Test Node".to_string(),
        data: node_data,
        metadata: Default::default(),
        file_size: 0,
        node_type: None,
        size: None,
        color: None,
        weight: None,
        group: None,
        user_data: None,
    };

    // Convert to BinaryNodeData
    let binary_data = BinaryNodeData::from_node_data(&node.id, &node.data);

    // Verify conversion
    assert_eq!(binary_data.node_id, "test_node");
    assert_eq!(binary_data.data.position, [1.0, 2.0, 3.0]);
    assert_eq!(binary_data.data.velocity, [0.1, 0.2, 0.3]);
    assert_eq!(binary_data.data.mass, 127);
}

#[tokio::test]
async fn test_update_positions_message() {
    // Create test nodes
    let node1_data = NodeData {
        position: [1.0, 2.0, 3.0],
        velocity: [0.1, 0.2, 0.3],
        mass: 127,
        flags: 0,
        padding: [0; 2],
    };

    let node2_data = NodeData {
        position: [4.0, 5.0, 6.0],
        velocity: [0.4, 0.5, 0.6],
        mass: 127,
        flags: 0,
        padding: [0; 2],
    };

    let nodes = vec![
        Node {
            id: "node1".to_string(),
            label: "Node 1".to_string(),
            data: node1_data,
            metadata: Default::default(),
            file_size: 0,
            node_type: None,
            size: None,
            color: None,
            weight: None,
            group: None,
            user_data: None,
        },
        Node {
            id: "node2".to_string(),
            label: "Node 2".to_string(),
            data: node2_data,
            metadata: Default::default(),
            file_size: 0,
            node_type: None,
            size: None,
            color: None,
            weight: None,
            group: None,
            user_data: None,
        },
    ];

    // Create update message
    let binary_nodes: Vec<BinaryNodeData> = nodes.iter()
        .map(|node| BinaryNodeData::from_node_data(&node.id, &node.data))
        .collect();

    let update_msg = UpdatePositionsMessage {
        nodes: binary_nodes,
    };

    // Verify message
    assert_eq!(update_msg.nodes.len(), 2);
    assert_eq!(update_msg.nodes[0].node_id, "node1");
    assert_eq!(update_msg.nodes[0].data.position, [1.0, 2.0, 3.0]);
    assert_eq!(update_msg.nodes[1].node_id, "node2");
    assert_eq!(update_msg.nodes[1].data.position, [4.0, 5.0, 6.0]);
}

----
models/position_update.rs
use serde::{Deserialize, Serialize};
use crate::utils::socket_flow_messages::NodeData;

#[derive(Debug, Serialize, Deserialize)]
pub struct PositionUpdate {
    pub node_id: String,
    pub data: NodeData,
}

impl PositionUpdate {
    pub fn new(node_id: String, data: NodeData) -> Self {
        Self { node_id, data }
    }
}

----
models/graph.rs
use crate::utils::socket_flow_messages::Node;
use super::edge::Edge;
use super::metadata::MetadataStore;
use serde::{Deserialize, Serialize};

/// Represents the graph data structure containing nodes, edges, and metadata.
/// All fields use camelCase serialization for client compatibility.
#[derive(Default, Serialize, Deserialize, Clone, Debug)]
#[serde(rename_all = "camelCase")]
pub struct GraphData {
    /// List of nodes in the graph.
    pub nodes: Vec<Node>,
    /// List of edges connecting the nodes.
    pub edges: Vec<Edge>,
    /// Metadata associated with the graph, using camelCase keys.
    pub metadata: MetadataStore,
}

impl GraphData {
    pub fn new() -> Self {
        Self {
            nodes: Vec::new(),
            edges: Vec::new(),
            metadata: MetadataStore::new(),
        }
    }
}

----
models/node.rs
// Node and NodeData have been moved to utils/socket_flow_messages.rs
// This file is kept as a placeholder to maintain module structure
// but its contents have been consolidated as part of the Vector3 standardization

----
models/mod.rs
pub mod edge;
pub mod graph;
pub mod metadata;
pub mod node;
pub mod pagination;
pub mod position_update;
pub mod simulation_params;

----
models/metadata.rs
use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

/// Stores metadata about a processed file.
/// All fields use camelCase serialization for client compatibility.
#[derive(Debug, Clone, Serialize, Deserialize, Default)]
#[serde(rename_all = "camelCase")]
pub struct Metadata {
    #[serde(default)]
    pub file_name: String,
    #[serde(default)]
    pub file_size: usize,
    #[serde(default)]
    pub node_size: f64,
    #[serde(default)]
    pub hyperlink_count: usize,
    #[serde(default)]
    pub sha1: String,
    #[serde(default = "Utc::now")]
    pub last_modified: DateTime<Utc>,
    #[serde(default)]
    pub perplexity_link: String,
    #[serde(default)]
    pub last_perplexity_process: Option<DateTime<Utc>>,
    #[serde(default)]
    pub topic_counts: HashMap<String, usize>,
}

/// Type alias for metadata storage with camelCase keys
pub type MetadataStore = HashMap<String, Metadata>;

// Implement helper methods directly on HashMap<String, Metadata>
pub trait MetadataOps {
    fn validate_files(&self, markdown_dir: &str) -> bool;
}

impl MetadataOps for MetadataStore {
    fn validate_files(&self, markdown_dir: &str) -> bool {
        if self.is_empty() {
            return false;
        }

        // Check if the markdown files referenced in metadata actually exist
        for filename in self.keys() {
            let file_path = format!("{}/{}", markdown_dir, filename);
            if !std::path::Path::new(&file_path).exists() {
                return false;
            }
        }
        
        true
    }
}

----
models/pagination.rs
use serde::{Deserialize, Serialize};
use crate::models::edge::Edge;
use crate::utils::socket_flow_messages::Node;

#[derive(Debug, Deserialize)]
pub struct PaginationParams {
    pub page: Option<u32>,
    pub page_size: Option<u32>,
}

#[derive(Debug, Serialize)]
pub struct PaginatedGraphData {
    pub nodes: Vec<Node>,
    pub edges: Vec<Edge>,
    pub total_pages: u32,
    pub current_page: u32,
    pub total_nodes: usize,
    pub total_edges: usize,
    pub metadata: serde_json::Value,
}

----
models/edge.rs
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

/// Edge structure representing connections between nodes
#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "camelCase")]
pub struct Edge {
    pub source: String,
    pub target: String,
    pub weight: f32,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub edge_type: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub metadata: Option<HashMap<String, String>>,
}

impl Edge {
    pub fn new(source: String, target: String, weight: f32) -> Self {
        Self {
            source,
            target,
            weight,
            edge_type: None,
            metadata: None,
        }
    }
}

----
models/simulation_params.rs
use serde::{Deserialize, Serialize};
use bytemuck::{Pod, Zeroable};

#[derive(Debug, Clone, Copy, Serialize, Deserialize, PartialEq)]
#[serde(rename_all = "camelCase")]
pub enum SimulationMode {
    Remote,  // GPU-accelerated remote computation
    GPU,     // Local GPU computation
    Local,   // CPU-based computation
}

impl Default for SimulationMode {
    fn default() -> Self {
        SimulationMode::Remote
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize, PartialEq)]
#[serde(rename_all = "camelCase")]
pub enum SimulationPhase {
    Initial,    // Heavy computation for initial layout
    Dynamic,    // Lighter computation for dynamic updates
    Finalize,   // Final positioning and cleanup
}

impl Default for SimulationPhase {
    fn default() -> Self {
        SimulationPhase::Initial
    }
}

// GPU-compatible simulation parameters
#[repr(C)]
#[derive(Default, Clone, Copy, Pod, Zeroable, Debug)]
pub struct GPUSimulationParams {
    pub iterations: u32,
    pub spring_length: f32,
    pub spring_strength: f32,
    pub repulsion: f32,
    pub attraction: f32,
    pub damping: f32,
    pub time_step: f32,
    pub padding: u32,  // For alignment
}

#[derive(Default, Serialize, Deserialize, Clone, Debug)]
#[serde(rename_all = "camelCase")]
pub struct SimulationParams {
    pub iterations: u32,           // Range: 1-500, Default: varies by phase
    pub spring_length: f32,        // Range: 10-500, Default: 100
    pub spring_strength: f32,      // Range: 0.1-10, Default: 0.5
    pub repulsion: f32,           // Range: 1-1000, Default: 100
    pub attraction: f32,          // Range: 0.1-10, Default: 1.0
    pub damping: f32,             // Range: 0-1, Default: 0.5
    pub time_step: f32,           // Range: 0.01-1, Default: 0.2 (5fps)
    pub phase: SimulationPhase,   // Current simulation phase
    pub mode: SimulationMode,     // Computation mode
}

impl SimulationParams {
    pub fn new() -> Self {
        Self {
            iterations: 100,
            spring_length: 100.0,
            spring_strength: 0.5,
            repulsion: 100.0,
            attraction: 1.0,
            damping: 0.5,
            time_step: 0.2,        // Updated to 5fps
            phase: SimulationPhase::Initial,
            mode: SimulationMode::Remote,
        }
    }

    pub fn with_phase(phase: SimulationPhase) -> Self {
        match phase {
            SimulationPhase::Initial => Self {
                iterations: 300,           // Reduced from 500
                spring_length: 100.0,
                spring_strength: 0.5,      // Reduced from 1.0
                repulsion: 100.0,          // Reduced from 200.0
                attraction: 1.0,           // Reduced from 2.0
                damping: 0.95,            // Increased from 0.9
                time_step: 0.2,           // Updated to 5fps
                phase,
                mode: SimulationMode::Remote,
            },
            SimulationPhase::Dynamic => Self {
                iterations: 50,
                spring_length: 100.0,
                spring_strength: 0.5,
                repulsion: 100.0,
                attraction: 1.0,
                damping: 0.5,
                time_step: 0.2,           // Updated to 5fps
                phase,
                mode: SimulationMode::Remote,
            },
            SimulationPhase::Finalize => Self {
                iterations: 200,
                spring_length: 100.0,
                spring_strength: 0.1,
                repulsion: 50.0,
                attraction: 0.5,
                damping: 0.95,
                time_step: 0.2,           // Updated to 5fps
                phase,
                mode: SimulationMode::Remote,
            },
        }
    }

    // Convert to GPU-compatible parameters
    pub fn to_gpu_params(&self) -> GPUSimulationParams {
        GPUSimulationParams {
            iterations: self.iterations,
            spring_length: self.spring_length,
            spring_strength: self.spring_strength,
            repulsion: self.repulsion,
            attraction: self.attraction,
            damping: self.damping,
            time_step: self.time_step,
            padding: 0,
        }
    }
}

----
handlers/file_handler.rs
use actix_web::{web, Error as ActixError, HttpResponse};
use serde_json::json;
use log::{info, debug, error};

use crate::AppState;
use crate::services::file_service::{FileService, MARKDOWN_DIR};
use crate::services::graph_service::GraphService;

pub async fn fetch_and_process_files(state: web::Data<AppState>) -> HttpResponse {
    info!("Initiating optimized file fetch and processing");

    // Load or create metadata
    let mut metadata_store = match FileService::load_or_create_metadata() {
        Ok(store) => store,
        Err(e) => {
            error!("Failed to load or create metadata: {}", e);
            return HttpResponse::InternalServerError().json(json!({
                "status": "error",
                "message": format!("Failed to initialize metadata: {}", e)
            }));
        }
    };
    
    // Process files with optimized approach
    match FileService::fetch_and_process_files(&*state.github_service, state.settings.clone(), &mut metadata_store).await {
        Ok(processed_files) => {
            let file_names: Vec<String> = processed_files.iter()
                .map(|pf| pf.file_name.clone())
                .collect();

            info!("Successfully processed {} public markdown files", processed_files.len());

            // Update metadata store
            {
                let mut metadata = state.metadata.write().await;
                for processed_file in &processed_files {
                    metadata_store.insert(processed_file.file_name.clone(), processed_file.metadata.clone());
                    debug!("Updated metadata for: {}", processed_file.file_name);
                }
                *metadata = metadata_store.clone();
            }

            // Save the updated metadata
            if let Err(e) = FileService::save_metadata(&metadata_store) {
                error!("Failed to save metadata: {}", e);
                return HttpResponse::InternalServerError().json(json!({
                    "status": "error",
                    "message": format!("Failed to save metadata: {}", e)
                }));
            }

            // Update graph with processed files
            match GraphService::build_graph(&state).await {
                Ok(graph_data) => {
                    let mut graph = state.graph_service.graph_data.write().await;
                    *graph = graph_data.clone();
                    info!("Graph data structure updated successfully");

                    // Send binary position update to clients
                    if let Some(gpu) = &state.gpu_compute {
                        if let Ok(_nodes) = gpu.read().await.get_node_data() {
                            // Note: Socket-flow server will handle broadcasting
                            debug!("GPU node positions updated successfully");
                        } else {
                            error!("Failed to get node positions from GPU");
                        }
                    }

                    HttpResponse::Ok().json(json!({
                        "status": "success",
                        "processed_files": file_names
                    }))
                },
                Err(e) => {
                    error!("Failed to build graph data: {}", e);
                    HttpResponse::InternalServerError().json(json!({
                        "status": "error",
                        "message": format!("Failed to build graph data: {}", e)
                    }))
                }
            }
        },
        Err(e) => {
            error!("Error processing files: {}", e);
            HttpResponse::InternalServerError().json(json!({
                "status": "error",
                "message": format!("Error processing files: {}", e)
            }))
        }
    }
}

pub async fn get_file_content(_state: web::Data<AppState>, file_name: web::Path<String>) -> HttpResponse {
    // Read file directly from disk
    let file_path = format!("{}/{}", MARKDOWN_DIR, file_name);
    match std::fs::read_to_string(&file_path) {
        Ok(content) => HttpResponse::Ok().body(content),
        Err(e) => {
            error!("Failed to read file {}: {}", file_name, e);
            HttpResponse::NotFound().json(json!({
                "status": "error",
                "message": format!("File not found or unreadable: {}", file_name)
            }))
        }
    }
}

pub async fn refresh_graph(state: web::Data<AppState>) -> HttpResponse {
    info!("Manually triggering graph refresh");

    // Load metadata from file
    let metadata_store = match FileService::load_or_create_metadata() {
        Ok(store) => store,
        Err(e) => {
            error!("Failed to load metadata: {}", e);
            return HttpResponse::InternalServerError().json(json!({
                "status": "error",
                "message": format!("Failed to load metadata: {}", e)
            }));
        }
    };

    // Build graph directly from metadata
    match GraphService::build_graph_from_metadata(&metadata_store).await {
        Ok(graph_data) => {
            let mut graph = state.graph_service.graph_data.write().await;
            *graph = graph_data.clone();
            info!("Graph data structure refreshed successfully");

            // Send binary position update to clients
            if let Some(gpu) = &state.gpu_compute {
                if let Ok(_nodes) = gpu.read().await.get_node_data() {
                    // Note: Socket-flow server will handle broadcasting
                    debug!("GPU node positions updated successfully");
                } else {
                    error!("Failed to get node positions from GPU");
                }
            }

            HttpResponse::Ok().json(json!({
                "status": "success",
                "message": "Graph refreshed successfully"
            }))
        },
        Err(e) => {
            error!("Failed to refresh graph data: {}", e);
            HttpResponse::InternalServerError().json(json!({
                "status": "error",
                "message": format!("Failed to refresh graph data: {}", e)
            }))
        }
    }
}

pub async fn update_graph(state: web::Data<AppState>) -> Result<HttpResponse, ActixError> {
    // Load metadata from file
    let metadata_store = match FileService::load_or_create_metadata() {
        Ok(store) => store,
        Err(e) => {
            error!("Failed to load metadata: {}", e);
            return Ok(HttpResponse::InternalServerError().json(json!({
                "status": "error",
                "message": format!("Failed to load metadata: {}", e)
            })));
        }
    };

    // Build graph directly from metadata
    match GraphService::build_graph_from_metadata(&metadata_store).await {
        Ok(graph) => {
            // Update graph data
            *state.graph_service.graph_data.write().await = graph.clone();
            
            // Send binary position update to clients
            if let Some(gpu) = &state.gpu_compute {
                if let Ok(_nodes) = gpu.read().await.get_node_data() {
                    // Note: Socket-flow server will handle broadcasting
                    debug!("GPU node positions updated successfully");
                } else {
                    error!("Failed to get node positions from GPU");
                }
            }
            
            Ok(HttpResponse::Ok().json(json!({
                "status": "success",
                "message": "Graph updated successfully"
            })))
        },
        Err(e) => {
            error!("Failed to build graph: {}", e);
            Ok(HttpResponse::InternalServerError().json(json!({
                "status": "error",
                "message": format!("Failed to build graph: {}", e)
            })))
        }
    }
}

----
handlers/mod.rs
pub mod file_handler;
pub mod graph_handler;
pub mod perplexity_handler;
pub mod ragflow_handler;
pub mod socket_flow_handler;
pub mod visualization_handler;

----
handlers/visualization_handler.rs
use crate::config::Settings;
use actix_web::{get, put, web, HttpResponse};
use log::{error, info, debug};
use serde::{Deserialize, Serialize};
use serde_json::Value;
use std::collections::HashMap;
use std::fs;
use std::path::PathBuf;
use std::sync::Arc;
use tokio::sync::RwLock;
use crate::utils::case_conversion::to_snake_case;

#[derive(Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct SettingResponse {
    pub category: String,
    pub setting: String,
    pub value: Value,
    pub success: bool,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct CategorySettingsResponse {
    pub category: String,
    pub settings: HashMap<String, Value>,
    pub success: bool,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct CategorySettingsUpdate {
    pub settings: HashMap<String, Value>,
}

// Request/Response structures for individual settings
#[derive(Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct SettingValue {
    pub value: Value,
}

// Helper function to get setting value from settings object
fn get_setting_value(settings: &Settings, category: &str, setting: &str) -> Result<Value, String> {
    debug!("Attempting to get setting value for category: {}, setting: {}", category, setting);
    
    // Convert kebab-case URL parameters to snake_case
    let category_snake = to_snake_case(category);
    let setting_snake = to_snake_case(setting);
    debug!("Converted category '{}' to snake_case: '{}'", category, category_snake);
    debug!("Converted setting '{}' to snake_case: '{}'", setting, setting_snake);
    
    // Convert settings to Value for easier access
    let settings_value = match serde_json::to_value(&settings) {
        Ok(v) => {
            debug!("Successfully serialized settings to JSON");
            v
        },
        Err(e) => {
            error!("Failed to serialize settings to JSON: {}", e);
            return Err(format!("Failed to serialize settings: {}", e));
        }
    };
    
    // Special handling for nested settings
    match category_snake.as_str() {
        "hologram" => {
            if let Some(hologram) = settings_value.get("visualization").and_then(|v| v.get("hologram")) {
                if let Some(setting_value) = hologram.get(&setting_snake) {
                    debug!("Found hologram setting '{}': {:?}", setting_snake, setting_value);
                    return Ok(setting_value.clone());
                }
            }
        },
        "websocket" => {
            if let Some(websocket) = settings_value.get("websocket") {
                if let Some(setting_value) = websocket.get(&setting_snake) {
                    debug!("Found websocket setting '{}': {:?}", setting_snake, setting_value);
                    return Ok(setting_value.clone());
                }
            }
        },
        _ => {}
    }
    
    // Regular category lookup
    let category_value = match settings_value.get(&category_snake) {
        Some(v) => {
            debug!("Found category '{}' in settings", category_snake);
            v
        },
        None => {
            error!("Category '{}' not found in settings", category_snake);
            return Err(format!("Category '{}' not found", category));
        }
    };
    
    // Get setting value using snake_case for internal lookup
    match category_value.get(&setting_snake) {
        Some(v) => {
            debug!("Found setting '{}' in category '{}'", setting_snake, category_snake);
            Ok(v.clone())
        },
        None => {
            error!("Setting '{}' not found in category '{}'", setting_snake, category_snake);
            Err(format!("Setting '{}' not found in category '{}'", setting, category))
        }
    }
}

// Helper function to update setting value in settings object
fn update_setting_value(settings: &mut Settings, category: &str, setting: &str, value: &Value) -> Result<(), String> {
    debug!("Attempting to update setting value for category: {}, setting: {}", category, setting);
    
    // Convert kebab-case URL parameters to snake_case
    let category_snake = to_snake_case(category);
    let setting_snake = to_snake_case(setting);
    
    match category_snake.as_str() {
        "websocket" => {
            match setting_snake.as_str() {
                "heartbeat_interval" => {
                    if let Some(v) = value.as_u64() {
                        settings.websocket.heartbeat_interval = v;
                        return Ok(());
                    }
                },
                "heartbeat_timeout" => {
                    if let Some(v) = value.as_u64() {
                        settings.websocket.heartbeat_timeout = v;
                        return Ok(());
                    }
                },
                "max_reconnect_attempts" => {
                    if let Some(v) = value.as_u64() {
                        settings.websocket.max_reconnect_attempts = v as u32;
                        return Ok(());
                    }
                },
                "reconnect_delay" => {
                    if let Some(v) = value.as_u64() {
                        settings.websocket.reconnect_delay = v;
                        return Ok(());
                    }
                },
                "update_rate" => {
                    if let Some(v) = value.as_u64() {
                        settings.websocket.update_rate = v as u32;
                        return Ok(());
                    }
                },
                _ => {}
            }
        },
        _ => {}
    }
    
    // For other settings, use the standard deserialization approach
    match serde_json::from_value(value.clone()) {
        Ok(v) => {
            match category_snake.as_str() {
                "hologram" => {
                    if let Some(hologram) = &mut settings.visualization.hologram {
                        if let Err(e) = set_field_value(hologram, &setting_snake, v) {
                            return Err(format!("Failed to set hologram setting: {}", e));
                        }
                    }
                },
                _ => {
                    if let Err(e) = set_field_value(settings, &category_snake, v) {
                        return Err(format!("Failed to set setting: {}", e));
                    }
                }
            }
            Ok(())
        },
        Err(e) => Err(format!("Invalid value for setting: {}", e))
    }
}

// GET /api/visualization/settings/{category}
#[get("/settings/{category}")]
pub async fn get_category_settings(
    settings: web::Data<Arc<RwLock<Settings>>>,
    path: web::Path<String>
) -> HttpResponse {
    let category = path.into_inner();
    debug!("Getting settings for category: {}", category);

    let settings_guard = settings.read().await;
    match get_category_settings_value(&settings_guard, &category) {
        Ok(value) => {
            let settings_map: HashMap<String, Value> = value.as_object()
                .map(|m| m.iter().map(|(k, v)| (k.clone(), v.clone())).collect())
                .unwrap_or_default();
            
            HttpResponse::Ok().json(CategorySettingsResponse {
                category,
                settings: settings_map,
                success: true,
                error: None,
            })
        }
        Err(e) => {
            error!("Failed to get category settings: {}", e);
            HttpResponse::BadRequest().json(CategorySettingsResponse {
                category,
                settings: HashMap::new(),
                success: false,
                error: Some(e),
            })
        }
    }
}

// PUT /api/visualization/settings/{category}
#[put("/settings/{category}")]
pub async fn update_category_settings(
    settings: web::Data<Arc<RwLock<Settings>>>,
    path: web::Path<String>,
    update: web::Json<CategorySettingsUpdate>
) -> HttpResponse {
    let category = path.into_inner();
    debug!("Updating settings for category: {}", category);

    let mut settings_guard = settings.write().await;
    let settings_map: HashMap<String, Value> = update.settings.clone();

    let mut success = true;
    let mut error_msg = None;

    for (setting, value) in settings_map {
        if let Err(e) = update_setting_value(&mut settings_guard, &category, &setting, &value) {
            error!("Failed to update setting {}.{}: {}", category, setting, e);
            success = false;
            error_msg = Some(e);
            break;
        }
    }

    if success {
        if let Err(e) = save_settings_to_file(&settings_guard) {
            error!("Failed to save settings to file: {}", e);
            success = false;
            error_msg = Some(format!("Failed to save settings: {}", e));
        }
    }

    HttpResponse::Ok().json(CategorySettingsResponse {
        category,
        settings: update.settings.clone(),
        success,
        error: error_msg,
    })
}

// GET /api/visualization/settings/{category}/{setting}
pub async fn get_setting(
    settings: web::Data<Arc<RwLock<Settings>>>,
    path: web::Path<(String, String)>,
) -> HttpResponse {
    let (category, setting) = path.into_inner();
    info!("Getting setting for category: {}, setting: {}", category, setting);
    
    let settings_guard = match settings.read().await {
        guard => {
            debug!("Successfully acquired settings read lock");
            guard
        }
    };

    match get_setting_value(&*settings_guard, &category, &setting) {
        Ok(value) => {
            debug!("Successfully retrieved setting value: {:?}", value);
            HttpResponse::Ok().json(SettingResponse {
                category,
                setting,
                value,
                success: true,
                error: None,
            })
        },
        Err(e) => {
            error!("Failed to get setting value: {}", e);
            HttpResponse::BadRequest().json(SettingResponse {
                category,
                setting,
                value: Value::Null,
                success: false,
                error: Some(e),
            })
        }
    }
}

// PUT /api/visualization/settings/{category}/{setting}
pub async fn update_setting(
    settings: web::Data<Arc<RwLock<Settings>>>,
    path: web::Path<(String, String)>,
    value: web::Json<Value>,
) -> HttpResponse {
    let (category, setting) = path.into_inner();
    info!("Updating setting for category: {}, setting: {}", category, setting);
    
    let mut settings_guard = match settings.write().await {
        guard => {
            debug!("Successfully acquired settings write lock");
            guard
        }
    };

    match update_setting_value(&mut *settings_guard, &category, &setting, &value) {
        Ok(_) => {
            if let Err(e) = save_settings_to_file(&*settings_guard) {
                error!("Failed to save settings to file: {}", e);
                return HttpResponse::InternalServerError().json(SettingResponse {
                    category,
                    setting,
                    value: value.into_inner(),
                    success: false,
                    error: Some("Failed to persist settings".to_string()),
                });
            }
            HttpResponse::Ok().json(SettingResponse {
                category,
                setting,
                value: value.into_inner(),
                success: true,
                error: None,
            })
        },
        Err(e) => {
            error!("Failed to update setting value: {}", e);
            HttpResponse::BadRequest().json(SettingResponse {
                category,
                setting,
                value: value.into_inner(),
                success: false,
                error: Some(e),
            })
        }
    }
}

// Register the handlers with the Actix web app
pub fn config(cfg: &mut web::ServiceConfig) {
    cfg.service(get_category_settings)
       .service(update_category_settings)
       .service(
           web::resource("/settings/{category}/{setting}")
               .route(web::get().to(get_setting))
               .route(web::put().to(update_setting))
       );
}

fn save_settings_to_file(settings: &Settings) -> std::io::Result<()> {
    debug!("Attempting to save settings to file");
    
    // Use absolute path from environment or default to /app/settings.toml
    let settings_path = std::env::var("SETTINGS_FILE_PATH")
        .map(PathBuf::from)
        .unwrap_or_else(|_| PathBuf::from("/app/settings.toml"));
    
    info!("Attempting to save settings to: {:?}", settings_path);
    
    // Ensure parent directory exists and is writable
    if let Some(parent) = settings_path.parent() {
        match fs::create_dir_all(parent) {
            Ok(_) => debug!("Created parent directories: {:?}", parent),
            Err(e) => {
                error!("Failed to create parent directories: {}", e);
                return Err(e);
            }
        }
    }
    
    // Check if file exists and is writable
    if settings_path.exists() {
        match fs::metadata(&settings_path) {
            Ok(metadata) => {
                if metadata.permissions().readonly() {
                    error!("Settings file is read-only: {:?}", settings_path);
                    return Err(std::io::Error::new(
                        std::io::ErrorKind::PermissionDenied,
                        "Settings file is read-only"
                    ));
                }
            }
            Err(e) => {
                error!("Failed to check settings file permissions: {}", e);
                return Err(e);
            }
        }
    }
    
    // Convert settings to TOML
    let toml_string = match toml::to_string_pretty(&settings) {
        Ok(s) => s,
        Err(e) => {
            error!("Failed to serialize settings to TOML: {}", e);
            return Err(std::io::Error::new(std::io::ErrorKind::Other, e));
        }
    };
    
    // Write to settings.toml
    match fs::write(&settings_path, toml_string) {
        Ok(_) => {
            info!("Settings saved successfully to: {:?}", settings_path);
            Ok(())
        }
        Err(e) => {
            error!("Failed to write settings file: {}", e);
            Err(e)
        }
    }
}

----
handlers/graph_handler.rs
use actix_web::{web, HttpResponse, Responder};
use crate::AppState;
use serde::{Serialize, Deserialize};
use log::{info, debug, error, warn};
use std::collections::HashMap;
use std::sync::Arc;
use crate::models::metadata::Metadata;
use crate::utils::socket_flow_messages::Node;
use crate::services::file_service::FileService;
use crate::services::graph_service::GraphService;

#[derive(Serialize)]
#[serde(rename_all = "camelCase")]
pub struct GraphResponse {
    pub nodes: Vec<Node>,
    pub edges: Vec<crate::models::edge::Edge>,
    pub metadata: HashMap<String, Metadata>,
}

#[derive(Serialize)]
#[serde(rename_all = "camelCase")]
pub struct PaginatedGraphResponse {
    pub nodes: Vec<Node>,
    pub edges: Vec<crate::models::edge::Edge>,
    pub metadata: HashMap<String, Metadata>,
    pub total_pages: usize,
    pub current_page: usize,
    pub total_items: usize,
    pub page_size: usize,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct GraphQuery {
    pub query: Option<String>,
    pub page: Option<usize>,
    #[serde(rename = "pageSize")]
    pub page_size: Option<usize>,
    pub sort: Option<String>,
    pub filter: Option<String>,
}

pub async fn get_graph_data(state: web::Data<AppState>) -> impl Responder {
    info!("Received request for graph data");
    let graph = state.graph_service.graph_data.read().await;
    
    debug!("Preparing graph response with {} nodes and {} edges",
        graph.nodes.len(),
        graph.edges.len()
    );

    let response = GraphResponse {
        nodes: graph.nodes.clone(),
        edges: graph.edges.clone(),
        metadata: graph.metadata.clone(),
    };

    HttpResponse::Ok().json(response)
}

pub async fn get_paginated_graph_data(
    state: web::Data<AppState>,
    query: web::Query<GraphQuery>,
) -> impl Responder {
    info!("Received request for paginated graph data with params: {:?}", query);

    // Convert to 0-based indexing internally
    let page = query.page.map(|p| p.saturating_sub(1)).unwrap_or(0);
    let page_size = query.page_size.unwrap_or(100);

    if page_size == 0 {
        error!("Invalid page size: {}", page_size);
        return HttpResponse::BadRequest().json(serde_json::json!({
            "error": "Page size must be greater than 0"
        }));
    }

    let graph = state.graph_service.graph_data.read().await;
    let total_items = graph.nodes.len();
    
    if total_items == 0 {
        debug!("Graph is empty");
        return HttpResponse::Ok().json(PaginatedGraphResponse {
            nodes: Vec::new(),
            edges: Vec::new(),
            metadata: HashMap::new(),
            total_pages: 0,
            current_page: 1, // Return 1-based page number
            total_items: 0,
            page_size,
        });
    }

    let total_pages = (total_items + page_size - 1) / page_size;

    if page >= total_pages {
        warn!("Requested page {} exceeds total pages {}", page + 1, total_pages);
        return HttpResponse::BadRequest().json(serde_json::json!({
            "error": format!("Page {} exceeds total available pages {}", page + 1, total_pages)
        }));
    }

    let start = page * page_size;
    let end = std::cmp::min(start + page_size, total_items);

    debug!("Calculating slice from {} to {} out of {} total items", start, end, total_items);

    let page_nodes = graph.nodes[start..end].to_vec();

    // Get edges where either source or target is in the current page
    let node_ids: std::collections::HashSet<_> = page_nodes.iter()
        .map(|node| node.id.clone())
        .collect();

    let relevant_edges: Vec<_> = graph.edges.iter()
        .filter(|edge| {
            // Include edges where either the source or target is in our page
            node_ids.contains(&edge.source) || node_ids.contains(&edge.target)
        })
        .cloned()
        .collect();

    debug!("Found {} relevant edges for {} nodes", relevant_edges.len(), page_nodes.len());

    let response = PaginatedGraphResponse {
        nodes: page_nodes,
        edges: relevant_edges,
        metadata: graph.metadata.clone(),
        total_pages,
        current_page: page + 1, // Convert back to 1-based indexing for response
        total_items,
        page_size,
    };

    HttpResponse::Ok().json(response)
}

// Rebuild graph from existing metadata
pub async fn refresh_graph(state: web::Data<AppState>) -> impl Responder {
    info!("Received request to refresh graph");
    
    let metadata = state.metadata.read().await.clone();
    
    match GraphService::build_graph_from_metadata(&metadata).await {
        Ok(mut new_graph) => {
            let mut graph = state.graph_service.graph_data.write().await;
            
            // Preserve existing node positions
            let old_positions: HashMap<String, (f32, f32, f32)> = graph.nodes.iter()
                .map(|node| (node.id.clone(), (node.x(), node.y(), node.z())))
                .collect();
            
            // Update positions in new graph
            for node in &mut new_graph.nodes {
                if let Some(&(x, y, z)) = old_positions.get(&node.id) {
                    node.set_x(x);
                    node.set_y(y);
                    node.set_z(z);
                }
            }
            
            *graph = new_graph;
            debug!("Graph refreshed successfully");
            
            HttpResponse::Ok().json(serde_json::json!({
                "success": true,
                "message": "Graph refreshed successfully"
            }))
        },
        Err(e) => {
            error!("Failed to refresh graph: {}", e);
            HttpResponse::InternalServerError().json(serde_json::json!({
                "success": false,
                "error": format!("Failed to refresh graph: {}", e)
            }))
        }
    }
}

// Fetch new metadata and rebuild graph
pub async fn update_graph(state: web::Data<AppState>) -> impl Responder {
    info!("Received request to update graph");
    
    // Load current metadata
    let mut metadata = match FileService::load_or_create_metadata() {
        Ok(m) => m,
        Err(e) => {
            error!("Failed to load metadata: {}", e);
            return HttpResponse::InternalServerError().json(serde_json::json!({
                "success": false,
                "error": format!("Failed to load metadata: {}", e)
            }));
        }
    };
    
    // Fetch and process new files
    match FileService::fetch_and_process_files(&*state.github_service, Arc::clone(&state.settings), &mut metadata).await {
        Ok(processed_files) => {
            if processed_files.is_empty() {
                debug!("No new files to process");
                return HttpResponse::Ok().json(serde_json::json!({
                    "success": true,
                    "message": "No updates needed"
                }));
            }
            
            debug!("Processing {} new files", processed_files.len());
            
            // Update metadata in app state
            {
                let mut app_metadata = state.metadata.write().await;
                *app_metadata = metadata.clone();
            }
            
            // Build new graph
            match GraphService::build_graph_from_metadata(&metadata).await {
                Ok(mut new_graph) => {
                    let mut graph = state.graph_service.graph_data.write().await;
                    
                    // Preserve existing node positions
                    let old_positions: HashMap<String, (f32, f32, f32)> = graph.nodes.iter()
                        .map(|node| (node.id.clone(), (node.x(), node.y(), node.z())))
                        .collect();
                    
                    // Update positions in new graph
                    for node in &mut new_graph.nodes {
                        if let Some(&(x, y, z)) = old_positions.get(&node.id) {
                            node.set_x(x);
                            node.set_y(y);
                            node.set_z(z);
                        }
                    }
                    
                    *graph = new_graph;
                    debug!("Graph updated successfully");
                    
                    HttpResponse::Ok().json(serde_json::json!({
                        "success": true,
                        "message": format!("Graph updated with {} new files", processed_files.len())
                    }))
                },
                Err(e) => {
                    error!("Failed to build new graph: {}", e);
                    HttpResponse::InternalServerError().json(serde_json::json!({
                        "success": false,
                        "error": format!("Failed to build new graph: {}", e)
                    }))
                }
            }
        },
        Err(e) => {
            error!("Failed to fetch and process files: {}", e);
            HttpResponse::InternalServerError().json(serde_json::json!({
                "success": false,
                "error": format!("Failed to fetch and process files: {}", e)
            }))
        }
    }
}

----
handlers/socket_flow_handler.rs
use std::sync::Arc;
use actix::prelude::*;
use actix_web::{web, Error, HttpRequest, HttpResponse};
use actix_web_actors::ws;
use tokio::sync::RwLock;
use log::{info, warn, debug};
use serde::{Deserialize, Serialize};

use crate::app_state::AppState;
use crate::utils::socket_flow_messages::{PingMessage, PongMessage};
use crate::config::Settings;

#[derive(Debug, Serialize, Deserialize)]
pub struct WebSocketSettings {
    pub heartbeat_interval: u64,
    pub heartbeat_timeout: u64,
    pub max_reconnect_attempts: u32,
    pub reconnect_delay: u64,
    pub update_rate: u32,
}

pub struct SocketFlowServer {
    app_state: Arc<AppState>,
    settings: Arc<RwLock<Settings>>,
    last_ping: Option<u64>,
}

impl SocketFlowServer {
    const POSITION_UPDATE_INTERVAL: std::time::Duration = std::time::Duration::from_millis(16);

    pub fn new(app_state: Arc<AppState>, settings: Arc<RwLock<Settings>>) -> Self {
        Self {
            app_state,
            settings,
            last_ping: None,
        }
    }

    fn handle_ping(&mut self, msg: PingMessage) -> PongMessage {
        self.last_ping = Some(msg.timestamp);
        PongMessage {
            type_: "pong".to_string(),
            timestamp: msg.timestamp,
        }
    }

    pub async fn get_settings(&self) -> WebSocketSettings {
        let settings = self.settings.read().await;
        WebSocketSettings {
            heartbeat_interval: settings.websocket.heartbeat_interval,
            heartbeat_timeout: settings.websocket.heartbeat_timeout,
            max_reconnect_attempts: settings.websocket.max_reconnect_attempts,
            reconnect_delay: settings.websocket.reconnect_delay,
            update_rate: settings.websocket.update_rate,
        }
    }
}

impl Actor for SocketFlowServer {
    type Context = ws::WebsocketContext<Self>;

    fn started(&mut self, ctx: &mut Self::Context) {
        info!("[WebSocket] Client connected");
        
        // Clone Arc references for the interval closure
        let app_state = self.app_state.clone();
        
        ctx.run_interval(Self::POSITION_UPDATE_INTERVAL, move |_actor, ctx| {
            // Get current node positions and velocities
            let app_state_clone = app_state.clone();
            
            // Spawn a future to get positions
            let fut = async move {
                let nodes = app_state_clone.graph_service.get_node_positions().await;
                
                // Create binary data: 24 bytes per node (6 f32s)
                let mut binary_data = Vec::with_capacity(nodes.len() * 24);
                
                for node in nodes {
                    // Position (x, y, z)
                    binary_data.extend_from_slice(&node.data.position[0].to_le_bytes());
                    binary_data.extend_from_slice(&node.data.position[1].to_le_bytes());
                    binary_data.extend_from_slice(&node.data.position[2].to_le_bytes());
                    
                    // Velocity (x, y, z)
                    binary_data.extend_from_slice(&node.data.velocity[0].to_le_bytes());
                    binary_data.extend_from_slice(&node.data.velocity[1].to_le_bytes());
                    binary_data.extend_from_slice(&node.data.velocity[2].to_le_bytes());
                }
                
                binary_data
            };
            
            // Convert the future to an actix future and handle it
            let fut = fut.into_actor(_actor);
            ctx.spawn(fut.map(|binary_data, _actor, ctx| {
                ctx.binary(binary_data);
            }));
        });
    }

    fn stopped(&mut self, _: &mut Self::Context) {
        info!("[WebSocket] Client disconnected");
    }
}

impl StreamHandler<Result<ws::Message, ws::ProtocolError>> for SocketFlowServer {
    fn handle(&mut self, msg: Result<ws::Message, ws::ProtocolError>, ctx: &mut Self::Context) {
        match msg {
            Ok(ws::Message::Ping(msg)) => {
                ctx.pong(&msg);
            }
            Ok(ws::Message::Text(text)) => {
                if let Ok(ping_msg) = serde_json::from_str::<PingMessage>(&text) {
                    let pong = self.handle_ping(ping_msg);
                    if let Ok(response) = serde_json::to_string(&pong) {
                        ctx.text(response);
                    }
                }
            }
            Ok(ws::Message::Binary(_)) => {
                warn!("[WebSocket] Unexpected binary message");
            }
            Ok(ws::Message::Close(reason)) => {
                info!("[WebSocket] Client disconnected: {:?}", reason);
                ctx.close(reason);
                ctx.stop();
            }
            _ => {}
        }
    }
}

pub async fn get_websocket_settings(
    settings: web::Data<Arc<RwLock<Settings>>>
) -> Result<HttpResponse, Error> {
    let settings = settings.read().await;
    let ws_settings = WebSocketSettings {
        heartbeat_interval: settings.websocket.heartbeat_interval,
        heartbeat_timeout: settings.websocket.heartbeat_timeout,
        max_reconnect_attempts: settings.websocket.max_reconnect_attempts,
        reconnect_delay: settings.websocket.reconnect_delay,
        update_rate: settings.websocket.update_rate,
    };
    
    Ok(HttpResponse::Ok().json(ws_settings))
}

pub async fn update_websocket_settings(
    settings: web::Data<Arc<RwLock<Settings>>>,
    new_settings: web::Json<WebSocketSettings>
) -> Result<HttpResponse, Error> {
    let mut settings = settings.write().await;
    
    settings.websocket.heartbeat_interval = new_settings.heartbeat_interval;
    settings.websocket.heartbeat_timeout = new_settings.heartbeat_timeout;
    settings.websocket.max_reconnect_attempts = new_settings.max_reconnect_attempts;
    settings.websocket.reconnect_delay = new_settings.reconnect_delay;
    settings.websocket.update_rate = new_settings.update_rate;
    
    debug!("Updated WebSocket settings: {:?}", new_settings);
    Ok(HttpResponse::Ok().json(new_settings.0))
}

pub async fn socket_flow_handler(
    req: HttpRequest,
    stream: web::Payload,
    app_state: web::Data<AppState>,
    settings: web::Data<Arc<RwLock<Settings>>>,
) -> Result<HttpResponse, Error> {
    let server = SocketFlowServer::new(app_state.into_inner(), settings.get_ref().clone());
    ws::start(server, &req, stream)
}

----
handlers/ragflow_handler.rs
use actix_web::{web, HttpResponse, ResponseError, Responder};
use crate::AppState;
use serde::{Serialize, Deserialize};
use log::error;
use serde_json::json;
use futures::StreamExt;
use actix_web::web::Bytes;
use crate::services::ragflow_service::RAGFlowError;

#[derive(Debug, Deserialize)]
pub struct InitChatRequest {
    pub user_id: String,
}

#[derive(Debug, Serialize)]
pub struct InitChatResponse {
    pub success: bool,
    pub conversation_id: String,
    pub message: Option<String>,
}

#[derive(Serialize, Deserialize)]
pub struct SendMessageRequest {
    pub message: String,
    pub quote: Option<bool>,
    pub doc_ids: Option<Vec<String>>,
    pub stream: Option<bool>,
}

// Implement ResponseError for RAGFlowError
impl ResponseError for RAGFlowError {
    fn error_response(&self) -> HttpResponse {
        HttpResponse::InternalServerError()
            .json(json!({"error": self.to_string()}))
    }
}

/// Handler for sending a message to the RAGFlow service.
pub async fn send_message(
    state: web::Data<AppState>,
    request: web::Json<SendMessageRequest>,
) -> impl Responder {
    let ragflow_service = match &state.ragflow_service {
        Some(service) => service,
        None => return HttpResponse::ServiceUnavailable().json(json!({
            "error": "RAGFlow service is not available"
        }))
    };

    let conversation_id = state.ragflow_conversation_id.clone();
    match ragflow_service.send_message(
        conversation_id,
        request.message.clone(),
        request.quote.unwrap_or(false),
        request.doc_ids.clone(),
        request.stream.unwrap_or(false),
    ).await {
        Ok(response_stream) => {
            let mapped_stream = response_stream.map(|result| {
                result.map(|answer| {
                    let json_response = json!({
                        "answer": answer,
                        "success": true
                    });
                    Bytes::from(json_response.to_string())
                })
                .map_err(|e| actix_web::error::ErrorInternalServerError(e))
            });
            HttpResponse::Ok().streaming(mapped_stream)
        },
        Err(e) => {
            error!("Error sending message: {}", e);
            HttpResponse::InternalServerError().json(json!({
                "error": format!("Failed to send message: {}", e)
            }))
        }
    }
}

/// Handler for initiating a new chat conversation.
pub async fn init_chat(
    state: web::Data<AppState>,
    request: web::Json<InitChatRequest>,
) -> impl Responder {
    let user_id = request.user_id.clone();
    let ragflow_service = match &state.ragflow_service {
        Some(service) => service,
        None => return HttpResponse::ServiceUnavailable().json(json!({
            "error": "RAGFlow service is not available"
        }))
    };

    match ragflow_service.create_conversation(user_id.clone()).await {
        Ok(conversation_id) => HttpResponse::Ok().json(InitChatResponse {
            success: true,
            conversation_id,
            message: None,
        }),
        Err(e) => {
            error!("Failed to initialize chat: {}", e);
            HttpResponse::InternalServerError().json(json!({
                "error": format!("Failed to initialize chat: {}", e)
            }))
        }
    }
}

/// Handler for retrieving chat history.
pub async fn get_chat_history(
    _state: web::Data<AppState>,
    _conversation_id: web::Path<String>,
) -> impl Responder {
    HttpResponse::NotImplemented().json(json!({
        "message": "Chat history retrieval is not implemented"
    }))
}

----
handlers/perplexity_handler.rs
use crate::AppState;
use actix_web::{post, web, HttpResponse, Responder};
use serde::{Deserialize, Serialize};
use serde_json::json;
use log::{error, info};

#[derive(Debug, Deserialize)]
pub struct PerplexityRequest {
    pub query: String,
    pub conversation_id: Option<String>,
}

#[derive(Debug, Serialize)]
pub struct PerplexityResponse {
    pub answer: String,
    pub conversation_id: String,
}

#[post("")]
pub async fn handle_perplexity(
    state: web::Data<AppState>,
    request: web::Json<PerplexityRequest>,
) -> impl Responder {
    info!("Received perplexity request: {:?}", request);

    let perplexity_service = match &state.perplexity_service {
        Some(service) => service,
        None => return HttpResponse::ServiceUnavailable().json(json!({
            "error": "Perplexity service is not available"
        }))
    };

    let conversation_id = state.ragflow_conversation_id.clone();
    match perplexity_service.query(&request.query, &conversation_id).await {
        Ok(answer) => {
            let response = PerplexityResponse {
                answer,
                conversation_id,
            };
            HttpResponse::Ok().json(response)
        }
        Err(e) => {
            error!("Error processing perplexity request: {}", e);
            HttpResponse::InternalServerError().json(format!("Error: {}", e))
        }
    }
}

----
handlers/settings/websocket.rs
use actix_web::{get, put, web, HttpResponse};
use serde::{Deserialize, Serialize};
use serde_json::Value;
use std::sync::Arc;
use tokio::sync::RwLock;
use log::{debug, error};

use crate::config::Settings;
use super::common::{SettingResponse, get_setting_value, update_setting_value};

#[derive(Debug, Serialize, Deserialize)]
pub struct WebSocketSettings {
    pub heartbeat_interval: u64,
    pub heartbeat_timeout: u64,
    pub max_reconnect_attempts: u32,
    pub reconnect_delay: u64,
    pub update_rate: u32,
}

#[get("/{setting}")]
async fn get_websocket_setting(
    settings: web::Data<Arc<RwLock<Settings>>>,
    path: web::Path<String>,
) -> HttpResponse {
    let setting = path.into_inner();
    let settings = settings.read().await;
    
    match get_setting_value(&settings, "websocket", &setting) {
        Ok(value) => HttpResponse::Ok().json(SettingResponse {
            category: "websocket".to_string(),
            setting: setting.clone(),
            value,
            success: true,
            error: None,
        }),
        Err(e) => HttpResponse::BadRequest().json(SettingResponse {
            category: "websocket".to_string(),
            setting,
            value: Value::Null,
            success: false,
            error: Some(e),
        }),
    }
}

#[put("/{setting}")]
async fn update_websocket_setting(
    settings: web::Data<Arc<RwLock<Settings>>>,
    path: web::Path<String>,
    value: web::Json<Value>,
) -> HttpResponse {
    let setting = path.into_inner();
    let mut settings = settings.write().await;
    
    match update_setting_value::<serde_json::Value>(&mut settings, "websocket", &setting, &value) {
        Ok(_) => HttpResponse::Ok().json(SettingResponse {
            category: "websocket".to_string(),
            setting: setting.clone(),
            value: value.into_inner(),
            success: true,
            error: None,
        }),
        Err(e) => HttpResponse::BadRequest().json(SettingResponse {
            category: "websocket".to_string(),
            setting,
            value: value.into_inner(),
            success: false,
            error: Some(e),
        }),
    }
}

pub fn config(cfg: &mut web::ServiceConfig) {
    cfg.service(get_websocket_setting)
       .service(update_websocket_setting);
}

----
handlers/settings/visualization.rs
use actix_web::{get, put, web, HttpResponse};
use serde_json::Value;
use std::sync::Arc;
use tokio::sync::RwLock;
use log::{debug, error};

use crate::config::Settings;
use super::common::{SettingResponse, CategorySettingsResponse, CategorySettingsUpdate, get_setting_value, update_setting_value, get_category_settings, update_category_settings};

#[get("/{category}")]
async fn get_visualization_category(
    settings: web::Data<Arc<RwLock<Settings>>>,
    path: web::Path<String>,
) -> HttpResponse {
    let category = path.into_inner();
    let settings = settings.read().await;
    
    match get_category_settings(&settings, &category) {
        Ok(settings) => HttpResponse::Ok().json(CategorySettingsResponse {
            category: category.clone(),
            settings,
            success: true,
            error: None,
        }),
        Err(e) => HttpResponse::BadRequest().json(CategorySettingsResponse {
            category,
            settings: Value::Null,
            success: false,
            error: Some(e),
        }),
    }
}

#[put("/{category}")]
async fn update_visualization_category(
    settings: web::Data<Arc<RwLock<Settings>>>,
    path: web::Path<String>,
    update: web::Json<CategorySettingsUpdate>,
) -> HttpResponse {
    let category = path.into_inner();
    let mut settings = settings.write().await;
    
    match update_category_settings(&mut settings, &category, update.into_inner()) {
        Ok(updated_settings) => HttpResponse::Ok().json(CategorySettingsResponse {
            category: category.clone(),
            settings: updated_settings,
            success: true,
            error: None,
        }),
        Err(e) => HttpResponse::BadRequest().json(CategorySettingsResponse {
            category,
            settings: Value::Null,
            success: false,
            error: Some(e),
        }),
    }
}

#[get("/{category}/{setting}")]
async fn get_visualization_setting(
    settings: web::Data<Arc<RwLock<Settings>>>,
    path: web::Path<(String, String)>,
) -> HttpResponse {
    let (category, setting) = path.into_inner();
    let settings = settings.read().await;
    
    match get_setting_value(&settings, &category, &setting) {
        Ok(value) => HttpResponse::Ok().json(SettingResponse {
            category: category.clone(),
            setting: setting.clone(),
            value,
            success: true,
            error: None,
        }),
        Err(e) => HttpResponse::BadRequest().json(SettingResponse {
            category,
            setting,
            value: Value::Null,
            success: false,
            error: Some(e),
        }),
    }
}

#[put("/{category}/{setting}")]
async fn update_visualization_setting(
    settings: web::Data<Arc<RwLock<Settings>>>,
    path: web::Path<(String, String)>,
    value: web::Json<Value>,
) -> HttpResponse {
    let (category, setting) = path.into_inner();
    let mut settings = settings.write().await;
    
    match update_setting_value::<serde_json::Value>(&mut settings, &category, &setting, &value) {
        Ok(_) => HttpResponse::Ok().json(SettingResponse {
            category: category.clone(),
            setting: setting.clone(),
            value: value.into_inner(),
            success: true,
            error: None,
        }),
        Err(e) => HttpResponse::BadRequest().json(SettingResponse {
            category,
            setting,
            value: value.into_inner(),
            success: false,
            error: Some(e),
        }),
    }
}

pub fn config(cfg: &mut web::ServiceConfig) {
    cfg.service(get_visualization_category)
       .service(update_visualization_category)
       .service(get_visualization_setting)
       .service(update_visualization_setting);
}

----
handlers/settings/mod.rs
mod websocket;
mod visualization;
mod common;

pub use websocket::*;
pub use visualization::*;
pub use common::*;

use actix_web::{web, HttpResponse};
use crate::config::Settings;
use std::sync::Arc;
use tokio::sync::RwLock;

// Register all settings handlers
pub fn config(cfg: &mut web::ServiceConfig) {
    cfg.service(
        web::scope("/settings")
            .service(
                web::scope("/visualization")
                    .configure(visualization::config)
            )
            .service(
                web::scope("/websocket")
                    .configure(websocket::config)
            )
    );
}

----
handlers/settings/common.rs
use serde::{Deserialize, Serialize};
use serde_json::Value;
use std::collections::HashMap;
use crate::config::Settings;
use log::{debug, error};
use crate::utils::case_conversion::to_snake_case;

#[derive(Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct SettingResponse {
    pub category: String,
    pub setting: String,
    pub value: Value,
    pub success: bool,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct CategorySettingsResponse {
    pub category: String,
    pub settings: HashMap<String, Value>,
    pub success: bool,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct CategorySettingsUpdate {
    pub settings: HashMap<String, Value>,
}

// Helper function to get all settings in a category
pub fn get_category_settings(settings: &Settings, category: &str) -> Result<HashMap<String, Value>, String> {
    debug!("Attempting to get all settings for category: {}", category);
    
    // Convert kebab-case URL parameter to snake_case
    let category_snake = to_snake_case(category);
    
    // Convert settings to Value for easier access
    let settings_value = serde_json::to_value(&settings)
        .map_err(|e| format!("Failed to serialize settings: {}", e))?;
    
    // Get category object
    let category_value = settings_value.get(&category_snake)
        .ok_or_else(|| format!("Category '{}' not found", category))?;
    
    // Convert category value to HashMap
    if let Some(obj) = category_value.as_object() {
        Ok(obj.clone())
    } else {
        Err(format!("Category '{}' is not an object", category))
    }
}

// Helper function to update all settings in a category
pub fn update_category_settings(
    settings: &mut Settings,
    category: &str,
    update: CategorySettingsUpdate
) -> Result<HashMap<String, Value>, String> {
    debug!("Attempting to update all settings for category: {}", category);
    
    // Convert kebab-case URL parameter to snake_case
    let category_snake = to_snake_case(category);
    
    // Convert settings to Value for manipulation
    let settings_value = serde_json::to_value(settings)
        .map_err(|e| format!("Failed to serialize settings: {}", e))?;
    
    let mut settings_map = settings_value.as_object()
        .ok_or("Settings is not an object")?
        .clone();
    
    // Get category object
    let category_value = settings_map.get_mut(&category_snake)
        .ok_or_else(|| format!("Category '{}' not found", category))?;
    
    if let Some(obj) = category_value.as_object_mut() {
        // Update each setting in the category
        for (key, value) in update.settings {
            let key_snake = to_snake_case(&key);
            if obj.contains_key(&key_snake) {
                obj.insert(key_snake, value);
            } else {
                return Err(format!("Setting '{}' not found in category '{}'", key, category));
            }
        }
        
        // Update the settings object
        *settings = serde_json::from_value(serde_json::Value::Object(settings_map))?;
        
        // Return the updated category settings
        Ok(obj.clone())
    } else {
        Err(format!("Category '{}' is not an object", category))
    }
}

// Helper function to get setting value from settings object
pub fn get_setting_value(settings: &Settings, category: &str, setting: &str) -> Result<Value, String> {
    debug!("Attempting to get setting value for category: {}, setting: {}", category, setting);
    
    // Convert kebab-case URL parameters to snake_case
    let category_snake = to_snake_case(category);
    let setting_snake = to_snake_case(setting);
    
    // Convert settings to Value for easier access
    let settings_value = serde_json::to_value(&settings)
        .map_err(|e| format!("Failed to serialize settings: {}", e))?;
    
    // Get category object
    let category_value = settings_value.get(&category_snake)
        .ok_or_else(|| format!("Category '{}' not found", category))?;
    
    // Get setting value
    category_value.get(&setting_snake)
        .ok_or_else(|| format!("Setting '{}' not found in category '{}'", setting, category))
        .map(|v| v.clone())
}

// Helper function to update setting value in settings object
pub fn update_setting_value<T: serde::de::DeserializeOwned>(
    settings: &mut Settings,
    category: &str,
    setting: &str,
    value: &Value
) -> Result<(), String> {
    debug!("Attempting to update setting value for category: {}, setting: {}", category, setting);
    
    // Convert kebab-case URL parameters to snake_case
    let category_snake = to_snake_case(category);
    let setting_snake = to_snake_case(setting);
    
    // Deserialize the value
    let typed_value: T = serde_json::from_value(value.clone())
        .map_err(|e| format!("Invalid value for setting: {}", e))?;
    
    // Update the setting using reflection
    let settings_value = serde_json::to_value(settings)
        .map_err(|e| format!("Failed to serialize settings: {}", e))?;
    
    let mut settings_map = settings_value.as_object()
        .ok_or("Settings is not an object")?
        .clone();
    
    let category_value = settings_map.get_mut(&category_snake)
        .ok_or_else(|| format!("Category '{}' not found", category))?;
    
    if let Some(obj) = category_value.as_object_mut() {
        obj.insert(setting_snake, serde_json::to_value(typed_value)?);
        *settings = serde_json::from_value(serde_json::Value::Object(settings_map))?;
        Ok(())
    } else {
        Err(format!("Category '{}' is not an object", category))
    }
}

----
types/speech.rs
use tokio::sync::mpsc;
use std::error::Error;
use std::fmt;

#[derive(Debug)]
pub enum SpeechError {
    WebSocketError(tungstenite::Error),
    ConnectionError(String),
    SendError(mpsc::error::SendError<SpeechCommand>),
    SerializationError(serde_json::Error),
    ProcessError(std::io::Error),
    Base64Error(base64::DecodeError),
    BroadcastError(String),
    TTSError(String),
}

impl fmt::Display for SpeechError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            SpeechError::WebSocketError(e) => write!(f, "WebSocket error: {}", e),
            SpeechError::ConnectionError(msg) => write!(f, "Connection error: {}", msg),
            SpeechError::SendError(e) => write!(f, "Send error: {}", e),
            SpeechError::SerializationError(e) => write!(f, "Serialization error: {}", e),
            SpeechError::ProcessError(e) => write!(f, "Process error: {}", e),
            SpeechError::Base64Error(e) => write!(f, "Base64 error: {}", e),
            SpeechError::BroadcastError(msg) => write!(f, "Broadcast error: {}", msg),
            SpeechError::TTSError(msg) => write!(f, "TTS error: {}", msg),
        }
    }
}

impl Error for SpeechError {}

impl From<tungstenite::Error> for SpeechError {
    fn from(err: tungstenite::Error) -> Self {
        SpeechError::WebSocketError(err)
    }
}

impl From<mpsc::error::SendError<SpeechCommand>> for SpeechError {
    fn from(err: mpsc::error::SendError<SpeechCommand>) -> Self {
        SpeechError::SendError(err)
    }
}

impl From<serde_json::Error> for SpeechError {
    fn from(err: serde_json::Error) -> Self {
        SpeechError::SerializationError(err)
    }
}

impl From<std::io::Error> for SpeechError {
    fn from(err: std::io::Error) -> Self {
        SpeechError::ProcessError(err)
    }
}

impl From<base64::DecodeError> for SpeechError {
    fn from(err: base64::DecodeError) -> Self {
        SpeechError::Base64Error(err)
    }
}

#[derive(Debug, Clone)]
pub enum TTSProvider {
    OpenAI,
    Sonata,
}

#[derive(Debug)]
pub enum SpeechCommand {
    Initialize,
    SendMessage(String),
    Close,
    SetTTSProvider(TTSProvider),
}

----
types/xr.ts
export type XRHandedness = 'left' | 'right' | 'none';

export interface XRHandJoint {
    position: THREE.BufferAttribute;
    orientation: THREE.BufferAttribute;
    radius: number;
}

export interface XRHand extends THREE.Object3D {
    joints: {
        [key: string]: XRHandJoint;
    };
}

export interface XRInteractionState {
    isHolding: boolean;
    selectedObject: THREE.Object3D | null;
    interactionDistance: number;
    lastPinchTime: number;
}

export interface XRControllerState {
    left: XRInteractionState;
    right: XRInteractionState;
}

----
types/mod.rs
pub mod speech;

----
types/metadata.ts
export interface NodeMetadata {
    name: string;
    commitAge: number;        // Age in days
    hyperlinkCount: number;   // Number of hyperlinks
    importance: number;       // Normalized importance (0-1)
    position: {
        x: number;
        y: number;
        z: number;
    };
}

export interface HologramSettings {
    enabled: boolean;
    desktopQuality: 'low' | 'medium' | 'high';
    xrQuality: 'low' | 'medium';
    ringCount: number;
    ringSizes: number[];
    ringOpacity: number;
    ringColor: string;
    ringRotationSpeed: number;
    enableBuckminster: boolean;
    buckminsterScale: number;
    buckminsterOpacity: number;
    enableGeodesic: boolean;
    geodesicScale: number;
    geodesicOpacity: number;
    enableTriangleSphere: boolean;
    triangleSphereScale: number;
    triangleSphereOpacity: number;
    globalRotationSpeed: number;
    wireframeThickness: number;
}

export interface LabelSettings {
    textRenderingMode: 'sdf' | 'bitmap';
    textResolution: number;
    textPadding: number;
    textOutlineWidth: number;
    textOutlineColor: string;
    billboardMode: 'camera' | 'vertical';
    desktopFontSize: number;
    enableLabels: boolean;
    textColor: string;
}

----
services/perplexity_service.rs
use crate::config::Settings;
use crate::models::metadata::Metadata;
use crate::services::file_service::ProcessedFile;
use chrono::Utc;
use log::{error, info};
use reqwest::Client;
use serde::{Deserialize, Serialize};
use std::error::Error as StdError;
use std::fs;
use std::path::Path;
use std::sync::Arc;
use tokio::sync::RwLock;
use std::collections::HashMap;

const MARKDOWN_DIR: &str = "data/markdown";

#[derive(Debug, Serialize, Deserialize)]
struct PerplexityResponse {
    content: String,
    link: String,
}

#[derive(Debug, Serialize)]
struct QueryRequest {
    query: String,
    conversation_id: String,
    model: String,
    max_tokens: u32,
    temperature: f32,
    top_p: f32,
    presence_penalty: f32,
    frequency_penalty: f32,
}

pub struct PerplexityService {
    client: Client,
    settings: Arc<RwLock<Settings>>,
}

impl PerplexityService {
    pub async fn new(settings: Arc<RwLock<Settings>>) -> Result<Self, Box<dyn StdError + Send + Sync>> {
        let timeout = {
            let settings_read = settings.read().await;
            settings_read.perplexity.timeout
        };

        let client = Client::builder()
            .timeout(std::time::Duration::from_secs(timeout))
            .build()?;

        Ok(Self { 
            client,
            settings: Arc::clone(&settings)
        })
    }

    pub async fn query(&self, query: &str, conversation_id: &str) -> Result<String, Box<dyn StdError + Send + Sync>> {
        let settings = self.settings.read().await;
        let api_url = &settings.perplexity.api_url;
        info!("Sending query to Perplexity API: {}", api_url);

        let request = QueryRequest {
            query: query.to_string(),
            conversation_id: conversation_id.to_string(),
            model: settings.perplexity.model.clone(),
            max_tokens: settings.perplexity.max_tokens,
            temperature: settings.perplexity.temperature,
            top_p: settings.perplexity.top_p,
            presence_penalty: settings.perplexity.presence_penalty,
            frequency_penalty: settings.perplexity.frequency_penalty,
        };

        let response = self.client
            .post(api_url)
            .header("Authorization", format!("Bearer {}", settings.perplexity.api_key))
            .json(&request)
            .send()
            .await?;

        let status = response.status();
        if !status.is_success() {
            let error_text = response.text().await?;
            error!("Perplexity API error: Status: {}, Error: {}", status, error_text);
            return Err(format!("Perplexity API error: {}", error_text).into());
        }

        let perplexity_response: PerplexityResponse = response.json().await?;
        Ok(perplexity_response.content)
    }

    pub async fn process_file(&self, file_name: &str) -> Result<ProcessedFile, Box<dyn StdError + Send + Sync>> {
        let file_path = format!("{}/{}", MARKDOWN_DIR, file_name);
        if !Path::new(&file_path).exists() {
            return Err(format!("File not found: {}", file_name).into());
        }

        let content = fs::read_to_string(&file_path)?;
        let settings = self.settings.read().await;
        
        let api_url = &settings.perplexity.api_url;
        info!("Sending request to Perplexity API: {}", api_url);

        let response = self.client
            .post(api_url)
            .header("Authorization", format!("Bearer {}", settings.perplexity.api_key))
            .json(&content)
            .send()
            .await?;

        let status = response.status();
        if !status.is_success() {
            let error_text = response.text().await?;
            error!("Perplexity API error: Status: {}, Error: {}", status, error_text);
            return Err(format!("Perplexity API error: {}", error_text).into());
        }

        let perplexity_response: PerplexityResponse = response.json().await?;
        
        // Create metadata for processed file
        let metadata = Metadata {
            file_name: file_name.to_string(),
            file_size: perplexity_response.content.len(),
            node_size: 10.0, // Default size
            hyperlink_count: 0,
            sha1: String::new(),
            last_modified: Utc::now(),
            perplexity_link: perplexity_response.link,
            last_perplexity_process: Some(Utc::now()),
            topic_counts: HashMap::new(),
        };

        Ok(ProcessedFile {
            file_name: file_name.to_string(),
            content: perplexity_response.content,
            is_public: true,
            metadata,
        })
    }
}

----
services/file_service.rs
use crate::models::metadata::{Metadata, MetadataStore, MetadataOps};
use crate::models::graph::GraphData;
use crate::config::Settings;
use serde::{Deserialize, Serialize};
use reqwest::Client;
use async_trait::async_trait;
use log::{info, debug, error};
use regex::Regex;
use std::collections::{HashMap, HashSet};
use std::fs;
use std::path::Path;
use chrono::{Utc, DateTime};
use std::sync::Arc;
use tokio::sync::RwLock;
use std::error::Error as StdError;
use std::time::Duration;
use tokio::time::sleep;
use actix_web::web;

// Constants
const METADATA_PATH: &str = "/app/data/markdown/metadata.json";
pub const MARKDOWN_DIR: &str = "/app/data/markdown";
const GITHUB_API_DELAY: Duration = Duration::from_millis(100); // Rate limiting delay
const MIN_NODE_SIZE: f64 = 5.0;
const MAX_NODE_SIZE: f64 = 50.0;

#[derive(Serialize, Deserialize, Clone)]
pub struct GithubFile {
    pub name: String,
    pub path: String,
    pub sha: String,
    pub size: usize,
    pub url: String,
    pub download_url: String,
}

#[derive(Serialize, Deserialize, Clone, Eq, PartialEq, Hash)]
pub struct GithubFileMetadata {
    pub name: String,
    pub sha: String,
    pub download_url: String,
    pub etag: Option<String>,
    #[serde(with = "chrono::serde::ts_seconds_option")]
    pub last_checked: Option<DateTime<Utc>>,
    #[serde(with = "chrono::serde::ts_seconds_option")]
    pub last_modified: Option<DateTime<Utc>>,
}

#[derive(Serialize, Deserialize, Clone)]
pub struct ProcessedFile {
    pub file_name: String,
    pub content: String,
    pub is_public: bool,
    pub metadata: Metadata,
}

// Structure to hold reference information
#[derive(Default)]
struct ReferenceInfo {
    direct_mentions: usize,
}

#[async_trait]
pub trait GitHubService: Send + Sync {
    async fn fetch_file_metadata(&self) -> Result<Vec<GithubFileMetadata>, Box<dyn StdError + Send + Sync>>;
    async fn get_download_url(&self, file_name: &str) -> Result<Option<String>, Box<dyn StdError + Send + Sync>>;
    async fn fetch_file_content(&self, download_url: &str) -> Result<String, Box<dyn StdError + Send + Sync>>;
    async fn get_file_last_modified(&self, file_path: &str) -> Result<DateTime<Utc>, Box<dyn StdError + Send + Sync>>;
}

pub struct RealGitHubService {
    client: Client,
    token: String,
    owner: String,
    repo: String,
    base_path: String,
    settings: Arc<RwLock<Settings>>,
}

impl RealGitHubService {
    pub fn new(
        token: String,
        owner: String,
        repo: String,
        base_path: String,
        settings: Arc<RwLock<Settings>>,
    ) -> Result<Self, Box<dyn StdError + Send + Sync>> {
        let client = Client::builder()
            .user_agent("rust-github-api")
            .timeout(Duration::from_secs(30))
            .build()?;

        // Trim any leading/trailing slashes from base_path
        let base_path = base_path.trim_matches('/').to_string();

        debug!("Initializing GitHub service with base_path: {}", base_path);

        Ok(Self {
            client,
            token,
            owner,
            repo,
            base_path,
            settings: Arc::clone(&settings),
        })
    }
}

#[async_trait]
impl GitHubService for RealGitHubService {
    async fn fetch_file_metadata(&self) -> Result<Vec<GithubFileMetadata>, Box<dyn StdError + Send + Sync>> {
        let url = if self.base_path.is_empty() {
            format!(
                "https://api.github.com/repos/{}/{}/contents",
                self.owner, self.repo
            )
        } else {
            format!(
                "https://api.github.com/repos/{}/{}/contents/{}",
                self.owner, self.repo, self.base_path
            )
        };
        
        debug!("Fetching GitHub metadata from URL: {}", url);

        // Set headers exactly as in the working curl command
        let response = self.client.get(&url)
            .header("Authorization", format!("Bearer {}", self.token))
            .header("Accept", "application/vnd.github+json")
            .send()
            .await?;

        // Get status and headers for debugging
        let status = response.status();
        let headers = response.headers().clone();
        
        debug!("GitHub API response status: {}", status);
        debug!("GitHub API response headers: {:?}", headers);

        // Get response body
        let body = response.text().await?;
        
        // Log the first 1000 characters of the response for debugging
        debug!("GitHub API response preview: {}", &body[..body.len().min(1000)]);

        // Check for error response
        if !status.is_success() {
            let error_msg = match serde_json::from_str::<serde_json::Value>(&body) {
                Ok(error_json) => {
                    let msg = error_json["message"].as_str().unwrap_or("Unknown error");
                    format!("GitHub API error: {} - {}", status, msg)
                },
                Err(_) => format!("GitHub API error: {} - {}", status, body)
            };
            error!("{}", error_msg);
            return Err(error_msg.into());
        }

        // Parse response as array
        let contents: Vec<serde_json::Value> = match serde_json::from_str(&body) {
            Ok(parsed) => parsed,
            Err(e) => {
                error!("Failed to parse GitHub API response: {}", e);
                error!("Response body: {}", body);
                return Err(Box::new(e));
            }
        };

        let settings = self.settings.read().await;
        let debug_enabled = settings.server_debug.enabled;
        
        let mut markdown_files = Vec::new();
        
        for item in contents {
            if item["type"].as_str().unwrap_or("") == "file" && 
               item["name"].as_str().unwrap_or("").ends_with(".md") {
                let name = item["name"].as_str().unwrap_or("").to_string();
                
                // In debug mode, only process Debug Test Page.md and debug linked node.md
                if debug_enabled && !name.contains("Debug Test Page") && !name.contains("debug linked node") {
                    continue;
                }
                
                debug!("Processing markdown file: {}", name);
                
                let last_modified = match self.get_file_last_modified(&format!("{}/{}", self.base_path, name)).await {
                    Ok(time) => Some(time),
                    Err(e) => {
                        error!("Failed to get last modified time for {}: {}", name, e);
                        continue;
                    }
                };
                
                markdown_files.push(GithubFileMetadata {
                    name,
                    sha: item["sha"].as_str().unwrap_or("").to_string(),
                    download_url: item["download_url"].as_str().unwrap_or("").to_string(),
                    etag: None,
                    last_checked: Some(Utc::now()),
                    last_modified,
                });
            }
        }

        if debug_enabled {
            info!("Debug mode: Processing only debug test files");
        }

        debug!("Found {} markdown files", markdown_files.len());
        Ok(markdown_files)
    }

    async fn get_download_url(&self, file_name: &str) -> Result<Option<String>, Box<dyn StdError + Send + Sync>> {
        let url = if self.base_path.is_empty() {
            format!("https://api.github.com/repos/{}/{}/contents/{}", 
                self.owner, self.repo, file_name)
        } else {
            format!("https://api.github.com/repos/{}/{}/contents/{}/{}", 
                self.owner, self.repo, self.base_path, file_name)
        };

        let response = self.client.get(&url)
            .header("Authorization", format!("Bearer {}", self.token))
            .header("Accept", "application/vnd.github+json")
            .send()
            .await?;

        if response.status().is_success() {
            let file: GithubFile = response.json().await?;
            Ok(Some(file.download_url))
        } else {
            Ok(None)
        }
    }

    async fn fetch_file_content(&self, download_url: &str) -> Result<String, Box<dyn StdError + Send + Sync>> {
        let response = self.client.get(download_url)
            .header("Authorization", format!("Bearer {}", self.token))
            .header("Accept", "application/vnd.github+json")
            .send()
            .await?;

        let status = response.status();
        if !status.is_success() {
            let error_text = response.text().await?;
            error!("Failed to fetch file content. Status: {}, Error: {}", status, error_text);
            return Err(format!("Failed to fetch file content: {}", error_text).into());
        }

        let content = response.text().await?;
        Ok(content)
    }

    async fn get_file_last_modified(&self, file_path: &str) -> Result<DateTime<Utc>, Box<dyn StdError + Send + Sync>> {
        let url = format!(
            "https://api.github.com/repos/{}/{}/commits",
            self.owner, self.repo
        );

        let response = self.client.get(&url)
            .header("Authorization", format!("Bearer {}", self.token))
            .header("Accept", "application/vnd.github+json")
            .query(&[("path", file_path), ("per_page", "1")])
            .send()
            .await?;

        let status = response.status();
        if !status.is_success() {
            let error_text = response.text().await?;
            error!("Failed to get last modified time. Status: {}, Error: {}", status, error_text);
            return Err(format!("GitHub API error: {} - {}", status, error_text).into());
        }

        let commits: Vec<serde_json::Value> = response.json().await?;
        
        if let Some(last_commit) = commits.first() {
            if let Some(commit) = last_commit["commit"]["committer"]["date"].as_str() {
                if let Ok(date) = DateTime::parse_from_rfc3339(commit) {
                    return Ok(date.with_timezone(&Utc));
                } else {
                    error!("Failed to parse commit date: {}", commit);
                    return Err("Failed to parse commit date from GitHub response".into());
                }
            } else {
                error!("No committer date found in commit data");
                return Err("No committer date found in GitHub response".into());
            }
        } else {
            error!("No commits found for file: {}", file_path);
            return Err(format!("No commit history found for file: {}", file_path).into());
        }
    }
}

pub struct FileService;

impl FileService {
    /// Process uploaded file and return graph data
    pub async fn process_file_upload(&self, payload: web::Bytes) -> Result<GraphData, Box<dyn StdError + Send + Sync>> {
        let content = String::from_utf8(payload.to_vec())?;
        let metadata = Self::load_or_create_metadata()?;
        let mut graph_data = GraphData::new();
        
        // Create a temporary file to process
        let temp_filename = format!("temp_{}.md", Utc::now().timestamp());
        let temp_path = format!("{}/{}", MARKDOWN_DIR, temp_filename);
        fs::write(&temp_path, &content)?;

        // Extract references and create metadata
        let valid_nodes: Vec<String> = metadata.keys()
            .map(|name| name.trim_end_matches(".md").to_string())
            .collect();

        let references = Self::extract_references(&content, &valid_nodes);
        let topic_counts = Self::convert_references_to_topic_counts(references);

        // Create metadata for the uploaded file
        let file_size = content.len();
        let node_size = Self::calculate_node_size(file_size);
        let file_metadata = Metadata {
            file_name: temp_filename.clone(),
            file_size,
            node_size,
            hyperlink_count: Self::count_hyperlinks(&content),
            sha1: Self::calculate_sha1(&content),
            last_modified: Utc::now(),
            perplexity_link: String::new(),
            last_perplexity_process: None,
            topic_counts,
        };

        // Update graph data
        graph_data.metadata.insert(temp_filename.clone(), file_metadata);

        // Clean up temporary file
        if let Err(e) = fs::remove_file(&temp_path) {
            error!("Failed to remove temporary file: {}", e);
        }

        Ok(graph_data)
    }

    /// List available files
    pub async fn list_files(&self) -> Result<Vec<String>, Box<dyn StdError + Send + Sync>> {
        let metadata = Self::load_or_create_metadata()?;
        Ok(metadata.keys().cloned().collect())
    }

    /// Load a specific file and return graph data
    pub async fn load_file(&self, filename: &str) -> Result<GraphData, Box<dyn StdError + Send + Sync>> {
        let file_path = format!("{}/{}", MARKDOWN_DIR, filename);
        if !Path::new(&file_path).exists() {
            return Err(format!("File not found: {}", filename).into());
        }

        let content = fs::read_to_string(&file_path)?;
        let metadata = Self::load_or_create_metadata()?;
        let mut graph_data = GraphData::new();

        // Extract references and update metadata
        let valid_nodes: Vec<String> = metadata.keys()
            .map(|name| name.trim_end_matches(".md").to_string())
            .collect();

        let references = Self::extract_references(&content, &valid_nodes);
        let topic_counts = Self::convert_references_to_topic_counts(references);

        // Update or create metadata for the file
        let file_size = content.len();
        let node_size = Self::calculate_node_size(file_size);
        let file_metadata = Metadata {
            file_name: filename.to_string(),
            file_size,
            node_size,
            hyperlink_count: Self::count_hyperlinks(&content),
            sha1: Self::calculate_sha1(&content),
            last_modified: Utc::now(),
            perplexity_link: String::new(),
            last_perplexity_process: None,
            topic_counts,
        };

        // Update graph data
        graph_data.metadata.insert(filename.to_string(), file_metadata);
        
        Ok(graph_data)
    }

    /// Load metadata from file or create new if not exists
    pub fn load_or_create_metadata() -> Result<MetadataStore, Box<dyn StdError + Send + Sync>> {
        if Path::new(METADATA_PATH).exists() {
            let content = fs::read_to_string(METADATA_PATH)?;
            if !content.trim().is_empty() {
                return Ok(serde_json::from_str(&content)?);
            }
        }
        Ok(MetadataStore::new())
    }

    /// Calculate node size based on file size
    fn calculate_node_size(file_size: usize) -> f64 {
        // Use logarithmic scaling for node size
        let size = if file_size == 0 {
            MIN_NODE_SIZE
        } else {
            let log_size = (file_size as f64).ln();
            let min_log = 0f64;
            let max_log = (100_000f64).ln(); // Assuming 100KB as max expected size
            
            let normalized = (log_size - min_log) / (max_log - min_log);
            MIN_NODE_SIZE + normalized * (MAX_NODE_SIZE - MIN_NODE_SIZE)
        };
        
        size.max(MIN_NODE_SIZE).min(MAX_NODE_SIZE)
    }

    /// Extract references to other files based on their names (case insensitive)
    fn extract_references(content: &str, valid_nodes: &[String]) -> HashMap<String, ReferenceInfo> {
        let mut references = HashMap::new();
        let content_lower = content.to_lowercase();
        
        for node_name in valid_nodes {
            let mut ref_info = ReferenceInfo::default();
            let node_name_lower = node_name.to_lowercase();
            
            // Create a regex pattern with word boundaries
            let pattern = format!(r"\b{}\b", regex::escape(&node_name_lower));
            if let Ok(re) = Regex::new(&pattern) {
                // Count case-insensitive matches of the filename
                let count = re.find_iter(&content_lower).count();
                
                // If we found any references, add them to the map
                if count > 0 {
                    debug!("Found {} references to {} in content", count, node_name);
                    ref_info.direct_mentions = count;
                    references.insert(format!("{}.md", node_name), ref_info);
                }
            }
        }
        
        references
    }

    fn convert_references_to_topic_counts(references: HashMap<String, ReferenceInfo>) -> HashMap<String, usize> {
        references.into_iter()
            .map(|(name, info)| {
                debug!("Converting reference for {} with {} mentions", name, info.direct_mentions);
                (name, info.direct_mentions)
            })
            .collect()
    }

    /// Initialize the local markdown directory and metadata structure.
    pub async fn initialize_local_storage(
        github_service: &dyn GitHubService,
        _settings: Arc<RwLock<Settings>>,
    ) -> Result<(), Box<dyn StdError + Send + Sync>> {
        info!("Checking local storage status");
        
        // Ensure required directories exist
        Self::ensure_directories()?;

        // Check if we already have a valid local setup
        if Self::has_valid_local_setup() {
            info!("Valid local setup found, skipping initialization");
            return Ok(());
        }

        info!("Initializing local storage with files from GitHub");

        // Step 1: Get all markdown files from GitHub
        let github_files = github_service.fetch_file_metadata().await?;
        info!("Found {} markdown files in GitHub", github_files.len());

        let mut file_sizes = HashMap::new();
        let mut file_contents = HashMap::new();
        let mut file_metadata = HashMap::new();
        let mut metadata_store = MetadataStore::new();
        
        // Step 2: First pass - collect all files and their contents
        for file_meta in github_files {
            match github_service.fetch_file_content(&file_meta.download_url).await {
                Ok(content) => {
                    // Check if file starts with "public:: true"
                    let first_line = content.lines().next().unwrap_or("").trim();
                    if first_line != "public:: true" {
                        debug!("Skipping non-public file: {}", file_meta.name);
                        continue;
                    }

                    let node_name = file_meta.name.trim_end_matches(".md").to_string();
                    file_sizes.insert(node_name.clone(), content.len());
                    file_contents.insert(node_name, content);
                    file_metadata.insert(file_meta.name.clone(), file_meta);
                }
                Err(e) => {
                    error!("Failed to fetch content for {}: {}", file_meta.name, e);
                }
            }
            sleep(GITHUB_API_DELAY).await;
        }

        // Get list of valid node names (filenames without .md)
        let valid_nodes: Vec<String> = file_contents.keys().cloned().collect();

        // Step 3: Second pass - extract references and create metadata
        for (node_name, content) in &file_contents {
            let file_name = format!("{}.md", node_name);
            let file_path = format!("{}/{}", MARKDOWN_DIR, file_name);
            
            // Calculate SHA1 of content
            let local_sha1 = Self::calculate_sha1(content);
            
            // Save file content
            fs::write(&file_path, content)?;

            // Extract references
            let references = Self::extract_references(content, &valid_nodes);
            let topic_counts = Self::convert_references_to_topic_counts(references);

            // Get GitHub metadata
            let github_meta = file_metadata.get(&file_name).unwrap();
            let last_modified = github_meta.last_modified.unwrap_or_else(|| Utc::now());

            // Calculate node size
            let file_size = *file_sizes.get(node_name).unwrap();
            let node_size = Self::calculate_node_size(file_size);

            // Create metadata entry
            let metadata = Metadata {
                file_name: file_name.clone(),
                file_size,
                node_size,
                hyperlink_count: Self::count_hyperlinks(content),
                sha1: local_sha1,
                last_modified,
                perplexity_link: String::new(),
                last_perplexity_process: None,
                topic_counts,
            };

            metadata_store.insert(file_name, metadata);
        }

        // Step 4: Save metadata
        info!("Saving metadata for {} public files", metadata_store.len());
        Self::save_metadata(&metadata_store)?;

        info!("Initialization complete. Processed {} public files", metadata_store.len());

        Ok(())
    }

    /// Check if we have a valid local setup
    fn has_valid_local_setup() -> bool {
        if let Ok(metadata_content) = fs::read_to_string(METADATA_PATH) {
            if metadata_content.trim().is_empty() {
                return false;
            }
            
            if let Ok(metadata) = serde_json::from_str::<MetadataStore>(&metadata_content) {
                return metadata.validate_files(MARKDOWN_DIR);
            }
        }
        false
    }

    /// Ensures all required directories exist with proper permissions
    fn ensure_directories() -> Result<(), Box<dyn StdError + Send + Sync>> {
        // Create parent data directory first
        let data_dir = Path::new("/app/data");
        if !data_dir.exists() {
            info!("Creating data directory at {:?}", data_dir);
            fs::create_dir_all(data_dir)?;
            // Set permissions to allow writing
            #[cfg(unix)]
            {
                use std::os::unix::fs::PermissionsExt;
                fs::set_permissions(data_dir, fs::Permissions::from_mode(0o777))?;
            }
        }

        // Create markdown directory
        let markdown_dir = Path::new(MARKDOWN_DIR);
        if !markdown_dir.exists() {
            info!("Creating markdown directory at {:?}", markdown_dir);
            fs::create_dir_all(markdown_dir)?;
            // Set permissions to allow writing
            #[cfg(unix)]
            {
                use std::os::unix::fs::PermissionsExt;
                fs::set_permissions(markdown_dir, fs::Permissions::from_mode(0o777))?;
            }
        }

        // Create metadata directory if it doesn't exist
        let metadata_dir = Path::new(METADATA_PATH).parent().unwrap();
        if !metadata_dir.exists() {
            info!("Creating metadata directory at {:?}", metadata_dir);
            fs::create_dir_all(metadata_dir)?;
            // Set permissions to allow writing
            #[cfg(unix)]
            {
                use std::os::unix::fs::PermissionsExt;
                fs::set_permissions(metadata_dir, fs::Permissions::from_mode(0o777))?;
            }
        }

        // Verify permissions by attempting to create a test file
        let test_file = format!("{}/test_permissions", MARKDOWN_DIR);
        match fs::write(&test_file, "test") {
            Ok(_) => {
                info!("Successfully wrote test file to {}", test_file);
                fs::remove_file(&test_file)?;
                info!("Successfully removed test file");
                info!("Directory permissions verified");
                Ok(())
            },
            Err(e) => {
                error!("Failed to verify directory permissions: {}", e);
                error!("Current directory: {:?}", std::env::current_dir()?);
                error!("Directory contents: {:?}", fs::read_dir(MARKDOWN_DIR)?);
                Err(Box::new(e))
            }
        }
    }

    /// Handles incremental updates after initial setup
    pub async fn fetch_and_process_files(
        github_service: &dyn GitHubService,
        _settings: Arc<RwLock<Settings>>,
        metadata_store: &mut MetadataStore,
    ) -> Result<Vec<ProcessedFile>, Box<dyn StdError + Send + Sync>> {
        // Ensure directories exist before any operations
        Self::ensure_directories()?;

        // Get metadata for markdown files in target directory
        let github_files_metadata = github_service.fetch_file_metadata().await?;
        debug!("Fetched metadata for {} markdown files", github_files_metadata.len());

        let mut processed_files = Vec::new();

        // Save current metadata
        Self::save_metadata(metadata_store)?;

        // Clean up local files that no longer exist in GitHub
        let github_files: HashSet<_> = github_files_metadata.iter()
            .map(|meta| meta.name.clone())
            .collect();

        let local_files: HashSet<_> = metadata_store.keys().cloned().collect();
        let removed_files: Vec<_> = local_files.difference(&github_files).collect();

        for file_name in removed_files {
            let file_path = format!("{}/{}", MARKDOWN_DIR, file_name);
            if let Err(e) = fs::remove_file(&file_path) {
                error!("Failed to remove file {}: {}", file_path, e);
            }
            metadata_store.remove(file_name);
        }

        // Get list of valid node names (filenames without .md)
        let valid_nodes: Vec<String> = github_files_metadata.iter()
            .map(|f| f.name.trim_end_matches(".md").to_string())
            .collect();

        // Process files that need updating
        let files_to_process: Vec<_> = github_files_metadata.into_iter()
            .filter(|file_meta| {
                let local_meta = metadata_store.get(&file_meta.name);
                local_meta.map_or(true, |meta| meta.sha1 != file_meta.sha)
            })
            .collect();

        // Process each file
        for file_meta in files_to_process {
            match github_service.fetch_file_content(&file_meta.download_url).await {
                Ok(content) => {
                    let first_line = content.lines().next().unwrap_or("").trim();
                    if first_line != "public:: true" {
                        debug!("Skipping non-public file: {}", file_meta.name);
                        continue;
                    }

                    let file_path = format!("{}/{}", MARKDOWN_DIR, file_meta.name);
                    fs::write(&file_path, &content)?;

                    // Extract references
                    let references = Self::extract_references(&content, &valid_nodes);
                    let topic_counts = Self::convert_references_to_topic_counts(references);

                    // Calculate node size
                    let file_size = content.len();
                    let node_size = Self::calculate_node_size(file_size);

                    let new_metadata = Metadata {
                        file_name: file_meta.name.clone(),
                        file_size,
                        node_size,
                        hyperlink_count: Self::count_hyperlinks(&content),
                        sha1: Self::calculate_sha1(&content),
                        last_modified: file_meta.last_modified.expect("Last modified time should be present"),
                        perplexity_link: String::new(),
                        last_perplexity_process: None,
                        topic_counts,
                    };

                    metadata_store.insert(file_meta.name.clone(), new_metadata.clone());
                    processed_files.push(ProcessedFile {
                        file_name: file_meta.name,
                        content,
                        is_public: true,
                        metadata: new_metadata,
                    });
                }
                Err(e) => {
                    error!("Failed to fetch content: {}", e);
                }
            }
            sleep(GITHUB_API_DELAY).await;
        }

        // Save updated metadata
        Self::save_metadata(metadata_store)?;

        Ok(processed_files)
    }

    /// Save metadata to file
    pub fn save_metadata(metadata: &MetadataStore) -> Result<(), Box<dyn StdError + Send + Sync>> {
        let json = serde_json::to_string_pretty(metadata)?;
        fs::write(METADATA_PATH, json)?;
        Ok(())
    }

    /// Calculate SHA1 hash of content
    fn calculate_sha1(content: &str) -> String {
        use sha1::{Sha1, Digest};
        let mut hasher = Sha1::new();
        hasher.update(content.as_bytes());
        format!("{:x}", hasher.finalize())
    }

    /// Count hyperlinks in content
    fn count_hyperlinks(content: &str) -> usize {
        let re = Regex::new(r"\[([^\]]+)\]\(([^)]+)\)").unwrap();
        re.find_iter(content).count()
    }
}

----
services/graph_service.rs
use std::sync::Arc;
use tokio::sync::RwLock;
use std::collections::{HashMap, HashSet};
use actix_web::web;
use log::{info, warn};
use rand::Rng;
use serde_json;

use crate::models::graph::GraphData;
use crate::utils::socket_flow_messages::Node;
use crate::models::edge::Edge;
use crate::models::metadata::MetadataStore;
use crate::app_state::AppState;
use crate::utils::gpu_compute::GPUCompute;
use crate::models::simulation_params::{SimulationParams, SimulationPhase, SimulationMode};
use crate::models::pagination::PaginatedGraphData;

#[derive(Clone)]
pub struct GraphService {
    pub graph_data: Arc<RwLock<GraphData>>,
}

impl GraphService {
    pub fn new() -> Self {
        let graph_service = Self {
            graph_data: Arc::new(RwLock::new(GraphData::default())),
        };

        // Start simulation loop
        let graph_data = graph_service.graph_data.clone();
        tokio::spawn(async move {
            let params = SimulationParams {
                iterations: 1,  // One iteration per frame
                spring_length: 100.0,  // Default spring length
                spring_strength: 0.1,  // Gentler forces for continuous updates
                repulsion: 50.0,  // Reduced repulsion
                attraction: 0.5,  // Reduced attraction
                damping: 0.8,  // More damping for stability
                time_step: 0.016,  // 60fps
                phase: SimulationPhase::Dynamic,
                mode: SimulationMode::Local,  // Use CPU for continuous updates
            };

            loop {
                // Update positions
                let mut graph = graph_data.write().await;
                if let Err(e) = Self::calculate_layout_cpu(
                    &mut graph,
                    params.iterations,
                    params.spring_strength,
                    params.damping
                ) {
                    warn!("[Graph] Error updating positions: {}", e);
                }
                drop(graph); // Release lock

                // Sleep for ~16ms (60fps)
                tokio::time::sleep(tokio::time::Duration::from_millis(16)).await;
            }
        });

        graph_service
    }

    pub async fn build_graph_from_metadata(metadata: &MetadataStore) -> Result<GraphData, Box<dyn std::error::Error + Send + Sync>> {
        let mut graph = GraphData::new();
        let mut edge_map = HashMap::new();

        // First pass: Create nodes from files in metadata
        let mut valid_nodes = HashSet::new();
        for file_name in metadata.keys() {
            let node_id = file_name.trim_end_matches(".md").to_string();
            valid_nodes.insert(node_id);
        }

        // Create nodes for all valid node IDs
        for node_id in &valid_nodes {
            let mut node = Node::new(node_id.clone());
            
            // Get metadata for this node
            if let Some(metadata) = metadata.get(&format!("{}.md", node_id)) {
                node.size = Some(metadata.node_size as f32);
                node.file_size = metadata.file_size as u64;
                node.label = node_id.clone(); // Set label to node ID (filename without .md)
                
                // Add metadata fields to node's metadata map
                node.metadata.insert("fileSize".to_string(), metadata.file_size.to_string());
                node.metadata.insert("hyperlinkCount".to_string(), metadata.hyperlink_count.to_string());
                node.metadata.insert("lastModified".to_string(), metadata.last_modified.to_string());
            }
            
            graph.nodes.push(node);
        }

        // Store metadata in graph
        graph.metadata = metadata.clone();

        // Second pass: Create edges from topic counts
        for (source_file, metadata) in metadata.iter() {
            let source_id = source_file.trim_end_matches(".md").to_string();
            
            for (target_file, count) in &metadata.topic_counts {
                let target_id = target_file.trim_end_matches(".md").to_string();
                
                // Only create edge if both nodes exist and they're different
                if source_id != target_id && valid_nodes.contains(&target_id) {
                    let edge_key = if source_id < target_id {
                        (source_id.clone(), target_id.clone())
                    } else {
                        (target_id.clone(), source_id.clone())
                    };

                    edge_map.entry(edge_key)
                        .and_modify(|weight| *weight += *count as f32)
                        .or_insert(*count as f32);
                }
            }
        }

        // Convert edge map to edges
        graph.edges = edge_map.into_iter()
            .map(|((source, target), weight)| {
                Edge::new(source, target, weight)
            })
            .collect();

        // Initialize random positions
        Self::initialize_random_positions(&mut graph);

        info!("Built graph with {} nodes and {} edges", graph.nodes.len(), graph.edges.len());
        Ok(graph)
    }

    pub async fn build_graph(state: &web::Data<AppState>) -> Result<GraphData, Box<dyn std::error::Error + Send + Sync>> {
        let current_graph = state.graph_service.graph_data.read().await;
        let mut graph = GraphData::new();

        // Copy metadata from current graph
        graph.metadata = current_graph.metadata.clone();

        let mut edge_map = HashMap::new();

        // Create nodes from metadata entries
        let mut valid_nodes = HashSet::new();
        for file_name in graph.metadata.keys() {
            let node_id = file_name.trim_end_matches(".md").to_string();
            valid_nodes.insert(node_id);
        }

        // Create nodes for all valid node IDs
        for node_id in &valid_nodes {
            let mut node = Node::new(node_id.clone());
            
            // Get metadata for this node
            if let Some(metadata) = graph.metadata.get(&format!("{}.md", node_id)) {
                node.size = Some(metadata.node_size as f32);
                node.file_size = metadata.file_size as u64;
                node.label = node_id.clone(); // Set label to node ID (filename without .md)
                
                // Add metadata fields to node's metadata map
                node.metadata.insert("fileSize".to_string(), metadata.file_size.to_string());
                node.metadata.insert("hyperlinkCount".to_string(), metadata.hyperlink_count.to_string());
                node.metadata.insert("lastModified".to_string(), metadata.last_modified.to_string());
            }
            
            graph.nodes.push(node);
        }

        // Create edges from metadata topic counts
        for (source_file, metadata) in graph.metadata.iter() {
            let source_id = source_file.trim_end_matches(".md").to_string();
            
            // Process outbound links from this file to other topics
            for (target_file, count) in &metadata.topic_counts {
                let target_id = target_file.trim_end_matches(".md").to_string();
                
                // Only create edge if both nodes exist and they're different
                if source_id != target_id && valid_nodes.contains(&target_id) {
                    let edge_key = if source_id < target_id {
                        (source_id.clone(), target_id.clone())
                    } else {
                        (target_id.clone(), source_id.clone())
                    };

                    // Sum the weights for bi-directional references
                    edge_map.entry(edge_key)
                        .and_modify(|w| *w += *count as f32)
                        .or_insert(*count as f32);
                }
            }
        }

        // Convert edge map to edges
        graph.edges = edge_map.into_iter()
            .map(|((source, target), weight)| {
                Edge::new(source, target, weight)
            })
            .collect();

        // Initialize random positions for all nodes
        Self::initialize_random_positions(&mut graph);

        info!("Built graph with {} nodes and {} edges", graph.nodes.len(), graph.edges.len());
        Ok(graph)
    }

    fn initialize_random_positions(graph: &mut GraphData) {
        let mut rng = rand::thread_rng();
        let initial_radius = 30.0;
        
        for node in &mut graph.nodes {
            let theta = rng.gen_range(0.0..std::f32::consts::PI * 2.0);
            let phi = rng.gen_range(0.0..std::f32::consts::PI);
            let r = rng.gen_range(0.0..initial_radius);
            
            node.set_x(r * theta.cos() * phi.sin());
            node.set_y(r * theta.sin() * phi.sin());
            node.set_z(r * phi.cos());
            node.set_vx(0.0);
            node.set_vy(0.0);
            node.set_vz(0.0);
        }
    }

    pub async fn calculate_layout(
        gpu_compute: &Option<Arc<RwLock<GPUCompute>>>,
        graph: &mut GraphData,
        params: &SimulationParams,
    ) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
        match gpu_compute {
            Some(gpu) => {
                info!("Using GPU for layout calculation");
                let mut gpu_compute = gpu.write().await;
                
                // Only initialize positions for new graphs
                if graph.nodes.iter().all(|n| n.x() == 0.0 && n.y() == 0.0 && n.z() == 0.0) {
                    Self::initialize_random_positions(graph);
                }
                
                gpu_compute.update_graph_data(graph)?;
                gpu_compute.update_simulation_params(params)?;
                
                // Run iterations with more frequent updates
                for _ in 0..params.iterations {
                    gpu_compute.step()?;
                    
                    // Update positions every iteration for smoother motion
                    let updated_nodes = gpu_compute.get_node_data()?;
                    for (i, node) in graph.nodes.iter_mut().enumerate() {
                        node.update_from_gpu_node(&updated_nodes[i]);
                    }
                }
                Ok(())
            },
            None => {
                warn!("GPU not available. Falling back to CPU-based layout calculation.");
                Self::calculate_layout_cpu(graph, params.iterations, params.spring_strength, params.damping)?;
                Ok(())
            }
        }
    }

    fn calculate_layout_cpu(graph: &mut GraphData, iterations: u32, spring_strength: f32, damping: f32) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
        let repulsion_strength = spring_strength * 10000.0;
        
        for _ in 0..iterations {
            // Calculate forces between nodes
            let mut forces = vec![(0.0, 0.0, 0.0); graph.nodes.len()];
            
            // Calculate repulsion forces
            for i in 0..graph.nodes.len() {
                for j in i+1..graph.nodes.len() {
                    let dx = graph.nodes[j].x() - graph.nodes[i].x();
                    let dy = graph.nodes[j].y() - graph.nodes[i].y();
                    let dz = graph.nodes[j].z() - graph.nodes[i].z();
                    
                    let distance = (dx * dx + dy * dy + dz * dz).sqrt();
                    if distance > 0.0 {
                        let force = repulsion_strength / (distance * distance);
                        
                        let fx = dx * force / distance;
                        let fy = dy * force / distance;
                        let fz = dz * force / distance;
                        
                        forces[i].0 -= fx;
                        forces[i].1 -= fy;
                        forces[i].2 -= fz;
                        
                        forces[j].0 += fx;
                        forces[j].1 += fy;
                        forces[j].2 += fz;
                    }
                }
            }

            // Calculate spring forces along edges
            for edge in &graph.edges {
                // Find indices of source and target nodes
                let source_idx = graph.nodes.iter().position(|n| n.id == edge.source);
                let target_idx = graph.nodes.iter().position(|n| n.id == edge.target);
                
                if let (Some(si), Some(ti)) = (source_idx, target_idx) {
                    let source = &graph.nodes[si];
                    let target = &graph.nodes[ti];
                    
                    let dx = target.x() - source.x();
                    let dy = target.y() - source.y();
                    let dz = target.z() - source.z();
                    
                    let distance = (dx * dx + dy * dy + dz * dz).sqrt();
                    if distance > 0.0 {
                        // Scale force by edge weight
                        let force = spring_strength * (distance - 30.0) * edge.weight;
                        
                        let fx = dx * force / distance;
                        let fy = dy * force / distance;
                        let fz = dz * force / distance;
                        
                        forces[si].0 += fx;
                        forces[si].1 += fy;
                        forces[si].2 += fz;
                        
                        forces[ti].0 -= fx;
                        forces[ti].1 -= fy;
                        forces[ti].2 -= fz;
                    }
                }
            }
            
            // Apply forces and update positions
            for (i, node) in graph.nodes.iter_mut().enumerate() {
                let vx = node.vx() + forces[i].0;
                let vy = node.vy() + forces[i].1;
                let vz = node.vz() + forces[i].2;
                
                let x = node.x() + vx;
                let y = node.y() + vy;
                let z = node.z() + vz;
                
                node.set_vx(vx * damping);
                node.set_vy(vy * damping);
                node.set_vz(vz * damping);
                
                node.set_x(x);
                node.set_y(y);
                node.set_z(z);
            }
        }
        Ok(())
    }

    pub async fn get_paginated_graph_data(
        &self,
        page: u32,
        page_size: u32,
    ) -> Result<PaginatedGraphData, Box<dyn std::error::Error + Send + Sync>> {
        let graph = self.graph_data.read().await;
        
        // Convert page and page_size to usize for vector operations
        let page = page as usize;
        let page_size = page_size as usize;
        let total_nodes = graph.nodes.len();
        
        let start = page * page_size;
        let end = std::cmp::min((page + 1) * page_size, total_nodes);

        let page_nodes: Vec<Node> = graph.nodes
            .iter()
            .skip(start)
            .take(end - start)
            .cloned()
            .collect();

        // Get edges that connect to these nodes
        let node_ids: HashSet<String> = page_nodes.iter()
            .map(|n| n.id.clone())
            .collect();

        let edges: Vec<Edge> = graph.edges
            .iter()
            .filter(|e| node_ids.contains(&e.source) || node_ids.contains(&e.target))
            .cloned()
            .collect();

        Ok(PaginatedGraphData {
            nodes: page_nodes,
            edges: edges.clone(),
            metadata: serde_json::to_value(graph.metadata.clone()).unwrap_or_default(),
            total_nodes,
            total_edges: graph.edges.len(),
            total_pages: ((total_nodes as f32 / page_size as f32).ceil()) as u32,
            current_page: page as u32,
        })
    }

    pub async fn get_node_positions(&self) -> Vec<Node> {
        let graph = self.graph_data.read().await;
        graph.nodes.clone()
    }
}

----
services/mod.rs
pub mod file_service;
pub mod github_service;
pub mod graph_service;
pub mod perplexity_service;
pub mod ragflow_service;
pub mod speech_service;

----
services/speech_service.rs
use tokio::sync::{mpsc, Mutex, RwLock};
use tokio_tungstenite::{connect_async, WebSocketStream, MaybeTlsStream};
use tungstenite::protocol::Message;
use tungstenite::http::Request;
use serde_json::json;
use std::sync::Arc;
use tokio::task;
use crate::config::Settings;
use log::{info, error, debug};
use futures::{SinkExt, StreamExt};
use std::error::Error;
use tokio::net::TcpStream;
use url::Url;
use std::process::{Command, Stdio};
use std::io::Write;
use base64::Engine as _;
use base64::engine::general_purpose::STANDARD as BASE64;
use crate::types::speech::{SpeechError, SpeechCommand, TTSProvider};

pub struct SpeechService {
    sender: Arc<Mutex<mpsc::Sender<SpeechCommand>>>,
    settings: Arc<RwLock<Settings>>,
    tts_provider: Arc<RwLock<TTSProvider>>,
}

impl SpeechService {
    pub fn new(settings: Arc<RwLock<Settings>>) -> Self {
        let (tx, rx) = mpsc::channel(100);
        let sender = Arc::new(Mutex::new(tx));

        let service = SpeechService {
            sender,
            settings,
            tts_provider: Arc::new(RwLock::new(TTSProvider::Sonata)),
        };

        service.start(rx);
        service
    }

    fn start(&self, mut receiver: mpsc::Receiver<SpeechCommand>) {
        let settings = Arc::clone(&self.settings);
        let tts_provider = Arc::clone(&self.tts_provider);

        task::spawn(async move {
            let mut ws_stream: Option<WebSocketStream<MaybeTlsStream<TcpStream>>> = None;

            while let Some(command) = receiver.recv().await {
                match command {
                    SpeechCommand::Initialize => {
                        let current_provider = tts_provider.read().await;
                        if let TTSProvider::OpenAI = *current_provider {
                            let settings = settings.read().await;
                            
                            let url = format!(
                                "wss://api.openai.com/v1/realtime?model=gpt-4o-realtime-preview-2024-10-01"
                            );
                            let url = match Url::parse(&url) {
                                Ok(url) => url,
                                Err(e) => {
                                    error!("Failed to parse OpenAI URL: {}", e);
                                    continue;
                                }
                            };
                            
                            let request = match Request::builder()
                                .uri(url.as_str())
                                .header("Authorization", format!("Bearer {}", settings.openai.api_key))
                                .header("OpenAI-Beta", "realtime=v1")
                                .header("Content-Type", "application/json")
                                .header("User-Agent", "WebXR Graph")
                                .header("Sec-WebSocket-Version", "13")
                                .header("Sec-WebSocket-Key", tungstenite::handshake::client::generate_key())
                                .header("Connection", "Upgrade")
                                .header("Upgrade", "websocket")
                                .body(()) {
                                    Ok(req) => req,
                                    Err(e) => {
                                        error!("Failed to build request: {}", e);
                                        continue;
                                    }
                                };

                            match connect_async(request).await {
                                Ok((mut stream, _)) => {
                                    info!("Connected to OpenAI Realtime API");
                                    
                                    let init_event = json!({
                                        "type": "response.create",
                                        "response": {
                                            "modalities": ["text", "audio"],
                                            "instructions": "You are a helpful AI assistant. Respond naturally and conversationally."
                                        }
                                    });
                                    
                                    if let Err(e) = stream.send(Message::Text(init_event.to_string())).await {
                                        error!("Failed to send initial response.create event: {}", e);
                                        continue;
                                    }
                                    
                                    ws_stream = Some(stream);
                                },
                                Err(e) => error!("Failed to connect to OpenAI Realtime API: {}", e),
                            }
                        }
                    },
                    SpeechCommand::SendMessage(msg) => {
                        let current_provider = tts_provider.read().await;
                        match *current_provider {
                            TTSProvider::OpenAI => {
                                if let Some(stream) = &mut ws_stream {
                                    let msg_event = json!({
                                        "type": "conversation.item.create",
                                        "item": {
                                            "type": "message",
                                            "role": "user",
                                            "content": [{
                                                "type": "input_text",
                                                "text": msg
                                            }]
                                        }
                                    });

                                    if let Err(e) = stream.send(Message::Text(msg_event.to_string())).await {
                                        error!("Failed to send message to OpenAI: {}", e);
                                        continue;
                                    }

                                    let response_event = json!({
                                        "type": "response.create"
                                    });
                                    
                                    if let Err(e) = stream.send(Message::Text(response_event.to_string())).await {
                                        error!("Failed to request response from OpenAI: {}", e);
                                        continue;
                                    }
                                    
                                    while let Some(message) = stream.next().await {
                                        match message {
                                            Ok(Message::Text(text)) => {
                                                let event = match serde_json::from_str::<serde_json::Value>(&text) {
                                                    Ok(event) => event,
                                                    Err(e) => {
                                                        error!("Failed to parse server event: {}", e);
                                                        continue;
                                                    }
                                                };
                                                
                                                match event["type"].as_str() {
                                                    Some("conversation.item.created") => {
                                                        if let Some(content) = event["item"]["content"].as_array() {
                                                            for item in content {
                                                                if item["type"] == "audio" {
                                                                    if let Some(audio_data) = item["audio"].as_str() {
                                                                        match BASE64.decode(audio_data) {
                                                                            Ok(audio_bytes) => {
                                                                                // Note: Audio data will be handled by socket-flow server
                                                                                debug!("Received audio data of size: {}", audio_bytes.len());
                                                                            },
                                                                            Err(e) => error!("Failed to decode audio data: {}", e),
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    Some("error") => {
                                                        error!("OpenAI Realtime API error: {:?}", event);
                                                        break;
                                                    },
                                                    Some("response.completed") => break,
                                                    _ => {}
                                                }
                                            },
                                            Ok(Message::Close(_)) => break,
                                            Err(e) => {
                                                error!("Error receiving from OpenAI: {}", e);
                                                break;
                                            },
                                            _ => {}
                                        }
                                    }
                                } else {
                                    error!("OpenAI WebSocket not initialized");
                                }
                            },
                            TTSProvider::Sonata => {
                                let mut child = match Command::new("python3")
                                    .arg("src/generate_audio.py")
                                    .stdin(Stdio::piped())
                                    .stdout(Stdio::piped())
                                    .spawn() {
                                        Ok(child) => child,
                                        Err(e) => {
                                            error!("Failed to spawn Python process: {}", e);
                                            continue;
                                        }
                                    };

                                if let Some(mut stdin) = child.stdin.take() {
                                    if let Err(e) = stdin.write_all(msg.as_bytes()) {
                                        error!("Failed to write to stdin: {}", e);
                                        continue;
                                    }
                                    drop(stdin);
                                }

                                match child.wait_with_output() {
                                    Ok(output) => {
                                        if output.status.success() {
                                            // Note: Audio data will be handled by socket-flow server
                                            debug!("Generated audio data of size: {}", output.stdout.len());
                                        } else {
                                            error!("Sonata TTS failed: {}", String::from_utf8_lossy(&output.stderr));
                                        }
                                    },
                                    Err(e) => error!("Failed to get child process output: {}", e),
                                }
                            }
                        }
                    },
                    SpeechCommand::Close => {
                        if let Some(mut stream) = ws_stream.take() {
                            if let Err(e) = stream.send(Message::Close(None)).await {
                                error!("Failed to send close frame: {}", e);
                            }
                        }
                        break;
                    },
                    SpeechCommand::SetTTSProvider(new_provider) => {
                        let mut provider = tts_provider.write().await;
                        *provider = new_provider;
                        info!("TTS provider set to: {:?}", *provider);
                    }
                }
            }
        });
    }

    pub async fn initialize(&self) -> Result<(), Box<dyn Error>> {
        let command = SpeechCommand::Initialize;
        self.sender.lock().await.send(command).await.map_err(|e| Box::new(SpeechError::from(e)))?;
        Ok(())
    }

    pub async fn send_message(&self, message: String) -> Result<(), Box<dyn Error>> {
        let command = SpeechCommand::SendMessage(message);
        self.sender.lock().await.send(command).await.map_err(|e| Box::new(SpeechError::from(e)))?;
        Ok(())
    }

    pub async fn close(&self) -> Result<(), Box<dyn Error>> {
        let command = SpeechCommand::Close;
        self.sender.lock().await.send(command).await.map_err(|e| Box::new(SpeechError::from(e)))?;
        Ok(())
    }

    pub async fn set_tts_provider(&self, use_openai: bool) -> Result<(), Box<dyn Error>> {
        let provider = if use_openai {
            TTSProvider::OpenAI
        } else {
            TTSProvider::Sonata
        };
        let command = SpeechCommand::SetTTSProvider(provider);
        self.sender.lock().await.send(command).await.map_err(|e| Box::new(SpeechError::from(e)))?;
        Ok(())
    }
}

----
services/ragflow_service.rs
use reqwest::{Client, StatusCode};
use log::{error, info};
use crate::config::Settings;
use std::fmt;
use futures::stream::{Stream, StreamExt};
use std::pin::Pin;
use serde_json::json;
use std::sync::Arc;
use tokio::sync::RwLock;

#[derive(Debug)]
pub enum RAGFlowError {
    ReqwestError(reqwest::Error),
    StatusError(StatusCode, String),
    ParseError(String),
    IoError(std::io::Error),
}

impl fmt::Display for RAGFlowError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            RAGFlowError::ReqwestError(e) => write!(f, "Reqwest error: {}", e),
            RAGFlowError::StatusError(status, msg) => write!(f, "Status error ({}): {}", status, msg),
            RAGFlowError::ParseError(msg) => write!(f, "Parse error: {}", msg),
            RAGFlowError::IoError(e) => write!(f, "IO error: {}", e),
        }
    }
}

impl std::error::Error for RAGFlowError {}

impl From<reqwest::Error> for RAGFlowError {
    fn from(err: reqwest::Error) -> Self {
        RAGFlowError::ReqwestError(err)
    }
}

impl From<std::io::Error> for RAGFlowError {
    fn from(err: std::io::Error) -> Self {
        RAGFlowError::IoError(err)
    }
}

pub struct RAGFlowService {
    client: Client,
    api_key: String,
    base_url: String,
}

impl RAGFlowService {
    pub async fn new(settings: Arc<RwLock<Settings>>) -> Result<Self, RAGFlowError> {
        let client = Client::new();
        let settings = settings.read().await;

        Ok(RAGFlowService {
            client,
            api_key: settings.ragflow.api_key.clone(),
            base_url: settings.ragflow.api_base_url.clone(),
        })
    }

    pub async fn create_conversation(&self, user_id: String) -> Result<String, RAGFlowError> {
        info!("Creating conversation for user: {}", user_id);
        let url = format!("{}/api/new_conversation", self.base_url.trim_end_matches('/'));
        info!("Full URL for create_conversation: {}", url);
        
        let response = self.client.get(&url)
            .header("Authorization", format!("Bearer {}", self.api_key))
            .query(&[("user_id", user_id)])
            .send()
            .await?;

        let status = response.status();
        info!("Response status: {}", status);

        if status.is_success() {
            let result: serde_json::Value = response.json().await?;
            info!("Successful response: {:?}", result);
            Ok(result["data"]["id"].as_str().unwrap_or("").to_string())
        } else {
            let error_message = response.text().await?;
            error!("Failed to create conversation. Status: {}, Error: {}", status, error_message);
            Err(RAGFlowError::StatusError(status, error_message))
        }
    }

    pub async fn send_message(
        &self,
        conversation_id: String,
        message: String,
        quote: bool,
        doc_ids: Option<Vec<String>>,
        stream: bool,
    ) -> Result<Pin<Box<dyn Stream<Item = Result<String, RAGFlowError>> + Send + 'static>>, RAGFlowError> {
        info!("Sending message to conversation: {}", conversation_id);
        let url = format!("{}/api/completion", self.base_url.trim_end_matches('/'));
        info!("Full URL for send_message: {}", url);
        
        let mut request_body = json!({
            "conversation_id": conversation_id,
            "messages": [{"role": "user", "content": message}],
            "quote": quote,
            "stream": stream
        });

        if let Some(ids) = doc_ids {
            request_body["doc_ids"] = serde_json::json!(ids.join(","));
        }

        info!("Request body: {:?}", request_body);

        let response = self.client.post(&url)
            .header("Authorization", format!("Bearer {}", self.api_key))
            .header("Content-Type", "application/json")
            .json(&request_body)
            .send()
            .await?;

        let status = response.status();
        info!("Response status: {}", status);
       
        if status.is_success() {
            let stream = response.bytes_stream().map(move |chunk_result| {
                match chunk_result {
                    Ok(chunk) => {
                        match serde_json::from_slice::<serde_json::Value>(&chunk) {
                            Ok(json_response) => {
                                // Extract text answer from the response
                                match json_response["data"]["answer"].as_str()
                                    .or_else(|| json_response["answer"].as_str()) {
                                    Some(answer) => Ok(answer.to_string()),
                                    None => Err(RAGFlowError::ParseError("No answer found in response".to_string()))
                                }
                            },
                            Err(e) => Err(RAGFlowError::ParseError(format!("Failed to parse JSON response: {}", e))),
                        }
                    },
                    Err(e) => Err(RAGFlowError::ReqwestError(e)),
                }
            });

            Ok(Box::pin(stream))
        } else {
            let error_message = response.text().await?;
            error!("Failed to send message. Status: {}, Error: {}", status, error_message);
            Err(RAGFlowError::StatusError(status, error_message))
        }
    }

    pub async fn get_conversation_history(&self, conversation_id: String) -> Result<serde_json::Value, RAGFlowError> {
        let url = format!("{}/api/conversation/{}", self.base_url.trim_end_matches('/'), conversation_id);
        let response = self.client.get(&url)
            .header("Authorization", format!("Bearer {}", self.api_key))
            .send()
            .await?;

        let status = response.status();
        if status.is_success() {
            let history: serde_json::Value = response.json().await?;
            Ok(history)
        } else {
            let error_message = response.text().await?;
            error!("Failed to get conversation history. Status: {}, Error: {}", status, error_message);
            Err(RAGFlowError::StatusError(status, error_message))
        }
    }
}

impl Clone for RAGFlowService {
    fn clone(&self) -> Self {
        RAGFlowService {
            client: self.client.clone(),
            api_key: self.api_key.clone(),
            base_url: self.base_url.clone(),
        }
    }
}

----
services/github_service.rs
use reqwest::Client;
use serde::{Serialize, Deserialize};
use async_trait::async_trait;
use log::{info, error};
use std::error::Error;
use base64::{Engine as _, engine::general_purpose::STANDARD as BASE64};

#[derive(Debug)]
pub enum GitHubError {
    ApiError(String),
    NetworkError(reqwest::Error),
    SerializationError(serde_json::Error),
    ValidationError(String),
    Base64Error(base64::DecodeError),
}

impl std::fmt::Display for GitHubError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            GitHubError::ApiError(msg) => write!(f, "GitHub API error: {}", msg),
            GitHubError::NetworkError(e) => write!(f, "Network error: {}", e),
            GitHubError::SerializationError(e) => write!(f, "Serialization error: {}", e),
            GitHubError::ValidationError(msg) => write!(f, "Validation error: {}", msg),
            GitHubError::Base64Error(e) => write!(f, "Base64 encoding error: {}", e),
        }
    }
}

impl Error for GitHubError {}

impl From<reqwest::Error> for GitHubError {
    fn from(err: reqwest::Error) -> Self {
        GitHubError::NetworkError(err)
    }
}

impl From<serde_json::Error> for GitHubError {
    fn from(err: serde_json::Error) -> Self {
        GitHubError::SerializationError(err)
    }
}

impl From<base64::DecodeError> for GitHubError {
    fn from(err: base64::DecodeError) -> Self {
        GitHubError::Base64Error(err)
    }
}

#[derive(Debug, Serialize)]
struct CreateBranchRequest {
    pub ref_name: String,
    pub sha: String,
}

#[derive(Debug, Serialize)]
struct CreatePullRequest {
    pub title: String,
    pub head: String,
    pub base: String,
    pub body: String,
}

#[derive(Debug, Serialize)]
struct UpdateFileRequest {
    pub message: String,
    pub content: String,
    pub sha: String,
    pub branch: String,
}

#[derive(Debug, Deserialize)]
struct FileResponse {
    pub sha: String,
}

#[async_trait]
pub trait GitHubPRService: Send + Sync {
    async fn create_pull_request(
        &self,
        file_name: &str,
        content: &str,
        original_sha: &str,
    ) -> Result<String, Box<dyn Error + Send + Sync>>;
}

pub struct RealGitHubPRService {
    client: Client,
    token: String,
    owner: String,
    repo: String,
    base_path: String,
}

impl RealGitHubPRService {
    pub fn new(
        token: String,
        owner: String,
        repo: String,
        base_path: String,
    ) -> Result<Self, Box<dyn Error + Send + Sync>> {
        let client = Client::builder()
            .user_agent("rust-github-api")
            .build()
            .map_err(GitHubError::from)?;

        Ok(Self {
            client,
            token,
            owner,
            repo,
            base_path,
        })
    }

    async fn get_main_branch_sha(&self) -> Result<String, Box<dyn Error + Send + Sync>> {
        let url = format!(
            "https://api.github.com/repos/{}/{}/git/ref/heads/main",
            self.owner, self.repo
        );

        let response = self.client
            .get(&url)
            .header("Authorization", format!("Bearer {}", self.token))
            .header("Accept", "application/vnd.github+json")
            .send()
            .await
            .map_err(GitHubError::from)?;

        if !response.status().is_success() {
            let error_text = response.text().await.map_err(GitHubError::from)?;
            error!("Failed to get main branch SHA: {}", error_text);
            return Err(GitHubError::ApiError(error_text).into());
        }

        let response_json: serde_json::Value = response.json().await.map_err(GitHubError::from)?;
        Ok(response_json["object"]["sha"]
            .as_str()
            .ok_or_else(|| GitHubError::ValidationError("SHA not found".to_string()))?
            .to_string())
    }

    async fn create_branch(&self, branch_name: &str, sha: &str) -> Result<(), Box<dyn Error + Send + Sync>> {
        let url = format!(
            "https://api.github.com/repos/{}/{}/git/refs",
            self.owner, self.repo
        );

        let body = CreateBranchRequest {
            ref_name: format!("refs/heads/{}", branch_name),
            sha: sha.to_string(),
        };

        let response = self.client
            .post(&url)
            .header("Authorization", format!("Bearer {}", self.token))
            .header("Accept", "application/vnd.github+json")
            .json(&body)
            .send()
            .await
            .map_err(GitHubError::from)?;

        if !response.status().is_success() {
            let error_text = response.text().await.map_err(GitHubError::from)?;
            error!("Failed to create branch: {}", error_text);
            return Err(GitHubError::ApiError(error_text).into());
        }

        Ok(())
    }

    async fn update_file(
        &self,
        file_path: &str,
        content: &str,
        branch_name: &str,
        original_sha: &str,
    ) -> Result<String, Box<dyn Error + Send + Sync>> {
        let url = format!(
            "https://api.github.com/repos/{}/{}/contents/{}",
            self.owner, self.repo, file_path
        );

        let encoded_content = BASE64.encode(content);
        
        let body = UpdateFileRequest {
            message: format!("Update {} with Perplexity-enhanced content", file_path),
            content: encoded_content,
            sha: original_sha.to_string(),
            branch: branch_name.to_string(),
        };

        let response = self.client
            .put(&url)
            .header("Authorization", format!("Bearer {}", self.token))
            .header("Accept", "application/vnd.github+json")
            .json(&body)
            .send()
            .await
            .map_err(GitHubError::from)?;

        if !response.status().is_success() {
            let error_text = response.text().await.map_err(GitHubError::from)?;
            error!("Failed to update file: {}", error_text);
            return Err(GitHubError::ApiError(error_text).into());
        }

        let file_response: FileResponse = response.json().await.map_err(GitHubError::from)?;
        Ok(file_response.sha)
    }
}

#[async_trait]
impl GitHubPRService for RealGitHubPRService {
    async fn create_pull_request(
        &self,
        file_name: &str,
        content: &str,
        original_sha: &str,
    ) -> Result<String, Box<dyn Error + Send + Sync>> {
        let timestamp = chrono::Utc::now().timestamp();
        let branch_name = format!("perplexity-update-{}-{}", file_name.replace(".md", ""), timestamp);
        
        let main_sha = self.get_main_branch_sha().await?;
        self.create_branch(&branch_name, &main_sha).await?;
        
        let file_path = format!("{}/{}", self.base_path, file_name);
        let new_sha = self.update_file(&file_path, content, &branch_name, original_sha).await?;
        
        let url = format!(
            "https://api.github.com/repos/{}/{}/pulls",
            self.owner, self.repo
        );

        let pr_body = CreatePullRequest {
            title: format!("Perplexity Enhancement: {}", file_name),
            head: branch_name,
            base: "main".to_string(),
            body: format!(
                "This PR contains Perplexity-enhanced content for {}.\n\nOriginal SHA: {}\nNew SHA: {}",
                file_name, original_sha, new_sha
            ),
        };

        let response = self.client
            .post(&url)
            .header("Authorization", format!("Bearer {}", self.token))
            .header("Accept", "application/vnd.github+json")
            .json(&pr_body)
            .send()
            .await
            .map_err(GitHubError::from)?;

        if !response.status().is_success() {
            let error_text = response.text().await.map_err(GitHubError::from)?;
            error!("Failed to create PR: {}", error_text);
            return Err(GitHubError::ApiError(error_text).into());
        }

        let pr_response: serde_json::Value = response.json().await.map_err(GitHubError::from)?;
        let pr_url = pr_response["html_url"]
            .as_str()
            .ok_or_else(|| GitHubError::ValidationError("PR URL not found".to_string()))?
            .to_string();

        info!("Created PR: {}", pr_url);
        Ok(pr_url)
    }
}

----
visualization/MetadataVisualizer.ts
import * as THREE from 'three';
import { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry.js';
import { FontLoader, Font } from 'three/examples/jsm/loaders/FontLoader.js';
import { NodeMetadata } from '../types/metadata';

export class MetadataVisualizer {
    private readonly geometries = {
        SPHERE: new THREE.SphereGeometry(1, 32, 32),
        ICOSAHEDRON: new THREE.IcosahedronGeometry(1),
        OCTAHEDRON: new THREE.OctahedronGeometry(1)
    };

    private font: Font | null = null;
    private fontLoader: FontLoader;
    private readonly fontPath = '/fonts/helvetiker_regular.typeface.json';
    private readonly labelScale = 0.1;
    private readonly labelHeight = 0.1;
    private readonly labelGroup: THREE.Group;

    constructor(
        private readonly camera: THREE.Camera,
        private readonly settings: any
    ) {
        this.fontLoader = new FontLoader();
        this.loadFont();
        this.labelGroup = new THREE.Group();
    }

    private async loadFont(): Promise<void> {
        try {
            this.font = await this.fontLoader.loadAsync(this.fontPath);
        } catch (error) {
            console.error('Failed to load font:', error);
        }
    }

    public async createTextMesh(text: string): Promise<THREE.Mesh | null> {
        if (!this.font) {
            console.warn('Font not loaded yet');
            return null;
        }

        const geometry = new TextGeometry(text, {
            font: this.font,
            size: 1,
            height: this.labelHeight,
            curveSegments: 4,
            bevelEnabled: false
        });

        const material = new THREE.MeshBasicMaterial({
            color: 0xffffff,
            transparent: true,
            opacity: 0.8
        });

        const mesh = new THREE.Mesh(geometry, material);
        mesh.scale.set(this.labelScale, this.labelScale, this.labelScale);

        // Center the text
        geometry.computeBoundingBox();
        const textWidth = geometry.boundingBox!.max.x - geometry.boundingBox!.min.x;
        mesh.position.x = -textWidth * this.labelScale / 2;

        return mesh;
    }

    public createNodeVisual(metadata: NodeMetadata): THREE.Mesh {
        const geometry = this.getGeometryFromAge(metadata.commitAge);
        const material = this.createMaterialFromHyperlinks(metadata.hyperlinkCount);
        const mesh = new THREE.Mesh(geometry, material);

        const scale = this.calculateScale(metadata.importance);
        mesh.scale.set(scale, scale, scale);

        mesh.position.set(
            metadata.position.x,
            metadata.position.y,
            metadata.position.z
        );

        return mesh;
    }

    private getGeometryFromAge(age: number): THREE.BufferGeometry {
        if (age < 7) return this.geometries.SPHERE;
        if (age < 30) return this.geometries.ICOSAHEDRON;
        return this.geometries.OCTAHEDRON;
    }

    private createMaterialFromHyperlinks(count: number): THREE.Material {
        const hue = Math.min(count / 10, 1) * 0.3; // 0 to 0.3 range
        const color = new THREE.Color().setHSL(hue, 0.7, 0.5);

        return new THREE.MeshPhongMaterial({
            color: color,
            shininess: 30,
            transparent: true,
            opacity: 0.9
        });
    }

    private calculateScale(importance: number): number {
        const [min, max] = this.settings.nodes.sizeRange;
        return min + (max - min) * Math.min(importance, 1);
    }

    public async createMetadataLabel(metadata: NodeMetadata): Promise<THREE.Group> {
        const group = new THREE.Group();

        // Create text for name
        const nameMesh = await this.createTextMesh(metadata.name);
        if (nameMesh) {
            nameMesh.position.y = 1.2;
            group.add(nameMesh);
        }

        // Create text for commit age
        const ageMesh = await this.createTextMesh(`${Math.round(metadata.commitAge)} days`);
        if (ageMesh) {
            ageMesh.position.y = 0.8;
            group.add(ageMesh);
        }

        // Create text for hyperlink count
        const linksMesh = await this.createTextMesh(`${metadata.hyperlinkCount} links`);
        if (linksMesh) {
            linksMesh.position.y = 0.4;
            group.add(linksMesh);
        }

        // Billboard behavior
        if (this.settings.labels?.billboard_mode === 'camera') {
            group.onBeforeRender = () => {
                group.quaternion.copy(this.camera.quaternion);
            };
        } else {
            // Vertical billboard - only rotate around Y
            group.onBeforeRender = () => {
                const cameraPos = this.camera.position.clone();
                cameraPos.y = group.position.y;
                group.lookAt(cameraPos);
            };
        }

        return group;
    }

    public dispose(): void {
        // Clean up geometries
        Object.values(this.geometries).forEach(geometry => geometry.dispose());
        
        // Clean up label group
        this.labelGroup.traverse(child => {
            if (child instanceof THREE.Mesh) {
                child.geometry.dispose();
                if (child.material instanceof THREE.Material) {
                    child.material.dispose();
                }
            }
        });
    }
}

----
visualization/HologramManager.ts
import * as THREE from 'three';
import { HologramSettings } from '../types/metadata';
import { XRHandedness } from '../types/xr';

export class HologramManager {
    private readonly hologramGroup: THREE.Group;
    private readonly geometryCache: Map<string, THREE.BufferGeometry>;
    private readonly materialCache: Map<string, THREE.Material>;
    private isXRMode: boolean = false;

    constructor(
        private readonly scene: THREE.Scene,
        private readonly camera: THREE.PerspectiveCamera,
        private settings: HologramSettings
    ) {
        this.hologramGroup = new THREE.Group();
        this.geometryCache = new Map();
        this.materialCache = new Map();
        this.scene.add(this.hologramGroup);
        
        // Initialize geometries based on quality setting
        this.initializeGeometries();
        this.createHolographicStructures();
    }

    private initializeGeometries(): void {
        const quality = this.isXRMode ? this.settings.xrQuality : this.settings.desktopQuality;
        const segments = {
            low: { ring: 32, sphere: 8 },
            medium: { ring: 64, sphere: 16 },
            high: { ring: 128, sphere: 32 }
        }[quality] || segments.medium;

        // Create and cache geometries
        this.geometryCache.set('ring', new THREE.TorusGeometry(1, 0.02, segments.ring, segments.ring * 2));
        this.geometryCache.set('buckminster', new THREE.IcosahedronGeometry(1, quality === 'high' ? 2 : 1));
        this.geometryCache.set('geodesic', new THREE.IcosahedronGeometry(1, quality === 'low' ? 1 : 2));
        this.geometryCache.set('triangleSphere', new THREE.SphereGeometry(1, segments.sphere, segments.sphere));

        // Create hologram material
        const hologramMaterial = new THREE.ShaderMaterial({
            uniforms: {
                color: { value: new THREE.Color(this.settings.ringColor) },
                opacity: { value: this.settings.ringOpacity },
                time: { value: 0 },
                pulseSpeed: { value: 1.0 },
                pulseIntensity: { value: 0.2 }
            },
            vertexShader: `
                varying vec3 vPosition;
                varying vec2 vUv;
                void main() {
                    vPosition = position;
                    vUv = uv;
                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
                }
            `,
            fragmentShader: `
                uniform vec3 color;
                uniform float opacity;
                uniform float time;
                uniform float pulseSpeed;
                uniform float pulseIntensity;
                varying vec3 vPosition;
                varying vec2 vUv;
                
                void main() {
                    float pulse = sin(time * pulseSpeed) * pulseIntensity + 1.0;
                    float edge = 1.0 - smoothstep(0.4, 0.5, abs(vUv.y - 0.5));
                    vec3 finalColor = color * pulse;
                    float finalOpacity = opacity * edge;
                    
                    #ifdef USE_AR
                        // Adjust opacity based on distance to camera for AR
                        float depth = gl_FragCoord.z / gl_FragCoord.w;
                        finalOpacity *= smoothstep(10.0, 0.0, depth);
                    #endif
                    
                    gl_FragColor = vec4(finalColor, finalOpacity);
                }
            `,
            transparent: true,
            side: THREE.DoubleSide,
            depthWrite: false
        });

        this.materialCache.set('hologram', hologramMaterial);
    }

    private createHolographicStructures(): void {
        // Clear existing structures
        while (this.hologramGroup.children.length > 0) {
            const child = this.hologramGroup.children[0];
            this.hologramGroup.remove(child);
        }

        // Create rings
        const ringGeometry = this.geometryCache.get('ring')!;
        const material = this.materialCache.get('hologram')!.clone();

        for (let i = 0; i < this.settings.ringCount; i++) {
            const ring = new THREE.Mesh(ringGeometry, material.clone());
            ring.scale.setScalar(this.settings.ringSizes[i] || 20);
            ring.rotation.x = Math.PI / 2 * i;
            ring.rotation.y = Math.PI / 4 * i;
            ring.userData.rotationSpeed = this.settings.ringRotationSpeed * (i + 1);
            this.hologramGroup.add(ring);
        }

        // Create geometric structures based on settings
        if (this.settings.enableBuckminster) {
            const geometry = this.geometryCache.get('buckminster')!;
            const mesh = new THREE.Mesh(geometry, material.clone());
            mesh.scale.setScalar(this.settings.buckminsterScale);
            mesh.material.uniforms.opacity.value = this.settings.buckminsterOpacity;
            this.hologramGroup.add(mesh);
        }

        if (this.settings.enableGeodesic) {
            const geometry = this.geometryCache.get('geodesic')!;
            const mesh = new THREE.Mesh(geometry, material.clone());
            mesh.scale.setScalar(this.settings.geodesicScale);
            mesh.material.uniforms.opacity.value = this.settings.geodesicOpacity;
            this.hologramGroup.add(mesh);
        }

        if (this.settings.enableTriangleSphere) {
            const geometry = this.geometryCache.get('triangleSphere')!;
            const mesh = new THREE.Mesh(geometry, material.clone());
            mesh.scale.setScalar(this.settings.triangleSphereScale);
            mesh.material.uniforms.opacity.value = this.settings.triangleSphereOpacity;
            this.hologramGroup.add(mesh);
        }
    }

    public setXRMode(enabled: boolean): void {
        this.isXRMode = enabled;
        if (enabled) {
            // Optimize for XR
            this.hologramGroup.children.forEach(child => {
                if (child instanceof THREE.Mesh) {
                    child.material.defines = { USE_AR: '' };
                    child.material.needsUpdate = true;
                }
            });
        }
        // Recreate geometries with appropriate quality
        this.initializeGeometries();
        this.createHolographicStructures();
    }

    public update(deltaTime: number): void {
        // Update hologram animations
        this.hologramGroup.children.forEach(child => {
            if (child instanceof THREE.Mesh) {
                child.rotation.y += (child.userData.rotationSpeed || this.settings.globalRotationSpeed) * deltaTime;
                if (child.material instanceof THREE.ShaderMaterial) {
                    child.material.uniforms.time.value += deltaTime;
                }
            }
        });
    }

    public handleHandInteraction(hand: THREE.XRHand, handedness: XRHandedness): void {
        if (!this.isXRMode) return;

        // Get index finger tip position
        const indexTip = hand.joints['index-finger-tip'];
        if (!indexTip) return;

        // Convert joint position to world space
        const fingerPosition = new THREE.Vector3()
            .fromBufferAttribute(indexTip.position as THREE.BufferAttribute, 0)
            .applyMatrix4(hand.matrixWorld);

        // Check interaction with hologram elements
        this.hologramGroup.children.forEach(child => {
            if (child instanceof THREE.Mesh) {
                const distance = fingerPosition.distanceTo(child.position);
                if (distance < 0.1) { // 10cm interaction radius
                    // Increase pulse intensity temporarily
                    if (child.material instanceof THREE.ShaderMaterial) {
                        child.material.uniforms.pulseIntensity.value = 0.4;
                        setTimeout(() => {
                            child.material.uniforms.pulseIntensity.value = 0.2;
                        }, 500);
                    }
                }
            }
        });
    }

    public updateSettings(settings: Partial<HologramSettings>): void {
        Object.assign(this.settings, settings);
        this.createHolographicStructures();
    }

    public dispose(): void {
        // Dispose geometries
        this.geometryCache.forEach(geometry => geometry.dispose());
        this.geometryCache.clear();

        // Dispose materials
        this.materialCache.forEach(material => material.dispose());
        this.materialCache.clear();

        // Remove from scene
        this.scene.remove(this.hologramGroup);
    }
}

----
visualization/VisualizationController.ts
import * as THREE from 'three';
import { MetadataVisualizer } from './MetadataVisualizer';
import { HologramManager } from './HologramManager';
import { NodeMetadata, HologramSettings } from '../types/metadata';
import { XRHandedness, XRHand } from '../types/xr';

export class VisualizationController {
    private readonly scene: THREE.Scene;
    private readonly camera: THREE.PerspectiveCamera;
    private readonly renderer: THREE.WebGLRenderer;
    private readonly metadataVisualizer: MetadataVisualizer;
    private readonly hologramManager: HologramManager;
    private clock: THREE.Clock;
    private isXRSession: boolean = false;

    constructor(container: HTMLElement, settings: any) {
        // Initialize Three.js basics
        this.scene = new THREE.Scene();
        this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        this.renderer = new THREE.WebGLRenderer({
            antialias: true,
            alpha: true,
            logarithmicDepthBuffer: true
        });
        this.renderer.setPixelRatio(window.devicePixelRatio);
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        this.renderer.xr.enabled = true;
        container.appendChild(this.renderer.domElement);

        // Initialize managers
        this.metadataVisualizer = new MetadataVisualizer(this.scene, this.camera, settings);
        this.hologramManager = new HologramManager(this.scene, this.camera, settings.hologram);
        this.clock = new THREE.Clock();

        // Set up XR session change handling
        this.renderer.xr.addEventListener('sessionstart', () => {
            this.isXRSession = true;
            this.hologramManager.setXRMode(true);
        });

        this.renderer.xr.addEventListener('sessionend', () => {
            this.isXRSession = false;
            this.hologramManager.setXRMode(false);
        });

        // Set up window resize handling
        window.addEventListener('resize', this.onWindowResize.bind(this));
    }

    private onWindowResize(): void {
        this.camera.aspect = window.innerWidth / window.innerHeight;
        this.camera.updateProjectionMatrix();
        this.renderer.setSize(window.innerWidth, window.innerHeight);
    }

    public updateNodes(nodes: NodeMetadata[]): void {
        // Clear existing nodes
        this.scene.children
            .filter(child => child.userData.isNode)
            .forEach(node => this.scene.remove(node));

        // Create new nodes
        nodes.forEach(metadata => {
            const nodeMesh = this.metadataVisualizer.createNodeVisual(metadata);
            nodeMesh.userData.isNode = true;
            nodeMesh.position.set(
                metadata.position.x,
                metadata.position.y,
                metadata.position.z
            );
            this.scene.add(nodeMesh);
        });
    }

    public updateHologramSettings(settings: Partial<HologramSettings>): void {
        this.hologramManager.updateSettings(settings);
    }

    public handleHandInput(hand: XRHand, handedness: XRHandedness): void {
        if (this.isXRSession) {
            this.hologramManager.handleHandInteraction(hand, handedness);
        }
    }

    public animate(): void {
        const render = () => {
            const delta = this.clock.getDelta();
            
            // Update hologram animations
            this.hologramManager.update(delta);

            // Render scene
            this.renderer.render(this.scene, this.camera);
        };

        this.renderer.setAnimationLoop(render);
    }

    public dispose(): void {
        // Clean up event listeners
        window.removeEventListener('resize', this.onWindowResize.bind(this));

        // Dispose managers
        this.metadataVisualizer.dispose();
        this.hologramManager.dispose();

        // Stop animation loop
        this.renderer.setAnimationLoop(null);

        // Dispose Three.js resources
        this.renderer.dispose();
        this.scene.traverse((object) => {
            if (object instanceof THREE.Mesh) {
                object.geometry.dispose();
                if (Array.isArray(object.material)) {
                    object.material.forEach(material => material.dispose());
                } else {
                    object.material.dispose();
                }
            }
        });
    }
}

--END--The following text represents a project with code. The structure of the text consists of sections beginning with ----, followed by a single line containing the file path and file name, and then a variable number of lines containing the file contents. The text representing the project ends when the symbols --END-- are encountered. Any further text beyond --END-- is meant to be interpreted as instructions using the aforementioned project as context.
----
index.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>LogseqXR Graph Visualization</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      overflow: hidden;
      font-family: Arial, sans-serif;
      background: #212121;  /* Match scene background */
      color: #ffffff;
    }

    #scene-container {
      position: absolute;
      width: 100%;
      height: 100%;
      background: transparent;
    }

    #control-panel {
      position: fixed;
      top: 0;
      right: 0;
      height: 100vh;
      background: rgba(33, 33, 33, 0.95);  /* Match scene background */
      border-left: 1px solid rgba(255, 255, 255, 0.1);
      padding: 15px;
      z-index: 1000;
      min-width: 300px;
      overflow-y: auto;
      box-shadow: -2px 0 10px rgba(0, 0, 0, 0.3);
    }

    .control-panel-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 15px;
      padding-bottom: 10px;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .control-panel-header h3 {
      margin: 0;
      font-size: 1.2em;
      color: #ffffff;
    }

    .connection-status {
      display: inline-block;
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 0.9em;
    }

    .connection-status.connected {
      background: rgba(76, 175, 80, 0.2);
      color: #4CAF50;
    }

    .connection-status.disconnected {
      background: rgba(244, 67, 54, 0.2);
      color: #F44336;
    }

    .settings-group {
      margin-bottom: 20px;
      padding: 10px;
      border-radius: 4px;
      background: rgba(255, 255, 255, 0.05);
    }

    .settings-group h4 {
      margin: 0 0 10px 0;
      color: #ffffff;
      font-size: 1em;
    }

    .setting-item {
      margin-bottom: 10px;
    }

    .setting-item label {
      display: block;
      margin-bottom: 5px;
      color: rgba(255, 255, 255, 0.8);
    }

    .setting-item input[type="text"],
    .setting-item input[type="number"],
    .setting-item select {
      width: 100%;
      padding: 6px;
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 4px;
      background: rgba(255, 255, 255, 0.1);
      color: #ffffff;
    }

    .setting-item input[type="checkbox"] {
      margin-right: 8px;
    }

    .setting-item input:focus,
    .setting-item select:focus {
      outline: none;
      border-color: rgba(255, 255, 255, 0.3);
      background: rgba(255, 255, 255, 0.15);
    }
  </style>
</head>
<body>
  <div id="scene-container">
    <canvas id="main-canvas"></canvas>
  </div>
  <div id="control-panel">
    <div class="control-panel-header">
      <h3>Settings</h3>
      <div class="connection-status">
        <span class="status-indicator"></span>
        <span id="connection-status">Connecting...</span>
      </div>
    </div>
    <div class="control-panel-content">
      <!-- Settings sections will be dynamically populated by ControlPanel.ts -->
    </div>
    <div class="settings-actions">
      <button id="reset-settings">Reset</button>
      <button id="save-settings">Save</button>
    </div>
  </div>
  <script type="module" src="/index.ts"></script>
</body>
</html>

----
tsconfig.json
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "module": "ESNext",
    "lib": [
      "es2020",
      "dom",
      "dom.iterable",
      "webworker",
      "webworker.importscripts",
      "webworker.iterable"
    ],
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitAny": true,
    "noImplicitThis": true,
    "noImplicitReturns": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "strictBindCallApply": true,
    "strictPropertyInitialization": true,
    "allowJs": true,
    "checkJs": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": ["**/*.ts", "**/*.d.ts"],
  "exclude": ["node_modules"]
}

----
index.ts
/**
 * LogseqXR Application Entry Point
 */

import { platformManager } from './platform/platformManager';
import { Settings, SettingCategory, SettingKey } from './types/settings';
import { settingsManager } from './state/settings';
import { graphDataManager } from './state/graphData';
import { WebSocketService } from './websocket/websocketService';
import { SceneManager } from './rendering/scene';
import { NodeManager } from './rendering/nodes';
import { XRSessionManager } from './xr/xrSessionManager';
import { createLogger, setDebugEnabled } from './core/logger';
import { ControlPanel } from './ui/ControlPanel';

const logger = createLogger('Application');

class Application {
    private webSocket!: WebSocketService;
    private sceneManager!: SceneManager;
    private nodeManager!: NodeManager;
    private xrManager: XRSessionManager | null = null;

    constructor() {
        this.initializeApplication();
    }

    private async initializeApplication(): Promise<void> {
        try {
            // Initialize platform manager
            await platformManager.initialize();

            // Initialize settings
            await settingsManager.initialize();
            
            // Update logger debug state from settings
            const settings = settingsManager.getCurrentSettings();
            setDebugEnabled(settings.clientDebug.enabled);
            logger.info('Debug logging ' + (settings.clientDebug.enabled ? 'enabled' : 'disabled'));

            // Initialize scene first so we can render nodes when data arrives
            this.initializeScene();

            try {
                // Load initial graph data from REST endpoint
                await graphDataManager.loadInitialGraphData();
                
                // Initialize WebSocket for real-time position updates
                this.webSocket = new WebSocketService();

                // Setup binary position update handler
                this.webSocket.onBinaryMessage((positions, velocities) => {
                    // Update graph data with both positions and velocities
                    graphDataManager.updatePositions(positions);
                    // Update visual representation with just positions
                    this.nodeManager.updatePositions(positions);
                });

            } catch (error) {
                logger.error('Failed to initialize data services:', error);
                this.showError('Failed to initialize data services');
            }

            try {
                // Initialize XR if supported
                await this.initializeXR();
            } catch (xrError) {
                logger.error('Failed to initialize XR:', xrError);
                // Continue initialization even if XR fails
            }

            // Initialize UI components
            const controlPanelContainer = document.getElementById('control-panel');
            if (!controlPanelContainer) {
                logger.warn('Control panel container not found, skipping UI initialization');
            } else {
                new ControlPanel(controlPanelContainer);
                // Setup UI event listeners
                this.setupUIEventListeners();
            }

            // Subscribe to graph data updates
            graphDataManager.subscribe(() => {
                // Hide loading overlay after initial data is loaded
                this.hideLoadingOverlay();
            });

            logger.log('Application initialized successfully');
            // Hide loading overlay after initialization
            this.hideLoadingOverlay();
        } catch (error) {
            logger.error('Failed to initialize application:', error);
            this.showError('Failed to initialize application');
            // Still try to hide loading overlay
            this.hideLoadingOverlay();
        }
    }

    private initializeScene(): void {
        // Get canvas element
        const container = document.getElementById('scene-container');
        if (!container) {
            throw new Error('Scene container not found');
        }

        // Create canvas
        const canvas = document.createElement('canvas');
        container.appendChild(canvas);

        // Initialize scene manager
        this.sceneManager = SceneManager.getInstance(canvas);

        // Initialize node manager
        this.nodeManager = NodeManager.getInstance();

        // Add node meshes to scene
        const nodeMeshes = this.nodeManager.getAllNodeMeshes();
        nodeMeshes.forEach(mesh => this.sceneManager.add(mesh));

        // Start rendering
        this.sceneManager.start();
        logger.log('Scene initialized with node meshes');
    }

    private async initializeXR(): Promise<void> {
        if (platformManager.getCapabilities().xrSupported) {
            // Initialize XR manager
            this.xrManager = XRSessionManager.getInstance(this.sceneManager);

            // Setup XR button
            const xrButton = document.getElementById('xr-button');
            if (xrButton) {
                xrButton.style.display = 'block';
                xrButton.addEventListener('click', () => this.toggleXRSession());
            }
        }
    }

    private setupUIEventListeners(): void {
        // Settings panel save button
        const saveButton = document.getElementById('save-settings');
        if (saveButton) {
            saveButton.addEventListener('click', () => this.saveSettings());
        }

        // Settings inputs
        this.setupSettingsInputListeners();
    }

    private setupSettingsInputListeners(): void {
        // Node appearance settings
        this.setupSettingInput<'nodes', 'baseSize'>('nodes', 'baseSize');
        this.setupSettingInput<'nodes', 'baseColor'>('nodes', 'baseColor');
        this.setupSettingInput<'nodes', 'opacity'>('nodes', 'opacity');

        // Edge appearance settings
        this.setupSettingInput<'edges', 'color'>('edges', 'color');
        this.setupSettingInput<'edges', 'opacity'>('edges', 'opacity');
        this.setupSettingInput<'edges', 'enableArrows'>('edges', 'enableArrows');

        // Visual effects settings
        this.setupSettingInput<'bloom', 'edgeBloomStrength'>('bloom', 'edgeBloomStrength');

        // Physics settings
        this.setupSettingInput<'physics', 'enabled'>('physics', 'enabled');
        this.setupSettingInput<'physics', 'springStrength'>('physics', 'springStrength');
    }

    private setupSettingInput<T extends SettingCategory, K extends SettingKey<T>>(
        category: T,
        setting: K
    ): void {
        const input = document.getElementById(`${String(category)}-${String(setting)}`) as HTMLInputElement;
        if (input) {
            input.addEventListener('change', async (event) => {
                const currentValue = (event.target as HTMLInputElement).value;

                try {
                    const response = await fetch(`/api/visualization/settings/${String(category)}/${String(setting)}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ value: currentValue }),
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    await settingsManager.updateSetting(
                        category,
                        setting,
                        this.parseSettingValue<T, K>(currentValue, category, setting)
                    );
                } catch (error) {
                    logger.error(`Failed to update setting ${String(category)}.${String(setting)}:`, error);
                    this.showError(`Failed to update ${String(category)} ${String(setting)}`);
                }
            });
        }
    }

    private parseSettingValue<T extends SettingCategory, K extends SettingKey<T>>(
        value: string,
        category: T,
        setting: K
    ): Settings[T][K] {
        const currentSettings = settingsManager.getCurrentSettings();
        const currentValue = currentSettings[category][setting];
        
        switch (typeof currentValue) {
            case 'number':
                return Number(value) as Settings[T][K];
            case 'boolean':
                return (value === 'true') as Settings[T][K];
            default:
                return value as Settings[T][K];
        }
    }

    private async saveSettings(): Promise<void> {
        try {
            const currentSettings = settingsManager.getCurrentSettings();
            const categories = ['nodes', 'edges', 'rendering', 'physics', 'labels', 'bloom', 'clientDebug'] as const;
            
            for (const category of categories) {
                const categorySettings = currentSettings[category];
                for (const [setting, value] of Object.entries(categorySettings)) {
                    try {
                        const response = await fetch(`/api/visualization/settings/${String(category)}/${String(setting)}`, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ value })
                        });

                        if (!response.ok) {
                            throw new Error(`Failed to update setting: ${response.statusText}`);
                        }

                        await settingsManager.updateSetting(
                            category,
                            setting as keyof Settings[typeof category],
                            value as Settings[typeof category][keyof Settings[typeof category]]
                        );
                    } catch (error) {
                        logger.error(`Failed to update setting ${String(category)}.${String(setting)}:`, error);
                    }
                }
            }
        } catch (error) {
            logger.error('Failed to save settings:', error);
            throw error;
        }
    }

    private async toggleXRSession(): Promise<void> {
        if (!this.xrManager) return;

        try {
            if (this.xrManager.isXRPresenting()) {
                await this.xrManager.endXRSession();
            } else {
                await this.xrManager.initXRSession();
            }
        } catch (error) {
            logger.error('Failed to toggle XR session:', error);
            this.showError('Failed to start XR session');
        }
    }

    private hideLoadingOverlay(): void {
        const overlay = document.querySelector('.loading-overlay');
        if (overlay && overlay instanceof HTMLElement) {
            overlay.style.opacity = '0';
            setTimeout(() => {
                overlay.style.display = 'none';
            }, 500); // Match this with CSS transition duration
        }
    }

    private showError(message: string): void {
        const overlay = document.querySelector('.loading-overlay');
        if (overlay && overlay instanceof HTMLElement) {
            const spinner = overlay.querySelector('.spinner');
            if (spinner) {
                spinner.remove();
            }
            
            const error = document.createElement('div');
            error.className = 'error-message';
            error.textContent = message;
            overlay.appendChild(error);
            
            // Keep the overlay visible
            overlay.style.display = 'flex';
            overlay.style.opacity = '1';
        }
    }

    dispose(): void {
        // Stop rendering
        if (this.sceneManager) {
            SceneManager.cleanup();
        }

        // Dispose of WebSocket
        if (this.webSocket) {
            this.webSocket.dispose();
        }

        // Clear graph data
        graphDataManager.clear();

        // Dispose of XR
        if (this.xrManager) {
            this.xrManager.dispose();
        }

        // Remove canvas
        const container = document.getElementById('scene-container');
        if (container) {
            container.innerHTML = '';
        }

        logger.log('Application disposed');
    }
}

// Create application instance
const app = new Application();

// Handle window unload
window.addEventListener('unload', () => {
    app.dispose();
});

// Log application start
console.info('LogseqXR application starting...');

----
websocket/websocketService.ts
import { createLogger } from '../core/logger';
import { buildWsUrl, buildSettingsUrl } from '../core/api';
import { WebSocketSettings } from '../core/types';
import { ConnectionState, MessageType, WebSocketMessage } from '../types/websocket';

const logger = createLogger('WebSocketService');
const VALUES_PER_NODE = 6; // 3 for position, 3 for velocity

type BinaryMessageHandler = (positions: Float32Array, velocities: Float32Array) => void;

export class WebSocketService {
    private ws: WebSocket | null = null;
    private binaryHandler: BinaryMessageHandler | null = null;
    private reconnectAttempts = 0;
    private maxReconnectAttempts = 3;
    private reconnectDelay = 5000;
    private heartbeatInterval = 30000; // 30s to match server
    private heartbeatTimeout = 3600000; // 1h to match server
    private lastPingTime: number | null = null;
    private pingTimer: NodeJS.Timeout | null = null;
    private reconnectTimer: NodeJS.Timeout | null = null;
    private connectionState: ConnectionState = ConnectionState.DISCONNECTED;
    private settingsLoaded = false;

    constructor() {
        this.initialize();
    }

    private async initialize(): Promise<void> {
        try {
            await this.loadSettings();
            this.settingsLoaded = true;
            await this.connect();
        } catch (error) {
            logger.error('Failed to initialize WebSocket service:', error);
        }
    }

    private async loadSettings(): Promise<void> {
        try {
            const response = await fetch(buildSettingsUrl('websocket'));
            if (!response.ok) {
                throw new Error(`Failed to load WebSocket settings: ${response.statusText}`);
            }
            const data = await response.json();
            if (data.success && data.settings) {
                this.updateSettings(data.settings);
            } else {
                throw new Error('Invalid settings response format');
            }
        } catch (error) {
            logger.error('Error loading WebSocket settings:', error);
            throw error;
        }
    }

    private updateSettings(settings: Partial<WebSocketSettings>): void {
        if (settings.heartbeatInterval) this.heartbeatInterval = settings.heartbeatInterval * 1000;
        if (settings.heartbeatTimeout) this.heartbeatTimeout = settings.heartbeatTimeout * 1000;
        if (settings.reconnectAttempts) this.maxReconnectAttempts = settings.reconnectAttempts;
        if (settings.reconnectDelay) this.reconnectDelay = settings.reconnectDelay;
        
        logger.debug('Updated WebSocket settings:', settings);
    }

    private async connect(): Promise<void> {
        if (this.connectionState === ConnectionState.CONNECTING || 
            this.connectionState === ConnectionState.CONNECTED) {
            return;
        }

        try {
            this.connectionState = ConnectionState.CONNECTING;
            const wsUrl = buildWsUrl();
            this.ws = new WebSocket(wsUrl);
            this.ws.binaryType = 'arraybuffer';
            
            this.ws.onopen = this.onopen.bind(this);
            this.ws.onclose = this.onclose.bind(this);
            this.ws.onerror = this.onerror.bind(this);
            this.ws.onmessage = this.onmessage.bind(this);
            
            logger.debug('Attempting WebSocket connection to:', wsUrl);
        } catch (error) {
            logger.error('Error creating WebSocket connection:', error);
            this.handleDisconnect();
        }
    }

    private onopen(): void {
        logger.info('WebSocket connection established');
        this.connectionState = ConnectionState.CONNECTED;
        this.reconnectAttempts = 0;
        this.startPing();
    }

    private onclose(): void {
        logger.info('WebSocket connection closed');
        this.connectionState = ConnectionState.DISCONNECTED;
        this.handleDisconnect();
    }

    private onerror(error: Event): void {
        logger.error('WebSocket error:', error);
        this.handleDisconnect();
    }

    private onmessage(event: MessageEvent): void {
        try {
            // Handle binary messages (position/velocity updates)
            if (event.data instanceof ArrayBuffer) {
                if (this.binaryHandler) {
                    const float32Array = new Float32Array(event.data);
                    const nodeCount = float32Array.length / VALUES_PER_NODE;
                    
                    // Split the array into positions and velocities
                    const positions = new Float32Array(nodeCount * 3);
                    const velocities = new Float32Array(nodeCount * 3);
                    
                    for (let i = 0; i < nodeCount; i++) {
                        // Copy position (x, y, z)
                        positions[i * 3] = float32Array[i * VALUES_PER_NODE];
                        positions[i * 3 + 1] = float32Array[i * VALUES_PER_NODE + 1];
                        positions[i * 3 + 2] = float32Array[i * VALUES_PER_NODE + 2];
                        
                        // Copy velocity (vx, vy, vz)
                        velocities[i * 3] = float32Array[i * VALUES_PER_NODE + 3];
                        velocities[i * 3 + 1] = float32Array[i * VALUES_PER_NODE + 4];
                        velocities[i * 3 + 2] = float32Array[i * VALUES_PER_NODE + 5];
                    }
                    
                    this.binaryHandler(positions, velocities);
                }
                return;
            }

            // Handle ping/pong messages
            const message = JSON.parse(event.data) as WebSocketMessage;
            if (message.type === MessageType.PONG) {
                this.lastPingTime = Date.now();
            }
        } catch (error) {
            logger.error('Error handling WebSocket message:', error);
        }
    }

    private handleDisconnect(): void {
        this.stopPing();
        
        if (this.reconnectAttempts < this.maxReconnectAttempts) {
            this.reconnectAttempts++;
            this.connectionState = ConnectionState.RECONNECTING;
            logger.info(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);
            
            if (this.reconnectTimer) {
                clearTimeout(this.reconnectTimer);
            }
            
            this.reconnectTimer = setTimeout(() => {
                this.connect();
            }, this.reconnectDelay);
        } else {
            logger.error('Max reconnection attempts reached');
            this.connectionState = ConnectionState.DISCONNECTED;
        }
    }

    private startPing(): void {
        this.lastPingTime = Date.now();
        
        if (this.pingTimer) {
            clearInterval(this.pingTimer);
        }
        
        this.pingTimer = setInterval(() => {
            if (this.ws?.readyState === WebSocket.OPEN) {
                const pingMessage = {
                    type: MessageType.PING,
                    timestamp: Date.now()
                };
                this.ws.send(JSON.stringify(pingMessage));
                
                const timeSinceLastPing = Date.now() - (this.lastPingTime || 0);
                if (timeSinceLastPing > this.heartbeatTimeout) {
                    logger.warn('Ping timeout, reconnecting...');
                    this.ws.close();
                }
            }
        }, this.heartbeatInterval);
    }

    private stopPing(): void {
        if (this.pingTimer) {
            clearInterval(this.pingTimer);
            this.pingTimer = null;
        }
        this.lastPingTime = null;
    }

    /**
     * Register handler for binary position/velocity updates
     */
    public onBinaryMessage(handler: BinaryMessageHandler): void {
        this.binaryHandler = handler;
    }

    /**
     * Send binary position update
     */
    public sendBinaryUpdate(position: [number, number, number], velocity: [number, number, number]): void {
        if (!this.settingsLoaded || this.ws?.readyState !== WebSocket.OPEN) {
            return;
        }

        const buffer = new ArrayBuffer(VALUES_PER_NODE * 4); // 6 floats * 4 bytes
        const view = new Float32Array(buffer);
        
        // Position [f32; 3]
        view[0] = position[0];
        view[1] = position[1];
        view[2] = position[2];
        
        // Velocity [f32; 3]
        view[3] = velocity[0];
        view[4] = velocity[1];
        view[5] = velocity[2];
        
        this.ws.send(buffer);
    }

    public getConnectionState(): ConnectionState {
        return this.connectionState;
    }

    public dispose(): void {
        this.stopPing();
        if (this.reconnectTimer) {
            clearTimeout(this.reconnectTimer);
            this.reconnectTimer = null;
        }
        if (this.ws) {
            this.ws.close();
            this.ws = null;
        }
        this.binaryHandler = null;
        this.connectionState = ConnectionState.DISCONNECTED;
        this.settingsLoaded = false;
    }
}

----
xr/xrSessionManager.ts
/**
 * XR session management and rendering
 */

import * as THREE from 'three';
import { XRControllerModelFactory } from 'three/examples/jsm/webxr/XRControllerModelFactory';
import { createLogger } from '../core/utils';
import { platformManager } from '../platform/platformManager';
import { SceneManager } from '../rendering/scene';
import { BACKGROUND_COLOR } from '../core/constants';
import { XRHandWithHaptics } from '../types/xr';

const _logger = createLogger('XRSessionManager');

// Type guards for WebXR features
function hasLightEstimate(frame: XRFrame): frame is XRFrame & { getLightEstimate(): XRLightEstimate | null } {
  return 'getLightEstimate' in frame;
}

function hasHitTest(session: XRSession): session is XRSession & { requestHitTestSource(options: XRHitTestOptionsInit): Promise<XRHitTestSource> } {
  return 'requestHitTestSource' in session;
}

export class XRSessionManager {
  private static instance: XRSessionManager;
  private sceneManager: SceneManager;
  private session: XRSession | null = null;
  private referenceSpace: XRReferenceSpace | null = null;
  private isPresenting: boolean = false;

  // XR specific objects
  private cameraRig: THREE.Group;
  private arGroup: THREE.Group; // New group for AR elements
  private controllers: THREE.Group[];
  private controllerGrips: THREE.Group[];
  private controllerModelFactory: XRControllerModelFactory;

  // AR specific objects
  private gridHelper: THREE.GridHelper;
  private groundPlane: THREE.Mesh;
  private hitTestMarker: THREE.Mesh;
  private arLight: THREE.DirectionalLight;
  private hitTestSource: XRHitTestSource | null = null;
  private hitTestSourceRequested = false;

  // Event handlers
  private xrSessionStartCallback: (() => void) | null = null;
  private xrSessionEndCallback: (() => void) | null = null;
  private xrAnimationFrameCallback: ((frame: XRFrame) => void) | null = null;
  private controllerAddedCallback: ((controller: THREE.Group) => void) | null = null;
  private controllerRemovedCallback: ((controller: THREE.Group) => void) | null = null;
  private handAddedCallback: ((hand: XRHandWithHaptics) => void) | null = null;
  private handRemovedCallback: ((hand: XRHandWithHaptics) => void) | null = null;

  private constructor(sceneManager: SceneManager) {
    this.sceneManager = sceneManager;
    
    // Initialize XR objects
    this.cameraRig = new THREE.Group();
    this.arGroup = new THREE.Group(); // Initialize AR group
    this.controllers = [new THREE.Group(), new THREE.Group()];
    this.controllerGrips = [new THREE.Group(), new THREE.Group()];
    this.controllerModelFactory = new XRControllerModelFactory();

    // Initialize AR objects
    this.gridHelper = this.createGridHelper();
    this.groundPlane = this.createGroundPlane();
    this.hitTestMarker = this.createHitTestMarker();
    this.arLight = this.createARLight();

    this.setupXRObjects();
  }

  static getInstance(sceneManager: SceneManager): XRSessionManager {
    if (!XRSessionManager.instance) {
      XRSessionManager.instance = new XRSessionManager(sceneManager);
    }
    return XRSessionManager.instance;
  }

  private createGridHelper(): THREE.GridHelper {
    const grid = new THREE.GridHelper(10, 10, 0x808080, 0x808080);
    grid.material.transparent = true;
    grid.material.opacity = 0.5;
    grid.position.y = -0.01; // Slightly below ground to avoid z-fighting
    grid.visible = false; // Start hidden until AR session begins
    grid.layers.set(1); // Set to AR layer
    return grid;
  }

  private createGroundPlane(): THREE.Mesh {
    const geometry = new THREE.PlaneGeometry(10, 10);
    const material = new THREE.MeshPhongMaterial({
      color: 0x999999,
      transparent: true,
      opacity: 0.3,
      side: THREE.DoubleSide
    });
    const plane = new THREE.Mesh(geometry, material);
    plane.rotateX(-Math.PI / 2);
    plane.position.y = -0.02; // Below grid
    plane.visible = false; // Start hidden until AR session begins
    plane.layers.set(1); // Set to AR layer
    return plane;
  }

  private createHitTestMarker(): THREE.Mesh {
    const geometry = new THREE.RingGeometry(0.15, 0.2, 32);
    const material = new THREE.MeshBasicMaterial({
      color: 0xffffff,
      transparent: true,
      opacity: 0.8,
      side: THREE.DoubleSide
    });
    const marker = new THREE.Mesh(geometry, material);
    marker.rotateX(-Math.PI / 2);
    marker.visible = false;
    marker.layers.set(1); // Set to AR layer
    return marker;
  }

  private createARLight(): THREE.DirectionalLight {
    const light = new THREE.DirectionalLight(0xffffff, 1);
    light.position.set(1, 1, 1);
    light.layers.set(1); // Set to AR layer
    return light;
  }

  private setupXRObjects(): void {
    const scene = this.sceneManager.getScene();
    
    // Add camera rig to scene
    scene.add(this.cameraRig);

    // Add AR group to camera rig
    this.cameraRig.add(this.arGroup);

    // Add AR objects to AR group
    this.arGroup.add(this.gridHelper);
    this.arGroup.add(this.groundPlane);
    this.arGroup.add(this.hitTestMarker);
    this.arGroup.add(this.arLight);

    // Setup controllers
    this.controllers.forEach((_controller, index) => {
      this.setupController(index);
    });

    // Setup controller grips
    this.controllerGrips.forEach(grip => {
      this.setupControllerGrip(grip);
    });
  }

  private setupController(index: number): void {
    const controller = this.controllers[index];
    const controllerGrip = this.controllerGrips[index];

    controller.addEventListener('connected', (event: any) => {
      const controllerModel = this.buildController(event.data);
      controller.add(controllerModel);
      this.notifyControllerAdded(controller);
    });

    controller.addEventListener('disconnected', () => {
      controller.remove(...controller.children);
      this.notifyControllerRemoved(controller);
    });

    this.cameraRig.add(controller);
    this.cameraRig.add(controllerGrip);
  }

  private setupControllerGrip(grip: THREE.Group): void {
    const controllerModel = this.controllerModelFactory.createControllerModel(grip);
    grip.add(controllerModel);
  }

  private buildController(_inputSource: XRInputSource): THREE.Group {
    const controller = new THREE.Group();
    const geometry = new THREE.SphereGeometry(0.1, 16, 16);
    const material = new THREE.MeshBasicMaterial({ color: 0xffffff });
    const sphere = new THREE.Mesh(geometry, material);
    controller.add(sphere);
    return controller;
  }

  /**
   * Initialize XR session
   */
  async initXRSession(): Promise<void> {
    if (this.isPresenting) {
      _logger.warn('XR session already active');
      return;
    }

    if (!platformManager.getCapabilities().xrSupported || !navigator.xr) {
      throw new Error('XR not supported on this platform');
    }

    try {
      const session = await navigator.xr.requestSession('immersive-ar', {
        requiredFeatures: ['local-floor', 'hit-test'],
        optionalFeatures: ['hand-tracking', 'layers', 'light-estimation']
      });

      if (!session) {
        throw new Error('Failed to create XR session');
      }

      this.session = session;

      // Setup XR rendering
      const renderer = this.sceneManager.getRenderer();
      await renderer.xr.setSession(this.session);
      
      // Configure renderer for AR
      renderer.xr.enabled = true;
      
      // Clear background for AR passthrough
      const scene = this.sceneManager.getScene();
      scene.background = null;
      
      // Get reference space
      this.referenceSpace = await this.session.requestReferenceSpace('local-floor');
      
      // Setup session event handlers
      this.session.addEventListener('end', this.onXRSessionEnd);

      // Enable AR layer for camera
      const camera = this.sceneManager.getCamera();
      camera.layers.enable(1);

      // Reset camera rig position
      this.cameraRig.position.set(0, 0, 0);
      this.cameraRig.quaternion.identity();

      // Show AR visualization elements after a short delay to ensure proper placement
      setTimeout(() => {
        this.gridHelper.visible = true;
        this.groundPlane.visible = true;
        this.arLight.visible = true;
      }, 1000);
      
      this.isPresenting = true;
      _logger.log('XR session initialized');

      // Notify session start
      if (this.xrSessionStartCallback) {
        this.xrSessionStartCallback();
      }
    } catch (error) {
      _logger.error('Failed to initialize XR session:', error);
      throw error;
    }
  }

  /**
   * End XR session
   */
  async endXRSession(): Promise<void> {
    if (this.session) {
      await this.session.end();
    }
  }

  private onXRSessionEnd = (): void => {
    if (this.hitTestSource) {
      this.hitTestSource.cancel();
      this.hitTestSource = null;
    }
    
    this.session = null;
    this.referenceSpace = null;
    this.hitTestSourceRequested = false;
    this.isPresenting = false;

    // Hide AR visualization elements
    this.gridHelper.visible = false;
    this.groundPlane.visible = false;
    this.hitTestMarker.visible = false;
    this.arLight.visible = false;

    // Reset camera rig
    this.cameraRig.position.set(0, 0, 0);
    this.cameraRig.quaternion.identity();

    // Reset scene background
    const scene = this.sceneManager.getScene();
    scene.background = new THREE.Color(BACKGROUND_COLOR);

    // Disable AR layer for camera
    const camera = this.sceneManager.getCamera();
    camera.layers.disable(1);

    // Reset renderer settings
    const renderer = this.sceneManager.getRenderer();
    renderer.xr.enabled = false;

    _logger.log('XR session ended');

    // Notify session end
    if (this.xrSessionEndCallback) {
      this.xrSessionEndCallback();
    }
  }

  /**
   * XR animation frame
   */
  onXRFrame(frame: XRFrame): void {
    if (!this.session || !this.referenceSpace) return;

    // Get pose
    const pose = frame.getViewerPose(this.referenceSpace);
    if (!pose) return;

    // Let Three.js handle camera updates through WebXRManager
    // Handle hit testing
    this.handleHitTest(frame);

    // Update controller poses
    this.controllers.forEach((controller) => {
      const inputSource = controller.userData.inputSource as XRInputSource;
      if (inputSource) {
        const targetRayPose = frame.getPose(inputSource.targetRaySpace, this.referenceSpace!);
        if (targetRayPose) {
          controller.matrix.fromArray(targetRayPose.transform.matrix);
          controller.matrix.decompose(controller.position, controller.quaternion, controller.scale);
        }
      }
    });

    // Update lighting if available
    if (hasLightEstimate(frame)) {
      const lightEstimate = frame.getLightEstimate();
      if (lightEstimate) {
        this.updateARLighting(lightEstimate);
      }
    }

    // Call animation frame callback
    if (this.xrAnimationFrameCallback) {
      this.xrAnimationFrameCallback(frame);
    }
  }

  private async handleHitTest(frame: XRFrame): Promise<void> {
    if (!this.hitTestSourceRequested && this.session && hasHitTest(this.session)) {
      try {
        const viewerSpace = await this.session.requestReferenceSpace('viewer');
        if (!viewerSpace) {
          throw new Error('Failed to get viewer reference space');
        }

        const hitTestSource = await this.session.requestHitTestSource({
          space: viewerSpace
        });

        if (hitTestSource) {
          this.hitTestSource = hitTestSource;
          this.hitTestSourceRequested = true;
        }
      } catch (error) {
        _logger.error('Failed to initialize hit test source:', error);
        this.hitTestSourceRequested = true; // Prevent further attempts
      }
    }

    if (this.hitTestSource && this.referenceSpace) {
      const hitTestResults = frame.getHitTestResults(this.hitTestSource);
      if (hitTestResults.length > 0) {
        const hit = hitTestResults[0];
        const pose = hit.getPose(this.referenceSpace);
        if (pose) {
          this.hitTestMarker.visible = true;
          this.hitTestMarker.position.set(
            pose.transform.position.x,
            pose.transform.position.y,
            pose.transform.position.z
          );

          // Update grid and ground plane position to match hit test
          this.gridHelper.position.y = pose.transform.position.y;
          this.groundPlane.position.y = pose.transform.position.y - 0.01;
        }
      } else {
        this.hitTestMarker.visible = false;
      }
    }
  }

  private updateARLighting(lightEstimate: XRLightEstimate): void {
    const intensity = lightEstimate.primaryLightIntensity?.value || 1;
    const direction = lightEstimate.primaryLightDirection;
    
    if (direction) {
      this.arLight.position.set(direction.x, direction.y, direction.z);
    }
    this.arLight.intensity = intensity;
  }

  /**
   * Set session event callbacks
   */
  setSessionCallbacks(
    onStart: () => void,
    onEnd: () => void,
    onFrame: (frame: XRFrame) => void
  ): void {
    this.xrSessionStartCallback = onStart;
    this.xrSessionEndCallback = onEnd;
    this.xrAnimationFrameCallback = onFrame;
  }

  public onControllerAdded(callback: (controller: THREE.Group) => void): void {
    this.controllerAddedCallback = callback;
  }

  public onControllerRemoved(callback: (controller: THREE.Group) => void): void {
    this.controllerRemovedCallback = callback;
  }

  private notifyControllerAdded(controller: THREE.Group): void {
    this.controllerAddedCallback?.(controller);
  }

  private notifyControllerRemoved(controller: THREE.Group): void {
    this.controllerRemovedCallback?.(controller);
  }

  public onHandAdded(callback: (hand: XRHandWithHaptics) => void): void {
    this.handAddedCallback = callback;
  }

  public onHandRemoved(callback: (hand: XRHandWithHaptics) => void): void {
    this.handRemovedCallback = callback;
  }

  private notifyHandAdded(hand: XRHandWithHaptics): void {
    this.handAddedCallback?.(hand);
  }

  private notifyHandRemoved(hand: XRHandWithHaptics): void {
    this.handRemovedCallback?.(hand);
  }

  /**
   * Get XR objects
   */
  getCameraRig(): THREE.Group {
    return this.cameraRig;
  }

  getControllers(): THREE.Group[] {
    return this.controllers;
  }

  getControllerGrips(): THREE.Group[] {
    return this.controllerGrips;
  }

  /**
   * Check if currently in XR session
   */
  isXRPresenting(): boolean {
    return this.isPresenting;
  }

  /**
   * Get current XR session
   */
  getSession(): XRSession | null {
    return this.session;
  }

  /**
   * Get reference space
   */
  getReferenceSpace(): XRReferenceSpace | null {
    return this.referenceSpace;
  }

  /**
   * Clean up resources
   */
  dispose(): void {
    if (this.session) {
      this.session.end().catch(console.error);
    }

    this.controllers.forEach(controller => {
      controller.removeEventListener('connected', (event: any) => {
        const controllerModel = this.buildController(event.data);
        controller.add(controllerModel);
        this.notifyControllerAdded(controller);
      });

      controller.removeEventListener('disconnected', () => {
        controller.remove(...controller.children);
        this.notifyControllerRemoved(controller);
      });
    });

    this.controllerGrips.forEach(grip => {
      grip.remove(...grip.children);
    });

    this.hitTestSource?.cancel();
    this.hitTestSource = null;
    this.hitTestSourceRequested = false;

    this.session = null;
    this.referenceSpace = null;
    this.isPresenting = false;
  }
}

----
xr/xrInteraction.ts
import * as THREE from 'three';
import { NodeManager } from '../rendering/nodes';
import { XRSessionManager } from './xrSessionManager';
import { Settings, Platform, Node } from '../core/types';
import { SettingsManager } from '../state/settings';
import { XRHandWithHaptics } from '../types/xr';
import { platformManager } from '../platform/platformManager';
import { createLogger } from '../core/logger';
import { SettingsStore } from '../state/SettingsStore';
import { defaultSettings } from '../state/defaultSettings';

const logger = createLogger('XRInteraction');

interface HapticActuator {
    pulse: (intensity: number, duration: number) => Promise<boolean>;
}

interface WorldObject3D extends THREE.Object3D {
    getWorldPosition(target: THREE.Vector3): THREE.Vector3;
}

export class XRInteraction {
    private static instance: XRInteraction | null = null;
    private xrManager: XRSessionManager;
    private nodeManager: NodeManager;
    private controllers: THREE.Group[] = [];
    private lastInteractorPosition = new THREE.Vector3();
    private hands: XRHandWithHaptics[] = [];
    private settings: Settings;
    private settingsStore: SettingsStore;
    private selectedNodeId: string | null = null;
    private worldPosition = new THREE.Vector3();

    private constructor(xrManager: XRSessionManager, nodeManager: NodeManager, settingsManager: SettingsManager) {
        this.xrManager = xrManager;
        this.nodeManager = nodeManager;
        this.settingsStore = SettingsStore.getInstance();
        this.settings = defaultSettings;
        
        this.setupXRControllers();
        this.setupHandTracking();
        this.setupPlatformListeners();
    }

    private setupPlatformListeners(): void {
        platformManager.on('platformChange', (platform: Platform) => {
            logger.info(`Platform changed to ${platform}`);
            this.updateXRFeatures();
        });
    }

    private updateXRFeatures(): void {
        const platform = platformManager.getPlatform();
        const capabilities = platformManager.getCapabilities();

        // Update hand tracking based on platform capabilities
        if (capabilities.handTracking) {
            this.setupHandTracking();
        } else {
            this.disableHandTracking();
        }

        // Update haptics based on platform capabilities
        this.controllers.forEach(controller => {
            if (controller.userData) {
                controller.userData.platform = platform;
            }
        });

        this.hands.forEach(hand => {
            if (hand.userData) {
                hand.userData.platform = platform;
            }
        });
    }

    private disableHandTracking(): void {
        this.hands.forEach(hand => {
            if (hand.parent) {
                hand.parent.remove(hand);
            }
        });
        this.hands = [];
    }

    public static getInstance(xrManager: XRSessionManager, nodeManager: NodeManager, settingsManager: SettingsManager): XRInteraction {
        if (!XRInteraction.instance) {
            XRInteraction.instance = new XRInteraction(xrManager, nodeManager, settingsManager);
        }
        return XRInteraction.instance;
    }

    private setupXRControllers(): void {
        this.xrManager.onControllerAdded((controller: THREE.Group) => {
            controller.userData.platform = platformManager.getPlatform();
            this.controllers.push(controller);
            if (controller.userData.hapticActuator && this.settings.ar.enableHaptics) {
                this.triggerHapticFeedback(controller, 0.5, 50);
            }
        });

        this.xrManager.onControllerRemoved((controller: THREE.Group) => {
            const index = this.controllers.indexOf(controller);
            if (index !== -1) {
                this.controllers.splice(index, 1);
            }
        });
    }

    private setupHandTracking(): void {
        if (!platformManager.getCapabilities().handTracking) {
            logger.info('Hand tracking not supported on this platform');
            return;
        }

        this.xrManager.onHandAdded((hand: XRHandWithHaptics) => {
            hand.userData.platform = platformManager.getPlatform();
            this.hands.push(hand);
        });

        this.xrManager.onHandRemoved((hand: XRHandWithHaptics) => {
            const index = this.hands.indexOf(hand);
            if (index !== -1) {
                this.hands.splice(index, 1);
            }
        });
    }

    private async triggerHapticFeedback(controller: THREE.Group, intensity: number, duration: number): Promise<void> {
        if (!this.settings.ar.enableHaptics) return;

        const hapticActuator = controller.userData.hapticActuator as HapticActuator;
        if (hapticActuator) {
            try {
                await hapticActuator.pulse(
                    intensity * this.settings.ar.hapticIntensity,
                    duration
                );
            } catch (error) {
                logger.warn('Failed to trigger haptic feedback:', error);
            }
        }
    }

    public update(): void {
        if (!this.settings.ar.enableHandTracking && !this.controllers.length) {
            return;
        }

        // Update hand interactions
        this.hands.forEach(hand => {
            if (hand.pinchStrength > this.settings.ar.pinchThreshold) {
                this.handlePinchGesture(hand);
            }
        });

        // Update controller interactions
        this.controllers.forEach(controller => {
            if (controller.userData.isSelecting) {
                this.handleControllerInteraction(controller);
            }
        });
    }

    private handlePinchGesture(hand: XRHandWithHaptics): void {
        const indexTip = hand.hand.joints['index-finger-tip'];
        if (!indexTip) return;

        (indexTip as WorldObject3D).getWorldPosition(this.worldPosition);

        if (this.lastInteractorPosition.distanceTo(this.worldPosition) > this.settings.ar.dragThreshold) {
            // Find closest node if none selected
            if (!this.selectedNodeId) {
                this.selectedNodeId = this.findClosestNode(this.worldPosition);
            }

            // Update selected node position
            if (this.selectedNodeId) {
                this.nodeManager.updateNodePosition(this.selectedNodeId, this.worldPosition);
                this.lastInteractorPosition.copy(this.worldPosition);

                // Trigger haptic feedback if available
                if (hand.userData.hapticActuator && this.settings.ar.enableHaptics) {
                    this.triggerHapticFeedback(hand, 0.3, 30);
                }
            }
        }
    }

    private handleControllerInteraction(controller: THREE.Group): void {
        (controller as WorldObject3D).getWorldPosition(this.worldPosition);

        if (this.lastInteractorPosition.distanceTo(this.worldPosition) > this.settings.ar.dragThreshold) {
            // Find closest node if none selected
            if (!this.selectedNodeId) {
                this.selectedNodeId = this.findClosestNode(this.worldPosition);
            }

            // Update selected node position
            if (this.selectedNodeId) {
                this.nodeManager.updateNodePosition(this.selectedNodeId, this.worldPosition);
                this.lastInteractorPosition.copy(this.worldPosition);

                // Trigger haptic feedback
                if (controller.userData.hapticActuator && this.settings.ar.enableHaptics) {
                    this.triggerHapticFeedback(controller, 0.3, 30);
                }
            }
        }
    }

    private findClosestNode(position: THREE.Vector3): string | null {
        const nodes = this.nodeManager.getCurrentNodes() as Array<Node>;
        let closestNode: Node | null = null;
        let closestDistance = Infinity;

        for (const node of nodes as Array<Node>) {
            if (!node || !node.data || !node.data.position) continue;
            
            const nodePos = new THREE.Vector3(
                node.data.position.x,
                node.data.position.y,
                node.data.position.z
            );
            const distance = position.distanceTo(nodePos);
            if (distance < closestDistance && distance < (this.settings.ar.interactionRadius || 0.5)) {
                closestDistance = distance;
                closestNode = node;
            }
        }

        return closestNode?.id || null;
    }

    public dispose(): void {
        this.controllers = [];
        this.hands = [];
        this.lastInteractorPosition.set(0, 0, 0);
        this.selectedNodeId = null;
        XRInteraction.instance = null;
    }
}

----
state/defaultSettings.ts
import type { Settings } from '../types/settings';

export const defaultSettings: Settings = {
    animations: {
        enableMotionBlur: false,
        enableNodeAnimations: true,
        motionBlurStrength: 0.5,
        selectionWaveEnabled: false,
        pulseEnabled: false,
        rippleEnabled: false,
        edgeAnimationEnabled: false,
        flowParticlesEnabled: false
    },
    ar: {
        dragThreshold: 0.02,
        enableHandTracking: true,
        enableHaptics: true,
        enableLightEstimation: true,
        enablePassthroughPortal: false,
        enablePlaneDetection: true,
        enableSceneUnderstanding: true,
        gestureSsmoothing: 0.5,
        handMeshColor: '#ffffff',
        handMeshEnabled: true,
        handMeshOpacity: 0.5,
        handPointSize: 5,
        handRayColor: '#00ff00',
        handRayEnabled: true,
        handRayWidth: 2,
        hapticIntensity: 0.5,
        interactionRadius: 0.5,
        passthroughBrightness: 1,
        passthroughContrast: 1,
        passthroughOpacity: 1,
        pinchThreshold: 0.7,
        planeColor: '#808080',
        planeOpacity: 0.5,
        portalEdgeColor: '#ffffff',
        portalEdgeWidth: 2,
        portalSize: 2,
        roomScale: true,
        rotationThreshold: 0.1,
        showPlaneOverlay: true,
        snapToFloor: true
    },
    audio: {
        enableAmbientSounds: false,
        enableInteractionSounds: true,
        enableSpatialAudio: true
    },
    bloom: {
        edgeBloomStrength: 0.5,
        enabled: true,
        environmentBloomStrength: 0.5,
        nodeBloomStrength: 0.5,
        radius: 1,
        strength: 0.5
    },
    clientDebug: {
        enableDataDebug: false,
        enableWebsocketDebug: false,
        enabled: false,
        logBinaryHeaders: false,
        logFullJson: false
    },
    default: {
        apiClientTimeout: 30000,
        enableMetrics: true,
        enableRequestLogging: true,
        logFormat: 'json',
        logLevel: 'info',
        maxConcurrentRequests: 100,
        maxPayloadSize: 10485760,
        maxRetries: 3,
        metricsPort: 9090,
        retryDelay: 1000
    },
    edges: {
        arrowSize: 3,
        baseWidth: 2,
        color: '#ffffff',
        enableArrows: true,
        opacity: 0.8,
        widthRange: [1, 5]
    },
    labels: {
        desktopFontSize: 48,
        enableLabels: true,
        textColor: '#FFFFFF',
        textOutlineColor: '#000000',
        textOutlineWidth: 0.1,
        textResolution: 512,
        textPadding: 16,
        billboardMode: 'camera' as const
    },
    network: {
        bindAddress: '127.0.0.1',
        domain: 'localhost',
        enableHttp2: true,
        enableRateLimiting: true,
        enableTls: false,
        maxRequestSize: 10485760,
        minTlsVersion: 'TLS1.2',
        port: 3000,
        rateLimitRequests: 100,
        rateLimitWindow: 60,
        tunnelId: ''
    },
    nodes: {
        baseColor: '#00ff00',
        baseSize: 1,
        sizeRange: [0.5, 2.0],
        enableMetadataShape: true,
        colorRangeAge: ['#ff0000', '#00ff00'],
        colorRangeLinks: ['#0000ff', '#ff00ff'],
        metalness: 0.5,
        roughness: 0.2,
        opacity: 0.8
    },
    physics: {
        attractionStrength: 0.1,
        boundsSize: 100,
        collisionRadius: 1,
        damping: 0.5,
        enableBounds: true,
        enabled: true,
        iterations: 1,
        maxVelocity: 10,
        repulsionStrength: 0.1,
        springStrength: 0.1
    },
    rendering: {
        ambientLightIntensity: 0.5,
        backgroundColor: '#000000',
        directionalLightIntensity: 0.8,
        enableAmbientOcclusion: true,
        enableAntialiasing: true,
        enableShadows: true,
        environmentIntensity: 1
    },
    security: {
        allowedOrigins: ['http://localhost:3000'],
        auditLogPath: './audit.log',
        cookieHttponly: true,
        cookieSamesite: 'Lax',
        cookieSecure: false,
        csrfTokenTimeout: 3600,
        enableAuditLogging: true,
        enableRequestValidation: true,
        sessionTimeout: 86400
    },
    serverDebug: {
        enabled: false,
        enableDataDebug: false,
        enableWebsocketWebsocketDebug: false,
        logBinaryHeaders: false,
        logFullJson: false
    },
    hologram: {
        xrQuality: 'medium' as const,
        desktopQuality: 'high' as const,
        ringCount: 3,
        ringColor: '#00FFFF',
        ringOpacity: 0.5,
        ringSizes: [1.0, 1.5, 2.0],
        ringRotationSpeed: 0.1,
        enableBuckminster: true,
        buckminsterScale: 1.0,
        buckminsterOpacity: 0.3,
        enableGeodesic: true,
        geodesicScale: 1.2,
        geodesicOpacity: 0.4,
        enableTriangleSphere: true,
        triangleSphereScale: 1.1,
        triangleSphereOpacity: 0.35,
        globalRotationSpeed: 0.05
    },
    websocket: {
        url: 'ws://localhost:3000/ws',
        heartbeatInterval: 15000,
        heartbeatTimeout: 60000,
        reconnectAttempts: 3,
        reconnectDelay: 5000,
        binaryChunkSize: 65536,
        compressionEnabled: true,
        compressionThreshold: 1024,
        maxConnections: 1000,
        maxMessageSize: 100485760,
        updateRate: 30
    }
};

----
state/SettingsStore.ts
import { Settings } from '../core/types';
import { createLogger } from '../core/logger';
import { buildApiUrl } from '../core/api';
import { defaultSettings } from './defaultSettings';

const logger = createLogger('SettingsStore');

export type SettingPath = string;
export type SettingValue = any;
export type SettingsChangeCallback = (path: SettingPath, value: SettingValue) => void;

interface SettingsStoreOptions {
    autoSave?: boolean;
    syncInterval?: number;
}

export class SettingsStore {
    private static instance: SettingsStore;
    private settings: Settings;
    private subscribers: Map<SettingPath, Set<SettingsChangeCallback>>;
    private pendingChanges: Set<SettingPath>;
    private syncTimer: NodeJS.Timeout | null;
    private initialized: boolean;
    private options: Required<SettingsStoreOptions>;

    private constructor(options: SettingsStoreOptions = {}) {
        this.settings = { ...defaultSettings };
        this.subscribers = new Map();
        this.pendingChanges = new Set();
        this.syncTimer = null;
        this.initialized = false;
        this.options = {
            autoSave: options.autoSave ?? true,
            syncInterval: options.syncInterval ?? 5000
        };
    }

    static getInstance(options?: SettingsStoreOptions): SettingsStore {
        if (!SettingsStore.instance) {
            SettingsStore.instance = new SettingsStore(options);
        }
        return SettingsStore.instance;
    }

    async initialize(): Promise<void> {
        if (this.initialized) {
            return;
        }

        try {
            await this.loadAllSettings();
            if (this.options.autoSave) {
                this.startSync();
            }
            this.initialized = true;
        } catch (error) {
            logger.error('Failed to initialize settings store:', error);
            throw error;
        }
    }

    private async loadAllSettings(): Promise<void> {
        const categories = Object.keys(this.settings) as Array<keyof Settings>;
        const maxRetries = 3;
        const retryDelay = 1000;

        for (const category of categories) {
            let retries = 0;
            while (retries < maxRetries) {
                try {
                    const response = await fetch(buildApiUrl(`visualization/settings/${category}`));
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    
                    const data = await response.json();
                    if (data.success && data.settings) {
                        this.updateCategorySettings(category, data.settings);
                    }
                    break;
                } catch (error) {
                    retries++;
                    if (retries === maxRetries) {
                        logger.error(`Failed to load settings for ${category}:`, error);
                        throw error;
                    }
                    await new Promise(resolve => setTimeout(resolve, retryDelay));
                }
            }
        }
    }

    private updateCategorySettings<T extends keyof Settings>(
        category: T,
        newSettings: Partial<Settings[T]>
    ): void {
        const currentSettings = { ...this.settings[category] };
        let hasChanges = false;

        Object.entries(newSettings).forEach(([key, value]) => {
            const settingKey = key as keyof Settings[T];
            if (value !== undefined && value !== currentSettings[settingKey]) {
                (currentSettings as any)[settingKey] = value;
                hasChanges = true;
                this.notifySubscribers(`${category}.${key}`, value);
            }
        });

        if (hasChanges) {
            this.settings[category] = currentSettings;
        }
    }

    private startSync(): void {
        if (this.syncTimer) {
            return;
        }

        this.syncTimer = setInterval(() => {
            this.syncPendingChanges();
        }, this.options.syncInterval);
    }

    private async syncPendingChanges(): Promise<void> {
        if (this.pendingChanges.size === 0) {
            return;
        }

        const changes = Array.from(this.pendingChanges);
        this.pendingChanges.clear();

        try {
            const updatePromises = changes.map(async path => {
                const [category, key] = path.split('.');
                const value = this.get(path);

                const response = await fetch(
                    buildApiUrl(`visualization/settings/${category}/${key}`),
                    {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ value })
                    }
                );

                if (!response.ok) {
                    throw new Error(`Failed to sync setting ${path}`);
                }
            });

            await Promise.all(updatePromises);
        } catch (error) {
            logger.error('Error syncing settings:', error);
            // Re-add failed changes to pending changes
            changes.forEach(path => this.pendingChanges.add(path));
        }
    }

    subscribe(path: SettingPath, callback: SettingsChangeCallback): () => void {
        if (!this.subscribers.has(path)) {
            this.subscribers.set(path, new Set());
        }
        this.subscribers.get(path)!.add(callback);
        return () => this.unsubscribe(path, callback);
    }

    unsubscribe(path: SettingPath, callback: SettingsChangeCallback): void {
        const callbacks = this.subscribers.get(path);
        if (callbacks) {
            callbacks.delete(callback);
            if (callbacks.size === 0) {
                this.subscribers.delete(path);
            }
        }
    }

    private notifySubscribers(path: SettingPath, value: SettingValue): void {
        const callbacks = this.subscribers.get(path);
        if (callbacks) {
            callbacks.forEach(callback => {
                try {
                    callback(path, value);
                } catch (error) {
                    logger.error(`Error in settings subscriber for ${path}:`, error);
                }
            });
        }
    }

    get<T extends keyof Settings, K extends keyof Settings[T]>(
        path: `${T}.${string & K}`
    ): Settings[T][K] {
        const [category, key] = path.split('.') as [T, K];
        return this.settings[category][key];
    }

    set<T extends keyof Settings, K extends keyof Settings[T]>(
        path: `${T}.${string & K}`,
        value: Settings[T][K]
    ): void {
        const [category, key] = path.split('.') as [T, K];
        if (this.settings[category][key] !== value) {
            this.settings[category][key] = value;
            this.pendingChanges.add(path);
            this.notifySubscribers(path, value);
        }
    }

    getCategory<T extends keyof Settings>(category: T): Settings[T] {
        return { ...this.settings[category] };
    }

    dispose(): void {
        if (this.syncTimer) {
            clearInterval(this.syncTimer);
            this.syncTimer = null;
        }
        this.subscribers.clear();
        this.pendingChanges.clear();
        this.initialized = false;
    }
}

----
state/graphData.ts
/**
 * Graph data management with simplified binary updates
 */

import { GraphData, Node, Edge } from '../core/types';
import { createLogger } from '../core/utils';
import { buildApiUrl } from '../core/api';

const logger = createLogger('GraphDataManager');

// Constants
const THROTTLE_INTERVAL = 16;  // ~60fps
const BINARY_VERSION = 1.0;
const NODE_POSITION_SIZE = 24;  // 6 floats * 4 bytes
const BINARY_HEADER_SIZE = 4;   // 1 float * 4 bytes

export class GraphDataManager {
  private static instance: GraphDataManager;
  private nodes: Map<string, Node>;
  private edges: Map<string, Edge>;
  private metadata: Record<string, any>;
  private updateListeners: Set<(data: GraphData) => void>;
  private positionUpdateListeners: Set<(positions: Float32Array) => void>;
  private lastUpdateTime: number;
  private binaryUpdatesEnabled: boolean = false;
  private loadingNodes: boolean = false;
  private currentPage: number = 0;
  private hasMorePages: boolean = true;
  private pageSize: number = 100;

  private constructor() {
    this.nodes = new Map();
    this.edges = new Map();
    this.metadata = {};
    this.updateListeners = new Set();
    this.positionUpdateListeners = new Set();
    this.lastUpdateTime = performance.now();
  }

  static getInstance(): GraphDataManager {
    if (!GraphDataManager.instance) {
      GraphDataManager.instance = new GraphDataManager();
    }
    return GraphDataManager.instance;
  }

  async loadInitialGraphData(): Promise<void> {
    try {
      // Reset state
      this.nodes.clear();
      this.edges.clear();
      this.currentPage = 0;
      this.hasMorePages = true;
      this.loadingNodes = false;

      // First, update the graph data from the backend
      try {
        const updateResponse = await fetch(buildApiUrl('graph/update'), {
          method: 'POST',
        });

        if (!updateResponse.ok) {
          logger.warn(`Graph update returned ${updateResponse.status}, continuing with initial load`);
        } else {
          const updateResult = await updateResponse.json();
          logger.log('Graph update result:', updateResult);
        }
      } catch (updateError) {
        logger.warn('Graph update failed, continuing with initial load:', updateError);
      }

      // Then load the first page
      await this.loadNextPage();
      
      // Notify listeners of initial data
      this.notifyUpdateListeners();

      logger.log('Initial graph data loaded:', {
        nodes: this.nodes.size,
        edges: this.edges.size
      });
    } catch (error) {
      logger.error('Failed to load initial graph data:', error);
      // Don't throw here, allow app to continue with empty graph
      this.notifyUpdateListeners();
    }
  }

  private async loadNextPage(): Promise<void> {
    if (this.loadingNodes || !this.hasMorePages) return;

    try {
      this.loadingNodes = true;
      const response = await fetch(buildApiUrl(`graph/data/paginated?page=${this.currentPage}&pageSize=${this.pageSize}`));
      
      if (!response.ok) {
        throw new Error(`Failed to fetch graph data: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      logger.debug('Received graph data:', {
        nodesCount: data.nodes?.length || 0,
        edgesCount: data.edges?.length || 0,
        totalPages: data.totalPages,
        currentPage: data.currentPage,
        metadata: data.metadata
      });
      
      if (!data.nodes || !Array.isArray(data.nodes)) {
        throw new Error('Invalid graph data: nodes array is missing or invalid');
      }
      
      // Update graph with new nodes and edges
      data.nodes.forEach((node: Node) => this.nodes.set(node.id, node));
      if (data.edges && Array.isArray(data.edges)) {
        data.edges.forEach((edge: Edge) => {
          const edgeId = this.createEdgeId(edge.source, edge.target);
          this.edges.set(edgeId, edge);
        });
      }

      // Update pagination state
      this.currentPage = data.currentPage;
      this.hasMorePages = data.currentPage < data.totalPages;

      // Notify listeners of updated data
      this.notifyUpdateListeners();

      logger.log(`Loaded page ${this.currentPage} of graph data: ${this.nodes.size} nodes, ${this.edges.size} edges`);
    } catch (error) {
      logger.error('Failed to load graph data:', error);
      this.hasMorePages = false;  // Stop trying to load more pages on error
    } finally {
      this.loadingNodes = false;
    }
  }

  /**
   * Initialize or update the graph data
   */
  updateGraphData(data: any): void {
    // Update nodes
    if (data.nodes && Array.isArray(data.nodes)) {
      data.nodes.forEach((node: Node) => {
        // Preserve existing position if available, otherwise use server position or generate random
        const existingNode = this.nodes.get(node.id);
        if (!existingNode) {
          // If server didn't provide position, generate random position
          if (!node.data?.position) {
            node.data = node.data || {};
            node.data.position = {
              x: (Math.random() - 0.5) * 100,  // Increased spread
              y: (Math.random() - 0.5) * 100,
              z: (Math.random() - 0.5) * 100
            };
          }
          // Initialize velocity if not present
          if (!node.data.velocity) {
            node.data.velocity = { x: 0, y: 0, z: 0 };
          }
        }
        this.nodes.set(node.id, node);
      });
    }

    // Update edges
    if (data.edges && Array.isArray(data.edges)) {
      data.edges.forEach((edge: Edge) => {
        const edgeId = this.createEdgeId(edge.source, edge.target);
        this.edges.set(edgeId, edge);
      });
    }

    // Update metadata
    if (data.metadata) {
      this.metadata = { ...this.metadata, ...data.metadata };
    }

    // Enable binary updates if we have nodes and it's not already enabled
    if (this.nodes.size > 0 && !this.binaryUpdatesEnabled) {
      this.setupBinaryUpdates();
    }

    // Notify listeners of updates
    this.notifyUpdateListeners();
  }

  /**
   * Setup binary position updates
   */
  private setupBinaryUpdates(): void {
    this.binaryUpdatesEnabled = true;
    // Initialize positions for existing nodes if needed
    this.nodes.forEach(node => {
      if (!node.data?.position) {
        node.data = node.data || {};
        node.data.position = {
          x: (Math.random() - 0.5) * 100,
          y: (Math.random() - 0.5) * 100,
          z: (Math.random() - 0.5) * 100
        };
      }
      if (!node.data.velocity) {
        node.data.velocity = { x: 0, y: 0, z: 0 };
      }
    });
    logger.log('Binary updates enabled');
  }

  public async loadMoreIfNeeded(): Promise<void> {
    if (this.hasMorePages && !this.loadingNodes) {
      await this.loadNextPage();
    }
  }

  /**
   * Handle binary position updates with throttling
   */
  updatePositions(buffer: ArrayBuffer): void {
    const now = performance.now();
    const timeSinceLastUpdate = now - this.lastUpdateTime;

    if (timeSinceLastUpdate < THROTTLE_INTERVAL) {
      return;  // Skip update if too soon
    }

    try {
      const floatArray = new Float32Array(buffer);
      
      // Check binary version
      const version = floatArray[0];
      if (version !== BINARY_VERSION) {
        logger.warn(`Received binary data version ${version}, expected ${BINARY_VERSION}`);
      }

      // Verify data size
      const expectedSize = BINARY_HEADER_SIZE + Math.floor((buffer.byteLength - BINARY_HEADER_SIZE) / NODE_POSITION_SIZE) * NODE_POSITION_SIZE;
      if (buffer.byteLength !== expectedSize) {
        logger.error(`Invalid binary data length: ${buffer.byteLength} bytes (expected ${expectedSize})`);
        return;
      }

      this.notifyPositionUpdateListeners(floatArray);
      this.lastUpdateTime = now;
    } catch (error) {
      logger.error('Error processing binary position update:', error);
    }
  }

  /**
   * Get the current graph data
   */
  getGraphData(): GraphData {
    return {
      nodes: Array.from(this.nodes.values()),
      edges: Array.from(this.edges.values()),
      metadata: this.metadata
    };
  }

  /**
   * Get a specific node by ID
   */
  getNode(id: string): Node | undefined {
    return this.nodes.get(id);
  }

  /**
   * Subscribe to graph data updates
   */
  subscribe(listener: (data: GraphData) => void): () => void {
    this.updateListeners.add(listener);
    return () => {
      this.updateListeners.delete(listener);
    };
  }

  /**
   * Subscribe to position updates only
   */
  subscribeToPositionUpdates(
    listener: (positions: Float32Array) => void
  ): () => void {
    this.positionUpdateListeners.add(listener);
    return () => {
      this.positionUpdateListeners.delete(listener);
    };
  }

  /**
   * Clear all graph data
   */
  clear(): void {
    this.nodes.clear();
    this.edges.clear();
    this.metadata = {};
    this.notifyUpdateListeners();
  }

  private createEdgeId(source: string, target: string): string {
    return [source, target].sort().join('_');
  }

  private notifyUpdateListeners(): void {
    const data = this.getGraphData();
    this.updateListeners.forEach(listener => {
      try {
        listener(data);
      } catch (error) {
        logger.error('Error in graph update listener:', error);
      }
    });
  }

  private notifyPositionUpdateListeners(positions: Float32Array): void {
    this.positionUpdateListeners.forEach(listener => {
      try {
        listener(positions);
      } catch (error) {
        logger.error('Error in position update listener:', error);
      }
    });
  }

  public setBinaryUpdatesEnabled(enabled: boolean): void {
    this.binaryUpdatesEnabled = enabled;
    logger.info(`Binary updates ${enabled ? 'enabled' : 'disabled'}`);
    
    // Notify listeners of state change
    this.updateListeners.forEach(listener => {
      listener({
        nodes: Array.from(this.nodes.values()),
        edges: Array.from(this.edges.values()),
        metadata: { ...this.metadata, binaryUpdatesEnabled: enabled }
      });
    });
  }
}

// Export a singleton instance
export const graphDataManager = GraphDataManager.getInstance();

// Declare WebSocket on window for TypeScript
declare global {
  interface Window {
    ws: WebSocket;
  }
}

----
state/SettingsObserver.ts
import { Settings } from '../core/types';
import { createLogger } from '../core/logger';

const logger = createLogger('SettingsObserver');

export type SettingsChangeCallback = (settings: Settings) => void;

export class SettingsObserver {
    private static instance: SettingsObserver;
    private observers = new Map<string, SettingsChangeCallback>();

    private constructor() {}

    static getInstance(): SettingsObserver {
        if (!SettingsObserver.instance) {
            SettingsObserver.instance = new SettingsObserver();
        }
        return SettingsObserver.instance;
    }

    subscribe(id: string, callback: SettingsChangeCallback): () => void {
        logger.debug(`Subscribing observer: ${id}`);
        this.observers.set(id, callback);
        return () => this.unsubscribe(id);
    }

    unsubscribe(id: string): void {
        logger.debug(`Unsubscribing observer: ${id}`);
        this.observers.delete(id);
    }

    notifyAll(settings: Settings): void {
        logger.debug(`Notifying ${this.observers.size} observers of settings change`);
        this.observers.forEach((callback, id) => {
            try {
                callback(settings);
            } catch (error) {
                logger.error(`Error in settings observer ${id}:`, error);
            }
        });
    }
}

----
state/settings.ts
import { Settings, SettingCategory } from '../core/types';
import { createLogger } from '../core/logger';
import { SettingsStore } from './SettingsStore';
import { defaultSettings } from './defaultSettings';

const logger = createLogger('SettingsManager');

export class SettingsManager {
    private store: SettingsStore;
    private initialized: boolean = false;
    private settings: Settings = defaultSettings;

    constructor() {
        this.store = SettingsStore.getInstance({ autoSave: true });
    }

    public async initialize(): Promise<void> {
        if (this.initialized) {
            return;
        }

        try {
            await this.store.initialize();
            this.initialized = true;
            logger.info('Settings manager initialized');
        } catch (error) {
            logger.error('Failed to initialize settings manager:', error);
            throw error;
        }
    }

    public getCurrentSettings(): Settings {
        return this.settings;
    }

    public async updateSetting<T extends keyof Settings, K extends keyof Settings[T]>(
        category: T,
        key: K,
        value: Settings[T][K]
    ): Promise<void> {
        this.settings[category][key] = value;
        this.set(category, key, value);
    }

    public get<T extends keyof Settings, K extends keyof Settings[T]>(
        category: T,
        key: K
    ): Settings[T][K] {
        return this.store.get(`${category}.${key as string & K}`);
    }

    public set<T extends keyof Settings, K extends keyof Settings[T]>(
        category: T,
        key: K,
        value: Settings[T][K]
    ): void {
        this.store.set(`${category}.${key as string & K}`, value);
    }

    public getCategory<T extends keyof Settings>(category: T): Settings[T] {
        return this.store.getCategory(category);
    }

    public subscribe<T extends keyof Settings, K extends keyof Settings[T]>(
        category: T,
        key: K,
        callback: (value: Settings[T][K]) => void
    ): () => void {
        return this.store.subscribe(
            `${category}.${key as string & K}`,
            (_, value) => callback(value)
        );
    }

    public onSettingChange<T extends keyof Settings, K extends keyof Settings[T]>(
        category: T,
        key: K,
        callback: (value: Settings[T][K]) => void
    ): () => void {
        return this.subscribe(category, key, callback);
    }

    public dispose(): void {
        this.store.dispose();
        this.initialized = false;
    }
}

// Export singleton instance
export const settingsManager = new SettingsManager();

----
ui/ControlPanel.css
/* Control Panel Styles */

.control-panel {
    position: fixed;
    top: 20px;
    right: 20px;
    width: 300px;
    max-height: calc(100vh - 40px);
    background-color: rgba(30, 30, 30, 0.95);
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    color: #ffffff;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    overflow-y: auto;
    z-index: 1000;
    padding: 16px;
}

.control-panel-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 16px;
    padding-bottom: 8px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.control-panel-header h2 {
    margin: 0;
    font-size: 18px;
    font-weight: 500;
}

.connection-status {
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
}

.connection-status.connected {
    background-color: rgba(39, 174, 96, 0.2);
    color: #2ecc71;
}

.connection-status.disconnected {
    background-color: rgba(231, 76, 60, 0.2);
    color: #e74c3c;
}

.settings-section {
    margin-bottom: 24px;
}

.settings-section h3 {
    margin: 0 0 12px 0;
    font-size: 16px;
    font-weight: 500;
    color: #bdc3c7;
}

.setting-container {
    margin-bottom: 12px;
    display: flex;
    flex-direction: column;
    gap: 4px;
}

.setting-container label {
    font-size: 14px;
    color: #ecf0f1;
}

.setting-container input[type="text"],
.setting-container input[type="number"] {
    background-color: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 4px;
    padding: 6px 8px;
    color: #ffffff;
    font-size: 14px;
    width: 100%;
}

.setting-container input[type="checkbox"] {
    width: 16px;
    height: 16px;
}

.setting-container input[type="color"] {
    width: 100%;
    height: 32px;
    padding: 2px;
    background-color: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 4px;
}

.array-input {
    display: flex;
    gap: 8px;
}

.array-input input {
    flex: 1;
}

.reset-button {
    width: 100%;
    padding: 8px 16px;
    background-color: rgba(231, 76, 60, 0.2);
    border: 1px solid rgba(231, 76, 60, 0.4);
    border-radius: 4px;
    color: #e74c3c;
    font-size: 14px;
    cursor: pointer;
    transition: all 0.2s ease;
}

.reset-button:hover {
    background-color: rgba(231, 76, 60, 0.3);
    border-color: rgba(231, 76, 60, 0.6);
}

.randomize-button-container {
    padding: 16px;
    margin-bottom: 16px;
    border-bottom: 1px solid #ccc;
}

.randomize-button {
    width: 100%;
    padding: 12px;
    font-size: 16px;
    color: white;
    background-color: #2196f3;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.randomize-button:hover {
    background-color: #1976d2;
}

.randomize-button:active {
    background-color: #0d47a1;
}

/* Scrollbar styles */
.control-panel::-webkit-scrollbar {
    width: 8px;
}

.control-panel::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 4px;
}

.control-panel::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.2);
    border-radius: 4px;
}

.control-panel::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.3);
}

----
ui/ControlPanel.ts
import { Settings } from '../core/types';
import { settingsManager } from '../state/settings';
import { platformManager } from '../platform/platformManager';
import { createLogger } from '../core/logger';
import './ControlPanel.css';
import { NodeManager } from '../rendering/nodes';

const logger = createLogger('ControlPanel');

export class ControlPanel {
    private container: HTMLElement;
    private settings: Settings;
    private unsubscribers: Array<() => void> = [];

    constructor(container: HTMLElement) {
        this.container = container;
        this.settings = settingsManager.getCurrentSettings();
        this.addRandomizeButton();
        this.initializePanel();
        this.setupSettingsSubscriptions();
    }

    private addRandomizeButton(): void {
        const buttonContainer = document.createElement('div');
        buttonContainer.className = 'randomize-button-container';

        const button = document.createElement('button');
        button.textContent = 'Randomize Node Positions';
        button.className = 'randomize-button';
        button.onclick = () => {
            const nodeManager = NodeManager.getInstance();
            const nodes = nodeManager.getCurrentNodes();
            
            // Randomize positions within a reasonable sphere
            const radius = 50;
            nodes.forEach(node => {
                const theta = Math.random() * Math.PI * 2;
                const phi = Math.acos(2 * Math.random() - 1);
                const r = radius * Math.cbrt(Math.random()); // Cube root for more uniform distribution

                node.data.position = {
                    x: r * Math.sin(phi) * Math.cos(theta),
                    y: r * Math.sin(phi) * Math.sin(theta),
                    z: r * Math.cos(phi)
                };
            });

            // Update node positions
            nodeManager.updateNodes(nodes);
            logger.info('Node positions randomized');
        };

        buttonContainer.appendChild(button);
        this.container.insertBefore(buttonContainer, this.container.firstChild);
    }

    private initializePanel(): void {
        // Create settings sections
        const categories = Object.keys(this.settings) as Array<keyof Settings>;
        categories.forEach(category => {
            const section = this.createSettingsSection(category);
            this.container.appendChild(section);
        });

        // Add platform-specific settings
        if (platformManager.getCapabilities().xrSupported) {
            this.addXRSettings();
        }
    }

    private createSettingsSection(category: keyof Settings): HTMLElement {
        const section = document.createElement('div');
        section.className = 'settings-group';
        
        const title = document.createElement('h4');
        title.textContent = this.formatCategoryName(String(category));
        section.appendChild(title);

        const settings = this.settings[category];
        Object.entries(settings).forEach(([key, value]) => {
            const settingElement = this.createSettingElement(
                category,
                key as keyof Settings[typeof category],
                value as Settings[typeof category][keyof Settings[typeof category]]
            );
            section.appendChild(settingElement);
        });

        return section;
    }

    private formatCategoryName(category: string): string {
        return category
            .split(/(?=[A-Z])/)
            .map(word => word.charAt(0).toUpperCase() + word.slice(1))
            .join(' ');
    }

    private createSettingElement<T extends keyof Settings, K extends keyof Settings[T]>(
        category: T,
        key: K,
        value: Settings[T][K]
    ): HTMLElement {
        const container = document.createElement('div');
        container.className = 'setting-item';

        const label = document.createElement('label');
        label.textContent = this.formatSettingName(String(key));
        container.appendChild(label);

        const input = this.createInputElement(category, key, value);
        container.appendChild(input);

        return container;
    }

    private formatSettingName(setting: string): string {
        return setting
            .split(/(?=[A-Z])|_/)
            .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
            .join(' ');
    }

    private createInputElement<T extends keyof Settings, K extends keyof Settings[T]>(
        category: T,
        key: K,
        value: Settings[T][K]
    ): HTMLElement {
        let input: HTMLElement;

        switch (typeof value) {
            case 'boolean':
                input = document.createElement('input');
                input.setAttribute('type', 'checkbox');
                (input as HTMLInputElement).checked = value as boolean;
                break;

            case 'number':
                input = document.createElement('input');
                input.setAttribute('type', 'number');
                input.setAttribute('step', '0.1');
                (input as HTMLInputElement).value = String(value);
                break;

            case 'string':
                if (this.isColorSetting(String(key))) {
                    input = document.createElement('input');
                    input.setAttribute('type', 'color');
                    (input as HTMLInputElement).value = value as string;
                } else {
                    input = document.createElement('input');
                    input.setAttribute('type', 'text');
                    (input as HTMLInputElement).value = value as string;
                }
                break;

            default:
                logger.warn(`Unsupported setting type for ${String(key)}: ${typeof value}`);
                input = document.createElement('span');
                input.textContent = 'Unsupported setting type';
                break;
        }

        input.id = `${String(category)}-${String(key)}`;
        input.addEventListener('change', (event) => this.handleSettingChange(category, key, event));

        return input;
    }

    private isColorSetting(key: string): boolean {
        return key.toLowerCase().includes('color');
    }

    private async handleSettingChange<T extends keyof Settings, K extends keyof Settings[T]>(
        category: T,
        key: K,
        event: Event
    ): Promise<void> {
        const target = event.target as HTMLInputElement;
        let value: Settings[T][K];

        switch (target.type) {
            case 'checkbox':
                value = target.checked as Settings[T][K];
                break;
            case 'number':
                value = parseFloat(target.value) as Settings[T][K];
                break;
            default:
                value = target.value as Settings[T][K];
        }

        try {
            await settingsManager.updateSetting(category, key, value);
            logger.info(`Updated setting ${String(category)}.${String(key)} to ${value}`);
        } catch (error) {
            logger.error(`Failed to update setting ${String(category)}.${String(key)}:`, error);
            // Revert input to current setting value
            const currentValue = this.settings[category][key];
            if (target.type === 'checkbox') {
                target.checked = currentValue as boolean;
            } else {
                target.value = String(currentValue);
            }
        }
    }

    private setupSettingsSubscriptions(): void {
        // Subscribe to all settings
        Object.keys(this.settings).forEach(category => {
            const categoryKey = category as keyof Settings;
            const categorySettings = this.settings[categoryKey];
            Object.keys(categorySettings).forEach(setting => {
                const settingKey = setting as keyof Settings[typeof categoryKey];
                const unsubscribe = settingsManager.subscribe(
                    categoryKey,
                    settingKey,
                    (value: Settings[typeof categoryKey][typeof settingKey]) => {
                        this.updateSettingElement(category, setting, value);
                    }
                );
                this.unsubscribers.push(unsubscribe);
            });
        });
    }

    private updateSettingElement(category: string, setting: string, value: unknown): void {
        const input = document.getElementById(`${category}-${setting}`) as HTMLInputElement;
        if (input) {
            if (input.type === 'checkbox') {
                input.checked = value as boolean;
            } else {
                input.value = String(value);
            }
        }
    }

    private addXRSettings(): void {
        // Add XR-specific settings section
        const xrSection = document.createElement('div');
        xrSection.className = 'settings-group';
        
        const title = document.createElement('h4');
        title.textContent = 'XR Settings';
        xrSection.appendChild(title);

        // Add XR mode toggle
        const xrToggle = document.createElement('button');
        xrToggle.id = 'xr-toggle';
        xrToggle.textContent = 'Enter XR';
        xrToggle.addEventListener('click', () => {
            // XR mode toggle logic handled by XRManager
            const event = new CustomEvent('toggleXR');
            window.dispatchEvent(event);
        });
        xrSection.appendChild(xrToggle);

        this.container.appendChild(xrSection);
    }

    public dispose(): void {
        // Clean up subscribers
        this.unsubscribers.forEach(unsubscribe => unsubscribe());
        this.unsubscribers = [];
    }
}

----
ui/index.ts
import { ControlPanel } from './ControlPanel';
import './ControlPanel.css';

export { ControlPanel };

----
public/fonts/helvetiker_regular.typeface.json
{"glyphs":{"ο":{"x_min":0,"x_max":712,"ha":815,"o":"m 356 -25 q 96 88 192 -25 q 0 368 0 201 q 92 642 0 533 q 356 761 192 761 q 617 644 517 761 q 712 368 712 533 q 619 91 712 201 q 356 -25 520 -25 m 356 85 q 527 175 465 85 q 583 369 583 255 q 528 562 583 484 q 356 651 466 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 356 85 250 85 "},"S":{"x_min":0,"x_max":788,"ha":890,"o":"m 788 291 q 662 54 788 144 q 397 -26 550 -26 q 116 68 226 -26 q 0 337 0 168 l 131 337 q 200 152 131 220 q 384 85 269 85 q 557 129 479 85 q 650 270 650 183 q 490 429 650 379 q 194 513 341 470 q 33 739 33 584 q 142 964 33 881 q 388 1041 242 1041 q 644 957 543 1041 q 756 716 756 867 l 625 716 q 561 874 625 816 q 395 933 497 933 q 243 891 309 933 q 164 759 164 841 q 325 609 164 656 q 625 526 475 568 q 788 291 788 454 "},"¦":{"x_min":343,"x_max":449,"ha":792,"o":"m 449 462 l 343 462 l 343 986 l 449 986 l 449 462 m 449 -242 l 343 -242 l 343 280 l 449 280 l 449 -242 "},"/":{"x_min":183.25,"x_max":608.328125,"ha":792,"o":"m 608 1041 l 266 -129 l 183 -129 l 520 1041 l 608 1041 "},"Τ":{"x_min":-0.4375,"x_max":777.453125,"ha":839,"o":"m 777 893 l 458 893 l 458 0 l 319 0 l 319 892 l 0 892 l 0 1013 l 777 1013 l 777 893 "},"y":{"x_min":0,"x_max":684.78125,"ha":771,"o":"m 684 738 l 388 -83 q 311 -216 356 -167 q 173 -279 252 -279 q 97 -266 133 -279 l 97 -149 q 132 -155 109 -151 q 168 -160 155 -160 q 240 -114 213 -160 q 274 -26 248 -98 l 0 738 l 137 737 l 341 139 l 548 737 l 684 738 "},"Π":{"x_min":0,"x_max":803,"ha":917,"o":"m 803 0 l 667 0 l 667 886 l 140 886 l 140 0 l 0 0 l 0 1012 l 803 1012 l 803 0 "},"ΐ":{"x_min":-111,"x_max":339,"ha":361,"o":"m 339 800 l 229 800 l 229 925 l 339 925 l 339 800 m -1 800 l -111 800 l -111 925 l -1 925 l -1 800 m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 737 l 167 737 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 103 239 101 q 284 112 257 104 l 284 3 m 302 1040 l 113 819 l 30 819 l 165 1040 l 302 1040 "},"g":{"x_min":0,"x_max":686,"ha":838,"o":"m 686 34 q 586 -213 686 -121 q 331 -306 487 -306 q 131 -252 216 -306 q 31 -84 31 -190 l 155 -84 q 228 -174 166 -138 q 345 -207 284 -207 q 514 -109 454 -207 q 564 89 564 -27 q 461 6 521 36 q 335 -23 401 -23 q 88 100 184 -23 q 0 370 0 215 q 87 634 0 522 q 330 758 183 758 q 457 728 398 758 q 564 644 515 699 l 564 737 l 686 737 l 686 34 m 582 367 q 529 560 582 481 q 358 652 468 652 q 189 561 250 652 q 135 369 135 482 q 189 176 135 255 q 361 85 251 85 q 529 176 468 85 q 582 367 582 255 "},"²":{"x_min":0,"x_max":442,"ha":539,"o":"m 442 383 l 0 383 q 91 566 0 492 q 260 668 176 617 q 354 798 354 727 q 315 875 354 845 q 227 905 277 905 q 136 869 173 905 q 99 761 99 833 l 14 761 q 82 922 14 864 q 232 974 141 974 q 379 926 316 974 q 442 797 442 878 q 351 635 442 704 q 183 539 321 611 q 92 455 92 491 l 442 455 l 442 383 "},"–":{"x_min":0,"x_max":705.5625,"ha":803,"o":"m 705 334 l 0 334 l 0 410 l 705 410 l 705 334 "},"Κ":{"x_min":0,"x_max":819.5625,"ha":893,"o":"m 819 0 l 650 0 l 294 509 l 139 356 l 139 0 l 0 0 l 0 1013 l 139 1013 l 139 526 l 626 1013 l 809 1013 l 395 600 l 819 0 "},"ƒ":{"x_min":-46.265625,"x_max":392,"ha":513,"o":"m 392 651 l 259 651 l 79 -279 l -46 -278 l 134 651 l 14 651 l 14 751 l 135 751 q 151 948 135 900 q 304 1041 185 1041 q 334 1040 319 1041 q 392 1034 348 1039 l 392 922 q 337 931 360 931 q 271 883 287 931 q 260 793 260 853 l 260 751 l 392 751 l 392 651 "},"e":{"x_min":0,"x_max":714,"ha":813,"o":"m 714 326 l 140 326 q 200 157 140 227 q 359 87 260 87 q 488 130 431 87 q 561 245 545 174 l 697 245 q 577 48 670 123 q 358 -26 484 -26 q 97 85 195 -26 q 0 363 0 197 q 94 642 0 529 q 358 765 195 765 q 626 627 529 765 q 714 326 714 503 m 576 429 q 507 583 564 522 q 355 650 445 650 q 206 583 266 650 q 140 429 152 522 l 576 429 "},"ό":{"x_min":0,"x_max":712,"ha":815,"o":"m 356 -25 q 94 91 194 -25 q 0 368 0 202 q 92 642 0 533 q 356 761 192 761 q 617 644 517 761 q 712 368 712 533 q 619 91 712 201 q 356 -25 520 -25 m 356 85 q 527 175 465 85 q 583 369 583 255 q 528 562 583 484 q 356 651 466 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 356 85 250 85 m 576 1040 l 387 819 l 303 819 l 438 1040 l 576 1040 "},"J":{"x_min":0,"x_max":588,"ha":699,"o":"m 588 279 q 287 -26 588 -26 q 58 73 126 -26 q 0 327 0 158 l 133 327 q 160 172 133 227 q 288 96 198 96 q 426 171 391 96 q 449 336 449 219 l 449 1013 l 588 1013 l 588 279 "},"»":{"x_min":-1,"x_max":503,"ha":601,"o":"m 503 302 l 280 136 l 281 256 l 429 373 l 281 486 l 280 608 l 503 440 l 503 302 m 221 302 l 0 136 l 0 255 l 145 372 l 0 486 l -1 608 l 221 440 l 221 302 "},"©":{"x_min":-3,"x_max":1008,"ha":1106,"o":"m 502 -7 q 123 151 263 -7 q -3 501 -3 294 q 123 851 -3 706 q 502 1011 263 1011 q 881 851 739 1011 q 1008 501 1008 708 q 883 151 1008 292 q 502 -7 744 -7 m 502 60 q 830 197 709 60 q 940 501 940 322 q 831 805 940 681 q 502 944 709 944 q 174 805 296 944 q 65 501 65 680 q 173 197 65 320 q 502 60 294 60 m 741 394 q 661 246 731 302 q 496 190 591 190 q 294 285 369 190 q 228 497 228 370 q 295 714 228 625 q 499 813 370 813 q 656 762 588 813 q 733 625 724 711 l 634 625 q 589 704 629 673 q 498 735 550 735 q 377 666 421 735 q 334 504 334 597 q 374 340 334 408 q 490 272 415 272 q 589 304 549 272 q 638 394 628 337 l 741 394 "},"ώ":{"x_min":0,"x_max":922,"ha":1030,"o":"m 687 1040 l 498 819 l 415 819 l 549 1040 l 687 1040 m 922 339 q 856 97 922 203 q 650 -26 780 -26 q 538 9 587 -26 q 461 103 489 44 q 387 12 436 46 q 277 -22 339 -22 q 69 97 147 -22 q 0 338 0 202 q 45 551 0 444 q 161 737 84 643 l 302 737 q 175 552 219 647 q 124 336 124 446 q 155 179 124 248 q 275 88 197 88 q 375 163 341 88 q 400 294 400 219 l 400 572 l 524 572 l 524 294 q 561 135 524 192 q 643 88 591 88 q 762 182 719 88 q 797 341 797 257 q 745 555 797 450 q 619 737 705 637 l 760 737 q 874 551 835 640 q 922 339 922 444 "},"^":{"x_min":193.0625,"x_max":598.609375,"ha":792,"o":"m 598 772 l 515 772 l 395 931 l 277 772 l 193 772 l 326 1013 l 462 1013 l 598 772 "},"«":{"x_min":0,"x_max":507.203125,"ha":604,"o":"m 506 136 l 284 302 l 284 440 l 506 608 l 507 485 l 360 371 l 506 255 l 506 136 m 222 136 l 0 302 l 0 440 l 222 608 l 221 486 l 73 373 l 222 256 l 222 136 "},"D":{"x_min":0,"x_max":828,"ha":935,"o":"m 389 1013 q 714 867 593 1013 q 828 521 828 729 q 712 161 828 309 q 382 0 587 0 l 0 0 l 0 1013 l 389 1013 m 376 124 q 607 247 523 124 q 681 510 681 355 q 607 771 681 662 q 376 896 522 896 l 139 896 l 139 124 l 376 124 "},"∙":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 "},"ÿ":{"x_min":0,"x_max":47,"ha":125,"o":"m 47 3 q 37 -7 47 -7 q 28 0 30 -7 q 39 -4 32 -4 q 45 3 45 -1 l 37 0 q 28 9 28 0 q 39 19 28 19 l 47 16 l 47 19 l 47 3 m 37 1 q 44 8 44 1 q 37 16 44 16 q 30 8 30 16 q 37 1 30 1 m 26 1 l 23 22 l 14 0 l 3 22 l 3 3 l 0 25 l 13 1 l 22 25 l 26 1 "},"w":{"x_min":0,"x_max":1009.71875,"ha":1100,"o":"m 1009 738 l 783 0 l 658 0 l 501 567 l 345 0 l 222 0 l 0 738 l 130 738 l 284 174 l 432 737 l 576 738 l 721 173 l 881 737 l 1009 738 "},"$":{"x_min":0,"x_max":700,"ha":793,"o":"m 664 717 l 542 717 q 490 825 531 785 q 381 872 450 865 l 381 551 q 620 446 540 522 q 700 241 700 370 q 618 45 700 116 q 381 -25 536 -25 l 381 -152 l 307 -152 l 307 -25 q 81 62 162 -25 q 0 297 0 149 l 124 297 q 169 146 124 204 q 307 81 215 89 l 307 441 q 80 536 148 469 q 13 725 13 603 q 96 910 13 839 q 307 982 180 982 l 307 1077 l 381 1077 l 381 982 q 574 917 494 982 q 664 717 664 845 m 307 565 l 307 872 q 187 831 233 872 q 142 724 142 791 q 180 618 142 656 q 307 565 218 580 m 381 76 q 562 237 562 96 q 517 361 562 313 q 381 423 472 409 l 381 76 "},"\\":{"x_min":-0.015625,"x_max":425.0625,"ha":522,"o":"m 425 -129 l 337 -129 l 0 1041 l 83 1041 l 425 -129 "},"µ":{"x_min":0,"x_max":697.21875,"ha":747,"o":"m 697 -4 q 629 -14 658 -14 q 498 97 513 -14 q 422 9 470 41 q 313 -23 374 -23 q 207 4 258 -23 q 119 81 156 32 l 119 -278 l 0 -278 l 0 738 l 124 738 l 124 343 q 165 173 124 246 q 308 83 216 83 q 452 178 402 83 q 493 359 493 255 l 493 738 l 617 738 l 617 214 q 623 136 617 160 q 673 92 637 92 q 697 96 684 92 l 697 -4 "},"Ι":{"x_min":42,"x_max":181,"ha":297,"o":"m 181 0 l 42 0 l 42 1013 l 181 1013 l 181 0 "},"Ύ":{"x_min":0,"x_max":1144.5,"ha":1214,"o":"m 1144 1012 l 807 416 l 807 0 l 667 0 l 667 416 l 325 1012 l 465 1012 l 736 533 l 1004 1012 l 1144 1012 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 "},"’":{"x_min":0,"x_max":139,"ha":236,"o":"m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 "},"Ν":{"x_min":0,"x_max":801,"ha":915,"o":"m 801 0 l 651 0 l 131 822 l 131 0 l 0 0 l 0 1013 l 151 1013 l 670 191 l 670 1013 l 801 1013 l 801 0 "},"-":{"x_min":8.71875,"x_max":350.390625,"ha":478,"o":"m 350 317 l 8 317 l 8 428 l 350 428 l 350 317 "},"Q":{"x_min":0,"x_max":968,"ha":1072,"o":"m 954 5 l 887 -79 l 744 35 q 622 -11 687 2 q 483 -26 556 -26 q 127 130 262 -26 q 0 504 0 279 q 127 880 0 728 q 484 1041 262 1041 q 841 884 708 1041 q 968 507 968 735 q 933 293 968 398 q 832 104 899 188 l 954 5 m 723 191 q 802 330 777 248 q 828 499 828 412 q 744 790 828 673 q 483 922 650 922 q 228 791 322 922 q 142 505 142 673 q 227 221 142 337 q 487 91 323 91 q 632 123 566 91 l 520 215 l 587 301 l 723 191 "},"ς":{"x_min":1,"x_max":676.28125,"ha":740,"o":"m 676 460 l 551 460 q 498 595 542 546 q 365 651 448 651 q 199 578 263 651 q 136 401 136 505 q 266 178 136 241 q 508 106 387 142 q 640 -50 640 62 q 625 -158 640 -105 q 583 -278 611 -211 l 465 -278 q 498 -182 490 -211 q 515 -80 515 -126 q 381 12 515 -15 q 134 91 197 51 q 1 388 1 179 q 100 651 1 542 q 354 761 199 761 q 587 680 498 761 q 676 460 676 599 "},"M":{"x_min":0,"x_max":954,"ha":1067,"o":"m 954 0 l 819 0 l 819 869 l 537 0 l 405 0 l 128 866 l 128 0 l 0 0 l 0 1013 l 200 1013 l 472 160 l 757 1013 l 954 1013 l 954 0 "},"Ψ":{"x_min":0,"x_max":1006,"ha":1094,"o":"m 1006 678 q 914 319 1006 429 q 571 200 814 200 l 571 0 l 433 0 l 433 200 q 92 319 194 200 q 0 678 0 429 l 0 1013 l 139 1013 l 139 679 q 191 417 139 492 q 433 326 255 326 l 433 1013 l 571 1013 l 571 326 l 580 326 q 813 423 747 326 q 868 679 868 502 l 868 1013 l 1006 1013 l 1006 678 "},"C":{"x_min":0,"x_max":886,"ha":944,"o":"m 886 379 q 760 87 886 201 q 455 -26 634 -26 q 112 136 236 -26 q 0 509 0 283 q 118 882 0 737 q 469 1041 245 1041 q 748 955 630 1041 q 879 708 879 859 l 745 708 q 649 862 724 805 q 473 920 573 920 q 219 791 312 920 q 136 509 136 675 q 217 229 136 344 q 470 99 311 99 q 672 179 591 99 q 753 379 753 259 l 886 379 "},"!":{"x_min":0,"x_max":138,"ha":236,"o":"m 138 684 q 116 409 138 629 q 105 244 105 299 l 33 244 q 16 465 33 313 q 0 684 0 616 l 0 1013 l 138 1013 l 138 684 m 138 0 l 0 0 l 0 151 l 138 151 l 138 0 "},"{":{"x_min":0,"x_max":480.5625,"ha":578,"o":"m 480 -286 q 237 -213 303 -286 q 187 -45 187 -159 q 194 48 187 -15 q 201 141 201 112 q 164 264 201 225 q 0 314 118 314 l 0 417 q 164 471 119 417 q 201 605 201 514 q 199 665 201 644 q 193 772 193 769 q 241 941 193 887 q 480 1015 308 1015 l 480 915 q 336 866 375 915 q 306 742 306 828 q 310 662 306 717 q 314 577 314 606 q 288 452 314 500 q 176 365 256 391 q 289 275 257 337 q 314 143 314 226 q 313 84 314 107 q 310 -11 310 -5 q 339 -131 310 -94 q 480 -182 377 -182 l 480 -286 "},"X":{"x_min":-0.015625,"x_max":854.15625,"ha":940,"o":"m 854 0 l 683 0 l 423 409 l 166 0 l 0 0 l 347 519 l 18 1013 l 186 1013 l 428 637 l 675 1013 l 836 1013 l 504 520 l 854 0 "},"#":{"x_min":0,"x_max":963.890625,"ha":1061,"o":"m 963 690 l 927 590 l 719 590 l 655 410 l 876 410 l 840 310 l 618 310 l 508 -3 l 393 -2 l 506 309 l 329 310 l 215 -2 l 102 -3 l 212 310 l 0 310 l 36 410 l 248 409 l 312 590 l 86 590 l 120 690 l 347 690 l 459 1006 l 573 1006 l 462 690 l 640 690 l 751 1006 l 865 1006 l 754 690 l 963 690 m 606 590 l 425 590 l 362 410 l 543 410 l 606 590 "},"ι":{"x_min":42,"x_max":284,"ha":361,"o":"m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 738 l 167 738 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 103 239 101 q 284 112 257 104 l 284 3 "},"Ά":{"x_min":0,"x_max":906.953125,"ha":982,"o":"m 283 1040 l 88 799 l 5 799 l 145 1040 l 283 1040 m 906 0 l 756 0 l 650 303 l 251 303 l 143 0 l 0 0 l 376 1012 l 529 1012 l 906 0 m 609 421 l 452 866 l 293 421 l 609 421 "},")":{"x_min":0,"x_max":318,"ha":415,"o":"m 318 365 q 257 25 318 191 q 87 -290 197 -141 l 0 -290 q 140 21 93 -128 q 193 360 193 189 q 141 704 193 537 q 0 1024 97 850 l 87 1024 q 257 706 197 871 q 318 365 318 542 "},"ε":{"x_min":0,"x_max":634.71875,"ha":714,"o":"m 634 234 q 527 38 634 110 q 300 -25 433 -25 q 98 29 183 -25 q 0 204 0 93 q 37 314 0 265 q 128 390 67 353 q 56 460 82 419 q 26 555 26 505 q 114 712 26 654 q 295 763 191 763 q 499 700 416 763 q 589 515 589 631 l 478 515 q 419 618 464 580 q 307 657 374 657 q 207 630 253 657 q 151 547 151 598 q 238 445 151 469 q 389 434 280 434 l 389 331 l 349 331 q 206 315 255 331 q 125 210 125 287 q 183 107 125 145 q 302 76 233 76 q 436 117 379 76 q 509 234 493 159 l 634 234 "},"Δ":{"x_min":0,"x_max":952.78125,"ha":1028,"o":"m 952 0 l 0 0 l 400 1013 l 551 1013 l 952 0 m 762 124 l 476 867 l 187 124 l 762 124 "},"}":{"x_min":0,"x_max":481,"ha":578,"o":"m 481 314 q 318 262 364 314 q 282 136 282 222 q 284 65 282 97 q 293 -58 293 -48 q 241 -217 293 -166 q 0 -286 174 -286 l 0 -182 q 143 -130 105 -182 q 171 -2 171 -93 q 168 81 171 22 q 165 144 165 140 q 188 275 165 229 q 306 365 220 339 q 191 455 224 391 q 165 588 165 505 q 168 681 165 624 q 171 742 171 737 q 141 865 171 827 q 0 915 102 915 l 0 1015 q 243 942 176 1015 q 293 773 293 888 q 287 675 293 741 q 282 590 282 608 q 318 466 282 505 q 481 417 364 417 l 481 314 "},"‰":{"x_min":-3,"x_max":1672,"ha":1821,"o":"m 846 0 q 664 76 732 0 q 603 244 603 145 q 662 412 603 344 q 846 489 729 489 q 1027 412 959 489 q 1089 244 1089 343 q 1029 76 1089 144 q 846 0 962 0 m 845 103 q 945 143 910 103 q 981 243 981 184 q 947 340 981 301 q 845 385 910 385 q 745 342 782 385 q 709 243 709 300 q 742 147 709 186 q 845 103 781 103 m 888 986 l 284 -25 l 199 -25 l 803 986 l 888 986 m 241 468 q 58 545 126 468 q -3 715 -3 615 q 56 881 -3 813 q 238 958 124 958 q 421 881 353 958 q 483 712 483 813 q 423 544 483 612 q 241 468 356 468 m 241 855 q 137 811 175 855 q 100 710 100 768 q 136 612 100 653 q 240 572 172 572 q 344 614 306 572 q 382 713 382 656 q 347 810 382 771 q 241 855 308 855 m 1428 0 q 1246 76 1314 0 q 1185 244 1185 145 q 1244 412 1185 344 q 1428 489 1311 489 q 1610 412 1542 489 q 1672 244 1672 343 q 1612 76 1672 144 q 1428 0 1545 0 m 1427 103 q 1528 143 1492 103 q 1564 243 1564 184 q 1530 340 1564 301 q 1427 385 1492 385 q 1327 342 1364 385 q 1291 243 1291 300 q 1324 147 1291 186 q 1427 103 1363 103 "},"a":{"x_min":0,"x_max":698.609375,"ha":794,"o":"m 698 0 q 661 -12 679 -7 q 615 -17 643 -17 q 536 12 564 -17 q 500 96 508 41 q 384 6 456 37 q 236 -25 312 -25 q 65 31 130 -25 q 0 194 0 88 q 118 390 0 334 q 328 435 180 420 q 488 483 476 451 q 495 523 495 504 q 442 619 495 584 q 325 654 389 654 q 209 617 257 654 q 152 513 161 580 l 33 513 q 123 705 33 633 q 332 772 207 772 q 528 712 448 772 q 617 531 617 645 l 617 163 q 624 108 617 126 q 664 90 632 90 l 698 94 l 698 0 m 491 262 l 491 372 q 272 329 350 347 q 128 201 128 294 q 166 113 128 144 q 264 83 205 83 q 414 130 346 83 q 491 262 491 183 "},"—":{"x_min":0,"x_max":941.671875,"ha":1039,"o":"m 941 334 l 0 334 l 0 410 l 941 410 l 941 334 "},"=":{"x_min":8.71875,"x_max":780.953125,"ha":792,"o":"m 780 510 l 8 510 l 8 606 l 780 606 l 780 510 m 780 235 l 8 235 l 8 332 l 780 332 l 780 235 "},"N":{"x_min":0,"x_max":801,"ha":914,"o":"m 801 0 l 651 0 l 131 823 l 131 0 l 0 0 l 0 1013 l 151 1013 l 670 193 l 670 1013 l 801 1013 l 801 0 "},"ρ":{"x_min":0,"x_max":712,"ha":797,"o":"m 712 369 q 620 94 712 207 q 362 -26 521 -26 q 230 2 292 -26 q 119 83 167 30 l 119 -278 l 0 -278 l 0 362 q 91 643 0 531 q 355 764 190 764 q 617 647 517 764 q 712 369 712 536 m 583 366 q 530 559 583 480 q 359 651 469 651 q 190 562 252 651 q 135 370 135 483 q 189 176 135 257 q 359 85 250 85 q 528 175 466 85 q 583 366 583 254 "},"2":{"x_min":59,"x_max":731,"ha":792,"o":"m 731 0 l 59 0 q 197 314 59 188 q 457 487 199 315 q 598 691 598 580 q 543 819 598 772 q 411 867 488 867 q 272 811 328 867 q 209 630 209 747 l 81 630 q 182 901 81 805 q 408 986 271 986 q 629 909 536 986 q 731 694 731 826 q 613 449 731 541 q 378 316 495 383 q 201 122 235 234 l 731 122 l 731 0 "},"¯":{"x_min":0,"x_max":941.671875,"ha":938,"o":"m 941 1033 l 0 1033 l 0 1109 l 941 1109 l 941 1033 "},"Z":{"x_min":0,"x_max":779,"ha":849,"o":"m 779 0 l 0 0 l 0 113 l 621 896 l 40 896 l 40 1013 l 779 1013 l 778 887 l 171 124 l 779 124 l 779 0 "},"u":{"x_min":0,"x_max":617,"ha":729,"o":"m 617 0 l 499 0 l 499 110 q 391 10 460 45 q 246 -25 322 -25 q 61 58 127 -25 q 0 258 0 136 l 0 738 l 125 738 l 125 284 q 156 148 125 202 q 273 82 197 82 q 433 165 369 82 q 493 340 493 243 l 493 738 l 617 738 l 617 0 "},"k":{"x_min":0,"x_max":612.484375,"ha":697,"o":"m 612 738 l 338 465 l 608 0 l 469 0 l 251 382 l 121 251 l 121 0 l 0 0 l 0 1013 l 121 1013 l 121 402 l 456 738 l 612 738 "},"Η":{"x_min":0,"x_max":803,"ha":917,"o":"m 803 0 l 667 0 l 667 475 l 140 475 l 140 0 l 0 0 l 0 1013 l 140 1013 l 140 599 l 667 599 l 667 1013 l 803 1013 l 803 0 "},"Α":{"x_min":0,"x_max":906.953125,"ha":985,"o":"m 906 0 l 756 0 l 650 303 l 251 303 l 143 0 l 0 0 l 376 1013 l 529 1013 l 906 0 m 609 421 l 452 866 l 293 421 l 609 421 "},"s":{"x_min":0,"x_max":604,"ha":697,"o":"m 604 217 q 501 36 604 104 q 292 -23 411 -23 q 86 43 166 -23 q 0 238 0 114 l 121 237 q 175 122 121 164 q 300 85 223 85 q 415 112 363 85 q 479 207 479 147 q 361 309 479 276 q 140 372 141 370 q 21 544 21 426 q 111 708 21 647 q 298 761 190 761 q 492 705 413 761 q 583 531 583 643 l 462 531 q 412 625 462 594 q 298 657 363 657 q 199 636 242 657 q 143 558 143 608 q 262 454 143 486 q 484 394 479 397 q 604 217 604 341 "},"B":{"x_min":0,"x_max":778,"ha":876,"o":"m 580 546 q 724 469 670 535 q 778 311 778 403 q 673 83 778 171 q 432 0 575 0 l 0 0 l 0 1013 l 411 1013 q 629 957 541 1013 q 732 768 732 892 q 691 633 732 693 q 580 546 650 572 m 393 899 l 139 899 l 139 588 l 379 588 q 521 624 462 588 q 592 744 592 667 q 531 859 592 819 q 393 899 471 899 m 419 124 q 566 169 504 124 q 635 303 635 219 q 559 436 635 389 q 402 477 494 477 l 139 477 l 139 124 l 419 124 "},"…":{"x_min":0,"x_max":614,"ha":708,"o":"m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 m 378 0 l 236 0 l 236 151 l 378 151 l 378 0 m 614 0 l 472 0 l 472 151 l 614 151 l 614 0 "},"?":{"x_min":0,"x_max":607,"ha":704,"o":"m 607 777 q 543 599 607 674 q 422 474 482 537 q 357 272 357 391 l 236 272 q 297 487 236 395 q 411 619 298 490 q 474 762 474 691 q 422 885 474 838 q 301 933 371 933 q 179 880 228 933 q 124 706 124 819 l 0 706 q 94 963 0 872 q 302 1044 177 1044 q 511 973 423 1044 q 607 777 607 895 m 370 0 l 230 0 l 230 151 l 370 151 l 370 0 "},"H":{"x_min":0,"x_max":803,"ha":915,"o":"m 803 0 l 667 0 l 667 475 l 140 475 l 140 0 l 0 0 l 0 1013 l 140 1013 l 140 599 l 667 599 l 667 1013 l 803 1013 l 803 0 "},"ν":{"x_min":0,"x_max":675,"ha":761,"o":"m 675 738 l 404 0 l 272 0 l 0 738 l 133 738 l 340 147 l 541 738 l 675 738 "},"c":{"x_min":1,"x_max":701.390625,"ha":775,"o":"m 701 264 q 584 53 681 133 q 353 -26 487 -26 q 91 91 188 -26 q 1 370 1 201 q 92 645 1 537 q 353 761 190 761 q 572 688 479 761 q 690 493 666 615 l 556 493 q 487 606 545 562 q 356 650 428 650 q 186 563 246 650 q 134 372 134 487 q 188 179 134 258 q 359 88 250 88 q 492 136 437 88 q 566 264 548 185 l 701 264 "},"¶":{"x_min":0,"x_max":566.671875,"ha":678,"o":"m 21 892 l 52 892 l 98 761 l 145 892 l 176 892 l 178 741 l 157 741 l 157 867 l 108 741 l 88 741 l 40 871 l 40 741 l 21 741 l 21 892 m 308 854 l 308 731 q 252 691 308 691 q 227 691 240 691 q 207 696 213 695 l 207 712 l 253 706 q 288 733 288 706 l 288 763 q 244 741 279 741 q 193 797 193 741 q 261 860 193 860 q 287 860 273 860 q 308 854 302 855 m 288 842 l 263 843 q 213 796 213 843 q 248 756 213 756 q 288 796 288 756 l 288 842 m 566 988 l 502 988 l 502 -1 l 439 -1 l 439 988 l 317 988 l 317 -1 l 252 -1 l 252 602 q 81 653 155 602 q 0 805 0 711 q 101 989 0 918 q 309 1053 194 1053 l 566 1053 l 566 988 "},"β":{"x_min":0,"x_max":660,"ha":745,"o":"m 471 550 q 610 450 561 522 q 660 280 660 378 q 578 64 660 151 q 367 -22 497 -22 q 239 5 299 -22 q 126 82 178 32 l 126 -278 l 0 -278 l 0 593 q 54 903 0 801 q 318 1042 127 1042 q 519 964 436 1042 q 603 771 603 887 q 567 644 603 701 q 471 550 532 586 m 337 79 q 476 138 418 79 q 535 279 535 198 q 427 437 535 386 q 226 477 344 477 l 226 583 q 398 620 329 583 q 486 762 486 668 q 435 884 486 833 q 312 935 384 935 q 169 861 219 935 q 126 698 126 797 l 126 362 q 170 169 126 242 q 337 79 224 79 "},"Μ":{"x_min":0,"x_max":954,"ha":1068,"o":"m 954 0 l 819 0 l 819 868 l 537 0 l 405 0 l 128 865 l 128 0 l 0 0 l 0 1013 l 199 1013 l 472 158 l 758 1013 l 954 1013 l 954 0 "},"Ό":{"x_min":0.109375,"x_max":1120,"ha":1217,"o":"m 1120 505 q 994 132 1120 282 q 642 -29 861 -29 q 290 130 422 -29 q 167 505 167 280 q 294 883 167 730 q 650 1046 430 1046 q 999 882 868 1046 q 1120 505 1120 730 m 977 504 q 896 784 977 669 q 644 915 804 915 q 391 785 484 915 q 307 504 307 669 q 391 224 307 339 q 644 95 486 95 q 894 224 803 95 q 977 504 977 339 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 "},"Ή":{"x_min":0,"x_max":1158,"ha":1275,"o":"m 1158 0 l 1022 0 l 1022 475 l 496 475 l 496 0 l 356 0 l 356 1012 l 496 1012 l 496 599 l 1022 599 l 1022 1012 l 1158 1012 l 1158 0 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 "},"•":{"x_min":0,"x_max":663.890625,"ha":775,"o":"m 663 529 q 566 293 663 391 q 331 196 469 196 q 97 294 194 196 q 0 529 0 393 q 96 763 0 665 q 331 861 193 861 q 566 763 469 861 q 663 529 663 665 "},"¥":{"x_min":0.1875,"x_max":819.546875,"ha":886,"o":"m 563 561 l 697 561 l 696 487 l 520 487 l 482 416 l 482 380 l 697 380 l 695 308 l 482 308 l 482 0 l 342 0 l 342 308 l 125 308 l 125 380 l 342 380 l 342 417 l 303 487 l 125 487 l 125 561 l 258 561 l 0 1013 l 140 1013 l 411 533 l 679 1013 l 819 1013 l 563 561 "},"(":{"x_min":0,"x_max":318.0625,"ha":415,"o":"m 318 -290 l 230 -290 q 61 23 122 -142 q 0 365 0 190 q 62 712 0 540 q 230 1024 119 869 l 318 1024 q 175 705 219 853 q 125 360 125 542 q 176 22 125 187 q 318 -290 223 -127 "},"U":{"x_min":0,"x_max":796,"ha":904,"o":"m 796 393 q 681 93 796 212 q 386 -25 566 -25 q 101 95 208 -25 q 0 393 0 211 l 0 1013 l 138 1013 l 138 391 q 204 191 138 270 q 394 107 276 107 q 586 191 512 107 q 656 391 656 270 l 656 1013 l 796 1013 l 796 393 "},"γ":{"x_min":0.5,"x_max":744.953125,"ha":822,"o":"m 744 737 l 463 54 l 463 -278 l 338 -278 l 338 54 l 154 495 q 104 597 124 569 q 13 651 67 651 l 0 651 l 0 751 l 39 753 q 168 711 121 753 q 242 594 207 676 l 403 208 l 617 737 l 744 737 "},"α":{"x_min":0,"x_max":765.5625,"ha":809,"o":"m 765 -4 q 698 -14 726 -14 q 564 97 586 -14 q 466 7 525 40 q 337 -26 407 -26 q 88 98 186 -26 q 0 369 0 212 q 88 637 0 525 q 337 760 184 760 q 465 728 407 760 q 563 637 524 696 l 563 739 l 685 739 l 685 222 q 693 141 685 168 q 748 94 708 94 q 765 96 760 94 l 765 -4 m 584 371 q 531 562 584 485 q 360 653 470 653 q 192 566 254 653 q 135 379 135 489 q 186 181 135 261 q 358 84 247 84 q 528 176 465 84 q 584 371 584 260 "},"F":{"x_min":0,"x_max":683.328125,"ha":717,"o":"m 683 888 l 140 888 l 140 583 l 613 583 l 613 458 l 140 458 l 140 0 l 0 0 l 0 1013 l 683 1013 l 683 888 "},"­":{"x_min":0,"x_max":705.5625,"ha":803,"o":"m 705 334 l 0 334 l 0 410 l 705 410 l 705 334 "},":":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 "},"Χ":{"x_min":0,"x_max":854.171875,"ha":935,"o":"m 854 0 l 683 0 l 423 409 l 166 0 l 0 0 l 347 519 l 18 1013 l 186 1013 l 427 637 l 675 1013 l 836 1013 l 504 521 l 854 0 "},"*":{"x_min":116,"x_max":674,"ha":792,"o":"m 674 768 l 475 713 l 610 544 l 517 477 l 394 652 l 272 478 l 178 544 l 314 713 l 116 766 l 153 876 l 341 812 l 342 1013 l 446 1013 l 446 811 l 635 874 l 674 768 "},"†":{"x_min":0,"x_max":777,"ha":835,"o":"m 458 804 l 777 804 l 777 683 l 458 683 l 458 0 l 319 0 l 319 681 l 0 683 l 0 804 l 319 804 l 319 1015 l 458 1013 l 458 804 "},"°":{"x_min":0,"x_max":347,"ha":444,"o":"m 173 802 q 43 856 91 802 q 0 977 0 905 q 45 1101 0 1049 q 173 1153 90 1153 q 303 1098 255 1153 q 347 977 347 1049 q 303 856 347 905 q 173 802 256 802 m 173 884 q 238 910 214 884 q 262 973 262 937 q 239 1038 262 1012 q 173 1064 217 1064 q 108 1037 132 1064 q 85 973 85 1010 q 108 910 85 937 q 173 884 132 884 "},"V":{"x_min":0,"x_max":862.71875,"ha":940,"o":"m 862 1013 l 505 0 l 361 0 l 0 1013 l 143 1013 l 434 165 l 718 1012 l 862 1013 "},"Ξ":{"x_min":0,"x_max":734.71875,"ha":763,"o":"m 723 889 l 9 889 l 9 1013 l 723 1013 l 723 889 m 673 463 l 61 463 l 61 589 l 673 589 l 673 463 m 734 0 l 0 0 l 0 124 l 734 124 l 734 0 "}," ":{"x_min":0,"x_max":0,"ha":853},"Ϋ":{"x_min":0.328125,"x_max":819.515625,"ha":889,"o":"m 588 1046 l 460 1046 l 460 1189 l 588 1189 l 588 1046 m 360 1046 l 232 1046 l 232 1189 l 360 1189 l 360 1046 m 819 1012 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1012 l 140 1012 l 411 533 l 679 1012 l 819 1012 "},"0":{"x_min":73,"x_max":715,"ha":792,"o":"m 394 -29 q 153 129 242 -29 q 73 479 73 272 q 152 829 73 687 q 394 989 241 989 q 634 829 545 989 q 715 479 715 684 q 635 129 715 270 q 394 -29 546 -29 m 394 89 q 546 211 489 89 q 598 479 598 322 q 548 748 598 640 q 394 871 491 871 q 241 748 298 871 q 190 479 190 637 q 239 211 190 319 q 394 89 296 89 "},"”":{"x_min":0,"x_max":347,"ha":454,"o":"m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 m 347 851 q 310 737 347 784 q 208 669 273 690 l 208 734 q 267 787 250 741 q 280 873 280 821 l 208 873 l 208 1013 l 347 1013 l 347 851 "},"@":{"x_min":0,"x_max":1260,"ha":1357,"o":"m 1098 -45 q 877 -160 1001 -117 q 633 -203 752 -203 q 155 -29 327 -203 q 0 360 0 127 q 176 802 0 616 q 687 1008 372 1008 q 1123 854 969 1008 q 1260 517 1260 718 q 1155 216 1260 341 q 868 82 1044 82 q 772 106 801 82 q 737 202 737 135 q 647 113 700 144 q 527 82 594 82 q 367 147 420 82 q 314 312 314 212 q 401 565 314 452 q 639 690 498 690 q 810 588 760 690 l 849 668 l 938 668 q 877 441 900 532 q 833 226 833 268 q 853 182 833 198 q 902 167 873 167 q 1088 272 1012 167 q 1159 512 1159 372 q 1051 793 1159 681 q 687 925 925 925 q 248 747 415 925 q 97 361 97 586 q 226 26 97 159 q 627 -122 370 -122 q 856 -87 737 -122 q 1061 8 976 -53 l 1098 -45 m 786 488 q 738 580 777 545 q 643 615 700 615 q 483 517 548 615 q 425 322 425 430 q 457 203 425 250 q 552 156 490 156 q 722 273 665 156 q 786 488 738 309 "},"Ί":{"x_min":0,"x_max":499,"ha":613,"o":"m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 m 499 0 l 360 0 l 360 1012 l 499 1012 l 499 0 "},"i":{"x_min":14,"x_max":136,"ha":275,"o":"m 136 873 l 14 873 l 14 1013 l 136 1013 l 136 873 m 136 0 l 14 0 l 14 737 l 136 737 l 136 0 "},"Β":{"x_min":0,"x_max":778,"ha":877,"o":"m 580 545 q 724 468 671 534 q 778 310 778 402 q 673 83 778 170 q 432 0 575 0 l 0 0 l 0 1013 l 411 1013 q 629 957 541 1013 q 732 768 732 891 q 691 632 732 692 q 580 545 650 571 m 393 899 l 139 899 l 139 587 l 379 587 q 521 623 462 587 q 592 744 592 666 q 531 859 592 819 q 393 899 471 899 m 419 124 q 566 169 504 124 q 635 302 635 219 q 559 435 635 388 q 402 476 494 476 l 139 476 l 139 124 l 419 124 "},"υ":{"x_min":0,"x_max":617,"ha":725,"o":"m 617 352 q 540 94 617 199 q 308 -24 455 -24 q 76 94 161 -24 q 0 352 0 199 l 0 739 l 126 739 l 126 355 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 355 492 257 l 492 739 l 617 739 l 617 352 "},"]":{"x_min":0,"x_max":275,"ha":372,"o":"m 275 -281 l 0 -281 l 0 -187 l 151 -187 l 151 920 l 0 920 l 0 1013 l 275 1013 l 275 -281 "},"m":{"x_min":0,"x_max":1019,"ha":1128,"o":"m 1019 0 l 897 0 l 897 454 q 860 591 897 536 q 739 660 816 660 q 613 586 659 660 q 573 436 573 522 l 573 0 l 447 0 l 447 455 q 412 591 447 535 q 294 657 372 657 q 165 586 213 657 q 122 437 122 521 l 122 0 l 0 0 l 0 738 l 117 738 l 117 640 q 202 730 150 697 q 316 763 254 763 q 437 730 381 763 q 525 642 494 697 q 621 731 559 700 q 753 763 682 763 q 943 694 867 763 q 1019 512 1019 625 l 1019 0 "},"χ":{"x_min":8.328125,"x_max":780.5625,"ha":815,"o":"m 780 -278 q 715 -294 747 -294 q 616 -257 663 -294 q 548 -175 576 -227 l 379 133 l 143 -277 l 9 -277 l 313 254 l 163 522 q 127 586 131 580 q 36 640 91 640 q 8 637 27 640 l 8 752 l 52 757 q 162 719 113 757 q 236 627 200 690 l 383 372 l 594 737 l 726 737 l 448 250 l 625 -69 q 670 -153 647 -110 q 743 -188 695 -188 q 780 -184 759 -188 l 780 -278 "},"8":{"x_min":55,"x_max":736,"ha":792,"o":"m 571 527 q 694 424 652 491 q 736 280 736 358 q 648 71 736 158 q 395 -26 551 -26 q 142 69 238 -26 q 55 279 55 157 q 96 425 55 359 q 220 527 138 491 q 120 615 153 562 q 88 726 88 668 q 171 904 88 827 q 395 986 261 986 q 618 905 529 986 q 702 727 702 830 q 670 616 702 667 q 571 527 638 565 m 394 565 q 519 610 475 565 q 563 717 563 655 q 521 823 563 781 q 392 872 474 872 q 265 824 312 872 q 224 720 224 783 q 265 613 224 656 q 394 565 312 565 m 395 91 q 545 150 488 91 q 597 280 597 204 q 546 408 597 355 q 395 465 492 465 q 244 408 299 465 q 194 280 194 356 q 244 150 194 203 q 395 91 299 91 "},"ί":{"x_min":42,"x_max":326.71875,"ha":361,"o":"m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 737 l 167 737 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 102 239 101 q 284 112 257 104 l 284 3 m 326 1040 l 137 819 l 54 819 l 189 1040 l 326 1040 "},"Ζ":{"x_min":0,"x_max":779.171875,"ha":850,"o":"m 779 0 l 0 0 l 0 113 l 620 896 l 40 896 l 40 1013 l 779 1013 l 779 887 l 170 124 l 779 124 l 779 0 "},"R":{"x_min":0,"x_max":781.953125,"ha":907,"o":"m 781 0 l 623 0 q 587 242 590 52 q 407 433 585 433 l 138 433 l 138 0 l 0 0 l 0 1013 l 396 1013 q 636 946 539 1013 q 749 731 749 868 q 711 597 749 659 q 608 502 674 534 q 718 370 696 474 q 729 207 722 352 q 781 26 736 62 l 781 0 m 373 551 q 533 594 465 551 q 614 731 614 645 q 532 859 614 815 q 373 896 465 896 l 138 896 l 138 551 l 373 551 "},"o":{"x_min":0,"x_max":713,"ha":821,"o":"m 357 -25 q 94 91 194 -25 q 0 368 0 202 q 93 642 0 533 q 357 761 193 761 q 618 644 518 761 q 713 368 713 533 q 619 91 713 201 q 357 -25 521 -25 m 357 85 q 528 175 465 85 q 584 369 584 255 q 529 562 584 484 q 357 651 467 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 357 85 250 85 "},"5":{"x_min":54.171875,"x_max":738,"ha":792,"o":"m 738 314 q 626 60 738 153 q 382 -23 526 -23 q 155 47 248 -23 q 54 256 54 125 l 183 256 q 259 132 204 174 q 382 91 314 91 q 533 149 471 91 q 602 314 602 213 q 538 469 602 411 q 386 528 475 528 q 284 506 332 528 q 197 439 237 484 l 81 439 l 159 958 l 684 958 l 684 840 l 254 840 l 214 579 q 306 627 258 612 q 407 643 354 643 q 636 552 540 643 q 738 314 738 457 "},"7":{"x_min":58.71875,"x_max":730.953125,"ha":792,"o":"m 730 839 q 469 448 560 641 q 335 0 378 255 l 192 0 q 328 441 235 252 q 593 830 421 630 l 58 830 l 58 958 l 730 958 l 730 839 "},"K":{"x_min":0,"x_max":819.46875,"ha":906,"o":"m 819 0 l 649 0 l 294 509 l 139 355 l 139 0 l 0 0 l 0 1013 l 139 1013 l 139 526 l 626 1013 l 809 1013 l 395 600 l 819 0 "},",":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 -12 q 105 -132 142 -82 q 0 -205 68 -182 l 0 -138 q 57 -82 40 -124 q 70 0 70 -51 l 0 0 l 0 151 l 142 151 l 142 -12 "},"d":{"x_min":0,"x_max":683,"ha":796,"o":"m 683 0 l 564 0 l 564 93 q 456 6 516 38 q 327 -25 395 -25 q 87 100 181 -25 q 0 365 0 215 q 90 639 0 525 q 343 763 187 763 q 564 647 486 763 l 564 1013 l 683 1013 l 683 0 m 582 373 q 529 562 582 484 q 361 653 468 653 q 190 561 253 653 q 135 365 135 479 q 189 175 135 254 q 358 85 251 85 q 529 178 468 85 q 582 373 582 258 "},"¨":{"x_min":-109,"x_max":247,"ha":232,"o":"m 247 1046 l 119 1046 l 119 1189 l 247 1189 l 247 1046 m 19 1046 l -109 1046 l -109 1189 l 19 1189 l 19 1046 "},"E":{"x_min":0,"x_max":736.109375,"ha":789,"o":"m 736 0 l 0 0 l 0 1013 l 725 1013 l 725 889 l 139 889 l 139 585 l 677 585 l 677 467 l 139 467 l 139 125 l 736 125 l 736 0 "},"Y":{"x_min":0,"x_max":820,"ha":886,"o":"m 820 1013 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1013 l 140 1013 l 411 534 l 679 1012 l 820 1013 "},"\"":{"x_min":0,"x_max":299,"ha":396,"o":"m 299 606 l 203 606 l 203 988 l 299 988 l 299 606 m 96 606 l 0 606 l 0 988 l 96 988 l 96 606 "},"‹":{"x_min":17.984375,"x_max":773.609375,"ha":792,"o":"m 773 40 l 18 376 l 17 465 l 773 799 l 773 692 l 159 420 l 773 149 l 773 40 "},"„":{"x_min":0,"x_max":364,"ha":467,"o":"m 141 -12 q 104 -132 141 -82 q 0 -205 67 -182 l 0 -138 q 56 -82 40 -124 q 69 0 69 -51 l 0 0 l 0 151 l 141 151 l 141 -12 m 364 -12 q 327 -132 364 -82 q 222 -205 290 -182 l 222 -138 q 279 -82 262 -124 q 292 0 292 -51 l 222 0 l 222 151 l 364 151 l 364 -12 "},"δ":{"x_min":1,"x_max":710,"ha":810,"o":"m 710 360 q 616 87 710 196 q 356 -28 518 -28 q 99 82 197 -28 q 1 356 1 192 q 100 606 1 509 q 355 703 199 703 q 180 829 288 754 q 70 903 124 866 l 70 1012 l 643 1012 l 643 901 l 258 901 q 462 763 422 794 q 636 592 577 677 q 710 360 710 485 m 584 365 q 552 501 584 447 q 451 602 521 555 q 372 611 411 611 q 197 541 258 611 q 136 355 136 472 q 190 171 136 245 q 358 85 252 85 q 528 173 465 85 q 584 365 584 252 "},"έ":{"x_min":0,"x_max":634.71875,"ha":714,"o":"m 634 234 q 527 38 634 110 q 300 -25 433 -25 q 98 29 183 -25 q 0 204 0 93 q 37 313 0 265 q 128 390 67 352 q 56 459 82 419 q 26 555 26 505 q 114 712 26 654 q 295 763 191 763 q 499 700 416 763 q 589 515 589 631 l 478 515 q 419 618 464 580 q 307 657 374 657 q 207 630 253 657 q 151 547 151 598 q 238 445 151 469 q 389 434 280 434 l 389 331 l 349 331 q 206 315 255 331 q 125 210 125 287 q 183 107 125 145 q 302 76 233 76 q 436 117 379 76 q 509 234 493 159 l 634 234 m 520 1040 l 331 819 l 248 819 l 383 1040 l 520 1040 "},"ω":{"x_min":0,"x_max":922,"ha":1031,"o":"m 922 339 q 856 97 922 203 q 650 -26 780 -26 q 538 9 587 -26 q 461 103 489 44 q 387 12 436 46 q 277 -22 339 -22 q 69 97 147 -22 q 0 339 0 203 q 45 551 0 444 q 161 738 84 643 l 302 738 q 175 553 219 647 q 124 336 124 446 q 155 179 124 249 q 275 88 197 88 q 375 163 341 88 q 400 294 400 219 l 400 572 l 524 572 l 524 294 q 561 135 524 192 q 643 88 591 88 q 762 182 719 88 q 797 342 797 257 q 745 556 797 450 q 619 738 705 638 l 760 738 q 874 551 835 640 q 922 339 922 444 "},"´":{"x_min":0,"x_max":96,"ha":251,"o":"m 96 606 l 0 606 l 0 988 l 96 988 l 96 606 "},"±":{"x_min":11,"x_max":781,"ha":792,"o":"m 781 490 l 446 490 l 446 255 l 349 255 l 349 490 l 11 490 l 11 586 l 349 586 l 349 819 l 446 819 l 446 586 l 781 586 l 781 490 m 781 21 l 11 21 l 11 115 l 781 115 l 781 21 "},"|":{"x_min":343,"x_max":449,"ha":792,"o":"m 449 462 l 343 462 l 343 986 l 449 986 l 449 462 m 449 -242 l 343 -242 l 343 280 l 449 280 l 449 -242 "},"ϋ":{"x_min":0,"x_max":617,"ha":725,"o":"m 482 800 l 372 800 l 372 925 l 482 925 l 482 800 m 239 800 l 129 800 l 129 925 l 239 925 l 239 800 m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 "},"§":{"x_min":0,"x_max":593,"ha":690,"o":"m 593 425 q 554 312 593 369 q 467 233 516 254 q 537 83 537 172 q 459 -74 537 -12 q 288 -133 387 -133 q 115 -69 184 -133 q 47 96 47 -6 l 166 96 q 199 7 166 40 q 288 -26 232 -26 q 371 -5 332 -26 q 420 60 420 21 q 311 201 420 139 q 108 309 210 255 q 0 490 0 383 q 33 602 0 551 q 124 687 66 654 q 75 743 93 712 q 58 812 58 773 q 133 984 58 920 q 300 1043 201 1043 q 458 987 394 1043 q 529 814 529 925 l 411 814 q 370 908 404 877 q 289 939 336 939 q 213 911 246 939 q 180 841 180 883 q 286 720 180 779 q 484 612 480 615 q 593 425 593 534 m 467 409 q 355 544 467 473 q 196 630 228 612 q 146 587 162 609 q 124 525 124 558 q 239 387 124 462 q 398 298 369 315 q 448 345 429 316 q 467 409 467 375 "},"b":{"x_min":0,"x_max":685,"ha":783,"o":"m 685 372 q 597 99 685 213 q 347 -25 501 -25 q 219 5 277 -25 q 121 93 161 36 l 121 0 l 0 0 l 0 1013 l 121 1013 l 121 634 q 214 723 157 692 q 341 754 272 754 q 591 637 493 754 q 685 372 685 526 m 554 356 q 499 550 554 470 q 328 644 437 644 q 162 556 223 644 q 108 369 108 478 q 160 176 108 256 q 330 83 221 83 q 498 169 435 83 q 554 356 554 245 "},"q":{"x_min":0,"x_max":683,"ha":876,"o":"m 683 -278 l 564 -278 l 564 97 q 474 8 533 39 q 345 -23 415 -23 q 91 93 188 -23 q 0 364 0 203 q 87 635 0 522 q 337 760 184 760 q 466 727 408 760 q 564 637 523 695 l 564 737 l 683 737 l 683 -278 m 582 375 q 527 564 582 488 q 358 652 466 652 q 190 565 253 652 q 135 377 135 488 q 189 179 135 261 q 361 84 251 84 q 530 179 469 84 q 582 375 582 260 "},"Ω":{"x_min":-0.171875,"x_max":969.5625,"ha":1068,"o":"m 969 0 l 555 0 l 555 123 q 744 308 675 194 q 814 558 814 423 q 726 812 814 709 q 484 922 633 922 q 244 820 334 922 q 154 567 154 719 q 223 316 154 433 q 412 123 292 199 l 412 0 l 0 0 l 0 124 l 217 124 q 68 327 122 210 q 15 572 15 444 q 144 911 15 781 q 484 1041 274 1041 q 822 909 691 1041 q 953 569 953 777 q 899 326 953 443 q 750 124 846 210 l 969 124 l 969 0 "},"ύ":{"x_min":0,"x_max":617,"ha":725,"o":"m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 m 535 1040 l 346 819 l 262 819 l 397 1040 l 535 1040 "},"z":{"x_min":-0.015625,"x_max":613.890625,"ha":697,"o":"m 613 0 l 0 0 l 0 100 l 433 630 l 20 630 l 20 738 l 594 738 l 593 636 l 163 110 l 613 110 l 613 0 "},"™":{"x_min":0,"x_max":894,"ha":1000,"o":"m 389 951 l 229 951 l 229 503 l 160 503 l 160 951 l 0 951 l 0 1011 l 389 1011 l 389 951 m 894 503 l 827 503 l 827 939 l 685 503 l 620 503 l 481 937 l 481 503 l 417 503 l 417 1011 l 517 1011 l 653 580 l 796 1010 l 894 1011 l 894 503 "},"ή":{"x_min":0.78125,"x_max":697,"ha":810,"o":"m 697 -278 l 572 -278 l 572 454 q 540 587 572 536 q 425 650 501 650 q 271 579 337 650 q 206 420 206 509 l 206 0 l 81 0 l 81 489 q 73 588 81 562 q 0 644 56 644 l 0 741 q 68 755 38 755 q 158 721 124 755 q 200 630 193 687 q 297 726 234 692 q 434 761 359 761 q 620 692 544 761 q 697 516 697 624 l 697 -278 m 479 1040 l 290 819 l 207 819 l 341 1040 l 479 1040 "},"Θ":{"x_min":0,"x_max":960,"ha":1056,"o":"m 960 507 q 833 129 960 280 q 476 -32 698 -32 q 123 129 255 -32 q 0 507 0 280 q 123 883 0 732 q 476 1045 255 1045 q 832 883 696 1045 q 960 507 960 732 m 817 500 q 733 789 817 669 q 476 924 639 924 q 223 792 317 924 q 142 507 142 675 q 222 222 142 339 q 476 89 315 89 q 730 218 636 89 q 817 500 817 334 m 716 449 l 243 449 l 243 571 l 716 571 l 716 449 "},"®":{"x_min":-3,"x_max":1008,"ha":1106,"o":"m 503 532 q 614 562 566 532 q 672 658 672 598 q 614 747 672 716 q 503 772 569 772 l 338 772 l 338 532 l 503 532 m 502 -7 q 123 151 263 -7 q -3 501 -3 294 q 123 851 -3 706 q 502 1011 263 1011 q 881 851 739 1011 q 1008 501 1008 708 q 883 151 1008 292 q 502 -7 744 -7 m 502 60 q 830 197 709 60 q 940 501 940 322 q 831 805 940 681 q 502 944 709 944 q 174 805 296 944 q 65 501 65 680 q 173 197 65 320 q 502 60 294 60 m 788 146 l 678 146 q 653 316 655 183 q 527 449 652 449 l 338 449 l 338 146 l 241 146 l 241 854 l 518 854 q 688 808 621 854 q 766 658 766 755 q 739 563 766 607 q 668 497 713 519 q 751 331 747 472 q 788 164 756 190 l 788 146 "},"~":{"x_min":0,"x_max":833,"ha":931,"o":"m 833 958 q 778 753 833 831 q 594 665 716 665 q 402 761 502 665 q 240 857 302 857 q 131 795 166 857 q 104 665 104 745 l 0 665 q 54 867 0 789 q 237 958 116 958 q 429 861 331 958 q 594 765 527 765 q 704 827 670 765 q 729 958 729 874 l 833 958 "},"Ε":{"x_min":0,"x_max":736.21875,"ha":778,"o":"m 736 0 l 0 0 l 0 1013 l 725 1013 l 725 889 l 139 889 l 139 585 l 677 585 l 677 467 l 139 467 l 139 125 l 736 125 l 736 0 "},"³":{"x_min":0,"x_max":450,"ha":547,"o":"m 450 552 q 379 413 450 464 q 220 366 313 366 q 69 414 130 366 q 0 567 0 470 l 85 567 q 126 470 85 504 q 225 437 168 437 q 320 467 280 437 q 360 552 360 498 q 318 632 360 608 q 213 657 276 657 q 195 657 203 657 q 176 657 181 657 l 176 722 q 279 733 249 722 q 334 815 334 752 q 300 881 334 856 q 220 907 267 907 q 133 875 169 907 q 97 781 97 844 l 15 781 q 78 926 15 875 q 220 972 135 972 q 364 930 303 972 q 426 817 426 888 q 344 697 426 733 q 421 642 392 681 q 450 552 450 603 "},"[":{"x_min":0,"x_max":273.609375,"ha":371,"o":"m 273 -281 l 0 -281 l 0 1013 l 273 1013 l 273 920 l 124 920 l 124 -187 l 273 -187 l 273 -281 "},"L":{"x_min":0,"x_max":645.828125,"ha":696,"o":"m 645 0 l 0 0 l 0 1013 l 140 1013 l 140 126 l 645 126 l 645 0 "},"σ":{"x_min":0,"x_max":803.390625,"ha":894,"o":"m 803 628 l 633 628 q 713 368 713 512 q 618 93 713 204 q 357 -25 518 -25 q 94 91 194 -25 q 0 368 0 201 q 94 644 0 533 q 356 761 194 761 q 481 750 398 761 q 608 739 564 739 l 803 739 l 803 628 m 360 85 q 529 180 467 85 q 584 374 584 262 q 527 566 584 490 q 352 651 463 651 q 187 559 247 651 q 135 368 135 478 q 189 175 135 254 q 360 85 251 85 "},"ζ":{"x_min":0,"x_max":573,"ha":642,"o":"m 573 -40 q 553 -162 573 -97 q 510 -278 543 -193 l 400 -278 q 441 -187 428 -219 q 462 -90 462 -132 q 378 -14 462 -14 q 108 45 197 -14 q 0 290 0 117 q 108 631 0 462 q 353 901 194 767 l 55 901 l 55 1012 l 561 1012 l 561 924 q 261 669 382 831 q 128 301 128 489 q 243 117 128 149 q 458 98 350 108 q 573 -40 573 80 "},"θ":{"x_min":0,"x_max":674,"ha":778,"o":"m 674 496 q 601 160 674 304 q 336 -26 508 -26 q 73 153 165 -26 q 0 485 0 296 q 72 840 0 683 q 343 1045 166 1045 q 605 844 516 1045 q 674 496 674 692 m 546 579 q 498 798 546 691 q 336 935 437 935 q 178 798 237 935 q 126 579 137 701 l 546 579 m 546 475 l 126 475 q 170 233 126 348 q 338 80 230 80 q 504 233 447 80 q 546 475 546 346 "},"Ο":{"x_min":0,"x_max":958,"ha":1054,"o":"m 485 1042 q 834 883 703 1042 q 958 511 958 735 q 834 136 958 287 q 481 -26 701 -26 q 126 130 261 -26 q 0 504 0 279 q 127 880 0 729 q 485 1042 263 1042 m 480 98 q 731 225 638 98 q 815 504 815 340 q 733 783 815 670 q 480 913 640 913 q 226 785 321 913 q 142 504 142 671 q 226 224 142 339 q 480 98 319 98 "},"Γ":{"x_min":0,"x_max":705.28125,"ha":749,"o":"m 705 886 l 140 886 l 140 0 l 0 0 l 0 1012 l 705 1012 l 705 886 "}," ":{"x_min":0,"x_max":0,"ha":375},"%":{"x_min":-3,"x_max":1089,"ha":1186,"o":"m 845 0 q 663 76 731 0 q 602 244 602 145 q 661 412 602 344 q 845 489 728 489 q 1027 412 959 489 q 1089 244 1089 343 q 1029 76 1089 144 q 845 0 962 0 m 844 103 q 945 143 909 103 q 981 243 981 184 q 947 340 981 301 q 844 385 909 385 q 744 342 781 385 q 708 243 708 300 q 741 147 708 186 q 844 103 780 103 m 888 986 l 284 -25 l 199 -25 l 803 986 l 888 986 m 241 468 q 58 545 126 468 q -3 715 -3 615 q 56 881 -3 813 q 238 958 124 958 q 421 881 353 958 q 483 712 483 813 q 423 544 483 612 q 241 468 356 468 m 241 855 q 137 811 175 855 q 100 710 100 768 q 136 612 100 653 q 240 572 172 572 q 344 614 306 572 q 382 713 382 656 q 347 810 382 771 q 241 855 308 855 "},"P":{"x_min":0,"x_max":726,"ha":806,"o":"m 424 1013 q 640 931 555 1013 q 726 719 726 850 q 637 506 726 587 q 413 426 548 426 l 140 426 l 140 0 l 0 0 l 0 1013 l 424 1013 m 379 889 l 140 889 l 140 548 l 372 548 q 522 589 459 548 q 593 720 593 637 q 528 845 593 801 q 379 889 463 889 "},"Έ":{"x_min":0,"x_max":1078.21875,"ha":1118,"o":"m 1078 0 l 342 0 l 342 1013 l 1067 1013 l 1067 889 l 481 889 l 481 585 l 1019 585 l 1019 467 l 481 467 l 481 125 l 1078 125 l 1078 0 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 "},"Ώ":{"x_min":0.125,"x_max":1136.546875,"ha":1235,"o":"m 1136 0 l 722 0 l 722 123 q 911 309 842 194 q 981 558 981 423 q 893 813 981 710 q 651 923 800 923 q 411 821 501 923 q 321 568 321 720 q 390 316 321 433 q 579 123 459 200 l 579 0 l 166 0 l 166 124 l 384 124 q 235 327 289 210 q 182 572 182 444 q 311 912 182 782 q 651 1042 441 1042 q 989 910 858 1042 q 1120 569 1120 778 q 1066 326 1120 443 q 917 124 1013 210 l 1136 124 l 1136 0 m 277 1040 l 83 800 l 0 800 l 140 1041 l 277 1040 "},"_":{"x_min":0,"x_max":705.5625,"ha":803,"o":"m 705 -334 l 0 -334 l 0 -234 l 705 -234 l 705 -334 "},"Ϊ":{"x_min":-110,"x_max":246,"ha":275,"o":"m 246 1046 l 118 1046 l 118 1189 l 246 1189 l 246 1046 m 18 1046 l -110 1046 l -110 1189 l 18 1189 l 18 1046 m 136 0 l 0 0 l 0 1012 l 136 1012 l 136 0 "},"+":{"x_min":23,"x_max":768,"ha":792,"o":"m 768 372 l 444 372 l 444 0 l 347 0 l 347 372 l 23 372 l 23 468 l 347 468 l 347 840 l 444 840 l 444 468 l 768 468 l 768 372 "},"½":{"x_min":0,"x_max":1050,"ha":1149,"o":"m 1050 0 l 625 0 q 712 178 625 108 q 878 277 722 187 q 967 385 967 328 q 932 456 967 429 q 850 484 897 484 q 759 450 798 484 q 721 352 721 416 l 640 352 q 706 502 640 448 q 851 551 766 551 q 987 509 931 551 q 1050 385 1050 462 q 976 251 1050 301 q 829 179 902 215 q 717 68 740 133 l 1050 68 l 1050 0 m 834 985 l 215 -28 l 130 -28 l 750 984 l 834 985 m 224 422 l 142 422 l 142 811 l 0 811 l 0 867 q 104 889 62 867 q 164 973 157 916 l 224 973 l 224 422 "},"Ρ":{"x_min":0,"x_max":720,"ha":783,"o":"m 424 1013 q 637 933 554 1013 q 720 723 720 853 q 633 508 720 591 q 413 426 546 426 l 140 426 l 140 0 l 0 0 l 0 1013 l 424 1013 m 378 889 l 140 889 l 140 548 l 371 548 q 521 589 458 548 q 592 720 592 637 q 527 845 592 801 q 378 889 463 889 "},"'":{"x_min":0,"x_max":139,"ha":236,"o":"m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 "},"ª":{"x_min":0,"x_max":350,"ha":397,"o":"m 350 625 q 307 616 328 616 q 266 631 281 616 q 247 673 251 645 q 190 628 225 644 q 116 613 156 613 q 32 641 64 613 q 0 722 0 669 q 72 826 0 800 q 247 866 159 846 l 247 887 q 220 934 247 916 q 162 953 194 953 q 104 934 129 953 q 76 882 80 915 l 16 882 q 60 976 16 941 q 166 1011 104 1011 q 266 979 224 1011 q 308 891 308 948 l 308 706 q 311 679 308 688 q 331 670 315 670 l 350 672 l 350 625 m 247 757 l 247 811 q 136 790 175 798 q 64 726 64 773 q 83 682 64 697 q 132 667 103 667 q 207 690 174 667 q 247 757 247 718 "},"΅":{"x_min":0,"x_max":450,"ha":553,"o":"m 450 800 l 340 800 l 340 925 l 450 925 l 450 800 m 406 1040 l 212 800 l 129 800 l 269 1040 l 406 1040 m 110 800 l 0 800 l 0 925 l 110 925 l 110 800 "},"T":{"x_min":0,"x_max":777,"ha":835,"o":"m 777 894 l 458 894 l 458 0 l 319 0 l 319 894 l 0 894 l 0 1013 l 777 1013 l 777 894 "},"Φ":{"x_min":0,"x_max":915,"ha":997,"o":"m 527 0 l 389 0 l 389 122 q 110 231 220 122 q 0 509 0 340 q 110 785 0 677 q 389 893 220 893 l 389 1013 l 527 1013 l 527 893 q 804 786 693 893 q 915 509 915 679 q 805 231 915 341 q 527 122 696 122 l 527 0 m 527 226 q 712 310 641 226 q 779 507 779 389 q 712 705 779 627 q 527 787 641 787 l 527 226 m 389 226 l 389 787 q 205 698 275 775 q 136 505 136 620 q 206 308 136 391 q 389 226 276 226 "},"⁋":{"x_min":0,"x_max":0,"ha":694},"j":{"x_min":-77.78125,"x_max":167,"ha":349,"o":"m 167 871 l 42 871 l 42 1013 l 167 1013 l 167 871 m 167 -80 q 121 -231 167 -184 q -26 -278 76 -278 l -77 -278 l -77 -164 l -41 -164 q 26 -143 11 -164 q 42 -65 42 -122 l 42 737 l 167 737 l 167 -80 "},"Σ":{"x_min":0,"x_max":756.953125,"ha":819,"o":"m 756 0 l 0 0 l 0 107 l 395 523 l 22 904 l 22 1013 l 745 1013 l 745 889 l 209 889 l 566 523 l 187 125 l 756 125 l 756 0 "},"1":{"x_min":215.671875,"x_max":574,"ha":792,"o":"m 574 0 l 442 0 l 442 697 l 215 697 l 215 796 q 386 833 330 796 q 475 986 447 875 l 574 986 l 574 0 "},"›":{"x_min":18.0625,"x_max":774,"ha":792,"o":"m 774 376 l 18 40 l 18 149 l 631 421 l 18 692 l 18 799 l 774 465 l 774 376 "},"<":{"x_min":17.984375,"x_max":773.609375,"ha":792,"o":"m 773 40 l 18 376 l 17 465 l 773 799 l 773 692 l 159 420 l 773 149 l 773 40 "},"£":{"x_min":0,"x_max":704.484375,"ha":801,"o":"m 704 41 q 623 -10 664 5 q 543 -26 583 -26 q 359 15 501 -26 q 243 36 288 36 q 158 23 197 36 q 73 -21 119 10 l 6 76 q 125 195 90 150 q 175 331 175 262 q 147 443 175 383 l 0 443 l 0 512 l 108 512 q 43 734 43 623 q 120 929 43 854 q 358 1010 204 1010 q 579 936 487 1010 q 678 729 678 857 l 678 684 l 552 684 q 504 838 552 780 q 362 896 457 896 q 216 852 263 896 q 176 747 176 815 q 199 627 176 697 q 248 512 217 574 l 468 512 l 468 443 l 279 443 q 297 356 297 398 q 230 194 297 279 q 153 107 211 170 q 227 133 190 125 q 293 142 264 142 q 410 119 339 142 q 516 96 482 96 q 579 105 550 96 q 648 142 608 115 l 704 41 "},"t":{"x_min":0,"x_max":367,"ha":458,"o":"m 367 0 q 312 -5 339 -2 q 262 -8 284 -8 q 145 28 183 -8 q 108 143 108 64 l 108 638 l 0 638 l 0 738 l 108 738 l 108 944 l 232 944 l 232 738 l 367 738 l 367 638 l 232 638 l 232 185 q 248 121 232 140 q 307 102 264 102 q 345 104 330 102 q 367 107 360 107 l 367 0 "},"¬":{"x_min":0,"x_max":706,"ha":803,"o":"m 706 411 l 706 158 l 630 158 l 630 335 l 0 335 l 0 411 l 706 411 "},"λ":{"x_min":0,"x_max":750,"ha":803,"o":"m 750 -7 q 679 -15 716 -15 q 538 59 591 -15 q 466 214 512 97 l 336 551 l 126 0 l 0 0 l 270 705 q 223 837 247 770 q 116 899 190 899 q 90 898 100 899 l 90 1004 q 152 1011 125 1011 q 298 938 244 1011 q 373 783 326 901 l 605 192 q 649 115 629 136 q 716 95 669 95 l 736 95 q 750 97 745 97 l 750 -7 "},"W":{"x_min":0,"x_max":1263.890625,"ha":1351,"o":"m 1263 1013 l 995 0 l 859 0 l 627 837 l 405 0 l 265 0 l 0 1013 l 136 1013 l 342 202 l 556 1013 l 701 1013 l 921 207 l 1133 1012 l 1263 1013 "},">":{"x_min":18.0625,"x_max":774,"ha":792,"o":"m 774 376 l 18 40 l 18 149 l 631 421 l 18 692 l 18 799 l 774 465 l 774 376 "},"v":{"x_min":0,"x_max":675.15625,"ha":761,"o":"m 675 738 l 404 0 l 272 0 l 0 738 l 133 737 l 340 147 l 541 737 l 675 738 "},"τ":{"x_min":0.28125,"x_max":644.5,"ha":703,"o":"m 644 628 l 382 628 l 382 179 q 388 120 382 137 q 436 91 401 91 q 474 94 447 91 q 504 97 501 97 l 504 0 q 454 -9 482 -5 q 401 -14 426 -14 q 278 67 308 -14 q 260 233 260 118 l 260 628 l 0 628 l 0 739 l 644 739 l 644 628 "},"ξ":{"x_min":0,"x_max":624.9375,"ha":699,"o":"m 624 -37 q 608 -153 624 -96 q 563 -278 593 -211 l 454 -278 q 491 -183 486 -200 q 511 -83 511 -126 q 484 -23 511 -44 q 370 1 452 1 q 323 0 354 1 q 283 -1 293 -1 q 84 76 169 -1 q 0 266 0 154 q 56 431 0 358 q 197 538 108 498 q 94 613 134 562 q 54 730 54 665 q 77 823 54 780 q 143 901 101 867 l 27 901 l 27 1012 l 576 1012 l 576 901 l 380 901 q 244 863 303 901 q 178 745 178 820 q 312 600 178 636 q 532 582 380 582 l 532 479 q 276 455 361 479 q 118 281 118 410 q 165 173 118 217 q 274 120 208 133 q 494 101 384 110 q 624 -37 624 76 "},"&":{"x_min":-3,"x_max":894.25,"ha":992,"o":"m 894 0 l 725 0 l 624 123 q 471 0 553 40 q 306 -41 390 -41 q 168 -7 231 -41 q 62 92 105 26 q 14 187 31 139 q -3 276 -3 235 q 55 433 -3 358 q 248 581 114 508 q 170 689 196 640 q 137 817 137 751 q 214 985 137 922 q 384 1041 284 1041 q 548 988 483 1041 q 622 824 622 928 q 563 666 622 739 q 431 556 516 608 l 621 326 q 649 407 639 361 q 663 493 653 426 l 781 493 q 703 229 781 352 l 894 0 m 504 818 q 468 908 504 877 q 384 940 433 940 q 293 907 331 940 q 255 818 255 875 q 289 714 255 767 q 363 628 313 678 q 477 729 446 682 q 504 818 504 771 m 556 209 l 314 499 q 179 395 223 449 q 135 283 135 341 q 146 222 135 253 q 183 158 158 192 q 333 80 241 80 q 556 209 448 80 "},"Λ":{"x_min":0,"x_max":862.5,"ha":942,"o":"m 862 0 l 719 0 l 426 847 l 143 0 l 0 0 l 356 1013 l 501 1013 l 862 0 "},"I":{"x_min":41,"x_max":180,"ha":293,"o":"m 180 0 l 41 0 l 41 1013 l 180 1013 l 180 0 "},"G":{"x_min":0,"x_max":921,"ha":1011,"o":"m 921 0 l 832 0 l 801 136 q 655 15 741 58 q 470 -28 568 -28 q 126 133 259 -28 q 0 499 0 284 q 125 881 0 731 q 486 1043 259 1043 q 763 957 647 1043 q 905 709 890 864 l 772 709 q 668 866 747 807 q 486 926 589 926 q 228 795 322 926 q 142 507 142 677 q 228 224 142 342 q 483 94 323 94 q 712 195 625 94 q 796 435 796 291 l 477 435 l 477 549 l 921 549 l 921 0 "},"ΰ":{"x_min":0,"x_max":617,"ha":725,"o":"m 524 800 l 414 800 l 414 925 l 524 925 l 524 800 m 183 800 l 73 800 l 73 925 l 183 925 l 183 800 m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 m 489 1040 l 300 819 l 216 819 l 351 1040 l 489 1040 "},"`":{"x_min":0,"x_max":138.890625,"ha":236,"o":"m 138 699 l 0 699 l 0 861 q 36 974 0 929 q 138 1041 72 1020 l 138 977 q 82 931 95 969 q 69 839 69 893 l 138 839 l 138 699 "},"·":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 "},"Υ":{"x_min":0.328125,"x_max":819.515625,"ha":889,"o":"m 819 1013 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1013 l 140 1013 l 411 533 l 679 1013 l 819 1013 "},"r":{"x_min":0,"x_max":355.5625,"ha":432,"o":"m 355 621 l 343 621 q 179 569 236 621 q 122 411 122 518 l 122 0 l 0 0 l 0 737 l 117 737 l 117 604 q 204 719 146 686 q 355 753 262 753 l 355 621 "},"x":{"x_min":0,"x_max":675,"ha":764,"o":"m 675 0 l 525 0 l 331 286 l 144 0 l 0 0 l 256 379 l 12 738 l 157 737 l 336 473 l 516 738 l 661 738 l 412 380 l 675 0 "},"μ":{"x_min":0,"x_max":696.609375,"ha":747,"o":"m 696 -4 q 628 -14 657 -14 q 498 97 513 -14 q 422 8 470 41 q 313 -24 374 -24 q 207 3 258 -24 q 120 80 157 31 l 120 -278 l 0 -278 l 0 738 l 124 738 l 124 343 q 165 172 124 246 q 308 82 216 82 q 451 177 402 82 q 492 358 492 254 l 492 738 l 616 738 l 616 214 q 623 136 616 160 q 673 92 636 92 q 696 95 684 92 l 696 -4 "},"h":{"x_min":0,"x_max":615,"ha":724,"o":"m 615 472 l 615 0 l 490 0 l 490 454 q 456 590 490 535 q 338 654 416 654 q 186 588 251 654 q 122 436 122 522 l 122 0 l 0 0 l 0 1013 l 122 1013 l 122 633 q 218 727 149 694 q 362 760 287 760 q 552 676 484 760 q 615 472 615 600 "},".":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 "},"φ":{"x_min":-2,"x_max":878,"ha":974,"o":"m 496 -279 l 378 -279 l 378 -17 q 101 88 204 -17 q -2 367 -2 194 q 68 626 -2 510 q 283 758 151 758 l 283 646 q 167 537 209 626 q 133 373 133 462 q 192 177 133 254 q 378 93 259 93 l 378 758 q 445 764 426 763 q 476 765 464 765 q 765 659 653 765 q 878 377 878 553 q 771 96 878 209 q 496 -17 665 -17 l 496 -279 m 496 93 l 514 93 q 687 183 623 93 q 746 380 746 265 q 691 569 746 491 q 522 658 629 658 l 496 656 l 496 93 "},";":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 m 142 -12 q 105 -132 142 -82 q 0 -206 68 -182 l 0 -138 q 58 -82 43 -123 q 68 0 68 -56 l 0 0 l 0 151 l 142 151 l 142 -12 "},"f":{"x_min":0,"x_max":378,"ha":472,"o":"m 378 638 l 246 638 l 246 0 l 121 0 l 121 638 l 0 638 l 0 738 l 121 738 q 137 935 121 887 q 290 1028 171 1028 q 320 1027 305 1028 q 378 1021 334 1026 l 378 908 q 323 918 346 918 q 257 870 273 918 q 246 780 246 840 l 246 738 l 378 738 l 378 638 "},"“":{"x_min":1,"x_max":348.21875,"ha":454,"o":"m 140 670 l 1 670 l 1 830 q 37 943 1 897 q 140 1011 74 990 l 140 947 q 82 900 97 940 q 68 810 68 861 l 140 810 l 140 670 m 348 670 l 209 670 l 209 830 q 245 943 209 897 q 348 1011 282 990 l 348 947 q 290 900 305 940 q 276 810 276 861 l 348 810 l 348 670 "},"A":{"x_min":0.03125,"x_max":906.953125,"ha":1008,"o":"m 906 0 l 756 0 l 648 303 l 251 303 l 142 0 l 0 0 l 376 1013 l 529 1013 l 906 0 m 610 421 l 452 867 l 293 421 l 610 421 "},"6":{"x_min":53,"x_max":739,"ha":792,"o":"m 739 312 q 633 62 739 162 q 400 -31 534 -31 q 162 78 257 -31 q 53 439 53 206 q 178 859 53 712 q 441 986 284 986 q 643 912 559 986 q 732 713 732 833 l 601 713 q 544 830 594 786 q 426 875 494 875 q 268 793 331 875 q 193 517 193 697 q 301 597 240 570 q 427 624 362 624 q 643 540 552 624 q 739 312 739 451 m 603 298 q 540 461 603 400 q 404 516 484 516 q 268 461 323 516 q 207 300 207 401 q 269 137 207 198 q 405 83 325 83 q 541 137 486 83 q 603 298 603 197 "},"‘":{"x_min":1,"x_max":139.890625,"ha":236,"o":"m 139 670 l 1 670 l 1 830 q 37 943 1 897 q 139 1011 74 990 l 139 947 q 82 900 97 940 q 68 810 68 861 l 139 810 l 139 670 "},"ϊ":{"x_min":-70,"x_max":283,"ha":361,"o":"m 283 800 l 173 800 l 173 925 l 283 925 l 283 800 m 40 800 l -70 800 l -70 925 l 40 925 l 40 800 m 283 3 q 232 -10 257 -5 q 181 -15 206 -15 q 84 26 118 -15 q 41 200 41 79 l 41 737 l 166 737 l 167 215 q 171 141 167 157 q 225 101 182 101 q 247 103 238 101 q 283 112 256 104 l 283 3 "},"π":{"x_min":-0.21875,"x_max":773.21875,"ha":857,"o":"m 773 -7 l 707 -11 q 575 40 607 -11 q 552 174 552 77 l 552 226 l 552 626 l 222 626 l 222 0 l 97 0 l 97 626 l 0 626 l 0 737 l 773 737 l 773 626 l 676 626 l 676 171 q 695 103 676 117 q 773 90 714 90 l 773 -7 "},"ά":{"x_min":0,"x_max":765.5625,"ha":809,"o":"m 765 -4 q 698 -14 726 -14 q 564 97 586 -14 q 466 7 525 40 q 337 -26 407 -26 q 88 98 186 -26 q 0 369 0 212 q 88 637 0 525 q 337 760 184 760 q 465 727 407 760 q 563 637 524 695 l 563 738 l 685 738 l 685 222 q 693 141 685 168 q 748 94 708 94 q 765 95 760 94 l 765 -4 m 584 371 q 531 562 584 485 q 360 653 470 653 q 192 566 254 653 q 135 379 135 489 q 186 181 135 261 q 358 84 247 84 q 528 176 465 84 q 584 371 584 260 m 604 1040 l 415 819 l 332 819 l 466 1040 l 604 1040 "},"O":{"x_min":0,"x_max":958,"ha":1057,"o":"m 485 1041 q 834 882 702 1041 q 958 512 958 734 q 834 136 958 287 q 481 -26 702 -26 q 126 130 261 -26 q 0 504 0 279 q 127 880 0 728 q 485 1041 263 1041 m 480 98 q 731 225 638 98 q 815 504 815 340 q 733 783 815 669 q 480 912 640 912 q 226 784 321 912 q 142 504 142 670 q 226 224 142 339 q 480 98 319 98 "},"n":{"x_min":0,"x_max":615,"ha":724,"o":"m 615 463 l 615 0 l 490 0 l 490 454 q 453 592 490 537 q 331 656 410 656 q 178 585 240 656 q 117 421 117 514 l 117 0 l 0 0 l 0 738 l 117 738 l 117 630 q 218 728 150 693 q 359 764 286 764 q 552 675 484 764 q 615 463 615 593 "},"3":{"x_min":54,"x_max":737,"ha":792,"o":"m 737 284 q 635 55 737 141 q 399 -25 541 -25 q 156 52 248 -25 q 54 308 54 140 l 185 308 q 245 147 185 202 q 395 96 302 96 q 539 140 484 96 q 602 280 602 190 q 510 429 602 390 q 324 454 451 454 l 324 565 q 487 584 441 565 q 565 719 565 617 q 515 835 565 791 q 395 879 466 879 q 255 824 307 879 q 203 661 203 769 l 78 661 q 166 909 78 822 q 387 992 250 992 q 603 921 513 992 q 701 723 701 844 q 669 607 701 656 q 578 524 637 558 q 696 434 655 499 q 737 284 737 369 "},"9":{"x_min":53,"x_max":739,"ha":792,"o":"m 739 524 q 619 94 739 241 q 362 -32 516 -32 q 150 47 242 -32 q 59 244 59 126 l 191 244 q 246 129 191 176 q 373 82 301 82 q 526 161 466 82 q 597 440 597 255 q 363 334 501 334 q 130 432 216 334 q 53 650 53 521 q 134 880 53 786 q 383 986 226 986 q 659 841 566 986 q 739 524 739 719 m 388 449 q 535 514 480 449 q 585 658 585 573 q 535 805 585 744 q 388 873 480 873 q 242 809 294 873 q 191 658 191 745 q 239 514 191 572 q 388 449 292 449 "},"l":{"x_min":41,"x_max":166,"ha":279,"o":"m 166 0 l 41 0 l 41 1013 l 166 1013 l 166 0 "},"¤":{"x_min":40.09375,"x_max":728.796875,"ha":825,"o":"m 728 304 l 649 224 l 512 363 q 383 331 458 331 q 256 363 310 331 l 119 224 l 40 304 l 177 441 q 150 553 150 493 q 184 673 150 621 l 40 818 l 119 898 l 267 749 q 321 766 291 759 q 384 773 351 773 q 447 766 417 773 q 501 749 477 759 l 649 898 l 728 818 l 585 675 q 612 618 604 648 q 621 553 621 587 q 591 441 621 491 l 728 304 m 384 682 q 280 643 318 682 q 243 551 243 604 q 279 461 243 499 q 383 423 316 423 q 487 461 449 423 q 525 553 525 500 q 490 641 525 605 q 384 682 451 682 "},"κ":{"x_min":0,"x_max":632.328125,"ha":679,"o":"m 632 0 l 482 0 l 225 384 l 124 288 l 124 0 l 0 0 l 0 738 l 124 738 l 124 446 l 433 738 l 596 738 l 312 466 l 632 0 "},"4":{"x_min":48,"x_max":742.453125,"ha":792,"o":"m 742 243 l 602 243 l 602 0 l 476 0 l 476 243 l 48 243 l 48 368 l 476 958 l 602 958 l 602 354 l 742 354 l 742 243 m 476 354 l 476 792 l 162 354 l 476 354 "},"p":{"x_min":0,"x_max":685,"ha":786,"o":"m 685 364 q 598 96 685 205 q 350 -23 504 -23 q 121 89 205 -23 l 121 -278 l 0 -278 l 0 738 l 121 738 l 121 633 q 220 726 159 691 q 351 761 280 761 q 598 636 504 761 q 685 364 685 522 m 557 371 q 501 560 557 481 q 330 651 437 651 q 162 559 223 651 q 108 366 108 479 q 162 177 108 254 q 333 87 224 87 q 502 178 441 87 q 557 371 557 258 "},"‡":{"x_min":0,"x_max":777,"ha":835,"o":"m 458 238 l 458 0 l 319 0 l 319 238 l 0 238 l 0 360 l 319 360 l 319 681 l 0 683 l 0 804 l 319 804 l 319 1015 l 458 1013 l 458 804 l 777 804 l 777 683 l 458 683 l 458 360 l 777 360 l 777 238 l 458 238 "},"ψ":{"x_min":0,"x_max":808,"ha":907,"o":"m 465 -278 l 341 -278 l 341 -15 q 87 102 180 -15 q 0 378 0 210 l 0 739 l 133 739 l 133 379 q 182 195 133 275 q 341 98 242 98 l 341 922 l 465 922 l 465 98 q 623 195 563 98 q 675 382 675 278 l 675 742 l 808 742 l 808 381 q 720 104 808 213 q 466 -13 627 -13 l 465 -278 "},"η":{"x_min":0.78125,"x_max":697,"ha":810,"o":"m 697 -278 l 572 -278 l 572 454 q 540 587 572 536 q 425 650 501 650 q 271 579 337 650 q 206 420 206 509 l 206 0 l 81 0 l 81 489 q 73 588 81 562 q 0 644 56 644 l 0 741 q 68 755 38 755 q 158 720 124 755 q 200 630 193 686 q 297 726 234 692 q 434 761 359 761 q 620 692 544 761 q 697 516 697 624 l 697 -278 "}},"cssFontWeight":"normal","ascender":1189,"underlinePosition":-100,"cssFontStyle":"normal","boundingBox":{"yMin":-334,"xMin":-111,"yMax":1189,"xMax":1672},"resolution":1000,"original_font_information":{"postscript_name":"Helvetiker-Regular","version_string":"Version 1.00 2004 initial release","vendor_url":"http://www.magenta.gr/","full_font_name":"Helvetiker","font_family_name":"Helvetiker","copyright":"Copyright (c) Μagenta ltd, 2004","description":"","trademark":"","designer":"","designer_url":"","unique_font_identifier":"Μagenta ltd:Helvetiker:22-10-104","license_url":"http://www.ellak.gr/fonts/MgOpen/license.html","license_description":"Copyright (c) 2004 by MAGENTA Ltd. All Rights Reserved.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of the fonts accompanying this license (\"Fonts\") and associated documentation files (the \"Font Software\"), to reproduce and distribute the Font Software, including without limitation the rights to use, copy, merge, publish, distribute, and/or sell copies of the Font Software, and to permit persons to whom the Font Software is furnished to do so, subject to the following conditions: \r\n\r\nThe above copyright and this permission notice shall be included in all copies of one or more of the Font Software typefaces.\r\n\r\nThe Font Software may be modified, altered, or added to, and in particular the designs of glyphs or characters in the Fonts may be modified and additional glyphs or characters may be added to the Fonts, only if the fonts are renamed to names not containing the word \"MgOpen\", or if the modifications are accepted for inclusion in the Font Software itself by the each appointed Administrator.\r\n\r\nThis License becomes null and void to the extent applicable to Fonts or Font Software that has been modified and is distributed under the \"MgOpen\" name.\r\n\r\nThe Font Software may be sold as part of a larger software package but no copy of one or more of the Font Software typefaces may be sold by itself. \r\n\r\nTHE FONT SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL MAGENTA OR PERSONS OR BODIES IN CHARGE OF ADMINISTRATION AND MAINTENANCE OF THE FONT SOFTWARE BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM OTHER DEALINGS IN THE FONT SOFTWARE.","manufacturer_name":"Μagenta ltd","font_sub_family_name":"Regular"},"descender":-334,"familyName":"Helvetiker","lineHeight":1522,"underlineThickness":50}
----
public/fonts/Roboto-Regular.woff2
wOF2     =     t  =                       dd^`  T	<
|{
 6$ t I3%؋8&4Z|t 8D$uNEPEAk=x9Xz`IR#F+B`}RP|EZ\W[CQBmcm?FgQ3шpL2ٽ[̮!+@U^~ޣ D?jUcUl6{ mCD]htջQ8@PLc

+ZD2K:4{g:~  v  < H^R'8?;uyVW8="FÓ*	@EĴc= Iby8$a){ԶKiIW&Ӕ~}1wM{4!{FH5#Kt5wve; 'NJ	'(%;?DMCq,<=?f _VbA(37v+uYCb
w8AF3n-'U%2؟oٟl"^bj aoF!`
Aj'މ:Zu.[݂pGW:U%Ejq	:IC	SCsJe6Dқ<UM,
&hz} y|9
DᛯjnB$T¬׵?/Q=BC_f#:Bo@]T(vF+d" RRR!~AX>!`p¢,08 9Ό/茓
rQ Qpg\koC3Yyt'd9>#|3Ƹ?֌#$i
g5z֏秲S{3ɲSpS2бw6 Ӣf]﵋F]&^fM%A}؊)ZLUX.&qOq?$nV_[3hQ詎ְ$ڥcEv0CQ4a=jwn'&Vwz'
fxdjqv:ꡔVVF7:HZl*Тtj"O~ۿGJa1F~۷--J%MZ߱}:!%cV1&9עV5hUp}
ѾtS߼w?<=VEk-xƻ1xP@F'O!#LXdÖ{pƓ	&.XX
$4xǞhסSmq&G|O_ClNX\p@Ĉ/~q6A7^SsNjQ#-vV"qwq
a#hoa|'|k/}w0ܯ2"n<0BCPAzǥ
x>CEMTqXUX+SR٘xʀJ)X	2~8A/WѬdq9G
 !4m1I7?ۗν<	o8&0y8/JYc"#>3%ahv|8C%. }pha '|Ɨsи}DK*SY\S%P8'K[J2*f
"D ^ bt6220/:1F0cƁ+ܩIHDJC
Zn;&YxP?%GFN&M<<2db	,Yaéĉg\ʕ#[`
wTxD!PB`!(DDED%
Kh41b(RF45iEMm馛[< CO'g yFb$#|_h~KOdLLW[1Pec`R^rT2Sbt "O7)Q@yAQU)@)`j"[lq11vFVc4F IDfXa9O܉gfCԜ[#9 =371G~$v:H6T>@v"A!nٝfso;}|7
߻/ڊ<H(FІZ{&n2I-	-f[37D'"r?a3m -&J
Uj+jcHD-U<p#l&c:AVvf19g-V9]p%!F$Y0Y`0lTY"_}ܵ
 EHHQ)3{{"_aLb  :c<ˢ	eʹ|
,`}A 3䱪 \@nޤRj1)6jWB$T`~t1Ըd*2SzKw]lüea[=l2t̏k]9]LU)a?OU(>Ai#mÕ'ҥ@NϡՃP㐮ks7;g'~5zoZ2F)+Bbb,.HgsXl.إꠧ ;k1{P16C2E0-@b ٧BL÷d^<Pfdbp3󢑔ܣ/&<#tXTkD9Fίث
Vz倶(<Cl3_5JH6	>U)9NIac_XQO}h	~o~༰Vɕ[JށfK.rf0
^xy0Gռ	KFߛIf <ex2hI;iҰ_D^275 >(?
҅*G78BCXL8y	cA+ESs5Z!C
>!/bx3ڔi{nx[㉭!dS P@Y<˂U{֍Ug'YjbIЙ7rA2UZM%dvxȢ&Wp6պF|J
!:	Rhz oudQʫ#XXxBXa}+l^܊SH0Y	0	fTpV7O'1My$"B5SǛ0PVŜb]$WR
PkE	Lܰ9 E!CK3X;RqtH45Ik`wiLTo7E2%{yU~nVb}8^RNY+;3SٴF|T=JHEIBw	ˡPm;7jMIڐF_sM
U[t
'\y٨叶skHȡ^][!4p̬:"O[+5h %C*1b]|e{*ȹu.ٞHʁ:!/ya]
ܤkg1g=mCл0=SgMTHXV 9?D/[|!GϦ19@od_OW,
:pax^m@MKc+CD%(U+\i!7X
\r>}
Ҷv48?)
,yk
=V|0>sjgVUeȒReT\VHJ+bӯP37L&Yp<
ٮ7ݦ~L-z2=p+q23"s~pʩ
EV8?ެCAۧ=J8M8s+x*"(D(*:)"W}`;k|SUW253ttJ!5Cgu2R˖yD[ǵʷR8'Ul}ݬdPAڇt!':@eAFZI%ϙ}V4ITz_CQNͨT۷3'G˲]PV<>f[ˍ|: Qp	|Hnb^^شm	!4 ź*quk<BI=vK,<-v)y-&S^L⮙LzR<fR]%!V6u\4]
N}&'Y䅓Γ08ko^i_K5K\#)#seC\xL2joآ!IXc'm,*3(9ĮdGsТOt<u6$U(d轢{_'
~/`eKxwGe{?ޜB隑~
GnUkY[
:6xx|O< 녭RoĆNd 
p(!1-Jڲ{'3)MWpHBmg|SwF|qSi;[܆TNa%(˅Iy\:ڝYwEhlƥQVFiyU:RG(fQ!,E 9ۦO_lJ9?d#?JmSQCw~,J$iF..;벍Dm|dqs(MʘZWѥ)^׀
&uVEoZ5F
фS$xPE-~n*+\yd^C/:Wꋕ.Xv`fH$ǉPYrQ{hӐ&y<K"ޓ6Z;kQbyw.sjI
xWg$YW//W/x

Wӈ}$4QB½@@蛄tH53E5{^\Ã=J|Ҝ<JLj'7n/.~^$gw-Ǭ, <ESd/DabLޝ(=q opGU32qrꑌpFל]g[I,'zw؟pΞFtVt<?meE؟X%3V?\8B>&m5_-d7!Ӓ#ogZ(aBh(PLBy*t6gEgbtB+flaTpL0#-du	0sp%8dA*<'41/ހhFj!Ovs+1eҚ!-f7@6aIQ-dLBEץ'~x[
.FnVg62-Y6(;GLRq{OK:1|e,PUwǚFWƳ߃W]CjFc:'Tjx .Gs<u5B\coօTOm$ϳll3oWp_~DddYf*MG
կ0zbW`[ͫ4On37@W_yYk\#Z+qsJorӝȼX|EM>>Ϟֻ\ͦ?T$`@l$ p1G7_<M
(̘	>ˎ%չ% BN9ǁPqumO9G/۬of_z?u0v2K:K̬$ce^.FbgGNVxq/qiq^!b;=NJ+ 
e'dHbBt#[1YCw@z0>Bʟ%XLi \""''.*#Ƶ~씠=\I䋹sDU9ܗk3x\rSKٕ1O~~^l[6R)%JRS":
7

k
(t˸FTKTSD<+GLODhDBpO`xY@UiߐrD}=KoHY	 +,~&8z/k4>㺭51]),rj3=ǿ#dV<zot_Fn+L릟8!ݟݏݎ&SvnڑA|侦WAhRf-nw:1 tɱ۱5/S&[NTyUJ(x:sQo1"cED:3kLv׶I1Aȥf
p/z^Ee&A
v񜝯ʲ_
.W]"6@ԵD{	l vHs3
F-BBP:Y	ɰP9~~~cLiP!(}
?
ک 1r<8qrc>pLb		ȱh|,,=6=$5	a湩Rj玪KϭW--g=O>Zٕ06c-%ꠅb[# Se!/^bϝ9ih~wvo<LCu!N-raPV8yW@DF0٬?bbmԡM\}sW-r@6to]po2=4L,FÂ`dlxDECE]&)n/@X F} wF$jojǝc_	kUj*\Q?H^m-PʉES2""8NsK`nes(H-X~8|=/_tKAƀrH#@V`z(S1ZP']f2eyP`d\1n'ơ6ۮhΞkٽtS;K` ^gXdL`vIrMZc>d\?VK;ͺr	|?4[*KmxKw
<=\7`Xwbf.&wr{7OFns _?
)	-]o#t$2SjldJy˗rvV-ŏһe[owtOrm
]sc9%OV!ۢ[my|F|+L$/qqŻ.	%rwdKrn=SUknJ@2yڕ3ǚB<r}e,x94Y"i)p=^uIoʮCTQj=-YcQǿ+ .pqr#Qs
mNL p;T}LM>Ȟ~߰JjBrS/,-`%q_%[
Y|GM[-[y͏L훏OGc^_b4 xz
Xq(mˮY7e4=E^wT"{A^vZvKka}e=ZlY_
`	zR=U.XF;i5:e
t
A1fFFB:m(gwXYF?Mwp9$5My+6{&(KްfX氺q?vbA{5`e2Qs3I~_?AHoB_di7f$᧶O>!Rbor`rOU241}twS;{݊2eC	!ݍd`ht\%Ar<:ڿX6A2֋?=ܻGAm;ayrKť6a>ځAǸO1XgObu~(Y`(^NH=nYɭK2/vI"k-
Xui,q6PCX0 _>&J-F׺FSB3+nyT53;73\Y/!g斐(STTY9G
\))ȵɤՔ*:f2f #Dވ\,3n2N567MmM\zSrJ-z-fV9r27˅g繁X L^wk4ҫ*j oy~Jk""Lls۶EiϷ$lapS,I{5nGd8{4#:7Z^K]dV׶5J}<}RbP͏'|i]lh]noH	jKHA[̰9=ibkeX3:13%8؎PM5QQ=ܖ]Y/n|
0UOdeI?dCj-5Rm5~v(ld') ..53HpgF@ZP|"RK<RVRRVB
	%
[jhZT`6RD9L,Ϥ4	}202orEG(6Ԡ |!aa6EDN03my0kԼjTXUb#ՔN225RCg=:tIXY3	؝R7S~̇i-3pg>)tgǱqp%W[wz*$JiD0[[绐m@'hHhqz/dh3lBOEFS=Yڽ{=;h1mm=>(<<waT@7mͅǝPo[ؚ$$ۘ3.pSA	a
OGCYz~Ͽdekp_
#㡗ٙ&aʈ>IO?`)뮴p!JswcKvT7--c":Z8]7<Wɹl{%L͞$Gy߻yrбJ$~tPpеp	]}(|scT|KAE)o@GP/rlY+?^BVv	GD;o75wW}Nc4j74bff*D~RQ֣_^V.<{J$ܫn9>Nt1\u{:WCC:\{/޼,t%"Fz_3/M
ԧ(
q(K
̗
NED:vdFc'.mg&\t`%C">صSP/9J"dLЩBiDKl-OoEa޽8@Idҋ?oy5LMHaGDlZ= 6ks67Iy%pJy$F<exkJWr|{r`rAu'[lk=~:gQRxQKRn?ysnJ+	1"
`@|st<(B<p\,V#"`uKo5n[VkvAx˸FDxGFbYcZKXT *䯏&_x2}"x
YiϡkCNvuuhsZldr 2yh)B2!M,$F{|2{Ln7,'|x-n>_Mn`k )P{ᱧd].N ^

Y>q긢5dE(gɢ]\8{jaisarIgAgM'hxP`
e_/-V=8X77Tv9;UbBu@k jjx	Bל3z8&Aa$BPR'`Q,oaYJ+IA2
`ƺV0V4<V2!(1ZE7+-os/+VqFIO&ҾŦ{Lc		xMl
OCZ,QM&ǧqz0
eKtK
;#Ϣy}]m~PB~^zR=-3T&A'S|j;jkY:XX{CP~q(T\G92DqVY`󽩭mٰMMb¯{^ٺpe^p5`hVVnE c>[D;¸ψ;#XűW$4C
H&໼eZozrSZi`U-[P?t1,o4 !@dc ml[AA
-q.O)tLE ml `]LWƳ`^ȇ}H,:w_v[bև]hsQx<'ټI[<q^?X.7y]7٦M>mQ-9nII6F؇`'ֹIoKiD Ban\wo{rbJ诤P`yɰ~y%d3v\\=ՃO<8v7 	"]=#b Z$YtWAE$TXihb/5pR>weO_ڿGv3Do
=&'Z w;=UOUZ*KsrJ {>}i.C)J!1:E3 Z?&=,ŅD{^%DtK(2(`gih=|w
JaȝGCTʾqIòvFG7ٴEWIh$O>罖 7`.~ 5g^h_;~)A)ĥwlSj@#`lv[EwLΜ7cڰRjJ,zdp_([bދv6LӲVڢ.A#y%?`,'@:0uNBp(VLW￳.H yx&n	FE~}Y)7nӉGhZ'	cI)ae:tEƶ|Ff5xИ&qKQlVd(%rb@$V?TUaMݮGe%
az-W+M֌q"XaƿX@éKf>ެ4t:ێTͣg;v
Mx^[\f:o/KԥCU3jY5io~aVQ4 ԤbR<fxIɔ9S>D"x*yzETa| OI,]Ԁ0\6j"y)=XCi~2=%zڌ<:XSkZcrsD#0]y-5g݀z4Nظ1-za\ݨ՞}Qt4[ha2AFOdȋřa@Gwub`pƴX݃InKaXg92cQr,g&wjkȟn0B"AA#k0s/S
挷	rdNUexLenMpv_ä=;׭<7zxkxovwi}fB8"	%IZ*+id	ҵ
T!zB`"9d7Xr)g1ۄwM6ğm1ari}x~׊z2t[0z"<Ƴul< [  WO_շ:K>/q/U]-\G]!F_{0
>W28W+JJRf}1udXʢ`/r35@AhseHGm\nXhL}4dSZȡL V`%9",<i%³yJ \vQ%DRp`FWɹCRE0;YF@wќÑP^[kJ  YJ),۱6L$4fR$%W>eGN2tJ{i틭3e&/֊]:CH|g墶5D,hrV%͕Ӧ@*	229	:x#a3[G5[u v1#濑T֚XLB~[pS:<p?no#bݙcbqN{6D#FT|Hl,+Q@ďSMkI:A۠HCuCuH'bRV	^
CM#gn8V9ʓ¿uoկNTI3*dQa˓X=#ëi8CD |D1lQ3TIo82D
%rJkFbO#N|.VFqR_X;9׾U cƛTb],E?P;ѧ=BM&kF#eg"`9abePȣ\VMnrA@+uwe޺=q3:HH1<uo
I_Svkel
SP1,K-W=7Psx +9\
M2>YAG'1JLcrKm8Pi\v;ȝfoBs7]=G`udI@Idwgs*se-nZxcdiE)tfȤ\q()@By34גIaz[EYHTTVД+w`l0tA=wrֆM/CѓSH(рT-<m[IʲӴ"}E4eRB@H2sIdflcؒ
3;W}VtIzydwjh<޼,ۥ$D3Čіiډͳ~89|̥G }>ӆ5S >Myߙ=ۓ龼[?Е/B:\9ڠvYޜ6At2ûh>V%/lX_M@xng҅ی6U#׵3wOE}Z2L0;YVBXv+sAP (xw{2PWQW=`L^Ujݚ,IɜYL:o|p\·3yo@Bu7y1bviJ12n P>-u0;(BG=aqȊXlb{ΥMs!!*]Y]Vɰb3Q%,]u"_bȶȩؐh!PRYz')O8:	+9<nSDeXii=`o/<јRmɛI-}?.[NO5(ovRƶɘC=EXRBS_-YU U ma,kJ;x]]q)4?7cɍ2(ںe>-ɟ=Gwaa/a^.7vz89K_3/8M0̪siGf41z^l
MeOުu%ĩƝ+VaeA(lVj;t2+hKmy{%4O}']MvdY9wiej/xƂY}([G)ҚD(&}|`ʬf:.Ÿ>N(&Rí/c r@g,M}<KXCAV4Ișp34/Iz"'{ZX ](Mɹp"0@
QLp%رvZn#V=1p@+]YE}Dvi3P-z
і-.4!m=đben}0>C?i{
Rg;L;}\vgɱڵOVqA;'l#٦xWepg?B+yzm'`/ό{z) վr`XNT^Ӓc;HRS:e)qE:蕞8Xe3z0S4êe<Ɗ05FNHBAqme$do^'0Z`YK&#5Z,m<[-G=1?);Cd1{To=޼L1Z
sjOdت5h*i)U}	wg#՝Xd=o]<n^tbD4^].+;e2kRʴ4^ohO%G<%r_;:
	е(jd!\hYRjx+VKKkqKs"_<.Ё
}	hzL~o{4V(?Ge֗n8,\#噦,JǇv
l/"o"t-=g@Mm#4]qAi edR1F<D訉n?H{	gÄ<W>ԠfJ#SOb$A)g!* F( 	jZdYT8H?"x#qDɀ_[1^X$F	JDNbd0EkV!l(st;
t^9"yǕc8^q6g?~jNw,g09w`?3^JBKE5X?eAY*LӶ$ܵcPhe%(]
(#1CySEdH8ITVgyd4uZס9N c-nmsƮfۡVNSoQ9êYiFu. |B)6VsFnjh5 ");ԤĊMevjq&>Z}2:dq~/--U=:'zǉpk$ON RnHOz҉[/<Tom"TǥdLdmUWX;s;e%T_[Dl_;kuLJ:4KJmN%,8⬱%~j뤍Câ:cI
 m[=R\T]Zy̹\_ZU5mY嶈|d6fiVVsڏIdń b ?<o @fX"HXS+h3PK!{"/RԆu PIzvueN=M]jv@7_YӞ4yV$ZF9"G (!`&%
р+FQF3n&+i~ih\y).U"\,YU&\NF侞r$
A٪<JV$BE$LU,K"@tS6dd:G^Y$EJ#xyKe4$
,
rj{><5`6l6%ܤ3$|d/ѺxG\o_i궫Q'氃-lڊAIQ5%ϋI!崓A!p1䲏JtZCXdE#[VB
=aEXdcR	d1+s#]|QǘERSdŏ.
)   
----
platform/platformManager.ts
class BrowserEventEmitter {
  private listeners: { [event: string]: Function[] } = {};

  on(event: string, listener: Function): void {
    if (!this.listeners[event]) {
      this.listeners[event] = [];
    }
    this.listeners[event].push(listener);
  }

  emit(event: string, ...args: any[]): void {
    const eventListeners = this.listeners[event];
    if (eventListeners) {
      eventListeners.forEach(listener => listener(...args));
    }
  }

  removeAllListeners(): void {
    this.listeners = {};
  }
}

import { Platform, PlatformCapabilities } from '../core/types';
import { createLogger } from '../core/utils';

const logger = createLogger('PlatformManager');

declare global {
  interface Navigator {
    xr?: XRSystem;
  }
}

export class PlatformManager extends BrowserEventEmitter {
  private static instance: PlatformManager | null = null;
  private platform: Platform;
  private capabilities: PlatformCapabilities;
  private initialized: boolean = false;

  private constructor() {
    super();
    this.platform = 'desktop';
    this.capabilities = {
      xrSupported: false,
      webglSupported: false,
      websocketSupported: false,
      webxr: false,
      handTracking: false,
      planeDetection: false
    };
  }

  static getInstance(): PlatformManager {
    if (!PlatformManager.instance) {
      PlatformManager.instance = new PlatformManager();
    }
    return PlatformManager.instance;
  }

  async initialize(): Promise<void> {
    if (this.initialized) {
      return;
    }

    this.detectPlatform();
    await this.detectCapabilities();
    this.initialized = true;
    logger.log('Platform manager initialized');
  }

  private detectPlatform(): void {
    const userAgent = navigator.userAgent.toLowerCase();
    const isQuest = userAgent.includes('quest');
    
    if (isQuest) {
      this.platform = 'quest';
    } else if (userAgent.includes('chrome') || userAgent.includes('firefox') || userAgent.includes('safari')) {
      this.platform = 'browser';
    } else {
      this.platform = 'desktop';
    }
  }

  private async detectCapabilities(): Promise<void> {
    // WebXR support
    if ('xr' in navigator && navigator.xr) {
      try {
        this.capabilities.xrSupported = await navigator.xr.isSessionSupported('immersive-ar');
        this.capabilities.webxr = this.capabilities.xrSupported;
        this.capabilities.handTracking = this.capabilities.xrSupported;
        this.capabilities.planeDetection = this.capabilities.xrSupported;
      } catch (error) {
        logger.warn('WebXR not supported:', error);
        this.capabilities.xrSupported = false;
        this.capabilities.webxr = false;
        this.capabilities.handTracking = false;
        this.capabilities.planeDetection = false;
      }
    }

    // WebGL support
    try {
      const canvas = document.createElement('canvas');
      const gl = canvas.getContext('webgl2') || canvas.getContext('webgl');
      this.capabilities.webglSupported = !!gl;
    } catch (error) {
      logger.warn('WebGL not supported:', error);
      this.capabilities.webglSupported = false;
    }

    // WebSocket support
    this.capabilities.websocketSupported = 'WebSocket' in window;

    logger.log('Platform capabilities detected:', this.capabilities);
  }

  getPlatform(): Platform {
    return this.platform;
  }

  getCapabilities(): PlatformCapabilities {
    return { ...this.capabilities };
  }

  isDesktop(): boolean {
    return this.platform === 'desktop';
  }

  isQuest(): boolean {
    return this.platform === 'quest';
  }

  isBrowser(): boolean {
    return this.platform === 'browser';
  }

  isXRSupported(): boolean {
    return this.capabilities.xrSupported;
  }

  isWebGLSupported(): boolean {
    return this.capabilities.webglSupported;
  }

  isWebSocketSupported(): boolean {
    return this.capabilities.websocketSupported;
  }

  async requestXRSession(): Promise<XRSession | null> {
    if (!this.capabilities.xrSupported || !('xr' in navigator) || !navigator.xr) {
      logger.warn('WebXR not supported');
      return null;
    }

    try {
      const session = await navigator.xr.requestSession('immersive-ar', {
        requiredFeatures: ['local-floor', 'hit-test'],
        optionalFeatures: ['hand-tracking', 'plane-detection']
      });

      // Update capabilities based on session features
      session.addEventListener('end', () => {
        logger.log('XR session ended');
        this.emit('xrsessionend');
      });

      logger.log('XR session started');
      return session;
    } catch (error) {
      logger.error('Failed to start XR session:', error);
      return null;
    }
  }

  async checkXRSupport(): Promise<void> {
    if ('xr' in navigator && navigator.xr) {
      try {
        // Check for AR support
        const arSupported = await navigator.xr.isSessionSupported('immersive-ar');
        if (arSupported) {
          this.capabilities.xrSupported = true;
          this.capabilities.webxr = true;
          this.capabilities.handTracking = true;
          this.capabilities.planeDetection = true;
          this.emit('xrdevicechange', true);
          logger.log('WebXR AR supported');
        }
      } catch (error) {
        logger.warn('WebXR check failed:', error);
        this.capabilities.xrSupported = false;
        this.capabilities.webxr = false;
        this.capabilities.handTracking = false;
        this.capabilities.planeDetection = false;
        this.emit('xrdevicechange', false);
      }
    }
  }

  dispose(): void {
    this.removeAllListeners();
    this.initialized = false;
    PlatformManager.instance = null;
  }
}

export const platformManager = PlatformManager.getInstance();

----
core/logger.ts
let debugEnabled = false;

export interface Logger {
    debug: (...args: any[]) => void;
    log: (...args: any[]) => void;
    info: (...args: any[]) => void;
    warn: (...args: any[]) => void;
    error: (...args: any[]) => void;
}

export function setDebugEnabled(enabled: boolean): void {
    debugEnabled = enabled;
}

export function createLogger(context: string): Logger {
    const prefix = `[${context}]`;
    
    return {
        debug: (...args: any[]): void => {
            if (debugEnabled) {
                console.debug(prefix, ...args);
            }
        },
        log: (...args: any[]): void => {
            console.log(prefix, ...args);
        },
        info: (...args: any[]): void => {
            console.info(prefix, ...args);
        },
        warn: (...args: any[]): void => {
            console.warn(prefix, ...args);
        },
        error: (...args: any[]): void => {
            console.error(prefix, ...args);
        }
    };
}

// Create core logger instance
export const logger = createLogger('core');

----
core/utils.ts
/**
 * Core utilities for the LogseqXR visualization system
 */

import { Vector3 } from './types';
import { THROTTLE_INTERVAL } from './constants';

// Debug logging utility
export interface Logger {
  log: (message: string, ...args: any[]) => void;
  error: (message: string, ...args: any[]) => void;
  warn: (message: string, ...args: any[]) => void;
  debug: (message: string, ...args: any[]) => void;
  info: (message: string, ...args: any[]) => void;
}

export function createLogger(namespace: string): Logger {
  return {
    log: (message: string, ...args: any[]) => console.log(`[${namespace}] ${message}`, ...args),
    error: (message: string, ...args: any[]) => console.error(`[${namespace}] ${message}`, ...args),
    warn: (message: string, ...args: any[]) => console.warn(`[${namespace}] ${message}`, ...args),
    debug: (message: string, ...args: any[]) => console.debug(`[${namespace}] ${message}`, ...args),
    info: (message: string, ...args: any[]) => console.info(`[${namespace}] ${message}`, ...args)
  };
}

// Case conversion utilities
export const camelToSnakeCase = (str: string): string => {
  return str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);
};

export const snakeToCamelCase = (str: string): string => {
  return str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());
};

export const convertObjectKeysToSnakeCase = (obj: any): any => {
  if (Array.isArray(obj)) {
    return obj.map(item => convertObjectKeysToSnakeCase(item));
  }
  
  if (obj !== null && typeof obj === 'object') {
    return Object.keys(obj).reduce((acc, key) => {
      const snakeKey = camelToSnakeCase(key);
      acc[snakeKey] = convertObjectKeysToSnakeCase(obj[key]);
      return acc;
    }, {} as any);
  }
  
  return obj;
};

export const convertObjectKeysToCamelCase = (obj: any): any => {
  if (Array.isArray(obj)) {
    return obj.map(item => convertObjectKeysToCamelCase(item));
  }
  
  if (obj !== null && typeof obj === 'object') {
    return Object.keys(obj).reduce((acc, key) => {
      const camelKey = snakeToCamelCase(key);
      acc[camelKey] = convertObjectKeysToCamelCase(obj[key]);
      return acc;
    }, {} as any);
  }
  
  return obj;
};

// Update throttler for performance optimization
export class UpdateThrottler {
  private lastUpdate: number = 0;
  private throttleInterval: number;

  constructor(throttleInterval: number = THROTTLE_INTERVAL) {
    this.throttleInterval = throttleInterval;
  }

  shouldUpdate(): boolean {
    const now = performance.now();
    if (now - this.lastUpdate >= this.throttleInterval) {
      this.lastUpdate = now;
      return true;
    }
    return false;
  }

  reset(): void {
    this.lastUpdate = 0;
  }
}

// Vector operations
export const vectorOps = {
  add: (a: Vector3, b: Vector3): Vector3 => ({
    x: a.x + b.x,
    y: a.y + b.y,
    z: a.z + b.z
  }),

  subtract: (a: Vector3, b: Vector3): Vector3 => ({
    x: a.x - b.x,
    y: a.y - b.y,
    z: a.z - b.z
  }),

  multiply: (v: Vector3, scalar: number): Vector3 => ({
    x: v.x * scalar,
    y: v.y * scalar,
    z: v.z * scalar
  }),

  divide: (v: Vector3, scalar: number): Vector3 => ({
    x: v.x / scalar,
    y: v.y / scalar,
    z: v.z / scalar
  }),

  length: (v: Vector3): number => 
    Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z),

  normalize: (v: Vector3): Vector3 => {
    const len = vectorOps.length(v);
    return len > 0 ? vectorOps.divide(v, len) : { x: 0, y: 0, z: 0 };
  },

  distance: (a: Vector3, b: Vector3): number => 
    vectorOps.length(vectorOps.subtract(a, b)),

  // Convert position array to Vector3
  fromArray: (arr: number[]): Vector3 => ({
    x: arr[0] || 0,
    y: arr[1] || 0,
    z: arr[2] || 0
  })
};

// Scale utilities
export const scaleOps = {
  // Normalize a value between min and max
  normalize: (value: number, min: number, max: number): number => {
    return Math.min(max, Math.max(min, value));
  },

  // Map a value from one range to another
  mapRange: (value: number, inMin: number, inMax: number, outMin: number, outMax: number): number => {
    // First normalize to 0-1
    const normalized = (value - inMin) / (inMax - inMin);
    // Then map to output range
    return outMin + normalized * (outMax - outMin);
  },

  // Scale node size from server range to visualization range
  normalizeNodeSize: (size: number, serverMin: number = 20, serverMax: number = 30, visMin: number = 0.15, visMax: number = 0.4): number => {
    return scaleOps.mapRange(size, serverMin, serverMax, visMin, visMax);
  }
};

// Data validation utilities
export const validateGraphData = (data: any): boolean => {
  if (!data || typeof data !== 'object') return false;
  if (!Array.isArray(data.nodes) || !Array.isArray(data.edges)) return false;
  
  // Validate nodes
  for (const node of data.nodes) {
    if (!node.id) return false;
    // Allow position to be either array or Vector3
    if (node.position) {
      if (Array.isArray(node.position)) {
        if (node.position.length !== 3 || 
            typeof node.position[0] !== 'number' ||
            typeof node.position[1] !== 'number' ||
            typeof node.position[2] !== 'number') {
          return false;
        }
      } else if (typeof node.position === 'object') {
        if (typeof node.position.x !== 'number' ||
            typeof node.position.y !== 'number' ||
            typeof node.position.z !== 'number') {
          return false;
        }
      } else {
        return false;
      }
    }
  }
  
  // Validate edges
  for (const edge of data.edges) {
    if (!edge.source || !edge.target) return false;
  }
  
  return true;
};

// Binary data helpers
export const binaryToFloat32Array = (buffer: ArrayBuffer): Float32Array => {
  return new Float32Array(buffer);
};

export const float32ArrayToPositions = (array: Float32Array): Vector3[] => {
  const positions: Vector3[] = [];
  for (let i = 0; i < array.length; i += 3) {
    positions.push({
      x: array[i],
      y: array[i + 1],
      z: array[i + 2]
    });
  }
  return positions;
};

// Error handling utility
export class VisualizationError extends Error {
  constructor(message: string, public code: string) {
    super(message);
    this.name = 'VisualizationError';
  }
}

// Performance monitoring
export class PerformanceMonitor {
  private frames: number = 0;
  private lastTime: number = performance.now();
  private fps: number = 0;

  update(): void {
    this.frames++;
    const now = performance.now();
    const delta = now - this.lastTime;

    if (delta >= 1000) {
      this.fps = (this.frames * 1000) / delta;
      this.frames = 0;
      this.lastTime = now;
    }
  }

  getFPS(): number {
    return Math.round(this.fps);
  }
}

----
core/constants.ts
/**
 * Application constants
 */

// Environment detection
export const IS_PRODUCTION = window.location.hostname === 'www.visionflow.info';
export const IS_DEVELOPMENT = !IS_PRODUCTION;

// WebSocket URLs
export const WS_URL = `${window.location.protocol === 'https:' ? 'wss:' : 'ws:'}//${window.location.host}/wss`;

// WebSocket configuration
export const WS_RECONNECT_INTERVAL = 30000; // Match server's HEARTBEAT_INTERVAL
export const WS_MESSAGE_QUEUE_SIZE = 1000;

// Binary protocol configuration
export const BINARY_VERSION = 1;
export const FLOATS_PER_NODE = 6;  // x, y, z, vx, vy, vz
export const VERSION_OFFSET = 1;    // Skip version float
export const BINARY_CHUNK_SIZE = 1000; // Number of nodes to process in one chunk

// Performance configuration
export const THROTTLE_INTERVAL = 16; // ~60fps
export const EDGE_UPDATE_BATCH_INTERVAL = 16; // Batch edge updates at ~60fps

// Visualization constants
export const NODE_SIZE = 2.5;
export const NODE_SEGMENTS = 16;
export const EDGE_RADIUS = 0.25;
export const EDGE_SEGMENTS = 8;

// Font configuration
export const FONT_URL = '/fonts/Roboto-Regular.woff2';

// Colors
export const NODE_COLOR = 0x4CAF50;  // Material Design Green
export const NODE_HIGHLIGHT_COLOR = 0xff4444;  // Material Design Red
export const EDGE_COLOR = 0xE0E0E0;  // Material Design Grey 300
export const BACKGROUND_COLOR = 0x212121;  // Material Design Grey 900
export const LABEL_COLOR = 0xFFFFFF;  // White

// Default settings
export const DEFAULT_VISUALIZATION_SETTINGS = {
  // Node appearance
  nodeSize: NODE_SIZE,
  nodeColor: '#4CAF50',
  nodeOpacity: 0.7,
  nodeHighlightColor: '#ff4444',
  
  // Edge appearance
  edgeWidth: EDGE_RADIUS * 2,
  edgeColor: '#E0E0E0',
  edgeOpacity: 0.7,
  
  // Visual effects
  enableBloom: true,
  bloomIntensity: 1.5,
  bloomThreshold: 0.3,
  bloomRadius: 0.75,
  
  // Performance
  maxFps: 60,
  updateThrottle: THROTTLE_INTERVAL,

  // Labels
  showLabels: true,
  labelSize: 1.0,
  labelColor: '#FFFFFF',

  // XR specific
  xrControllerVibration: true,
  xrControllerHapticIntensity: 1.0
};

// Default bloom settings
export const DEFAULT_BLOOM_SETTINGS = {
  threshold: DEFAULT_VISUALIZATION_SETTINGS.bloomThreshold,
  strength: DEFAULT_VISUALIZATION_SETTINGS.bloomIntensity,
  radius: DEFAULT_VISUALIZATION_SETTINGS.bloomRadius,
};

// Debug configuration
export const DEBUG = {
  NETWORK_PANEL: {
    MAX_MESSAGES: 50,
    ENABLED: IS_DEVELOPMENT
  }
};

----
core/types.ts
// Core types for the application

export interface Vector3 {
  x: number;
  y: number;
  z: number;
}

export interface NodeMetadata {
  name?: string;
  lastModified?: number;
  links?: string[];
  references?: string[];
}

export interface NodeData {
  position: Vector3;
  velocity: Vector3;
  metadata?: NodeMetadata;
}

export interface Node {
  id: string;
  data: NodeData;
  color?: string;
  metadata?: any;
}

export interface Edge {
  source: string;
  target: string;
  weight?: number;
}

export interface GraphData {
  nodes: Node[];
  edges: Edge[];
  metadata?: any;
}

// Platform types
export type Platform = 'desktop' | 'quest' | 'browser';

export interface PlatformCapabilities {
  xrSupported: boolean;
  webglSupported: boolean;
  websocketSupported: boolean;
  webxr: boolean;
  handTracking: boolean;
  planeDetection: boolean;
}

// Settings interfaces in camelCase
export interface AnimationSettings {
  enableMotionBlur: boolean;
  enableNodeAnimations: boolean;
  motionBlurStrength: number;
  selectionWaveEnabled: boolean;
  pulseEnabled: boolean;
  rippleEnabled: boolean;
  edgeAnimationEnabled: boolean;
  flowParticlesEnabled: boolean;
}

export interface ARSettings {
  dragThreshold: number;
  enableHandTracking: boolean;
  enableHaptics: boolean;
  enableLightEstimation: boolean;
  enablePassthroughPortal: boolean;
  enablePlaneDetection: boolean;
  enableSceneUnderstanding: boolean;
  gestureSsmoothing: number;
  handMeshColor: string;
  handMeshEnabled: boolean;
  handMeshOpacity: number;
  handPointSize: number;
  handRayColor: string;
  handRayEnabled: boolean;
  handRayWidth: number;
  hapticIntensity: number;
  passthroughBrightness: number;
  passthroughContrast: number;
  passthroughOpacity: number;
  pinchThreshold: number;
  planeColor: string;
  planeOpacity: number;
  portalEdgeColor: string;
  portalEdgeWidth: number;
  portalSize: number;
  roomScale: boolean;
  rotationThreshold: number;
  showPlaneOverlay: boolean;
  snapToFloor: boolean;
  interactionRadius: number;
}

export interface AudioSettings {
  enableAmbientSounds: boolean;
  enableInteractionSounds: boolean;
  enableSpatialAudio: boolean;
}

export interface BloomSettings {
  edgeBloomStrength: number;
  enabled: boolean;
  environmentBloomStrength: number;
  nodeBloomStrength: number;
  radius: number;
  strength: number;
}

export interface ClientDebugSettings {
  enableDataDebug: boolean;
  enableWebsocketDebug: boolean;
  enabled: boolean;
  logBinaryHeaders: boolean;
  logFullJson: boolean;
}

export interface EdgeSettings {
  arrowSize: number;
  baseWidth: number;
  color: string;
  enableArrows: boolean;
  opacity: number;
  widthRange: [number, number];
}

export interface HologramSettings {
  xrQuality: 'low' | 'medium' | 'high';
  desktopQuality: 'low' | 'medium' | 'high';
  ringCount: number;
  ringColor: string;
  ringOpacity: number;
  ringSizes: number[];
  ringRotationSpeed: number;
  enableBuckminster: boolean;
  buckminsterScale: number;
  buckminsterOpacity: number;
  enableGeodesic: boolean;
  geodesicScale: number;
  geodesicOpacity: number;
  enableTriangleSphere: boolean;
  triangleSphereScale: number;
  triangleSphereOpacity: number;
  globalRotationSpeed: number;
}

export interface LabelSettings {
  desktopFontSize: number;
  enableLabels: boolean;
  textColor: string;
  textOutlineColor: string;
  textOutlineWidth: number;
  textResolution: number;
  textPadding: number;
  billboardMode: 'camera' | 'up';
}

export interface NodeSettings {
  baseColor: string;
  baseSize: number;
  sizeRange: [number, number];
  enableMetadataShape: boolean;
  colorRangeAge: [string, string];
  colorRangeLinks: [string, string];
  metalness: number;
  roughness: number;
  opacity: number;
}

export interface NetworkSettings {
  bindAddress: string;
  domain: string;
  enableHttp2: boolean;
  enableRateLimiting: boolean;
  enableTls: boolean;
  maxRequestSize: number;
  minTlsVersion: string;
  port: number;
  rateLimitRequests: number;
  rateLimitWindow: number;
  tunnelId: string;
}

export interface DefaultSettings {
  apiClientTimeout: number;
  enableMetrics: boolean;
  enableRequestLogging: boolean;
  logFormat: string;
  logLevel: string;
  maxConcurrentRequests: number;
  maxPayloadSize: number;
  maxRetries: number;
  metricsPort: number;
  retryDelay: number;
}

export interface SecuritySettings {
  allowedOrigins: string[];
  auditLogPath: string;
  cookieHttponly: boolean;
  cookieSamesite: string;
  cookieSecure: boolean;
  csrfTokenTimeout: number;
  enableAuditLogging: boolean;
  enableRequestValidation: boolean;
  sessionTimeout: number;
}

export interface ServerDebugSettings {
  enabled: boolean;
  enableDataDebug: boolean;
  enableWebsocketDebug: boolean;
  logBinaryHeaders: boolean;
  logFullJson: boolean;
}

export interface PhysicsSettings {
  attractionStrength: number;
  boundsSize: number;
  collisionRadius: number;
  damping: number;
  enableBounds: boolean;
  enabled: boolean;
  iterations: number;
  maxVelocity: number;
  repulsionStrength: number;
  springStrength: number;
}

export interface RenderingSettings {
  ambientLightIntensity: number;
  backgroundColor: string;
  directionalLightIntensity: number;
  enableAmbientOcclusion: boolean;
  enableAntialiasing: boolean;
  enableShadows: boolean;
  environmentIntensity: number;
}

export interface WebSocketSettings {
  url: string;                   // WebSocket server URL
  heartbeatInterval: number;     // Ping interval in seconds (default: 30)
  heartbeatTimeout: number;      // Connection timeout in seconds (default: 60)
  reconnectAttempts: number;     // Max reconnection attempts (default: 3)
  reconnectDelay: number;        // Delay between reconnects in ms (default: 5000)
  binaryChunkSize: number;       // Size of binary chunks
  compressionEnabled: boolean;   // Enable/disable compression
  compressionThreshold: number;  // Compression threshold
  maxConnections: number;        // Maximum connections
  maxMessageSize: number;        // Maximum message size
  updateRate: number;           // Update rate in Hz
}

export interface Settings {
  animations: AnimationSettings;
  ar: ARSettings;
  audio: AudioSettings;
  bloom: BloomSettings;
  clientDebug: ClientDebugSettings;
  default: DefaultSettings;
  edges: EdgeSettings;
  hologram: HologramSettings;
  labels: LabelSettings;
  network: NetworkSettings;
  nodes: NodeSettings;
  physics: PhysicsSettings;
  rendering: RenderingSettings;
  security: SecuritySettings;
  serverDebug: ServerDebugSettings;
  websocket: WebSocketSettings;
}

export type SettingCategory = keyof Settings;
export type SettingKey<T extends SettingCategory> = keyof Settings[T];
export type SettingValue = string | number | boolean | number[] | string[];

// WebSocket message types
export type MessageType = 
  | 'binaryPositionUpdate'  // Real-time position/velocity data
  | 'ping'                  // Connection health check
  | 'pong'                 // Connection health response
  | 'connectionStatus'     // Connection status updates
  | 'enableBinaryUpdates'; // Enable/disable binary updates

// Base WebSocket message interface
export interface BaseWebSocketMessage {
  type: MessageType;
}

// Binary position update message (server -> client)
export interface BinaryPositionUpdateMessage extends BaseWebSocketMessage {
  type: 'binaryPositionUpdate';
  data: ArrayBuffer;  // Raw binary data (24 bytes per node: 6 floats x 4 bytes)
}

// Connection health messages
export interface PingMessage extends BaseWebSocketMessage {
  type: 'ping';
  timestamp: number;
}

export interface PongMessage extends BaseWebSocketMessage {
  type: 'pong';
  timestamp: number;
}

export type WebSocketMessage =
  | BinaryPositionUpdateMessage
  | PingMessage
  | PongMessage;

// WebSocket error types
export enum WebSocketErrorType {
  CONNECTION_ERROR = 'CONNECTION_ERROR',       // Failed to establish connection
  CONNECTION_LOST = 'CONNECTION_LOST',         // Connection was lost
  TIMEOUT = 'TIMEOUT',                        // Connection timed out
  BINARY_FORMAT_ERROR = 'BINARY_FORMAT_ERROR', // Invalid binary data format
}

export interface WebSocketError {
  type: WebSocketErrorType;
  message: string;
  code?: number;
  details?: any;
}

// Logger interface
export interface Logger {
  log: (message: string, ...args: any[]) => void;
  error: (message: string, ...args: any[]) => void;
  warn: (message: string, ...args: any[]) => void;
  debug: (message: string, ...args: any[]) => void;
  info: (message: string, ...args: any[]) => void;
}

// Helper functions
export function transformGraphData(data: any): GraphData {
  return {
    nodes: data.nodes.map((node: any) => transformNodeData(node)),
    edges: data.edges,
    metadata: data.metadata
  };
}

export function transformNodeData(node: any): Node {
  return {
    id: node.id,
    data: {
      position: node.data.position,
      velocity: node.data.velocity || { x: 0, y: 0, z: 0 }
    },
    color: node.color,
    metadata: node.metadata
  };
}

----
core/api.ts
/**
 * API configuration and utilities
 */

// Use relative URLs in both development and production
export const API_BASE = '';  // Empty string means use relative URLs

// Helper function to build API URLs
export function buildApiUrl(path: string): string {
    // Ensure path starts with /api/
    if (!path.startsWith('/api/')) {
        path = `/api/${path}`;
    }
    return `${API_BASE}${path}`;
}

// Helper function to build settings URL
export function buildSettingsUrl(category: string, setting?: string): string {
    const base = `visualization/settings/${category}`;
    return buildApiUrl(setting ? `${base}/${setting}` : base);
}

// Helper function to build WebSocket URL
export function buildWsUrl(): string {
    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    const host = window.location.host;
    return `${protocol}//${host}/wss`;
}

----
types/webxr.d.ts
/**
 * WebXR API type extensions
 */

declare module 'three' {
  interface Object3DEventMap {
    connected: XRControllerEvent;
    disconnected: XRControllerEvent;
  }
}

interface XRControllerEvent extends THREE.Event {
  type: 'connected' | 'disconnected';
  data: XRInputSource;
}

interface XRLightEstimate {
  primaryLightIntensity?: { value: number };
  primaryLightDirection?: { x: number; y: number; z: number };
}

// Extend existing WebXR types
declare global {
  interface XRFrame {
    // Make getLightEstimate optional
    getLightEstimate?(): XRLightEstimate | null;
    getHitTestResults(hitTestSource: XRHitTestSource): XRHitTestResult[];
    getViewerPose(referenceSpace: XRReferenceSpace): XRViewerPose | null;
    getPose(space: XRSpace, baseSpace: XRReferenceSpace): XRPose | null;
  }

  interface XRSession {
    requestReferenceSpace(type: XRReferenceSpaceType): Promise<XRReferenceSpace>;
    // Make requestHitTestSource non-optional
    requestHitTestSource(options: XRHitTestOptionsInit): Promise<XRHitTestSource>;
    end(): Promise<void>;
    addEventListener(type: string, listener: EventListener): void;
    removeEventListener(type: string, listener: EventListener): void;
  }

  interface XRHitTestOptionsInit {
    space: XRSpace;
    offsetRay?: XRRay;
  }

  interface XRHitTestSource {
    cancel(): void;
  }

  interface XRHitTestResult {
    getPose(baseSpace: XRSpace): XRPose | null;
  }

  interface XRPose {
    transform: XRRigidTransform;
  }

  interface XRViewerPose extends XRPose {
    views: XRView[];
  }

  interface XRView {
    projectionMatrix: Float32Array;
    transform: XRRigidTransform;
  }

  interface XRRigidTransform {
    matrix: Float32Array;
    position: { x: number; y: number; z: number };
    orientation: { x: number; y: number; z: number; w: number };
  }

  interface XRReferenceSpace extends XRSpace {
    getOffsetReferenceSpace(originOffset: XRRigidTransform): XRReferenceSpace;
  }

  interface XRSpace {}

  interface XRRay {
    origin: DOMPointReadOnly;
    direction: DOMPointReadOnly;
    matrix: Float32Array;
  }

  type XRReferenceSpaceType = 
    | 'viewer'
    | 'local'
    | 'local-floor'
    | 'bounded-floor'
    | 'unbounded';

  interface XRInputSource {
    handedness: 'none' | 'left' | 'right';
    targetRayMode: 'gaze' | 'tracked-pointer' | 'screen';
    targetRaySpace: XRSpace;
    gripSpace?: XRSpace;
    profiles: string[];
    gamepad?: Gamepad;
    hand?: XRHand;
  }

  interface XRHand extends Map<XRHandJoint, XRJointSpace> {
    get(joint: XRHandJoint): XRJointSpace | undefined;
  }

  type XRHandJoint =
    | 'wrist'
    | 'thumb-metacarpal'
    | 'thumb-phalanx-proximal'
    | 'thumb-phalanx-distal'
    | 'thumb-tip'
    | 'index-finger-metacarpal'
    | 'index-finger-phalanx-proximal'
    | 'index-finger-phalanx-intermediate'
    | 'index-finger-phalanx-distal'
    | 'index-finger-tip';

  interface XRJointSpace extends XRSpace {
    jointRadius: number | undefined;
  }

  interface Navigator {
    xr?: {
      isSessionSupported(mode: string): Promise<boolean>;
      requestSession(mode: string, options?: XRSessionInit): Promise<XRSession>;
    };
  }

  interface XRSessionInit {
    requiredFeatures?: string[];
    optionalFeatures?: string[];
  }
}

// Prevent conflicts with @types/webxr
declare module '@types/webxr' {
  export {};
}

----
types/three-ext.d.ts
declare module 'three/examples/jsm/controls/OrbitControls' {
  import { Camera, EventDispatcher, MOUSE, TOUCH, Vector3 } from 'three';

  export class OrbitControls extends EventDispatcher {
    constructor(object: Camera, domElement?: HTMLElement);

    object: Camera;
    domElement: HTMLElement | HTMLDocument;

    enabled: boolean;
    target: Vector3;

    minDistance: number;
    maxDistance: number;

    minZoom: number;
    maxZoom: number;

    minPolarAngle: number;
    maxPolarAngle: number;

    minAzimuthAngle: number;
    maxAzimuthAngle: number;

    enableDamping: boolean;
    dampingFactor: number;

    enableZoom: boolean;
    zoomSpeed: number;

    enableRotate: boolean;
    rotateSpeed: number;

    enablePan: boolean;
    panSpeed: number;
    screenSpacePanning: boolean;
    keyPanSpeed: number;

    autoRotate: boolean;
    autoRotateSpeed: number;

    enableKeys: boolean;

    keys: { LEFT: number; UP: number; RIGHT: number; BOTTOM: number };
    mouseButtons: { LEFT: MOUSE; MIDDLE: MOUSE; RIGHT: MOUSE };
    touches: { ONE: TOUCH; TWO: TOUCH };

    update(): boolean;
    dispose(): void;
  }
}

declare module 'three/examples/jsm/webxr/XRControllerModelFactory' {
  import { Group, Texture } from 'three';

  export class XRControllerModelFactory {
    constructor();
    createControllerModel(controller: Group): Group;
  }
}

declare module 'three/examples/jsm/postprocessing/EffectComposer' {
  import { WebGLRenderer, WebGLRenderTarget } from 'three';

  export class Pass {
    enabled: boolean;
    needsSwap: boolean;
    clear: boolean;
    renderToScreen: boolean;

    setSize(width: number, height: number): void;
    render(renderer: WebGLRenderer, writeBuffer: WebGLRenderTarget, readBuffer: WebGLRenderTarget, deltaTime?: number, maskActive?: boolean): void;
  }

  export class EffectComposer {
    constructor(renderer: WebGLRenderer, renderTarget?: WebGLRenderTarget);
    
    renderTarget1: WebGLRenderTarget;
    renderTarget2: WebGLRenderTarget;
    writeBuffer: WebGLRenderTarget;
    readBuffer: WebGLRenderTarget;
    passes: Pass[];
    
    swapBuffers(): void;
    addPass(pass: Pass): void;
    insertPass(pass: Pass, __index: number): void;
    removePass(pass: Pass): void;
    render(deltaTime?: number): void;
    reset(renderTarget?: WebGLRenderTarget): void;
    setSize(width: number, height: number): void;
    dispose(): void;
  }
}

declare module 'three/examples/jsm/postprocessing/RenderPass' {
  import { Scene, Camera } from 'three';
  import { Pass } from 'three/examples/jsm/postprocessing/EffectComposer';

  export class RenderPass extends Pass {
    constructor(scene: Scene, camera: Camera);
    scene: Scene;
    camera: Camera;
  }
}

declare module 'three/examples/jsm/postprocessing/UnrealBloomPass' {
  import { Vector2 } from 'three';
  import { Pass } from 'three/examples/jsm/postprocessing/EffectComposer';

  export class UnrealBloomPass extends Pass {
    constructor(resolution: Vector2, strength?: number, radius?: number, threshold?: number);
    resolution: Vector2;
    strength: number;
    radius: number;
    threshold: number;
  }
}

----
types/three.d.ts
declare module 'three' {
  export interface Event {
    type: string;
    target: Group;
  }

  export interface XRControllerEvent extends Event {
    type: 'connected' | 'disconnected';
    target: Group;
    data: XRInputSource;
  }

  export interface Object3DEventMap {
    connected: XRControllerEvent;
    disconnected: XRControllerEvent;
  }

  export interface EventDispatcher<E extends Event = Event> {
    addEventListener<T extends E['type']>(type: T, listener: (event: E & { type: T }) => void): void;
    removeEventListener<T extends E['type']>(type: T, listener: (event: E & { type: T }) => void): void;
    dispatchEvent(event: E): void;
  }

  export class Layers {
    mask: number;
    set(layer: number): void;
    enable(layer: number): void;
    disable(layer: number): void;
    toggle(layer: number): void;
    test(layers: Layers): boolean;
  }

  export class Object3D implements EventDispatcher<Event & XRControllerEvent> {
    position: Vector3;
    quaternion: Quaternion;
    scale: Vector3;
    matrix: Matrix4;
    matrixWorld: Matrix4;
    children: Object3D[];
    parent: Object3D | null;
    userData: any;
    visible: boolean;
    renderOrder: number;
    frustumCulled: boolean;
    matrixAutoUpdate: boolean;
    layers: Layers;
    add(...objects: Object3D[]): this;
    remove(...objects: Object3D[]): this;
    rotateX(angle: number): this;
    rotateY(angle: number): this;
    rotateZ(angle: number): this;
    updateMatrix(): void;
    updateMatrixWorld(force?: boolean): void;
    traverse(callback: (object: Object3D) => void): void;
    lookAt(x: number | Vector3, y?: number, z?: number): void;
    addEventListener<K extends keyof Object3DEventMap>(
      type: K,
      listener: (event: Object3DEventMap[K]) => void
    ): void;
    addEventListener(
      type: string,
      listener: (event: Event) => void
    ): void;
    removeEventListener<K extends keyof Object3DEventMap>(
      type: K,
      listener: (event: Object3DEventMap[K]) => void
    ): void;
    removeEventListener(
      type: string,
      listener: (event: Event) => void
    ): void;
    dispatchEvent(event: Event): void;
  }

  export class Group extends Object3D {
    constructor();
  }

  export class Scene extends Object3D {
    constructor();
    fog: FogExp2 | null;
    background: Color | Texture | null;
  }

  export class Material {
    transparent: boolean;
    opacity: number;
    depthWrite: boolean;
    depthTest: boolean;
    side: Side;
    color: Color;
    dispose(): void;
  }

  export class Mesh extends Object3D {
    constructor(geometry: BufferGeometry, material: Material);
    geometry: BufferGeometry;
    material: Material;
  }

  export class GridHelper extends Object3D {
    constructor(size: number, divisions: number, color1?: ColorRepresentation, color2?: ColorRepresentation);
    material: Material;
    geometry: BufferGeometry;
  }

  export class Light extends Object3D {
    constructor(color?: ColorRepresentation, intensity?: number);
    intensity: number;
  }

  export class DirectionalLight extends Light {
    constructor(color?: ColorRepresentation, intensity?: number);
    intensity: number;
  }

  export class AmbientLight extends Light {
    constructor(color?: ColorRepresentation, intensity?: number);
  }

  export class BufferAttribute {
    array: ArrayLike<number>;
    itemSize: number;
    count: number;
    normalized: boolean;
    needsUpdate: boolean;
    constructor(array: ArrayLike<number>, itemSize: number, normalized?: boolean);
    setX(index: number, x: number): this;
    setY(index: number, y: number): this;
    setZ(index: number, z: number): this;
    setW(index: number, w: number): this;
    setXY(index: number, x: number, y: number): this;
    setXYZ(index: number, x: number, y: number, z: number): this;
    setXYZW(index: number, x: number, y: number, z: number, w: number): this;
  }

  export class InstancedBufferAttribute extends BufferAttribute {
    constructor(array: ArrayLike<number>, itemSize: number, normalized?: boolean, meshPerAttribute?: number);
    meshPerAttribute: number;
  }

  export class InstancedMesh extends Mesh {
    constructor(geometry: BufferGeometry, material: Material | Material[], count: number);
    count: number;
    instanceMatrix: InstancedBufferAttribute;
    instanceColor: InstancedBufferAttribute | null;
    frustumCulled: boolean;
    setColorAt(index: number, color: Color): void;
    setMatrixAt(index: number, matrix: Matrix4): void;
    getMatrixAt(index: number, matrix: Matrix4): void;
    getColorAt(index: number, color: Color): void;
    dispose(): void;
  }

  export class MeshBasicMaterial extends Material {
    constructor(parameters?: MeshBasicMaterialParameters);
  }

  export class MeshPhongMaterial extends Material {
    constructor(parameters?: MeshPhongMaterialParameters);
    shininess: number;
    specular: Color;
  }

  export class SpriteMaterial extends Material {
    constructor(parameters?: SpriteMaterialParameters);
    map: Texture | null;
    color: Color;
    sizeAttenuation: boolean;
    rotation: number;
  }

  export class BufferGeometry {
    dispose(): void;
    rotateX(angle: number): this;
    rotateY(angle: number): this;
    rotateZ(angle: number): this;
    setAttribute(name: string, attribute: BufferAttribute): this;
    setIndex(index: BufferAttribute): this;
  }

  export class PlaneGeometry extends BufferGeometry {
    constructor(width?: number, height?: number, widthSegments?: number, heightSegments?: number);
  }

  export class SphereGeometry extends BufferGeometry {
    constructor(radius?: number, widthSegments?: number, heightSegments?: number);
  }

  export class CylinderGeometry extends BufferGeometry {
    constructor(
      radiusTop?: number,
      radiusBottom?: number,
      height?: number,
      radialSegments?: number
    );
  }

  export class RingGeometry extends BufferGeometry {
    constructor(
      innerRadius?: number,
      outerRadius?: number,
      thetaSegments?: number
    );
  }

  export class Vector2 {
    x: number;
    y: number;
    constructor(x?: number, y?: number);
    set(x: number, y: number): this;
  }

  export class Vector3 {
    x: number;
    y: number;
    z: number;
    constructor(x?: number, y?: number, z?: number);
    set(x: number, y: number, z: number): this;
    copy(v: Vector3): this;
    add(v: Vector3): this;
    sub(v: Vector3): this;
    multiply(v: Vector3): this;
    multiplyScalar(s: number): this;
    normalize(): this;
    dot(v: Vector3): number;
    cross(v: Vector3): this;
    length(): number;
    lengthSq(): number;
    clone(): Vector3;
    fromArray(array: number[] | ArrayLike<number>, offset?: number): this;
    subVectors(a: Vector3, b: Vector3): this;
    addVectors(a: Vector3, b: Vector3): this;
    crossVectors(a: Vector3, b: Vector3): this;
    setFromMatrixPosition(m: Matrix4): this;
    distanceTo(v: Vector3): number;
    applyMatrix4(m: Matrix4): this;
    lookAt(v: Vector3): this;
  }

  export class Matrix4 {
    elements: number[];
    constructor();
    set(...elements: number[]): this;
    identity(): this;
    copy(m: Matrix4): this;
    compose(position: Vector3, quaternion: Quaternion, scale: Vector3): this;
    decompose(position: Vector3, quaternion: Quaternion, scale: Vector3): this;
    fromArray(array: ArrayLike<number>, offset?: number): this;
    extractRotation(m: Matrix4): this;
    makeRotationFromQuaternion(q: Quaternion): this;
  }

  export class Quaternion {
    x: number;
    y: number;
    z: number;
    w: number;
    constructor(x?: number, y?: number, z?: number, w?: number);
    setFromAxisAngle(axis: Vector3, angle: number): this;
    identity(): this;
  }

  export class Color {
    constructor(color?: ColorRepresentation);
    set(color: ColorRepresentation): this;
  }

  export class Sprite extends Object3D {
    constructor(material: SpriteMaterial);
    material: SpriteMaterial;
  }

  export class Raycaster {
    constructor();
    ray: Ray;
    near: number;
    far: number;
    camera: Camera;
    params: {
      Mesh?: {},
      Line?: {},
      LOD?: {},
      Points?: { threshold: number },
      Sprite?: {}
    };
    setFromCamera(coords: Vector2, camera: Camera): void;
    intersectObject(object: Object3D, recursive?: boolean, intersects?: Intersection[]): Intersection[];
    intersectObjects(objects: Object3D[], recursive?: boolean, intersects?: Intersection[]): Intersection[];
  }

  export class Ray {
    origin: Vector3;
    direction: Vector3;
    constructor(origin?: Vector3, direction?: Vector3);
  }

  export class WebGLRenderer {
    constructor(parameters?: WebGLRendererParameters);
    domElement: HTMLCanvasElement;
    setSize(width: number, height: number, updateStyle?: boolean): void;
    setPixelRatio(value: number): void;
    render(scene: Scene, camera: Camera): void;
    dispose(): void;
    xr: WebXRManager;
  }

  export class WebXRManager {
    enabled: boolean;
    setSession(session: XRSession): Promise<void>;
  }

  export class Camera extends Object3D {
    matrixWorldInverse: Matrix4;
    projectionMatrix: Matrix4;
    projectionMatrixInverse: Matrix4;
    layers: Layers;
    lookAt(target: Vector3 | number, y?: number, z?: number): void;
  }

  export class PerspectiveCamera extends Camera {
    constructor(fov?: number, aspect?: number, near?: number, far?: number);
    fov: number;
    aspect: number;
    near: number;
    far: number;
    updateProjectionMatrix(): void;
    lookAt(target: Vector3 | number, y?: number, z?: number): void;
  }

  export interface MaterialParameters {
    color?: ColorRepresentation;
    transparent?: boolean;
    opacity?: number;
    side?: Side;
    depthWrite?: boolean;
    depthTest?: boolean;
    map?: Texture;
  }

  export interface MeshBasicMaterialParameters extends MaterialParameters {}
  export interface MeshPhongMaterialParameters extends MaterialParameters {
    shininess?: number;
    specular?: ColorRepresentation;
  }
  export interface SpriteMaterialParameters extends MaterialParameters {
    sizeAttenuation?: boolean;
    rotation?: number;
  }

  export class Texture {
    constructor(image?: HTMLImageElement | HTMLCanvasElement);
    needsUpdate: boolean;
    dispose(): void;
  }

  export class FogExp2 {
    constructor(color: ColorRepresentation, density?: number);
    color: Color;
    density: number;
  }

  export interface Intersection {
    distance: number;
    point: Vector3;
    face: { normal: Vector3 } | null;
    object: Object3D;
  }

  export class MathUtils {
    static clamp(value: number, min: number, max: number): number;
    static degToRad(degrees: number): number;
    static radToDeg(radians: number): number;
    static lerp(x: number, y: number, t: number): number;
    static smoothstep(x: number, min: number, max: number): number;
  }

  export const DoubleSide: Side;
  export type Side = 0 | 1 | 2;
  export type ColorRepresentation = Color | string | number;
}

----
types/env.d.ts
/// <reference types="vite/client" />

interface ImportMetaEnv {
  readonly VITE_APP_TITLE: string;
  readonly DEV: boolean;
  readonly PROD: boolean;
  readonly MODE: string;
}

interface ImportMeta {
  readonly env: ImportMetaEnv;
}

----
types/xr.ts
import * as THREE from 'three';
import { Platform } from '../core/types';

// Using WebXR types from global declarations

// XR Controller and Hand Types
export interface XRControllerState {
    position: THREE.Vector3;
    rotation: THREE.Quaternion;
    hapticActuator?: {
        pulse: (intensity: number, duration: number) => Promise<boolean>;
    };
    platform: Platform;
}

export interface XRHandJointState {
    position: THREE.Vector3;
    rotation: THREE.Quaternion;
    radius?: number;
}

export interface XRHandState {
    position: THREE.Vector3;
    joints: Map<XRHandJoint, XRHandJointState>;
    pinchStrength: number;
    gripStrength: number;
    platform: Platform;
}

export interface XRHandWithHaptics extends THREE.Group {
    hapticActuators?: {
        pulse: (intensity: number, duration: number) => Promise<boolean>;
    }[];
    hand: {
        joints: {
            [key in XRHandJoint]?: THREE.Object3D;
        };
    };
    pinchStrength: number;
    gripStrength: number;
    userData: {
        hapticActuator?: {
            pulse: (intensity: number, duration: number) => Promise<boolean>;
        };
        platform: Platform;
    };
}

// XR Session Types
export interface XRSessionConfig {
    mode: XRSessionMode;
    features: {
        required?: string[];
        optional?: string[];
    };
    spaceType: XRReferenceSpaceType;
}

export type XRSessionMode = 'inline' | 'immersive-vr' | 'immersive-ar';

// XR Input Types
export interface XRInputConfig {
    controllers: boolean;
    hands: boolean;
    haptics: boolean;
}

// XR Event Types
export interface XRControllerEvent {
    controller: XRSpace;
    inputSource: XRInputSource;
    hapticActuator?: {
        pulse: (intensity: number, duration: number) => Promise<boolean>;
    };
}

export interface XRHandEvent {
    hand: XRHandWithHaptics;
    inputSource: XRInputSource;
}

// XR Interaction Types
export interface XRInteractionState {
    pinching: boolean;
    pinchStrength: number;
    gripping: boolean;
    gripStrength: number;
    position: THREE.Vector3;
    rotation: THREE.Quaternion;
}

----
types/metadata.ts
export interface NodeMetadata {
    id: string;              // Unique identifier
    name: string;
    commitAge: number;        // Age in days
    hyperlinkCount: number;   // Number of hyperlinks
    importance: number;       // Normalized importance (0-1)
    position: {
        x: number;
        y: number;
        z: number;
    };
}

// Alias for backward compatibility and clarity
export type Metadata = NodeMetadata;

----
types/settings.ts
import { Settings, SettingCategory, SettingKey } from '../core/types';
export type { Settings, SettingCategory, SettingKey };

// Helper type to get the value type for a specific setting
export type SettingValueType<T extends SettingCategory, K extends SettingKey<T>> = Settings[T][K];

export interface SettingsManager {
    getCurrentSettings(): Settings;
    getDefaultSettings(): Settings;
    initialize(): Promise<void>;
    updateSetting<T extends SettingCategory, K extends SettingKey<T>>(
        category: T,
        setting: K,
        value: SettingValueType<T, K>
    ): Promise<void>;
    subscribe<T extends SettingCategory, K extends SettingKey<T>>(
        category: T,
        setting: K,
        callback: (value: SettingValueType<T, K>) => void
    ): () => void;
    dispose(): void;
}

----
types/websocket.ts
// WebSocket types for graph synchronization

export enum ConnectionState {
    DISCONNECTED = 'DISCONNECTED',
    CONNECTING = 'CONNECTING',
    CONNECTED = 'CONNECTED',
    RECONNECTING = 'RECONNECTING'
}

export enum MessageType {
    PING = 'ping',                          // Connection health check
    PONG = 'pong'                           // Connection health response
}

// Connection health messages
export interface PingMessage {
    type: MessageType.PING;
    timestamp: number;
}

export interface PongMessage {
    type: MessageType.PONG;
    timestamp: number;
}

export type WebSocketMessage = PingMessage | PongMessage;

// WebSocket settings loaded via REST API
export interface WebSocketSettings {
    url: string;                   // WebSocket server URL
    heartbeatInterval: number;     // Ping interval in seconds (default: 30)
    heartbeatTimeout: number;      // Connection timeout in seconds (default: 3600)
    reconnectAttempts: number;     // Max reconnection attempts (default: 3)
    reconnectDelay: number;        // Delay between reconnects in ms (default: 5000)
    updateRate: number;            // Update rate in Hz
}

----
components/settings/FPSControl.tsx
import React from 'react';
import { Select, FormControl, InputLabel, MenuItem } from '@mui/material';
import { useSettings } from '../../state/settings';

const FPS_OPTIONS = [1, 30, 60, 90];

export const FPSControl: React.FC = () => {
  const { settings, updateSettings } = useSettings();

  const handleChange = async (event: any) => {
    const newRate = event.target.value;
    try {
      await updateSettings('websocket', {
        updateRate: newRate
      });
    } catch (error) {
      console.error('Failed to update FPS:', error);
    }
  };

  return (
    <FormControl fullWidth>
      <InputLabel id="fps-select-label">Frame Rate</InputLabel>
      <Select
        labelId="fps-select-label"
        id="fps-select"
        value={settings.websocket.updateRate}
        label="Frame Rate"
        onChange={handleChange}
      >
        {FPS_OPTIONS.map((fps) => (
          <MenuItem key={fps} value={fps}>
            {fps} FPS
          </MenuItem>
        ))}
      </Select>
    </FormControl>
  );
};

----
rendering/MetadataVisualizer.ts
import { 
    Color, 
    Matrix4, 
    Mesh, 
    PerspectiveCamera, 
    Scene, 
    Vector3, 
    Material,
    MeshBasicMaterial,
    Quaternion
} from 'three';
import { GeometryFactory } from './factories/GeometryFactory';
import { MaterialFactory } from './factories/MaterialFactory';
import { Metadata } from '../types/metadata';
import { Settings } from '../core/types';
import { defaultSettings } from '../state/defaultSettings';

export class MetadataVisualizer {
    private readonly camera: PerspectiveCamera;
    private readonly scene: Scene;
    private readonly geometryFactory: GeometryFactory;
    private readonly materialFactory: MaterialFactory;
    private readonly settings: Settings;
    private nodes: Map<string, Mesh> = new Map();

    constructor(camera: PerspectiveCamera, scene: Scene, settings: Settings = defaultSettings) {
        this.camera = camera;
        this.scene = scene;
        this.settings = settings;
        this.geometryFactory = GeometryFactory.getInstance();
        this.materialFactory = MaterialFactory.getInstance();
    }

    public createNodeMesh(metadata: Metadata): Mesh {
        const geometry = this.geometryFactory.getNodeGeometry(this.settings.hologram.desktopQuality);
        const material = this.materialFactory.getMetadataMaterial();
        
        const mesh = new Mesh(geometry, material);
        mesh.position.set(
            metadata.position?.x || 0,
            metadata.position?.y || 0,
            metadata.position?.z || 0
        );
        
        this.nodes.set(metadata.id, mesh);
        this.scene.add(mesh);
        
        return mesh;
    }

    public dispose(): void {
        this.nodes.forEach(mesh => {
            this.scene.remove(mesh);
            mesh.geometry.dispose();
            if (Array.isArray(mesh.material)) {
                mesh.material.forEach(m => m.dispose());
            } else {
                mesh.material.dispose();
            }
        });
        this.nodes.clear();
    }

    public updateNodeMetadata(
        mesh: Mesh,
        _age: number,
        linkCount: number,
        material: Material
    ): void {
        // Calculate color based on link count
        if (material instanceof MeshBasicMaterial) {
            // Simple color interpolation based on link count
            const intensity = Math.min(linkCount / 10, 1); // Cap at 10 links
            
            // Convert RGB values to hex
            const red = Math.floor(intensity * 255);
            const green = Math.floor((1 - intensity) * 255);
            const blue = 0;
            const hexColor = (red << 16) | (green << 8) | blue;
            
            // Create and assign color
            const newColor = new Color(hexColor);
            material.color = newColor;
        }

        // Update mesh orientation to face camera
        const meshPosition = mesh.position;
        const cameraPosition = this.camera.position;

        // Calculate direction from mesh to camera
        const direction = new Vector3()
            .subVectors(cameraPosition, meshPosition)
            .normalize();

        // Calculate up vector (world up)
        const up = new Vector3(0, 1, 0);

        // Calculate right vector
        const right = new Vector3()
            .crossVectors(up, direction)
            .normalize();

        // Recalculate up vector to ensure orthogonality
        up.crossVectors(direction, right).normalize();

        // Create rotation matrix
        const rotationMatrix = new Matrix4();
        rotationMatrix.elements = [
            right.x, up.x, direction.x, 0,
            right.y, up.y, direction.y, 0,
            right.z, up.z, direction.z, 0,
            0, 0, 0, 1
        ];

        // Create quaternion from direction
        const quaternion = new Quaternion();
        const m = rotationMatrix.elements;
        const trace = m[0] + m[5] + m[10];

        if (trace > 0) {
            const s = 0.5 / Math.sqrt(trace + 1.0);
            quaternion.w = 0.25 / s;
            quaternion.x = (m[6] - m[9]) * s;
            quaternion.y = (m[8] - m[2]) * s;
            quaternion.z = (m[1] - m[4]) * s;
        } else {
            if (m[0] > m[5] && m[0] > m[10]) {
                const s = 2.0 * Math.sqrt(1.0 + m[0] - m[5] - m[10]);
                quaternion.w = (m[6] - m[9]) / s;
                quaternion.x = 0.25 * s;
                quaternion.y = (m[1] + m[4]) / s;
                quaternion.z = (m[8] + m[2]) / s;
            } else if (m[5] > m[10]) {
                const s = 2.0 * Math.sqrt(1.0 + m[5] - m[0] - m[10]);
                quaternion.w = (m[8] - m[2]) / s;
                quaternion.x = (m[1] + m[4]) / s;
                quaternion.y = 0.25 * s;
                quaternion.z = (m[6] + m[9]) / s;
            } else {
                const s = 2.0 * Math.sqrt(1.0 + m[10] - m[0] - m[5]);
                quaternion.w = (m[1] - m[4]) / s;
                quaternion.x = (m[8] + m[2]) / s;
                quaternion.y = (m[6] + m[9]) / s;
                quaternion.z = 0.25 * s;
            }
        }

        // Apply rotation
        mesh.quaternion.x = quaternion.x;
        mesh.quaternion.y = quaternion.y;
        mesh.quaternion.z = quaternion.z;
        mesh.quaternion.w = quaternion.w;
    }
}

----
rendering/textRenderer.ts
import type { LabelSettings } from '../core/types';
import { settingsManager } from '../state/settings';
import { createLogger } from '../core/logger';
import * as THREE from 'three';

const logger = createLogger('TextRenderer');

interface LabelState {
    text: string;
    position: THREE.Vector3;
    visible: boolean;
    boundingBox?: THREE.Object3D;
}

export class TextRenderer {
    private labels: Map<string, THREE.Group>;
    private camera: THREE.Camera;
    private labelStates: Map<string, LabelState>;
    private unsubscribers: Array<() => void> = [];
    private projMatrix: THREE.Matrix4;
    private viewMatrix: THREE.Matrix4;
    private currentSettings: LabelSettings;

    constructor(camera: THREE.Camera) {
        this.camera = camera;
        this.labels = new Map();
        this.labelStates = new Map();
        this.projMatrix = new THREE.Matrix4();
        this.viewMatrix = new THREE.Matrix4();
        this.currentSettings = settingsManager.getCurrentSettings().labels;
        this.setupSettingsSubscriptions();
    }

    private setupSettingsSubscriptions(): void {
        Object.keys(this.currentSettings).forEach(setting => {
            const unsubscribe = settingsManager.subscribe('labels', setting as keyof LabelSettings, (value) => {
                this.handleSettingChange(setting as keyof LabelSettings, value);
            });
            this.unsubscribers.push(unsubscribe);
        });
    }

    private handleSettingChange(setting: keyof LabelSettings, value: any): void {
        try {
            switch (setting) {
                case 'desktopFontSize':
                    this.updateFontSize(value as number);
                    break;
                case 'textColor':
                    this.updateTextColor(value as string);
                    break;
                case 'enableLabels':
                    this.updateLabelVisibility(value as boolean);
                    break;
                default:
                    // Other settings handled elsewhere
                    break;
            }
        } catch (error) {
            logger.error(`Error handling setting change for ${setting}:`, error);
        }
    }

    private updateFontSize(fontSize: number): void {
        if (!this.labels) return;
        
        this.labels.forEach((group) => {
            group.children.forEach((child) => {
                if (child instanceof THREE.Mesh && child.userData.text) {
                    const material = child.material as THREE.MeshBasicMaterial;
                    material.dispose();
                    
                    // Create new text geometry with updated font size
                    const geometry = this.createTextGeometry(child.userData.text, {
                        fontSize,
                        position: child.position.clone()
                    });
                    
                    // Replace old geometry
                    child.geometry.dispose();
                    child.geometry = geometry;
                }
            });
        });
    }

    private createTextGeometry(text: string, { fontSize, position }: { fontSize: number; position: THREE.Vector3 }): THREE.BufferGeometry {
        // Create a simple plane geometry as a placeholder
        // In a real implementation, this would create actual text geometry based on the font and text
        const width = fontSize * text.length * 0.5;
        const height = fontSize;
        
        // Create vertices for a simple plane
        const vertices = new Float32Array([
            -width/2 + position.x, -height/2 + position.y, position.z,  // bottom left
            width/2 + position.x, -height/2 + position.y, position.z,   // bottom right
            width/2 + position.x, height/2 + position.y, position.z,    // top right
            -width/2 + position.x, height/2 + position.y, position.z    // top left
        ]);

        // Create UVs
        const uvs = new Float32Array([
            0, 0,  // bottom left
            1, 0,  // bottom right
            1, 1,  // top right
            0, 1   // top left
        ]);

        // Create indices
        const indices = new Uint16Array([
            0, 1, 2,  // first triangle
            0, 2, 3   // second triangle
        ]);

        // Create normals (facing forward in this case)
        const normals = new Float32Array([
            0, 0, 1,
            0, 0, 1,
            0, 0, 1,
            0, 0, 1
        ]);

        const geometry = new THREE.BufferGeometry();
        geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));
        geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));
        geometry.setAttribute('uv', new THREE.BufferAttribute(uvs, 2));
        geometry.setIndex(new THREE.BufferAttribute(indices, 1));

        return geometry;
    }

    private updateTextColor(newColor: string): void {
        if (!this.labels) return;
        
        this.labels.forEach((group) => {
            group.children.forEach((child) => {
                if (child instanceof THREE.Mesh) {
                    const material = child.material as THREE.MeshBasicMaterial;
                    material.color.set(newColor);
                    material.dispose();
                    material.color.set(newColor);
                }
            });
        });
    }

    private updateLabelVisibility(visible: boolean): void {
        // Update visibility for all labels
        this.labels.forEach((labelGroup) => {
            labelGroup.visible = visible;
        });
    }

    public updateLabel(id: string, text: string, position: THREE.Vector3): void {
        try {
            let labelGroup = this.labels.get(id);
            if (!labelGroup) {
                labelGroup = new THREE.Group();
                this.labels.set(id, labelGroup);
            }

            const state: LabelState = {
                text,
                position: position.clone(),
                visible: true
            };
            this.labelStates.set(id, state);

            // Update style and position
            this.updateLabelStyle(labelGroup, state);
        } catch (error) {
            logger.error('Error updating label:', error);
        }
    }

    private updateLabelStyle(labelGroup: THREE.Group, state: LabelState): void {
        try {
            // Update position
            labelGroup.position.copy(state.position);

            // Update text content and style
            // Implementation depends on how you're rendering text
            // (e.g., using HTML elements, sprites, or geometry)

            // Update visibility
            labelGroup.visible = this.currentSettings.enableLabels && state.visible;

            // Update bounding box for culling
            state.boundingBox = labelGroup;
        } catch (error) {
            logger.error('Error updating label style:', error);
        }
    }

    public removeLabel(id: string): void {
        try {
            const labelGroup = this.labels.get(id);
            if (labelGroup) {
                // Clean up THREE.js objects
                this.clearLabels();
                this.labels.delete(id);
                this.labelStates.delete(id);
            }
        } catch (error) {
            logger.error('Error removing label:', error);
        }
    }

    private clearLabels(): void {
        if (!this.labels) return;
        
        this.labels.forEach((group) => {
            while (group.children.length > 0) {
                const child = group.children[0];
                group.remove(child);
                if (child instanceof THREE.Mesh) {
                    child.geometry.dispose();
                    if (child.material instanceof THREE.Material) {
                        child.material.dispose();
                    }
                }
            }
        });
    }

    public update(): void {
        try {
            // Update projection and view matrices
            this.camera.updateMatrixWorld();
            this.projMatrix.copy(this.camera.projectionMatrix);
            this.viewMatrix.copy(this.camera.matrixWorldInverse);

            // Update label positions and visibility
            this.labelStates.forEach((state, id) => {
                const labelGroup = this.labels.get(id);
                if (!labelGroup) return;

                // Update label position and style
                this.updateLabelStyle(labelGroup, state);
            });
        } catch (error) {
            logger.error('Error updating labels:', error);
        }
    }

    public dispose(): void {
        try {
            // Clean up THREE.js objects
            this.clearLabels();
            this.labels.clear();
            this.labelStates.clear();

            // Clean up subscribers
            this.unsubscribers.forEach(unsubscribe => unsubscribe());
            this.unsubscribers = [];
        } catch (error) {
            logger.error('Error disposing TextRenderer:', error);
        }
    }
}

----
rendering/HologramManager.ts
import {
    Scene,
    Group,
    Mesh,
    Vector3,
    WebGLRenderer
} from 'three';
import { Settings } from '../core/types';
import { GeometryFactory } from './factories/GeometryFactory';
import { MaterialFactory } from './factories/MaterialFactory';
import { HologramShaderMaterial } from './materials/HologramShaderMaterial';

export class HologramManager {
    private readonly group = new Group();
    private isXRMode = false;
    private readonly geometryFactory: GeometryFactory;
    private readonly materialFactory: MaterialFactory;

    constructor(
        private readonly scene: Scene,
        _renderer: WebGLRenderer,  // Used by subclasses
        private settings: Settings
    ) {
        this.geometryFactory = GeometryFactory.getInstance();
        this.materialFactory = MaterialFactory.getInstance();
        this.createHolograms();
        this.scene.add(this.group);
    }

    private createHolograms() {
        while (this.group.children.length > 0) {
            const child = this.group.children[0];
            this.group.remove(child);
            if (child instanceof Mesh) {
                child.geometry.dispose();
                child.material.dispose();
            }
        }

        const quality = this.isXRMode ? this.settings.hologram.xrQuality : this.settings.hologram.desktopQuality;
        const material = this.materialFactory.getHologramMaterial(this.settings);

        for (let i = 0; i < this.settings.hologram.ringCount; i++) {
            const ring = new Mesh(
                this.geometryFactory.getHologramGeometry('ring', quality),
                material.clone()
            );
            const scale = this.settings.hologram.ringSizes[i] || 20;
            ring.scale.set(scale, scale, scale);
            ring.rotateX(Math.PI / 2 * i);
            ring.rotateY(Math.PI / 4 * i);
            ring.userData.rotationSpeed = this.settings.hologram.ringRotationSpeed * (i + 1);
            this.group.add(ring);
        }

        if (this.settings.hologram.enableBuckminster) {
            const mesh = new Mesh(
                this.geometryFactory.getHologramGeometry('buckminster', quality),
                material.clone()
            );
            const scale = this.settings.hologram.buckminsterScale;
            mesh.scale.set(scale, scale, scale);
            (mesh.material as HologramShaderMaterial).uniforms.opacity.value = this.settings.hologram.buckminsterOpacity;
            this.group.add(mesh);
        }

        if (this.settings.hologram.enableGeodesic) {
            const mesh = new Mesh(
                this.geometryFactory.getHologramGeometry('geodesic', quality),
                material.clone()
            );
            const scale = this.settings.hologram.geodesicScale;
            mesh.scale.set(scale, scale, scale);
            (mesh.material as HologramShaderMaterial).uniforms.opacity.value = this.settings.hologram.geodesicOpacity;
            this.group.add(mesh);
        }

        if (this.settings.hologram.enableTriangleSphere) {
            const mesh = new Mesh(
                this.geometryFactory.getHologramGeometry('triangleSphere', quality),
                material.clone()
            );
            const scale = this.settings.hologram.triangleSphereScale;
            mesh.scale.set(scale, scale, scale);
            (mesh.material as HologramShaderMaterial).uniforms.opacity.value = this.settings.hologram.triangleSphereOpacity;
            this.group.add(mesh);
        }
    }

    setXRMode(enabled: boolean) {
        this.isXRMode = enabled;
        this.group.traverse(child => {
            if (child instanceof Mesh && child.material instanceof HologramShaderMaterial) {
                child.material.defines = { USE_AR: '' };
                child.material.needsUpdate = true;
            }
        });
        this.createHolograms();
    }

    handleInteraction(position: Vector3) {
        this.group.traverse(child => {
            if (child instanceof Mesh && child.material instanceof HologramShaderMaterial) {
                const distance = position.distanceTo(child.position);
                if (distance < 0.5) {
                    child.material.uniforms.pulseIntensity.value = 0.4;
                    setTimeout(() => {
                        if (child.material instanceof HologramShaderMaterial) {
                            child.material.uniforms.pulseIntensity.value = 0.2;
                        }
                    }, 500);
                }
            }
        });
    }

    update(deltaTime: number) {
        this.group.traverse(child => {
            if (child instanceof Mesh) {
                child.rotateY((child.userData.rotationSpeed || this.settings.hologram.globalRotationSpeed) * deltaTime);
                if (child.material instanceof HologramShaderMaterial) {
                    child.material.uniforms.time.value += deltaTime;
                }
            }
        });
    }

    updateSettings(newSettings: Partial<Settings>) {
        Object.assign(this.settings, newSettings);
        this.materialFactory.updateMaterial('hologram', this.settings);
        this.createHolograms();
    }

    getGroup() {
        return this.group;
    }

    dispose() {
        // Geometries and materials are managed by the factories
        this.scene.remove(this.group);
    }
}

----
rendering/EnhancedNodeManager.ts
import {
    Scene,
    PerspectiveCamera,
    InstancedMesh,
    Matrix4,
    Vector3,
    Mesh,
    Object3D,
    Quaternion,
    WebGLRenderer
} from 'three';
import { Node, Settings } from '../core/types';
import { MetadataVisualizer } from './MetadataVisualizer';
import { HologramManager } from './HologramManager';
import { XRHandWithHaptics } from '../types/xr';
import { GeometryFactory } from './factories/GeometryFactory';
import { MaterialFactory } from './factories/MaterialFactory';

export class EnhancedNodeManager {
    private readonly nodeInstances: InstancedMesh;
    private readonly metadataVisualizer: MetadataVisualizer;
    private readonly hologramManager: HologramManager;
    private readonly nodeDataMap = new Map<string, Matrix4>();
    private readonly quaternion = new Quaternion();
    private readonly camera: PerspectiveCamera;
    private readonly geometryFactory: GeometryFactory;
    private readonly materialFactory: MaterialFactory;

    constructor(
        private readonly scene: Scene,
        renderer: WebGLRenderer,
        private readonly settings: Settings
    ) {
        // Get the camera from the scene
        const camera = scene.children.find(child => child instanceof PerspectiveCamera) as PerspectiveCamera;
        if (!camera) {
            throw new Error('No PerspectiveCamera found in scene');
        }
        this.camera = camera;

        this.geometryFactory = GeometryFactory.getInstance();
        this.materialFactory = MaterialFactory.getInstance();

        this.metadataVisualizer = new MetadataVisualizer(this.camera, this.scene, this.settings);
        this.hologramManager = new HologramManager(scene, renderer, settings);
        scene.add(this.hologramManager.getGroup());

        const geometry = this.geometryFactory.getNodeGeometry('high');
        const material = this.materialFactory.getNodeMaterial(settings);

        this.nodeInstances = new InstancedMesh(geometry, material, 1000);
        this.nodeInstances.count = 0;
        scene.add(this.nodeInstances);
    }

    handleSettingsUpdate(settings: Settings) {
        this.materialFactory.updateMaterial('node-basic', settings);
    }

    updateNodes(nodes: Node[]) {
        this.nodeInstances.count = nodes.length;

        nodes.forEach((node, index) => {
            const metadata = {
                id: node.id,
                name: node.data.metadata?.name || '',
                commitAge: this.calculateCommitAge(node.data.metadata?.lastModified || Date.now()),
                hyperlinkCount: node.data.metadata?.links?.length || 0,
                importance: this.calculateImportance(node),
                position: {
                    x: node.data.position.x,
                    y: node.data.position.y,
                    z: node.data.position.z
                }
            };

            const matrix = new Matrix4();

            if (this.settings.nodes.enableMetadataShape) {
                const nodeMesh = this.metadataVisualizer.createNodeMesh(metadata);
                nodeMesh.position.set(metadata.position.x, metadata.position.y, metadata.position.z);
                this.scene.add(nodeMesh);
            } else {
                const scale = this.calculateNodeScale(metadata.importance);
                const position = new Vector3(metadata.position.x, metadata.position.y, metadata.position.z);
                matrix.compose(position, this.quaternion, new Vector3(scale, scale, scale));
                this.nodeInstances.setMatrixAt(index, matrix);
            }

            this.nodeDataMap.set(node.id, matrix);
        });

        this.nodeInstances.instanceMatrix.needsUpdate = true;
    }

    private calculateCommitAge(timestamp: number): number {
        const now = Date.now();
        return (now - timestamp) / (1000 * 60 * 60 * 24); // Convert to days
    }

    private calculateImportance(node: Node): number {
        const linkFactor = node.data.metadata?.links ? node.data.metadata.links.length / 20 : 0;
        const referenceFactor = node.data.metadata?.references ? node.data.metadata.references.length / 10 : 0;
        return Math.min(linkFactor + referenceFactor, 1);
    }

    private calculateNodeScale(importance: number): number {
        const [min, max] = this.settings.nodes.sizeRange;
        return min + (max - min) * importance;
    }

    update(deltaTime: number) {
        this.hologramManager.update(deltaTime);

        if (this.settings.animations.enableNodeAnimations) {
            this.nodeInstances.instanceMatrix.needsUpdate = true;
            this.scene.traverse(child => {
                if (child instanceof Mesh) {
                    child.rotateY(0.001 * deltaTime);
                }
            });
        }
    }

    handleHandInteraction(hand: XRHandWithHaptics) {
        const position = new Vector3();
        const indexTip = hand.hand.joints['index-finger-tip'] as Object3D | undefined;
        if (indexTip) {
            position.setFromMatrixPosition(indexTip.matrixWorld);
            this.hologramManager.handleInteraction(position);
        }
    }

    dispose() {
        this.nodeInstances.geometry.dispose();
        this.nodeInstances.material.dispose();
        this.metadataVisualizer.dispose();
        this.scene.remove(this.nodeInstances);
        this.scene.remove(this.hologramManager.getGroup());
    }
}

----
rendering/scene.ts
/**
 * Three.js scene management with simplified setup
 */

import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';
import { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';
import { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';
import { createLogger } from '../core/utils';

const logger = createLogger('SceneManager');

// Constants
const BACKGROUND_COLOR = 0x212121;  // Material Design Grey 900

export class SceneManager {
  private static instance: SceneManager;
  
  // Three.js core components
  private scene: THREE.Scene;
  private camera: THREE.PerspectiveCamera;
  private renderer: THREE.WebGLRenderer;
  private controls: OrbitControls;
  
  // Post-processing
  private composer: EffectComposer;
  private bloomPass: UnrealBloomPass;
  
  // Animation
  private animationFrameId: number | null = null;
  private isRunning: boolean = false;

  private constructor(canvas: HTMLCanvasElement) {
    logger.log('Initializing SceneManager');
    
    // Create scene
    this.scene = new THREE.Scene();
    this.scene.background = new THREE.Color(BACKGROUND_COLOR);
    // Removed fog to ensure graph visibility

    // Create camera
    this.camera = new THREE.PerspectiveCamera(
      75,
      window.innerWidth / window.innerHeight,
      0.1,
      1000
    );
    this.camera.position.set(0, 5, 20); // Moved camera closer
    this.camera.lookAt(0, 0, 0);

    // Create renderer
    this.renderer = new THREE.WebGLRenderer({
      canvas,
      antialias: true,
      alpha: true,
      powerPreference: 'high-performance'
    });
    this.renderer.setSize(window.innerWidth, window.innerHeight);
    this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));

    // Create controls
    this.controls = new OrbitControls(this.camera, canvas);
    this.controls.enableDamping = true;
    this.controls.dampingFactor = 0.05;
    this.controls.screenSpacePanning = false;
    this.controls.minDistance = 5;  // Reduced min distance
    this.controls.maxDistance = 100; // Reduced max distance

    // Setup post-processing
    this.composer = new EffectComposer(this.renderer);
    const renderPass = new RenderPass(this.scene, this.camera);
    this.composer.addPass(renderPass);

    this.bloomPass = new UnrealBloomPass(
      new THREE.Vector2(window.innerWidth, window.innerHeight),
      1.5,  // Strength
      0.75, // Radius
      0.3   // Threshold
    );
    this.composer.addPass(this.bloomPass);

    // Setup basic lighting
    this.setupLighting();

    // Setup event listeners
    window.addEventListener('resize', this.handleResize.bind(this));

    logger.log('SceneManager initialization complete');
  }

  static getInstance(canvas: HTMLCanvasElement): SceneManager {
    if (!SceneManager.instance) {
      SceneManager.instance = new SceneManager(canvas);
    }
    return SceneManager.instance;
  }

  static cleanup(): void {
    if (SceneManager.instance) {
      SceneManager.instance.dispose();
      SceneManager.instance = null as any;
    }
  }

  private setupLighting(): void {
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
    this.scene.add(ambientLight);

    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
    directionalLight.position.set(1, 1, 1).normalize();
    this.scene.add(directionalLight);

    // Add smaller grid helper
    const gridHelper = new THREE.GridHelper(50, 50); // Reduced grid size
    if (gridHelper.material instanceof THREE.Material) {
      gridHelper.material.transparent = true;
      gridHelper.material.opacity = 0.1;
    }
    this.scene.add(gridHelper);
  }

  private handleResize(): void {
    const width = window.innerWidth;
    const height = window.innerHeight;

    this.camera.aspect = width / height;
    this.camera.updateProjectionMatrix();

    this.renderer.setSize(width, height);
    this.composer.setSize(width, height);
  }

  start(): void {
    if (this.isRunning) return;
    this.isRunning = true;
    this.animate();
    logger.log('Scene rendering started');
  }

  stop(): void {
    this.isRunning = false;
    if (this.animationFrameId !== null) {
      cancelAnimationFrame(this.animationFrameId);
      this.animationFrameId = null;
    }
    logger.log('Scene rendering stopped');
  }

  private animate(): void {
    if (!this.isRunning) return;

    this.animationFrameId = requestAnimationFrame(this.animate.bind(this));
    this.controls.update();
    this.composer.render();
  }

  // Public getters
  getScene(): THREE.Scene {
    return this.scene;
  }

  getCamera(): THREE.PerspectiveCamera {
    return this.camera;
  }

  getRenderer(): THREE.WebGLRenderer {
    return this.renderer;
  }

  getControls(): OrbitControls {
    return this.controls;
  }

  // Scene management methods
  add(object: THREE.Object3D): void {
    this.scene.add(object);
  }

  remove(object: THREE.Object3D): void {
    this.scene.remove(object);
  }

  dispose(): void {
    this.stop();
    
    // Remove event listeners
    const boundResize = this.handleResize.bind(this);
    window.removeEventListener('resize', boundResize);

    // Dispose of post-processing
    if (this.composer) {
      // Dispose of render targets
      this.composer.renderTarget1.dispose();
      this.composer.renderTarget2.dispose();
      
      // Clear passes
      this.composer.passes.length = 0;
    }

    // Dispose of bloom pass resources
    if (this.bloomPass) {
      // Dispose of any textures or materials used by the bloom pass
      if ((this.bloomPass as any).renderTargetsHorizontal) {
        (this.bloomPass as any).renderTargetsHorizontal.forEach((target: any) => {
          if (target && target.dispose) target.dispose();
        });
      }
      if ((this.bloomPass as any).renderTargetsVertical) {
        (this.bloomPass as any).renderTargetsVertical.forEach((target: any) => {
          if (target && target.dispose) target.dispose();
        });
      }
      if ((this.bloomPass as any).materialHorizontal) {
        (this.bloomPass as any).materialHorizontal.dispose();
      }
      if ((this.bloomPass as any).materialVertical) {
        (this.bloomPass as any).materialVertical.dispose();
      }
    }

    // Dispose of controls
    if (this.controls) {
      this.controls.dispose();
    }

    // Dispose of renderer and materials
    if (this.renderer) {
      this.renderer.dispose();
      this.renderer.domElement.remove();
      (this.renderer.domElement as any).width = 0;
      (this.renderer.domElement as any).height = 0;
    }

    // Dispose of scene objects
    if (this.scene) {
      this.scene.traverse((object) => {
        if (object instanceof THREE.Mesh) {
          if (object.geometry) object.geometry.dispose();
          if (object.material) {
            if (Array.isArray(object.material)) {
              object.material.forEach(material => material.dispose());
            } else {
              object.material.dispose();
            }
          }
        }
      });
    }

    logger.log('Scene manager disposed');
  }
}

----
rendering/nodes.ts
import * as THREE from 'three';
import { Node } from '../core/types';
import { createLogger } from '../core/logger';
import { settingsManager } from '../state/settings';
import type { Settings } from '../types/settings';
import type { NodeSettings, PhysicsSettings } from '../core/types';
import { GeometryFactory } from './factories/GeometryFactory';
import { MaterialFactory } from './factories/MaterialFactory';
import { SettingsObserver } from '../state/SettingsObserver';

const logger = createLogger('NodeManager');

const FLOATS_PER_NODE = 6;  // x, y, z, vx, vy, vz

// Reusable vectors and matrices
const matrix = new THREE.Matrix4();
const quaternion = new THREE.Quaternion();
const position = new THREE.Vector3();
const scale = new THREE.Vector3(1, 1, 1);

export class NodeRenderer {
    public readonly material: THREE.Material;
    protected currentSettings: Settings;
    public mesh: THREE.Mesh;
    private readonly materialFactory: MaterialFactory;
    private readonly geometryFactory: GeometryFactory;
    private readonly settingsObserver: SettingsObserver;

    constructor() {
        this.currentSettings = settingsManager.getCurrentSettings();
        this.materialFactory = MaterialFactory.getInstance();
        this.geometryFactory = GeometryFactory.getInstance();
        this.settingsObserver = SettingsObserver.getInstance();

        this.material = this.materialFactory.getPhongNodeMaterial();
        this.mesh = new THREE.Mesh(
            this.geometryFactory.getNodeGeometry('high'),
            this.material
        );

        this.setupSettingsSubscriptions();
    }

    public handleSettingChange(setting: keyof NodeSettings, value: any): void {
        try {
            switch (setting) {
                case 'baseColor':
                case 'opacity':
                    this.materialFactory.updateMaterial('node-phong', this.currentSettings);
                    break;
                case 'baseSize':
                    this.mesh.scale.set(value, value, value);
                    break;
                default:
                    // Other settings handled elsewhere
                    break;
            }
        } catch (error) {
            logger.error(`Error applying node setting change for ${String(setting)}:`, error);
        }
    }

    public handlePhysicsSettingChange(setting: keyof PhysicsSettings, value: any): void {
        // Dummy implementation for now
        logger.debug(`Physics setting change: ${String(setting)} = ${value}`);
    }

    private setupSettingsSubscriptions(): void {
        this.settingsObserver.subscribe('NodeRenderer', (settings) => {
            this.currentSettings = settings;
            Object.keys(settings.nodes).forEach(setting => {
                this.handleSettingChange(setting as keyof NodeSettings, settings.nodes[setting as keyof NodeSettings]);
            });
            Object.keys(settings.physics).forEach(setting => {
                this.handlePhysicsSettingChange(setting as keyof PhysicsSettings, settings.physics[setting as keyof PhysicsSettings]);
            });
        });
    }
}

export class NodeManager {
    private static instance: NodeManager;
    private currentSettings: Settings;
    private nodeInstances: THREE.InstancedMesh;
    private edgeInstances: THREE.InstancedMesh;
    private nodeRenderer: NodeRenderer;
    private currentNodes: Node[] = [];
    private nodeIndices: Map<string, number> = new Map();
    private readonly materialFactory: MaterialFactory;
    private readonly geometryFactory: GeometryFactory;
    private readonly settingsObserver: SettingsObserver;

    private constructor() {
        this.currentSettings = settingsManager.getCurrentSettings();
        this.materialFactory = MaterialFactory.getInstance();
        this.geometryFactory = GeometryFactory.getInstance();
        this.settingsObserver = SettingsObserver.getInstance();
        this.nodeRenderer = new NodeRenderer();

        this.nodeInstances = new THREE.InstancedMesh(
            this.geometryFactory.getNodeGeometry('high'),
            this.nodeRenderer.material,
            10000
        );

        this.edgeInstances = new THREE.InstancedMesh(
            this.geometryFactory.getHologramGeometry('ring', 'medium'),
            this.materialFactory.getMetadataMaterial(),
            30000
        );

        this.setupSettingsSubscriptions();
    }

    private setupSettingsSubscriptions(): void {
        this.settingsObserver.subscribe('NodeManager', (settings) => {
            this.currentSettings = settings;
            this.materialFactory.updateMaterial('metadata', settings);
        });
    }

    public static getInstance(): NodeManager {
        if (!NodeManager.instance) {
            NodeManager.instance = new NodeManager();
        }
        return NodeManager.instance;
    }

    public updatePositions(positions: Float32Array): void {
        if (!this.nodeInstances) return;

        const count = Math.min(positions.length / FLOATS_PER_NODE, this.nodeInstances.count);
        
        for (let i = 0; i < count; i++) {
            const baseIndex = i * FLOATS_PER_NODE;
            
            // Update position
            position.set(
                positions[baseIndex],
                positions[baseIndex + 1],
                positions[baseIndex + 2]
            );
            
            // Set initial scale based on settings
            const baseSize = this.currentSettings.nodes.baseSize || 1;
            scale.set(baseSize, baseSize, baseSize);
            
            // Update instance matrix
            matrix.compose(position, quaternion, scale);
            this.nodeInstances.setMatrixAt(i, matrix);
        }
        
        this.nodeInstances.instanceMatrix.needsUpdate = true;
        
        // Force a render update
        if (this.currentSettings.animations.enableNodeAnimations) {
            requestAnimationFrame(() => {
                this.nodeInstances.instanceMatrix.needsUpdate = true;
            });
        }
    }

    public getAllNodeMeshes(): THREE.InstancedMesh[] {
        return [this.nodeInstances];
    }

    public getNodePosition(nodeId: string): THREE.Vector3 {
        const node = this.currentNodes.find(n => n.id === nodeId);
        if (!node) {
            throw new Error(`Node ${nodeId} not found`);
        }
        return new THREE.Vector3(
            node.data.position.x,
            node.data.position.y,
            node.data.position.z
        );
    }

    public updateNodePosition(nodeId: string, newPosition: THREE.Vector3): void {
        const index = this.nodeIndices.get(nodeId);
        if (index === undefined) {
            throw new Error(`Node ${nodeId} not found`);
        }

        const node = this.currentNodes[index];
        if (node) {
            node.data.position = {
                x: newPosition.x,
                y: newPosition.y,
                z: newPosition.z
            };

            matrix.compose(newPosition, quaternion, scale);
            this.nodeInstances.setMatrixAt(index, matrix);
            this.nodeInstances.instanceMatrix.needsUpdate = true;
        }
    }

    public getCurrentNodes(): Node[] {
        return [...this.currentNodes];
    }

    public updateNodes(nodes: Node[]): void {
        this.currentNodes = nodes;
        const positions = new Float32Array(nodes.length * FLOATS_PER_NODE);
        
        nodes.forEach((node, index) => {
            const baseIndex = index * FLOATS_PER_NODE;
            positions[baseIndex] = node.data.position.x;
            positions[baseIndex + 1] = node.data.position.y;
            positions[baseIndex + 2] = node.data.position.z;
            // Velocity components (if needed)
            positions[baseIndex + 3] = 0;
            positions[baseIndex + 4] = 0;
            positions[baseIndex + 5] = 0;
            
            this.nodeIndices.set(node.id, index);
        });
        
        this.updatePositions(positions);
    }

    public dispose(): void {
        if (this.nodeInstances) {
            this.nodeInstances.geometry.dispose();
            this.nodeInstances.material.dispose();
        }
        if (this.edgeInstances) {
            this.edgeInstances.geometry.dispose();
            this.edgeInstances.material.dispose();
        }
    }
}

----
rendering/materials/HologramShaderMaterial.ts
import { Color, DoubleSide, Material, MaterialParameters } from 'three';

export interface HologramUniforms {
    color: { value: Color };
    opacity: { value: number };
    time: { value: number };
    pulseSpeed: { value: number };
    pulseIntensity: { value: number };
}

export class HologramShaderMaterial extends Material {
    uniforms: HologramUniforms;
    defines: { [key: string]: string | number | boolean };
    vertexShader: string;
    fragmentShader: string;
    transparent: boolean;
    side: typeof DoubleSide;
    depthWrite: boolean;
    needsUpdate: boolean;

    constructor(params: MaterialParameters & { uniforms: HologramUniforms }) {
        super();
        this.uniforms = params.uniforms;
        this.defines = {};
        this.vertexShader = `
            varying vec3 vPosition;
            varying vec2 vUv;
            void main() {
                vPosition = position;
                vUv = uv;
                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
            }
        `;
        this.fragmentShader = `
            uniform vec3 color;
            uniform float opacity;
            uniform float time;
            uniform float pulseSpeed;
            uniform float pulseIntensity;
            varying vec3 vPosition;
            varying vec2 vUv;
            
            void main() {
                float pulse = sin(time * pulseSpeed) * pulseIntensity + 1.0;
                float edge = 1.0 - smoothstep(0.4, 0.5, abs(vUv.y - 0.5));
                vec3 finalColor = color * pulse;
                float finalOpacity = opacity * edge;
                
                #ifdef USE_AR
                    float depth = gl_FragCoord.z / gl_FragCoord.w;
                    finalOpacity *= smoothstep(10.0, 0.0, depth);
                #endif
                
                gl_FragColor = vec4(finalColor, finalOpacity);
            }
        `;
        this.transparent = true;
        this.side = DoubleSide;
        this.depthWrite = false;
        this.needsUpdate = true;
    }

    clone(): this {
        const material = new HologramShaderMaterial({
            uniforms: {
                color: { value: new Color(this.uniforms.color.value) },
                opacity: { value: this.uniforms.opacity.value },
                time: { value: this.uniforms.time.value },
                pulseSpeed: { value: this.uniforms.pulseSpeed.value },
                pulseIntensity: { value: this.uniforms.pulseIntensity.value }
            }
        });
        return material as this;
    }

    dispose(): void {
        super.dispose();
    }
}

----
rendering/factories/MaterialFactory.ts
import { Color, DoubleSide, Material, MeshBasicMaterial, MeshPhongMaterial } from 'three';
import { Settings } from '../../core/types';
import { HologramShaderMaterial } from '../materials/HologramShaderMaterial';

export class MaterialFactory {
    private static instance: MaterialFactory;
    private materialCache = new Map<string, Material>();

    private constructor() {}

    static getInstance(): MaterialFactory {
        if (!MaterialFactory.instance) {
            MaterialFactory.instance = new MaterialFactory();
        }
        return MaterialFactory.instance;
    }

    getNodeMaterial(settings: Settings): Material {
        const cacheKey = 'node-basic';
        if (this.materialCache.has(cacheKey)) {
            return this.materialCache.get(cacheKey)!;
        }

        const material = new MeshBasicMaterial({
            color: settings.nodes.baseColor,
            transparent: true,
            opacity: settings.nodes.opacity
        });

        this.materialCache.set(cacheKey, material);
        return material;
    }

    getPhongNodeMaterial(): Material {
        const cacheKey = 'node-phong';
        if (this.materialCache.has(cacheKey)) {
            return this.materialCache.get(cacheKey)!;
        }

        const material = new MeshPhongMaterial({
            color: 0x4fc3f7,
            shininess: 30,
            specular: 0x004ba0,
            transparent: true,
            opacity: 0.9,
        });

        this.materialCache.set(cacheKey, material);
        return material;
    }

    getMetadataMaterial(): Material {
        const cacheKey = 'metadata';
        if (this.materialCache.has(cacheKey)) {
            return this.materialCache.get(cacheKey)!;
        }

        const material = new MeshBasicMaterial({
            color: new Color('#00ff00'),
            transparent: true,
            opacity: 0.8,
            side: DoubleSide
        });

        this.materialCache.set(cacheKey, material);
        return material;
    }

    getHologramMaterial(settings: Settings): HologramShaderMaterial {
        const cacheKey = 'hologram';
        if (this.materialCache.has(cacheKey)) {
            return this.materialCache.get(cacheKey) as HologramShaderMaterial;
        }

        const material = new HologramShaderMaterial({
            uniforms: {
                color: { value: new Color(settings.hologram.ringColor) },
                opacity: { value: settings.hologram.ringOpacity },
                time: { value: 0 },
                pulseSpeed: { value: 1.0 },
                pulseIntensity: { value: 0.2 }
            }
        });

        this.materialCache.set(cacheKey, material);
        return material;
    }

    updateMaterial(type: string, settings: Settings): void {
        const material = this.materialCache.get(type);
        if (!material) return;

        switch (type) {
            case 'node-basic':
            case 'node-phong':
                (material as MeshBasicMaterial | MeshPhongMaterial).color.set(settings.nodes.baseColor);
                material.opacity = settings.nodes.opacity;
                break;
            case 'hologram':
                const hologramMaterial = material as HologramShaderMaterial;
                hologramMaterial.uniforms.color.value = new Color(settings.hologram.ringColor);
                hologramMaterial.uniforms.opacity.value = settings.hologram.ringOpacity;
                break;
        }
    }

    dispose(): void {
        this.materialCache.forEach(material => material.dispose());
        this.materialCache.clear();
    }
}

----
rendering/factories/GeometryFactory.ts
import { BufferGeometry, SphereGeometry } from 'three';

export class GeometryFactory {
    private static instance: GeometryFactory;
    private geometryCache = new Map<string, BufferGeometry>();

    private constructor() {}

    static getInstance(): GeometryFactory {
        if (!GeometryFactory.instance) {
            GeometryFactory.instance = new GeometryFactory();
        }
        return GeometryFactory.instance;
    }

    getNodeGeometry(quality: 'low' | 'medium' | 'high'): BufferGeometry {
        const cacheKey = `node-${quality}`;
        if (this.geometryCache.has(cacheKey)) {
            return this.geometryCache.get(cacheKey)!;
        }

        const segments = {
            low: 8,
            medium: 16,
            high: 32
        }[quality] || 16;

        const geometry = new SphereGeometry(1, segments, segments);
        this.geometryCache.set(cacheKey, geometry);
        return geometry;
    }

    getHologramGeometry(type: string, quality: string): BufferGeometry {
        const cacheKey = `hologram-${type}-${quality}`;
        if (this.geometryCache.has(cacheKey)) {
            return this.geometryCache.get(cacheKey)!;
        }

        const segments = {
            low: { ring: 32, sphere: 8 },
            medium: { ring: 64, sphere: 16 },
            high: { ring: 128, sphere: 32 }
        }[quality] || { ring: 64, sphere: 16 };

        let geometry: BufferGeometry;
        switch (type) {
            case 'ring':
                geometry = new SphereGeometry(1, segments.ring, segments.ring);
                break;
            case 'buckminster':
                geometry = new SphereGeometry(1, 20, 20);
                break;
            case 'geodesic':
                geometry = new SphereGeometry(1, 16, 16);
                break;
            case 'triangleSphere':
                geometry = new SphereGeometry(1, segments.sphere, segments.sphere);
                break;
            default:
                geometry = new SphereGeometry(1, segments.sphere, segments.sphere);
        }

        this.geometryCache.set(cacheKey, geometry);
        return geometry;
    }

    dispose(): void {
        this.geometryCache.forEach(geometry => geometry.dispose());
        this.geometryCache.clear();
    }
}

--END--

=== Docker Configuration ===


--- docker-compose.yml ---

name: logseq-xr

services:
  webxr:
    build: .
    image: logseq-xr-image:latest
    container_name: logseq-xr-webxr
    read_only: false
    networks:
      ragflow:
        aliases:
          - logseq-xr-webxr
          - webxr-client
    deploy:
      resources:
        limits:
          cpus: '16.0'
          memory: 64G
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['0']  # Explicitly use GPU 0
              capabilities: [gpu]
    ports:
      - "4000:4000"  # Map container nginx port 4000 to host port 4000
    environment:
      - RUST_LOG=info
      - RUST_BACKTRACE=1
      - BIND_ADDRESS=0.0.0.0
      - PORT=3001  # Explicitly set Rust backend to use port 3001
      - NGINX_PORT=4000  # Set nginx to use port 4000
      - NVIDIA_VISIBLE_DEVICES=${NVIDIA_GPU_UUID:-0}  # Use GPU UUID from launch script
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - NODE_ENV=production
    env_file:
      - .env
    volumes:
      - ./data/markdown:/app/data/markdown
      - ./data/piper:/app/data/piper
      - ./client:/app/client
      - type: bind
        source: ./settings.toml
        target: /app/settings.toml
      - type: tmpfs
        target: /tmp
        tmpfs:
          size: 4G
    user: "${UID:-1000}:${GID:-1000}"  # Use host user's UID/GID or default to 1000
    restart: unless-stopped
    stop_grace_period: 30s
    init: true
    logging:
      driver: "json-file"
      options:
        max-size: "1g"
        max-file: "5"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:4000/ || exit 1; curl -f http://localhost:4000/wss || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared-tunnel
    networks:
      ragflow:
        aliases:
          - cloudflared
    volumes:
      - ./config.yml:/etc/cloudflared/config.yml:ro
    command: tunnel --loglevel info --config /etc/cloudflared/config.yml run
    restart: unless-stopped
    stop_grace_period: 10s
    init: true
    depends_on: []  # Remove dependency on webxr
    environment:
      - TUNNEL_TOKEN=$TUNNEL_TOKEN
      - TUNNEL_METRICS=0.0.0.0:2000
      - TUNNEL_DNS_UPSTREAM=https://1.1.1.1/dns-query,https://1.0.0.1/dns-query
      - TUNNEL_TRANSPORT_PROTOCOL=http2
      - TUNNEL_ORIGIN_SERVER=http://webxr-client:4000  # Point to nginx port
      - TUNNEL_WEBSOCKET_ENABLE=true
      - TUNNEL_WEBSOCKET_HEARTBEAT_INTERVAL=30s  # Match our heartbeat interval
      - TUNNEL_WEBSOCKET_TIMEOUT=3600s  # Match our max timeout
      - TUNNEL_RETRIES=5
      - TUNNEL_GRACE_PERIOD=30s
    env_file:
      - .env
networks:
  ragflow:
    external: true
    name: docker_ragflow  # RAGFlow's network name from docker network ls

--- Dockerfile ---

# Stage 1: Frontend Build
FROM node:20-slim AS frontend-builder

WORKDIR /app

# Install pnpm
RUN npm install -g pnpm@9.14.2

# Copy package files and configuration
COPY package.json pnpm-lock.yaml ./
COPY tsconfig.json tsconfig.node.json vite.config.ts ./
COPY client ./client

# Create data/public directory for build output
RUN mkdir -p data/public

# Install dependencies and build
RUN pnpm install --frozen-lockfile && \
    pnpm run build

# Stage 2: Rust Dependencies Cache
FROM nvidia/cuda:12.2.0-devel-ubuntu22.04 AS rust-deps-builder

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    libssl-dev \
    pkg-config \
    libegl1-mesa-dev \
    libasound2-dev \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Install Rust with better error handling
RUN curl --retry 5 --retry-delay 2 --retry-connrefused https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain 1.82.0
ENV PATH="/root/.cargo/bin:${PATH}"

# Configure cargo for better network resilience
RUN mkdir -p ~/.cargo && \
    echo '[net]' >> ~/.cargo/config && \
    echo 'retry = 5' >> ~/.cargo/config && \
    echo 'git-fetch-with-cli = true' >> ~/.cargo/config

WORKDIR /usr/src/app

# Copy Cargo files first for better layer caching
COPY Cargo.toml Cargo.lock ./

# Create dummy src directory and build dependencies
RUN mkdir src && \
    echo "fn main() {}" > src/main.rs && \
    cargo build --release && \
    rm -rf src target/release/deps/logseq_xr*

# Now copy the real source code and build
COPY src ./src
RUN cargo build --release --jobs $(nproc) || \
    (sleep 2 && cargo build --release --jobs $(nproc)) || \
    (sleep 5 && cargo build --release --jobs 1)

# Stage 3: Python Dependencies
FROM python:3.10.12-slim AS python-builder

WORKDIR /app

# Create virtual environment and install dependencies
RUN python -m venv /app/venv
ENV PATH="/app/venv/bin:$PATH"

# Install Python packages
RUN pip install --upgrade pip==23.3.1 wheel==0.41.3 && \
    pip install \
    piper-phonemize==1.1.0 \
    piper-tts==1.2.0 \
    onnxruntime-gpu==1.16.3

# Stage 4: Final Runtime Image
FROM nvidia/cuda:12.2.0-devel-ubuntu22.04

ENV DEBIAN_FRONTEND=noninteractive \
    PYTHONUNBUFFERED=1 \
    PATH="/app/venv/bin:${PATH}" \
    NVIDIA_DRIVER_CAPABILITIES=all \
    RUST_LOG=info \
    RUST_BACKTRACE=0 \
    PORT=4000 \
    BIND_ADDRESS=0.0.0.0 \
    NODE_ENV=production \
    DOMAIN=localhost

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    libssl3 \
    nginx \
    libegl1-mesa \
    libasound2 \
    python3.10-minimal \
    python3.10-venv \
    ca-certificates \
    mesa-utils \
    libgl1-mesa-dri \
    libgl1-mesa-glx \
    netcat-openbsd \
    gettext-base \
    net-tools \
    iproute2 \
    procps \
    lsof \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /usr/share/doc/* \
    && rm -rf /usr/share/man/*

# Create a non-root user for running the application
RUN groupadd -g 1000 webxr && \
    useradd -u 1000 -g webxr -d /app webxr

# Set up nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf.template
RUN envsubst '${DOMAIN}' < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf && \
    rm /etc/nginx/nginx.conf.template && \
    chown -R webxr:webxr /etc/nginx/nginx.conf && \
    chmod 644 /etc/nginx/nginx.conf

# Set up nginx directories and permissions
RUN mkdir -p /var/lib/nginx/client_temp \
             /var/lib/nginx/proxy_temp \
             /var/lib/nginx/fastcgi_temp \
             /var/lib/nginx/uwsgi_temp \
             /var/lib/nginx/scgi_temp \
             /var/log/nginx \
             /var/run/nginx \
             /var/cache/nginx && \
    chown -R webxr:webxr /var/lib/nginx \
                         /var/log/nginx \
                         /var/run/nginx \
                         /var/cache/nginx \
                         /etc/nginx && \
    chmod -R 755 /var/lib/nginx \
                 /var/log/nginx \
                 /var/run/nginx \
                 /var/cache/nginx \
                 /etc/nginx && \
    touch /var/log/nginx/error.log \
          /var/log/nginx/access.log \
          /var/run/nginx/nginx.pid && \
    chmod 666 /var/log/nginx/*.log \
              /var/run/nginx/nginx.pid

# Set up directory structure and permissions
WORKDIR /app

# Create required directories with proper permissions
RUN mkdir -p /app/data/public/dist \
             /app/data/markdown \
             /app/data/runtime \
             /app/src/utils \
             /app/data/piper \
             /tmp/runtime && \
    chown -R webxr:webxr /app /tmp/runtime && \
    chmod -R 755 /app /tmp/runtime && \
    # Ensure data/markdown is writable by webxr user
    chmod 777 /app/data/markdown

# Create necessary directories and set permissions
RUN mkdir -p /app/data/markdown /app/data/metadata && \
    chmod -R 777 /app/data

# Copy Python virtual environment
COPY --from=python-builder /app/venv /app/venv
RUN chown -R webxr:webxr /app/venv

# Copy built artifacts
COPY --from=rust-deps-builder /usr/src/app/target/release/webxr /app/
COPY settings.toml /app/
COPY src/utils/compute_forces.ptx /app/compute_forces.ptx
COPY --from=frontend-builder /app/data/public/dist /app/data/public/dist

# Copy configuration and scripts
COPY src/generate_audio.py /app/src/
COPY scripts/start.sh /app/start.sh

# Set proper permissions for copied files
RUN chown -R webxr:webxr /app && \
    chmod 755 /app/start.sh && \
    chmod 644 /app/settings.toml && \
    chmod -R g+w /app

# Switch to non-root user
USER webxr

# Add security labels
LABEL org.opencontainers.image.source="https://github.com/yourusername/logseq-xr" \
      org.opencontainers.image.description="LogseqXR WebXR Graph Visualization" \
      org.opencontainers.image.licenses="MIT" \
      security.capabilities="cap_net_bind_service" \
      security.privileged="false" \
      security.allow-privilege-escalation="false"

# Expose port
EXPOSE 4000

# Start application
ENTRYPOINT ["/app/start.sh"]

--- nginx.conf ---

pid /var/run/nginx/nginx.pid;
error_log /var/log/nginx/error.log debug;

events {
    worker_connections 1024;
    multi_accept on;
    use epoll;
}

http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    charset utf-8;

    # Override TypeScript MIME type (overriding video/mp2t from mime.types)
    types {
        application/typescript ts;
    }

    # Logging
    log_format debug_format '$remote_addr - $remote_user [$time_local] '
                          '"$request" $status $body_bytes_sent '
                          '"$http_referer" "$http_user_agent" '
                          'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"'
                          ' ws_status="$upstream_http_upgrade"';  # Added WebSocket status logging

    access_log /var/log/nginx/access.log debug_format;

    # Optimization
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 120;  # Increased to match cloudflared keepAliveTimeout
    keepalive_requests 100;

    # Gzip settings
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # WebSocket configuration
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    # Upstream backend definition for the Rust server
    upstream backend {
        server 127.0.0.1:3001;  # Use localhost since both services are in same container
        keepalive 32;  # Keep connections alive
    }

    # Main server configuration
    server {
        listen 4000 default_server;  # Listen on port 4000 for external connections
        server_name _;  # Accept any server name
        root /app/data/public/dist;  # Set root to built files directory

        # Security headers
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "same-origin" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline' 'unsafe-eval'; connect-src 'self' ws: wss: http: https: www.visionflow.info;" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # WebSocket endpoint
        location /wss {
            # Use plain WS internally since Cloudflared handles SSL
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            
            # Pass through Cloudflare headers
            proxy_set_header CF-Connecting-IP $http_cf_connecting_ip;
            proxy_set_header CF-Ray $http_cf_ray;
            proxy_set_header CF-Visitor $http_cf_visitor;
            
            # Standard proxy headers
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
            
            # WebSocket specific settings
            proxy_read_timeout 3600s;  # Match Cloudflared timeout
            proxy_send_timeout 3600s;
            proxy_connect_timeout 75s;
            proxy_buffering off;
            proxy_cache off;
            
            # Debug logging for WebSocket
            access_log /var/log/nginx/websocket.log debug_format;
            error_log /var/log/nginx/websocket-error.log debug;
        }

        # API endpoints
        location /api {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # API specific settings
            proxy_read_timeout 60s;
            proxy_send_timeout 60s;
            proxy_connect_timeout 60s;
            proxy_buffering on;       # Enable buffering for API responses
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;
        }

        # Graph endpoints
        location /graph {
            proxy_pass http://backend/graph;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 30s;  # Match HEARTBEAT_INTERVAL
            add_header Cache-Control "no-store" always;
        }

        # Static files
        location / {
            try_files $uri $uri/ /index.html =404;
            expires 1h;
            add_header Cache-Control "public, no-transform";
            error_page 404 = @backend;  # Fallback to backend if file not found
        }

        # Static files with proper MIME types
        location /assets/ {
            expires 7d;
            add_header Cache-Control "public, no-transform" always;
            try_files $uri =404;
            access_log off;
        }

        # Fallback location for static files
        location @backend {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}

--- scripts/launch-docker.sh ---

#!/bin/bash

set -e

# Determine script location and project root
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$( cd "$SCRIPT_DIR/.." && pwd )"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Function to log messages with timestamps
log() {
    echo -e "[$(date "+%Y-%m-%d %H:%M:%S")] $1"
}

# Function to check pnpm security
check_pnpm_security() {
    log "${YELLOW}Running pnpm security audit...${NC}"
    
    # Run pnpm audit and capture the output
    local audit_output=$(pnpm audit 2>&1)
    local audit_exit=$?
    
    # Count critical vulnerabilities, ensuring we have a valid integer
    local critical_count
    critical_count=$(echo "$audit_output" | grep -i "critical" | grep -o '[0-9]\+ vulnerabilities' | awk '{print $1}')
    critical_count=${critical_count:-0}  # Default to 0 if empty
    
    echo "$audit_output"
    
    if [ "$critical_count" -gt 0 ]; then
        log "${RED}Found $critical_count critical vulnerabilities!${NC}"
        return 1
    elif [ "$audit_exit" -ne 0 ]; then
        log "${YELLOW}Found non-critical vulnerabilities${NC}"
    else
        log "${GREEN}No critical vulnerabilities found${NC}"
    fi
    return 0
}

# Function to check TypeScript compilation
check_typescript() {
    log "${YELLOW}Running TypeScript type check...${NC}"
    if ! pnpm run type-check; then
        log "${RED}TypeScript check failed${NC}"
        return 1
    fi
    log "${GREEN}TypeScript check passed${NC}"
    return 0
}

# Function to check Rust security
check_rust_security() {
    log "${YELLOW}Running cargo audit...${NC}"
    
    # Run cargo audit and capture the output
    local audit_output=$(cargo audit 2>&1)
    local audit_exit=$?
    
    # Count critical vulnerabilities, ensuring we have a valid integer
    local critical_count
    critical_count=$(echo "$audit_output" | grep -i "critical" | wc -l)
    critical_count=${critical_count:-0}  # Default to 0 if empty
    
    echo "$audit_output"
    
    if [ "$critical_count" -gt 0 ]; then
        log "${RED}Found $critical_count critical vulnerabilities!${NC}"
        return 1
    elif [ "$audit_exit" -ne 0 ]; then
        log "${YELLOW}Found non-critical vulnerabilities${NC}"
    else
        log "${GREEN}No critical vulnerabilities found${NC}"
    fi
    return 0
}

# Function to read settings from TOML file
read_settings() {
    local settings_file="$PROJECT_ROOT/settings.toml"
    # Extract domain and port from settings.toml
    export DOMAIN=$(grep "domain = " "$settings_file" | cut -d'"' -f2)
    export PORT=$(grep "port = " "$settings_file" | awk '{print $3}')
    
    if [ -z "$DOMAIN" ] || [ -z "$PORT" ]; then
        log "${RED}Error: DOMAIN or PORT not set in settings.toml. Please check your configuration.${NC}"
        exit 1
    fi
}

# Function to check system resources
check_system_resources() {
    log "${YELLOW}Checking GPU availability...${NC}"
    if ! command -v nvidia-smi &> /dev/null; then
        log "${RED}Error: nvidia-smi not found${NC}"
        exit 1
    fi
    
    # Check GPU memory
    local gpu_info=$(nvidia-smi --query-gpu=memory.used,memory.total --format=csv,noheader)
    echo "$gpu_info"
    
    # Check if any GPU has enough memory (at least 4GB free)
    local has_enough_memory=false
    while IFS=, read -r used total; do
        used=$(echo "$used" | tr -d ' MiB')
        total=$(echo "$total" | tr -d ' MiB')
        free=$((total - used))
        if [ "$free" -gt 4096 ]; then
            has_enough_memory=true
            break
        fi
    done <<< "$gpu_info"
    
    if [ "$has_enough_memory" = false ]; then
        log "${RED}Error: No GPU with sufficient free memory (need at least 4GB)${NC}"
        exit 1
    fi
}

# Function to check Docker setup
check_docker() {
    if ! command -v docker &> /dev/null; then
        log "${RED}Error: Docker is not installed${NC}"
        exit 1
    fi

    if docker compose version &> /dev/null; then
        DOCKER_COMPOSE="docker compose"
    elif docker-compose version &> /dev/null; then
        DOCKER_COMPOSE="docker-compose"
    else
        log "${RED}Error: Docker Compose not found${NC}"
        exit 1
    fi
}

# Function to verify client directory structure
verify_client_structure() {
    log "${YELLOW}Verifying client directory structure...${NC}"
    
    local required_files=(
        "$PROJECT_ROOT/client/index.html"
        "$PROJECT_ROOT/client/index.ts"
        "$PROJECT_ROOT/client/core/types.ts"
        "$PROJECT_ROOT/client/core/constants.ts"
        "$PROJECT_ROOT/client/core/utils.ts"
        "$PROJECT_ROOT/client/core/logger.ts"
        "$PROJECT_ROOT/client/websocket/websocketService.ts"
        "$PROJECT_ROOT/client/rendering/scene.ts"
        "$PROJECT_ROOT/client/rendering/nodes.ts"
        "$PROJECT_ROOT/client/rendering/textRenderer.ts"
        "$PROJECT_ROOT/client/state/settings.ts"
        "$PROJECT_ROOT/client/state/graphData.ts"
        "$PROJECT_ROOT/client/state/defaultSettings.ts"
        "$PROJECT_ROOT/client/xr/xrSessionManager.ts"
        "$PROJECT_ROOT/client/xr/xrInteraction.ts"
        "$PROJECT_ROOT/client/xr/xrTypes.ts"
        "$PROJECT_ROOT/client/platform/platformManager.ts"
        "$PROJECT_ROOT/client/tsconfig.json"
    )
    
    for file in "${required_files[@]}"; do
        if [ ! -f "$file" ]; then
            log "${RED}Error: Required file $file not found${NC}"
            return 1
        fi
    done
    
    log "${GREEN}Client directory structure verified${NC}"
    return 0
}

# Function to clean up existing processes
cleanup_existing_processes() {
    log "${YELLOW}Cleaning up...${NC}"
    
    # Save logs before cleanup if there was a failure
    if [ -n "${SAVE_LOGS:-}" ]; then
        local log_dir="$PROJECT_ROOT/logs/$(date +%Y%m%d_%H%M%S)"
        mkdir -p "$log_dir"
        $DOCKER_COMPOSE logs --no-color > "$log_dir/docker-compose.log"
        log "${YELLOW}Logs saved to $log_dir${NC}"
    fi
    
    # Stop and remove all containers from the compose project
    $DOCKER_COMPOSE down --remove-orphans --timeout 30
    
    # Clean up any orphaned containers
    for container in "logseq-xr-webxr" "cloudflared-tunnel"; do
        if docker ps -a | grep -q "$container"; then
            log "Removing container $container..."
            docker rm -f "$container" || true
        fi
    done

    # Clean up ports
    for port in $PORT 4000 3001; do
        if netstat -tuln | grep -q ":$port "; then
            local pid=$(lsof -ti ":$port")
            if [ ! -z "$pid" ]; then
                log "Killing process using port $port (PID: $pid)"
                kill -15 $pid 2>/dev/null || kill -9 $pid
            fi
        fi
    done
    
    # Clean up old volumes and images
    log "Cleaning up Docker resources..."
    docker volume ls -q | grep "logseqXR" | xargs -r docker volume rm
    docker image prune -f
    
    sleep 2
}

# Function to check RAGFlow network availability
check_ragflow_network() {
    log "${YELLOW}Checking RAGFlow network availability...${NC}"
    if ! docker network ls | grep -q "docker_ragflow"; then
        log "${RED}Error: RAGFlow network (docker_ragflow) not found${NC}"
        log "${YELLOW}Please ensure RAGFlow is running in ../ragflow/docker${NC}"
        log "${YELLOW}You can check the network with: docker network ls${NC}"
        return 1
    fi
    log "${GREEN}RAGFlow network is available${NC}"
    return 0
}

# Function to check application readiness
check_application_readiness() {
    local max_attempts=60
    local attempt=1
    local wait=2

    log "${YELLOW}Checking application readiness...${NC}"
    
    # Install websocat if not available
    if ! command -v websocat &> /dev/null; then
        log "${YELLOW}Installing websocat for WebSocket testing...${NC}"
        if command -v cargo &> /dev/null; then
            cargo install websocat
        else
            log "${RED}Error: Neither websocat nor cargo found. Cannot test WebSocket connection.${NC}"
            return 1
        fi
    fi

    while [ $attempt -le $max_attempts ]; do
        local ready=true
        local status_msg=""

        # Check HTTP endpoint
        if ! timeout 5 curl -s http://localhost:4000/ >/dev/null; then
            ready=false
            status_msg="HTTP endpoint not ready"
        fi

        # Check WebSocket endpoint
        if [ "$ready" = true ]; then
            log "${YELLOW}Testing WebSocket connection...${NC}"
            if ! timeout 5 websocat "ws://localhost:4000/wss" > /dev/null 2>&1 <<< '{"type":"ping"}'; then
                ready=false
                status_msg="WebSocket endpoint not ready"
            fi
        fi

        # Optional RAGFlow connectivity check
        if [ "$ready" = true ]; then
            if timeout 5 curl -s http://ragflow-server/v1/health >/dev/null; then
                log "${GREEN}RAGFlow service is accessible${NC}"
            else
                log "${YELLOW}Note: RAGFlow service is not accessible - some features will be limited${NC}"
            fi
        fi

        if [ "$ready" = true ]; then
            log "${GREEN}All services are ready${NC}"
            return 0
        fi

        log "${YELLOW}Attempt $attempt/$max_attempts: $status_msg${NC}"
        
        if [ $attempt -eq $((max_attempts/2)) ]; then
            log "${YELLOW}Still waiting for services. Recent logs:${NC}"
            $DOCKER_COMPOSE logs --tail=20
        fi

        sleep $wait
        attempt=$((attempt + 1))
    done

    log "${RED}Application failed to become ready. Dumping logs...${NC}"
    SAVE_LOGS=1
    $DOCKER_COMPOSE logs
    return 1
}

# Function to handle exit
handle_exit() {
    log "\n${YELLOW}Exiting to shell. Containers will continue running.${NC}"
    exit 0
}

# Set up trap for clean exit
trap handle_exit INT TERM

# Change to project root directory
cd "$PROJECT_ROOT"

# Check environment
if [ ! -f .env ]; then
    log "${RED}Error: .env file not found in $PROJECT_ROOT${NC}"
    exit 1
fi

# Source .env file
set -a
source .env
set +a

# Read settings from TOML
read_settings

# Initial setup
check_docker
check_system_resources

# Verify client structure
if ! verify_client_structure; then
    log "${RED}Client structure verification failed${NC}"
    exit 1
fi

# Run security checks
log "\n${YELLOW}Running security checks...${NC}"
check_pnpm_security || true
check_typescript || exit 1
check_rust_security || true

cleanup_existing_processes

# Check RAGFlow network before starting
if ! check_ragflow_network; then
    log "${RED}Cannot proceed without RAGFlow network${NC}"
    exit 1
fi

# Build and start services
log "${YELLOW}Building and starting services...${NC}"
$DOCKER_COMPOSE build --pull --no-cache
$DOCKER_COMPOSE up -d

# Check application readiness
if ! check_application_readiness; then
    log "${RED}Application failed to start properly${NC}"
    cleanup_existing_processes
    exit 1
fi

# Print final status
log "\n${GREEN}🚀 Services are running!${NC}"

log "\nResource Usage:"
docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}"

log "\nEndpoints:"
echo "HTTP:      http://localhost:4000"
echo "WebSocket: ws://localhost:4000/wss"

log "\nCommands:"
echo "logs:    $DOCKER_COMPOSE logs -f"
echo "stop:    $DOCKER_COMPOSE down"
echo "restart: $DOCKER_COMPOSE restart"

# Keep script running to show logs
log "\n${YELLOW}Showing logs (Ctrl+C to exit)...${NC}"
$DOCKER_COMPOSE logs -f &

# Wait for signal
wait

--- scripts/start.sh ---

#!/bin/bash
set -euo pipefail

# Function to log messages with timestamps
log() {
    echo "[$(date "+%Y-%m-%d %H:%M:%S")] $1"
}

# Function to check if a service is healthy
check_service_health() {
    local port=$1
    local endpoint=${2:-"/"}
    local websocket=${3:-false}
    local retries=30
    local wait=2

    log "Checking health for service on port $port..."
    
    while [ $retries -gt 0 ]; do
        # Check if port is open
        if ! timeout 1 bash -c "cat < /dev/null > /dev/tcp/0.0.0.0/$port" 2>/dev/null; then
            retries=$((retries-1))
            if [ $retries -eq 0 ]; then
                log "Error: Port $port is not available"
                return 1
            fi
            log "Port $port not ready, retrying in $wait seconds... ($retries attempts left)"
            sleep $wait
            continue
        fi

        # Check HTTP endpoint
        if ! curl -s -f --max-time 5 "http://localhost:$port$endpoint" > /dev/null; then
            retries=$((retries-1))
            if [ $retries -eq 0 ]; then
                log "Error: Service health check failed on port $port"
                return 1
            fi
            log "Service not ready, retrying in $wait seconds... ($retries attempts left)"
            sleep $wait
            continue
        fi

        # Check WebSocket endpoint if required
        if [ "$websocket" = true ] && ! curl -s -f --max-time 5 -N -H "Connection: Upgrade" -H "Upgrade: websocket" "http://localhost:$port/wss" > /dev/null; then
            retries=$((retries-1))
            if [ $retries -eq 0 ]; then
                log "Error: WebSocket health check failed on port $port"
                return 1
            fi
            log "WebSocket not ready, retrying in $wait seconds... ($retries attempts left)"
            sleep $wait
            continue
        fi

        log "Service on port $port is healthy"
        return 0
    done

    return 1
}

# Function to check RAGFlow connectivity with retries
check_ragflow() {
    log "Checking RAGFlow connectivity..."
    local retries=5
    local wait=10
    while [ $retries -gt 0 ]; do
        if curl -s -f --max-time 5 "http://ragflow-server/v1/" > /dev/null; then
            log "RAGFlow server is reachable"
            return 0
        else
            retries=$((retries-1))
            if [ $retries -eq 0 ]; then
                log "Warning: Cannot reach RAGFlow server after multiple attempts"
                return 1
            fi
            log "RAGFlow not ready, retrying in $wait seconds... ($retries attempts left)"
            sleep $wait
        fi
    done
}

# Function to verify production build
verify_build() {
    log "Verifying production build..."
    
    # Check build directory exists and is accessible
    if [ ! -d "/app/data/public/dist" ]; then
        log "Error: Production build directory not found"
        return 1
    fi
    
    if [ ! -r "/app/data/public/dist" ]; then
        log "Error: Production build directory is not readable"
        return 1
    fi
    
    # Check required files exist
    local required_files=(
        "index.html"
        "assets"
    )
    
    for file in "${required_files[@]}"; do
        if [ ! -e "/app/data/public/dist/$file" ]; then
            log "Error: Required file/directory '$file' not found in build directory"
            return 1
        fi
    done
    
    # Check directory is not empty
    if [ -z "$(ls -A /app/data/public/dist)" ]; then
        log "Error: Production build directory is empty"
        return 1
    fi
    
    # Check permissions
    if [ ! -r "/app/data/public/dist/index.html" ]; then
        log "Error: index.html is not readable"
        return 1
    fi
    
    log "Production build verified"
    return 0
}

# Function to verify settings file permissions
verify_settings_permissions() {
    log "Verifying settings.toml permissions..."
    
    # Check if settings.toml exists
    if [ ! -f "/app/settings.toml" ]; then
        log "Error: settings.toml not found"
        return 1
    fi
    
    # Check if file is readable
    if [ ! -r "/app/settings.toml" ]; then
        log "Error: settings.toml is not readable"
        return 1
    fi
    
    # Check if file is writable
    if [ ! -w "/app/settings.toml" ]; then
        log "Error: settings.toml is not writable"
        return 1
    fi
    
    log "settings.toml permissions verified"
    return 0
}

# Set up runtime environment
setup_runtime() {
    log "Setting up runtime environment..."

    # Set up XDG_RUNTIME_DIR
    export XDG_RUNTIME_DIR="/tmp/runtime"
    mkdir -p "$XDG_RUNTIME_DIR"
    chmod 700 "$XDG_RUNTIME_DIR"

    # Verify GPU is available
    if ! command -v nvidia-smi &> /dev/null; then
        log "Error: nvidia-smi not found. GPU support is required."
        return 1
    fi

    # Check GPU is accessible
    if ! nvidia-smi &> /dev/null; then
        log "Error: Cannot access NVIDIA GPU. Check device is properly passed to container."
        return 1
    fi

    log "Runtime environment configured successfully"
    return 0
}

# Function to cleanup processes
cleanup() {
    log "Cleaning up processes..."
    
    # Kill nginx gracefully if running
    if pgrep nginx > /dev/null; then
        log "Stopping nginx..."
        nginx -s quit
        sleep 2
        # Force kill if still running
        pkill -9 nginx || true
    fi
    
    # Kill Rust backend if running
    if [ -n "${RUST_PID:-}" ]; then
        log "Stopping Rust backend..."
        kill -TERM $RUST_PID 2>/dev/null || true
        sleep 2
        # Force kill if still running
        kill -9 $RUST_PID 2>/dev/null || true
    fi
    
    log "Cleanup complete"
}

# Main script execution starts here
main() {
    # Set up trap for cleanup
    trap cleanup EXIT INT TERM

    # Verify settings file permissions
    if ! verify_settings_permissions; then
        log "Failed to verify settings.toml permissions"
        exit 1
    fi

    # Set up runtime environment
    if ! setup_runtime; then
        log "Failed to set up runtime environment"
        exit 1
    fi

    # Check RAGFlow availability (optional)
    if ! check_ragflow; then
        log "Warning: RAGFlow server not available - some features may be limited"
    fi

    # Verify production build
    if ! verify_build; then
        log "Failed to verify production build"
        exit 1
    fi

    # Start nginx (it needs to bind to port 4000)
    log "Starting nginx..."
    nginx -t && nginx
    if [ $? -ne 0 ]; then
        log "Failed to start nginx"
        exit 1
    fi

    # Basic nginx HTTP check (not WebSocket since that requires webxr to be running)
    if ! curl -s -f --max-time 5 "http://localhost:4000/" > /dev/null; then
        log "Failed to verify nginx is running"
        exit 1
    fi
    log "nginx started successfully"

    # Execute the webxr binary as the main process (which will enable WebSocket endpoints)
    log "Executing webxr..."
    exec /app/webxr
}

# Execute main function
main


=== Docker Network Configuration ===


--- docker network inspect docker_ragflow ---

[
    {
        "Name": "docker_ragflow",
        "Id": "a7bc515a66f9014dfe7b39dc55eb933f4620c1536e5ff801fa5f92c8c36060b3",
        "Created": "2024-12-06T11:41:33.959442093Z",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": null,
            "Config": [
                {
                    "Subnet": "172.19.0.0/16",
                    "Gateway": "172.19.0.1"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {
            "050e83ac5ba86056c50aed0b600ff55fcd3bc36f967ee24f7e689ca7c0060c21": {
                "Name": "ragflow-minio",
                "EndpointID": "26463d0b47222668be4c44aff9f778c9829c4378f3ebd92a09e704757277abd0",
                "MacAddress": "02:42:ac:13:00:03",
                "IPv4Address": "172.19.0.3/16",
                "IPv6Address": ""
            },
            "13e854731b088029534bb105fde19b582d0fd401f8d4f1bd10e1326c8ad704d7": {
                "Name": "ragflow-es-01",
                "EndpointID": "35962a244d7b8e1cca54f4663b177e54fa10e299943aabba9796efc5dfdaa1b7",
                "MacAddress": "02:42:ac:13:00:05",
                "IPv4Address": "172.19.0.5/16",
                "IPv6Address": ""
            },
            "43c333886de1ef9ed3fd3a8d5ec2f17710a3f2c62aeffcd94e58f6d3d9157f8b": {
                "Name": "ragflow-server",
                "EndpointID": "eb13cbe145fe756d3d86d45af26558bbdf6d5375283f72e41cfaa97ff7307305",
                "MacAddress": "02:42:ac:13:00:06",
                "IPv4Address": "172.19.0.6/16",
                "IPv6Address": ""
            },
            "4b8b481d4b8d3bdf7be932788bb958a5bce06b903efc54daa68a3ef726e862e4": {
                "Name": "ragflow-mysql",
                "EndpointID": "53ef4a3bae59d487b5073e6f81f78466b06397146089360d2edec84408aebcc4",
                "MacAddress": "02:42:ac:13:00:02",
                "IPv4Address": "172.19.0.2/16",
                "IPv6Address": ""
            },
            "58544e030da235b95c482cb12a8354622ac033ce22d95d244cf4d5f597d7b442": {
                "Name": "ragflow-redis",
                "EndpointID": "05980d6ebe36a2b75f3972c5b5e52844504f417b7c033288558c6715731c0a90",
                "MacAddress": "02:42:ac:13:00:04",
                "IPv4Address": "172.19.0.4/16",
                "IPv6Address": ""
            }
        },
        "Options": {},
        "Labels": {
            "com.docker.compose.network": "ragflow",
            "com.docker.compose.project": "docker",
            "com.docker.compose.version": "2.29.7"
        }
    }
]
