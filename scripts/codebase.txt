The following text represents a project with code. The structure of the text consists of sections beginning with ----, followed by a single line containing the file path and file name, and then a variable number of lines containing the file contents. The text representing the project ends when the symbols --END-- are encountered. Any further text beyond --END-- is meant to be interpreted as instructions using the aforementioned project as context.
----
config.rs
use serde::{Deserialize, Serialize};
use config::{ConfigBuilder, ConfigError, Environment};
use log::debug;
use crate::models::simulation_params::SimulationParams;

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(rename_all = "snake_case")]
pub struct Settings {
    // Core visualization settings
    #[serde(default)]
    pub visualization: VisualizationSettings,

    // XR-specific settings
    #[serde(default)]
    pub xr: XRSettings,

    // System settings
    #[serde(default)]
    pub system: SystemSettings,

    // Graph settings
    #[serde(default)]
    pub graph: GraphSettings,

    // Service settings from .env (server-side only)
    #[serde(default)]
    pub github: GitHubSettings,
    #[serde(default)]
    pub ragflow: RagFlowSettings,
    #[serde(default)]
    pub perplexity: PerplexitySettings,
    #[serde(default)]
    pub openai: OpenAISettings,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(rename_all = "snake_case")]
pub struct GraphSettings {
    pub simulation_params: SimulationParams,
    pub layout_params: LayoutParams,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(rename_all = "snake_case")]
pub struct LayoutParams {
    pub use_force_layout: bool,
    pub force_iterations: u32,
    pub link_distance: f32,
    pub link_strength: f32,
    pub charge_strength: f32,
    pub center_strength: f32,
    pub collision_radius: f32,
}

// Placeholder structs for other settings
// These should be moved to their own modules
#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct VisualizationSettings {
    pub animations: AnimationSettings,
    pub bloom: BloomSettings,
    pub edges: EdgeSettings,
    pub hologram: HologramSettings,
    pub labels: LabelSettings,
    pub nodes: NodeSettings,
    pub physics: PhysicsSettings,
    pub rendering: RenderingSettings,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct AnimationSettings {
    pub enable_node_animations: bool,
    pub enable_motion_blur: bool,
    pub motion_blur_strength: f32,
    pub selection_wave_enabled: bool,
    pub pulse_enabled: bool,
    pub pulse_speed: f32,
    pub pulse_strength: f32,
    pub wave_speed: f32,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct BloomSettings {
    pub enabled: bool,
    pub strength: f32,
    pub radius: f32,
    pub edge_bloom_strength: f32,
    pub node_bloom_strength: f32,
    pub environment_bloom_strength: f32,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct EdgeSettings {
    pub color: String,
    pub opacity: f32,
    pub arrow_size: f32,
    pub base_width: f32,
    pub enable_arrows: bool,
    pub width_range: (f32, f32),
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct HologramSettings {
    pub ring_count: u32,
    pub ring_sizes: Vec<f32>,
    pub ring_rotation_speed: f32,
    pub global_rotation_speed: f32,
    pub ring_color: String,
    pub ring_opacity: f32,
    pub enable_buckminster: bool,
    pub buckminster_scale: f32,
    pub buckminster_opacity: f32,
    pub enable_geodesic: bool,
    pub geodesic_scale: f32,
    pub geodesic_opacity: f32,
    pub enable_triangle_sphere: bool,
    pub triangle_sphere_scale: f32,
    pub triangle_sphere_opacity: f32,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct LabelSettings {
    pub enable_labels: bool,
    pub desktop_font_size: u32,
    pub text_color: String,
    pub text_outline_color: String,
    pub text_outline_width: f32,
    pub text_resolution: u32,
    pub text_padding: u32,
    pub billboard_mode: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct NodeSettings {
    pub quality: String,
    pub enable_instancing: bool,
    pub enable_hologram: bool,
    pub enable_metadata_shape: bool,
    pub enable_metadata_visualization: bool,
    pub base_size: f32,
    pub size_range: (f32, f32),
    pub base_color: String,
    pub opacity: f32,
    pub color_range_age: (String, String),
    pub color_range_links: (String, String),
    pub metalness: f32,
    pub roughness: f32,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct PhysicsSettings {
    pub enabled: bool,
    pub attraction_strength: f32,
    pub repulsion_strength: f32,
    pub spring_strength: f32,
    pub damping: f32,
    pub iterations: u32,
    pub max_velocity: f32,
    pub collision_radius: f32,
    pub enable_bounds: bool,
    pub bounds_size: f32,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct RenderingSettings {
    pub ambient_light_intensity: f32,
    pub directional_light_intensity: f32,
    pub environment_intensity: f32,
    pub background_color: String,
    pub enable_ambient_occlusion: bool,
    pub enable_antialiasing: bool,
    pub enable_shadows: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct XRSettings {}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct SystemSettings {
    pub websocket: WebSocketSettings,
    pub debug: DebugSettings,
    pub paths: PathSettings,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct PathSettings {
    pub data_root: String,
    pub markdown_dir: String,
    pub metadata_dir: String,
    pub data_dir: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct WebSocketSettings {
    pub update_rate: u32,
    pub max_message_size: u32,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct DebugSettings {
    pub enabled: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GitHubSettings {
    pub api_key: String,
    pub api_url: String,
    pub token: String,
    pub owner: String,
    pub repo: String,
    pub base_path: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct RagFlowSettings {
    pub api_key: String,
    pub api_base_url: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct PerplexitySettings {
    pub api_key: String,
    pub api_url: String,
    pub model: String,
    pub max_tokens: u32,
    pub temperature: f32,
    pub top_p: f32,
    pub presence_penalty: f32,
    pub frequency_penalty: f32,
    pub timeout: u64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct OpenAISettings {
    pub api_key: String,
}

impl Settings {
    pub fn new() -> Result<Self, ConfigError> {
        debug!("Initializing settings with client-side defaults");
        Ok(Settings::default())
    }

    pub fn from_env() -> Result<Self, ConfigError> {
        let builder = ConfigBuilder::<config::builder::DefaultState>::default();
        let config = builder
            .add_source(
                Environment::default()
                    .separator("_")
                    .try_parsing(true)
            )
            .build()?;

        let mut settings = Settings::default();

        // Load path settings from environment
        if let Ok(data_root) = std::env::var("DATA_ROOT") {
            settings.system.paths.data_root = data_root;
        }
        if let Ok(markdown_dir) = std::env::var("MARKDOWN_DIR") {
            settings.system.paths.markdown_dir = markdown_dir;
        }
        if let Ok(metadata_dir) = std::env::var("METADATA_DIR") {
            settings.system.paths.metadata_dir = metadata_dir;
        }
        if let Ok(data_dir) = std::env::var("DATA_DIR") {
            settings.system.paths.data_dir = data_dir;
        }
        
        // Load GitHub settings from environment
        if let Ok(token) = std::env::var("GITHUB_TOKEN") {
            settings.github.token = token;
        }
        if let Ok(owner) = std::env::var("GITHUB_OWNER") {
            settings.github.owner = owner;
        }
        if let Ok(repo) = std::env::var("GITHUB_REPO") {
            settings.github.repo = repo;
        }
        if let Ok(base_path) = std::env::var("GITHUB_BASE_PATH") {
            settings.github.base_path = base_path;
        }

        // Load other settings from config
        if let Ok(other_settings) = config.try_deserialize::<Settings>() {
            settings.visualization = other_settings.visualization;
            settings.xr = other_settings.xr;
            settings.system = other_settings.system;
            settings.graph = other_settings.graph;
            settings.ragflow = other_settings.ragflow;
            settings.perplexity = other_settings.perplexity;
            settings.openai = other_settings.openai;
        }

        Ok(settings)
    }
}

----
main.rs
use std::sync::Arc;
use tokio::sync::RwLock;
use actix_web::{web, App, HttpServer, middleware};
use actix_cors::Cors;
use actix_files::Files;
use log::{error, info};
use dotenvy::dotenv;

use webxr::{
    AppState,
    Settings,
    handlers::{
        file_handler::{fetch_and_process_files, get_file_content, refresh_graph as file_refresh_graph},
        graph_handler::{get_graph_data, get_paginated_graph_data, refresh_graph as graph_refresh_graph, update_graph},
        settings::{self, websocket, visualization},
        socket_flow_handler::socket_flow_handler,
    },
    utils::gpu_compute::GPUCompute,
    services::{
        file_service::FileService,
        github_service::RealGitHubPRService,
        graph_service::GraphService,
    },
    RealGitHubService,
};

#[actix_web::main]
async fn main() -> std::io::Result<()> {
    // Initialize environment
    dotenv().ok();

    // Load settings
    let settings = Arc::new(RwLock::new(
        Settings::from_env().unwrap_or_else(|_| Settings::default())
    ));

    // Diagnostic: Print environment variables
    println!("GITHUB_TOKEN: {}", std::env::var("GITHUB_TOKEN").unwrap_or_else(|_| "Not found".to_string()));
    println!("GITHUB_OWNER: {}", std::env::var("GITHUB_OWNER").unwrap_or_else(|_| "Not found".to_string()));
    println!("GITHUB_REPO: {}", std::env::var("GITHUB_REPO").unwrap_or_else(|_| "Not found".to_string()));
    println!("GITHUB_BASE_PATH: {}", std::env::var("GITHUB_BASE_PATH").unwrap_or_else(|_| "Not found".to_string()));

    // Initialize services
    let settings_read = settings.read().await;
    let github_service = Arc::new(RealGitHubService::new(
        match settings_read.github.token.as_str() {
            "" => return Err(std::io::Error::new(std::io::ErrorKind::Other, "GITHUB_TOKEN not set")),
            token => token.to_string(),
        },
        match settings_read.github.owner.as_str() {
            "" => return Err(std::io::Error::new(std::io::ErrorKind::Other, "GITHUB_OWNER not set")),
            owner => owner.to_string(),
        },
        match settings_read.github.repo.as_str() {
            "" => return Err(std::io::Error::new(std::io::ErrorKind::Other, "GITHUB_REPO not set")),
            repo => repo.to_string(),
        },
        match settings_read.github.base_path.as_str() {
            "" => return Err(std::io::Error::new(std::io::ErrorKind::Other, "GITHUB_BASE_PATH not set")),
            base_path => base_path.to_string(),
        },
        settings.clone(),
    ).map_err(|e| {
        error!("Failed to initialize GitHub service: {}", e);
        std::io::Error::new(std::io::ErrorKind::Other, e.to_string())
    })?);
    drop(settings_read);

    let settings_read = settings.read().await;
    let github_pr_service = Arc::new(RealGitHubPRService::new(
        settings_read.github.token.clone(),
        settings_read.github.owner.clone(),
        settings_read.github.repo.clone(),
        settings_read.github.base_path.clone(),
    ).map_err(|e| std::io::Error::new(std::io::ErrorKind::Other, e.to_string()))?);
    drop(settings_read);

    // Initialize local storage and fetch initial data
    info!("Initializing local storage and fetching initial data");
    if let Err(e) = FileService::initialize_local_storage(&*github_service, settings.clone()).await {
        error!("Failed to initialize local storage: {}", e);
        return Err(std::io::Error::new(std::io::ErrorKind::Other, e.to_string()));
    }

    // Load metadata and build initial graph
    info!("Building initial graph from metadata");
    let metadata_store = FileService::load_or_create_metadata()
        .map_err(|e| {
            error!("Failed to load metadata: {}", e);
            std::io::Error::new(std::io::ErrorKind::Other, e.to_string())
        })?;

    let initial_graph = GraphService::build_graph_from_metadata(&metadata_store)
        .await
        .map_err(|e| {
            error!("Failed to build initial graph: {}", e);
            std::io::Error::new(std::io::ErrorKind::Other, e.to_string())
        })?;

    // Initialize GPU compute with initial graph
    let gpu_compute = match GPUCompute::create_for_app_state(&initial_graph).await {
        Ok(compute) => {
            info!("GPU compute initialized successfully");
            Some(compute)
        },
        Err(e) => {
            error!("Failed to initialize GPU compute: {}", e);
            None
        }
    };

    // Create application state with initial graph
    let state: AppState = AppState::new(
        settings.clone(),
        github_service.clone(),
        None, // perplexity_service
        None, // ragflow_service
        gpu_compute,
        String::new(), // some_string
        github_pr_service,
    ).await;

    let app_state = Arc::new(state);

    // Get static files path from environment or use default
    let static_files_path = std::env::var("STATIC_FILES_PATH")
        .unwrap_or_else(|_| "/app/static".to_string());

    // Configure and start server
    let static_path = static_files_path.to_string();
    let server = HttpServer::new(move || {
        App::new()
            .app_data(web::Data::new(app_state.clone()))
            .wrap(
                Cors::default()
                    .allow_any_origin()
                    .allow_any_method()
                    .allow_any_header()
                    .max_age(3600)
            )
            .wrap(middleware::Logger::default())
            .service(
                web::scope("/api")
                    // Settings routes
                    .service(
                        web::scope("/settings")
                            .service(web::scope("/websocket").configure(websocket::config))
                            .service(web::scope("/visualization").configure(visualization::config))
                            .configure(settings::config)
                    )
                    // Graph routes
                    .service(
                        web::scope("/graph")
                            .route("/data", web::get().to(get_graph_data))
                            .route("/data/paginated", web::get().to(get_paginated_graph_data))
                            .route("/update", web::post().to(update_graph))
                            .route("/refresh", web::post().to(graph_refresh_graph))
                    )
                    // File routes
                    .service(
                        web::scope("/files")
                            .route("/fetch", web::post().to(fetch_and_process_files))
                            .route("/content/{file_name}", web::get().to(get_file_content))
                            .route("/refresh", web::post().to(file_refresh_graph))
                    )
            )
            .service(
                web::scope("/wss")
                    .route("", web::get().to(socket_flow_handler))
            )
            .service(Files::new("/", &static_path).index_file("index.html"))
    })
    .bind("0.0.0.0:3001")?
    .run();

    info!("Server running at http://localhost:3001");
    server.await
}

----
app_state.rs
use std::sync::{Arc, atomic::{AtomicUsize, Ordering}};
use tokio::sync::RwLock;
use log::{info, warn};

use crate::config::Settings;
use crate::models::metadata::MetadataStore;
use crate::services::graph_service::GraphService;
use crate::services::file_service::{FileService, RealGitHubService};
use crate::services::github_service::RealGitHubPRService;
use crate::services::perplexity_service::PerplexityService;
use crate::services::ragflow_service::RAGFlowService;
use crate::utils::gpu_compute::GPUCompute;

#[derive(Clone)]
pub struct AppState {
    pub graph_service: Arc<GraphService>,
    pub gpu_compute: Option<Arc<RwLock<GPUCompute>>>,
    pub settings: Arc<RwLock<Settings>>,
    pub metadata: Arc<RwLock<MetadataStore>>,
    pub github_service: Arc<RealGitHubService>,
    pub perplexity_service: Option<Arc<PerplexityService>>,
    pub ragflow_service: Option<Arc<RAGFlowService>>,
    pub ragflow_conversation_id: String,
    pub github_pr_service: Arc<RealGitHubPRService>,
    pub active_connections: Arc<AtomicUsize>,
}

impl AppState {
    pub async fn new(
        settings: Arc<RwLock<Settings>>,
        github_service: Arc<RealGitHubService>,
        perplexity_service: Option<Arc<PerplexityService>>,
        ragflow_service: Option<Arc<RAGFlowService>>,
        gpu_compute: Option<Arc<RwLock<GPUCompute>>>,
        ragflow_conversation_id: String,
        github_pr_service: Arc<RealGitHubPRService>,
    ) -> Self {
        // Load metadata first
        let metadata_store = match FileService::load_or_create_metadata() {
            Ok(metadata) => {
                info!("Loaded metadata with {} entries", metadata.len());
                metadata
            },
            Err(e) => {
                warn!("Failed to load metadata: {}, starting with empty store", e);
                MetadataStore::new()
            }
        };

        // Initialize graph service with metadata
        let graph_service = Arc::new(GraphService::new_with_metadata(&metadata_store).await);

        Self {
            graph_service,
            gpu_compute,
            settings,
            metadata: Arc::new(RwLock::new(metadata_store)),
            github_service,
            perplexity_service,
            ragflow_service,
            ragflow_conversation_id,
            github_pr_service,
            active_connections: Arc::new(AtomicUsize::new(0)),
        }
    }

    pub fn increment_connections(&self) -> usize {
        self.active_connections.fetch_add(1, Ordering::SeqCst)
    }

    pub fn decrement_connections(&self) -> usize {
        self.active_connections.fetch_sub(1, Ordering::SeqCst)
    }
}

----
generate_audio.py
import sys
import io
import wave
import numpy as np
from piper import PiperVoice

def generate_audio_stream(text):
    try:
        voice = PiperVoice.load("/app/piper/en_GB-alan-medium.onnx")
        audio = voice.synthesize(text)
        
        # Convert audio to WAV format
        with io.BytesIO() as wav_io:
            with wave.open(wav_io, 'wb') as wav_file:
                wav_file.setnchannels(1)  # mono
                wav_file.setsampwidth(2)  # 16-bit
                wav_file.setframerate(voice.config.sample_rate)
                wav_file.writeframes(audio.tobytes())
            
            wav_data = wav_io.getvalue()
        
        # Verify WAV header
        if wav_data[:4] != b'RIFF' or wav_data[8:12] != b'WAVE':
            raise ValueError("Invalid WAV header")
        
        # Write WAV data to stdout
        sys.stdout.buffer.write(wav_data)
        sys.stdout.buffer.flush()
    except Exception as e:
        print(f"Error generating audio: {str(e)}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    input_text = sys.stdin.read().strip()
    if input_text:
        generate_audio_stream(input_text)
    else:
        print("No input received", file=sys.stderr)
        sys.exit(1)

----
lib.rs
#![recursion_limit = "256"]

extern crate log;

// Declare modules
pub mod utils;
pub mod app_state;
pub mod config;
pub mod handlers;
pub mod models;
pub mod services;
pub mod types;

// Re-export debug settings
pub use crate::utils::debug_logging::init_debug_settings;

// Re-export GPU compute
pub use crate::utils::gpu_compute::GPUCompute;

// Re-export socket flow handler
pub use crate::handlers::socket_flow_handler::{SocketFlowServer, socket_flow_handler};

// Public re-exports
pub use app_state::AppState;
pub use config::Settings;
pub use models::position_update::PositionUpdate;
pub use models::metadata::MetadataStore;
pub use models::simulation_params::SimulationParams;
pub use models::graph::GraphData;
pub use services::graph_service::GraphService;
pub use services::file_service::{RealGitHubService, FileService};
pub use services::perplexity_service::PerplexityService;
pub use services::ragflow_service::{RAGFlowService, RAGFlowError};
pub use services::github_service::RealGitHubPRService;

// Re-export handlers
pub use handlers::file_handler;
pub use handlers::graph_handler;
pub use handlers::perplexity_handler;
pub use handlers::ragflow_handler;
pub use handlers::settings;

// Re-export types
pub use crate::types::speech::{SpeechError, SpeechCommand, TTSProvider};

----
generate_welcome_audio.py
import sys
from piper import PiperVoice

def generate_welcome_audio():
    voice = PiperVoice.load("/app/piper/en_GB-alan-medium.onnx")
    text = "Welcome to the WebXR Graph Visualization. Your virtual environment is now ready."
    audio = voice.synthesize(text)
    sys.stdout.buffer.write(audio)

if __name__ == "__main__":
    generate_welcome_audio()
----
utils/compute_forces.cu
// Node data structure matching Rust's NodeData
struct NodeData {
    float position[3];    // 12 bytes
    unsigned char mass;   // 1 byte
    unsigned char flags;  // 1 byte
    unsigned char padding[2]; // 2 bytes padding
};

// Velocity data structure matching Rust's VelocityData
struct VelocityData {
    float x;
    float y;
    float z;
};

extern "C" __global__ void compute_forces(
    NodeData* nodes,
    VelocityData* velocities,
    unsigned long long unused,
    unsigned int num_nodes,
    float spring_strength,
    float spring_length,
    float repulsion,
    float attraction,
    float damping
) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx >= num_nodes) return;

    // Load node data
    NodeData node_i = nodes[idx];
    float3 pos_i = make_float3(
        node_i.position[0],
        node_i.position[1],
        node_i.position[2]
    );
    float mass_i = (float)node_i.mass;
    float3 force = make_float3(0.0f, 0.0f, 0.0f);

    __shared__ float3 shared_positions[256];
    __shared__ float shared_masses[256];

    // Process nodes in tiles to maximize shared memory usage
    for (int tile = 0; tile < (num_nodes + blockDim.x - 1) / blockDim.x; tile++) {
        int shared_idx = tile * blockDim.x + threadIdx.x;
        
        // Load tile into shared memory
        if (shared_idx < num_nodes) {
            NodeData shared_node = nodes[shared_idx];
            shared_positions[threadIdx.x] = make_float3(
                shared_node.position[0],
                shared_node.position[1],
                shared_node.position[2]
            );
            shared_masses[threadIdx.x] = (float)shared_node.mass;
        }
        __syncthreads();

        // Compute forces between current node and all nodes in tile
        #pragma unroll 8
        for (int j = 0; j < blockDim.x && tile * blockDim.x + j < num_nodes; j++) {
            if (tile * blockDim.x + j == idx) continue;

            // Skip nodes with inactive flag
            if ((nodes[tile * blockDim.x + j].flags & 0x1) == 0) continue;

            float3 pos_j = shared_positions[j];
            float mass_j = shared_masses[j];
            
            // Calculate displacement vector from j to i for repulsion
            float3 diff = make_float3(
                pos_i.x - pos_j.x,
                pos_i.y - pos_j.y,
                pos_i.z - pos_j.z
            );

            // Calculate distance with minimum clamp
            float dist2 = diff.x * diff.x + diff.y * diff.y + diff.z * diff.z;
            float dist = fmaxf(sqrtf(dist2), 0.1f); // Smaller min distance for more dynamic movement
            
            // Normalize direction vector
            float inv_dist = 1.0f / dist;
            float3 dir = make_float3(
                diff.x * inv_dist,
                diff.y * inv_dist,
                diff.z * inv_dist
            );

            // Calculate repulsion force (inverse square law)
            float mass_factor = sqrtf(mass_i * mass_j);
            float repulsion_mag = repulsion * mass_factor / dist2;
            
            // Add repulsion force
            force.x += dir.x * repulsion_mag;
            force.y += dir.y * repulsion_mag;
            force.z += dir.z * repulsion_mag;

            // Add spring force if nodes are connected
            if ((node_i.flags & 0x2) && (nodes[tile * blockDim.x + j].flags & 0x2)) {
                // Spring force points opposite to displacement if too far, along it if too close
                float spring_displacement = dist - spring_length;
                float spring_mag = spring_strength * spring_displacement * attraction;
                
                // Spring force opposes displacement
                force.x -= dir.x * spring_mag;
                force.y -= dir.y * spring_mag;
                force.z -= dir.z * spring_mag;
            }
        }
        __syncthreads();
    }

    // Clamp maximum force magnitude
    float force_mag = sqrtf(force.x * force.x + force.y * force.y + force.z * force.z);
    if (force_mag > 1000.0f) {
        float scale = 1000.0f / force_mag;
        force.x *= scale;
        force.y *= scale;
        force.z *= scale;
    }

    // Load current velocity
    float3 vel = make_float3(
        velocities[idx].x,
        velocities[idx].y,
        velocities[idx].z
    );

    // Time step for integration (adjust this to control simulation speed)
    const float dt = 0.016f; // 60 fps

    // Semi-implicit Euler integration
    // First update velocity (v = v + a*dt)
    vel.x = (vel.x + force.x * dt) * damping;
    vel.y = (vel.y + force.y * dt) * damping;
    vel.z = (vel.z + force.z * dt) * damping;

    // Then update position (p = p + v*dt)
    pos_i.x += vel.x * dt;
    pos_i.y += vel.y * dt;
    pos_i.z += vel.z * dt;

    // Store updated position and velocity
    nodes[idx].position[0] = pos_i.x;
    nodes[idx].position[1] = pos_i.y;
    nodes[idx].position[2] = pos_i.z;
    velocities[idx].x = vel.x;
    velocities[idx].y = vel.y;
    velocities[idx].z = vel.z;
}

----
utils/audio_processor.rs
use serde_json::Value;
use base64::{Engine as _, engine::general_purpose::STANDARD as BASE64};
use std::sync::Arc;
use tokio::sync::RwLock;
use crate::config::Settings;
use crate::{log_error, log_warn, log_data};

pub struct AudioProcessor {
    settings: Arc<RwLock<Settings>>,
}

impl AudioProcessor {
    pub fn new(settings: Arc<RwLock<Settings>>) -> Self {
        Self { settings }
    }

    pub async fn process_json_response(&self, response_data: &[u8]) -> Result<(String, Vec<u8>), String> {
        let _settings = self.settings.read().await;
        
        // Parse the JSON response
        let json_response: Value = serde_json::from_slice(response_data)
            .map_err(|e| format!("Failed to parse JSON response: {}", e))?;
        
        // Log the entire JSON response if data debug is enabled
        log_data!("Received JSON response: {}", 
            serde_json::to_string_pretty(&json_response).unwrap_or_else(|_| "Unable to prettify JSON".to_string())
        );
        
        // Check if the response contains an error message
        if let Some(error_msg) = json_response["error"].as_str() {
            log_error!("Error in JSON response: {}", error_msg);
            return Err(format!("Error in JSON response: {}", error_msg));
        }

        // Extract the text answer with better error handling
        let answer = json_response["data"]["answer"]
            .as_str()
            .or_else(|| json_response["answer"].as_str())
            .ok_or_else(|| {
                log_error!("Text answer not found in JSON response");
                "Text answer not found in JSON response".to_string()
            })?
            .to_string();

        // Try to extract the audio data from different possible locations with detailed logging
        let audio_data = if let Some(audio) = json_response["data"]["audio"].as_str() {
            log_data!("Found audio data in data.audio");
            BASE64.decode(audio).map_err(|e| format!("Failed to decode base64 audio data from data.audio: {}", e))?
        } else if let Some(audio) = json_response["audio"].as_str() {
            log_data!("Found audio data in root.audio");
            BASE64.decode(audio).map_err(|e| format!("Failed to decode base64 audio data from root.audio: {}", e))?
        } else {
            // Log available paths in the JSON for debugging
            log_warn!("Audio data not found in JSON response. Available paths:");
            if let Some(obj) = json_response.as_object() {
                for (key, value) in obj {
                    log_warn!("- {}: {}", key, match value {
                        Value::Null => "null",
                        Value::Bool(_) => "boolean",
                        Value::Number(_) => "number",
                        Value::String(_) => "string",
                        Value::Array(_) => "array",
                        Value::Object(_) => "object",
                    });
                }
            }
            return Err("Audio data not found in JSON response".to_string());
        };
        
        log_data!("Successfully processed audio data: {} bytes", audio_data.len());
        
        // Validate WAV header
        if audio_data.len() >= 44 {
            log_data!("WAV header: {:?}", &audio_data[..44]);
            
            if &audio_data[..4] != b"RIFF" || &audio_data[8..12] != b"WAVE" {
                log_error!("Invalid WAV header detected");
                return Err("Invalid WAV header".to_string());
            }
            
            // Extract and log WAV format information
            let channels = u16::from_le_bytes([audio_data[22], audio_data[23]]);
            let sample_rate = u32::from_le_bytes([audio_data[24], audio_data[25], audio_data[26], audio_data[27]]);
            let bits_per_sample = u16::from_le_bytes([audio_data[34], audio_data[35]]);
            
            log_data!("WAV format: {} channels, {} Hz, {} bits per sample", 
                channels, sample_rate, bits_per_sample);
        } else {
            log_error!("Audio data too short to contain WAV header: {} bytes", audio_data.len());
            return Err("Audio data too short".to_string());
        }
        
        Ok((answer, audio_data))
    }

    pub async fn validate_wav_header(&self, audio_data: &[u8]) -> Result<(), String> {
        if audio_data.len() < 44 {
            return Err("Audio data too short for WAV header".to_string());
        }

        if &audio_data[..4] != b"RIFF" {
            return Err("Missing RIFF header".to_string());
        }

        if &audio_data[8..12] != b"WAVE" {
            return Err("Missing WAVE format".to_string());
        }

        let channels = u16::from_le_bytes([audio_data[22], audio_data[23]]);
        let sample_rate = u32::from_le_bytes([audio_data[24], audio_data[25], audio_data[26], audio_data[27]]);
        let bits_per_sample = u16::from_le_bytes([audio_data[34], audio_data[35]]);

        log_data!("Validated WAV format: {} channels, {} Hz, {} bits per sample",
            channels, sample_rate, bits_per_sample);

        Ok(())
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use serde_json::json;
    use tokio::runtime::Runtime;

    fn create_test_settings() -> Arc<RwLock<Settings>> {
        let mut settings = Settings::default();
        settings.system.debug.enabled = false;
        Arc::new(RwLock::new(settings))
    }

    #[test]
    fn test_process_json_response_valid() {
        let rt = Runtime::new().unwrap();
        let settings = create_test_settings();
        let processor = AudioProcessor::new(settings);

        let test_wav = vec![
            b'R', b'I', b'F', b'F', // ChunkID
            0x24, 0x00, 0x00, 0x00, // ChunkSize
            b'W', b'A', b'V', b'E', // Format
            b'f', b'm', b't', b' ', // Subchunk1ID
            0x10, 0x00, 0x00, 0x00, // Subchunk1Size
            0x01, 0x00,             // AudioFormat (PCM)
            0x01, 0x00,             // NumChannels (Mono)
            0x44, 0xAC, 0x00, 0x00, // SampleRate (44100)
            0x88, 0x58, 0x01, 0x00, // ByteRate
            0x02, 0x00,             // BlockAlign
            0x10, 0x00,             // BitsPerSample (16)
            b'd', b'a', b't', b'a', // Subchunk2ID
            0x00, 0x00, 0x00, 0x00  // Subchunk2Size
        ];

        let json_data = json!({
            "data": {
                "answer": "Test answer",
                "audio": BASE64.encode(test_wav)
            }
        });

        let result = rt.block_on(processor.process_json_response(
            serde_json::to_vec(&json_data).unwrap().as_slice()
        ));

        assert!(result.is_ok());
        let (answer, audio) = result.unwrap();
        assert_eq!(answer, "Test answer");
        assert_eq!(&audio[..4], b"RIFF");
    }

    #[test]
    fn test_process_json_response_invalid_wav() {
        let rt = Runtime::new().unwrap();
        let settings = create_test_settings();
        let processor = AudioProcessor::new(settings);

        let invalid_wav = vec![0x00; 44]; // Invalid WAV header
        let json_data = json!({
            "data": {
                "answer": "Test answer",
                "audio": BASE64.encode(invalid_wav)
            }
        });

        let result = rt.block_on(processor.process_json_response(
            serde_json::to_vec(&json_data).unwrap().as_slice()
        ));

        assert!(result.is_err());
    }
}

----
utils/force_calculation.wgsl
// Node structure exactly matching Rust NodeData memory layout (28 bytes total)
struct Node {
    position: vec3<f32>,  // 12 bytes - matches THREE.Vector3
    velocity: vec3<f32>,  // 12 bytes - matches THREE.Vector3
    mass: u32,            // 1 byte - quantized mass
    flags: u32,           // 1 byte - node state flags
    padding: vec2<u32>,   // 2 bytes - alignment padding
}

// Edge structure matching Rust GPUEdge layout
struct Edge {
    source: u32,      // 4 bytes
    target_idx: u32,  // 4 bytes (renamed from 'target' as it's a reserved keyword)
    weight: f32,      // 4 bytes
}

struct NodesBuffer {
    nodes: array<Node>,
}

struct EdgesBuffer {
    edges: array<Edge>,
}

// Matches Rust SimulationParams exactly
struct SimulationParams {
    iterations: u32,           // Range: 1-500
    spring_strength: f32,      // Range: 0.001-1.0
    repulsion_strength: f32,   // Range: 1.0-10000.0
    attraction_strength: f32,  // Range: 0.001-1.0
    damping: f32,             // Range: 0.5-0.95
    is_initial_layout: u32,   // bool converted to u32
    time_step: f32,           // Range: 0.1-1.0
    padding: u32,             // Explicit padding for alignment
}

@group(0) @binding(0) var<storage, read_write> nodes_buffer: NodesBuffer;
@group(0) @binding(1) var<storage, read> edges_buffer: EdgesBuffer;
@group(0) @binding(2) var<uniform> params: SimulationParams;

// Physics constants - aligned with settings.toml
const WORKGROUP_SIZE: u32 = 256;
const MAX_FORCE: f32 = 100.0;          // Increased for stronger forces
const MIN_DISTANCE: f32 = 5.0;         // Increased minimum distance
const CENTER_RADIUS: f32 = 250.0;      // Matches target_radius from settings
const MAX_VELOCITY: f32 = 20.0;        // Increased for faster movement
const NATURAL_LENGTH: f32 = 120.0;     // Matches natural_length from settings
const BOUNDARY_LIMIT: f32 = 600.0;     // Matches boundary_limit from settings

// Validation functions
fn is_valid_float(x: f32) -> bool {
    return x == x && abs(x) < 1e10;  // Check for NaN and infinity
}

fn is_valid_float3(v: vec3<f32>) -> bool {
    return is_valid_float(v.x) && is_valid_float(v.y) && is_valid_float(v.z);
}

fn clamp_force(force: vec3<f32>) -> vec3<f32> {
    let magnitude = length(force);
    if (magnitude > MAX_FORCE) {
        return (force / magnitude) * MAX_FORCE;
    }
    return force;
}

// Convert quantized mass (0-255 in lower byte) to float (0.0-2.0)
fn decode_mass(mass_packed: u32) -> f32 {
    return f32(mass_packed & 0xFFu) / 127.5;
}

// Get node position as vec3
fn get_position(node: Node) -> vec3<f32> {
    return node.position;
}

// Get node velocity as vec3
fn get_velocity(node: Node) -> vec3<f32> {
    return node.velocity;
}

// Calculate spring force between connected nodes
fn calculate_spring_force(pos1: vec3<f32>, pos2: vec3<f32>, mass1: f32, mass2: f32, weight: f32) -> vec3<f32> {
    let displacement = pos2 - pos1;
    let distance = length(displacement);
    
    if (distance < MIN_DISTANCE) {
        return normalize(displacement) * MAX_FORCE;
    }
    
    // Combined spring and attraction forces with weight scaling
    let spring_force = params.spring_strength * weight * (distance - NATURAL_LENGTH);
    let attraction_force = params.attraction_strength * weight * distance;
    
    let total_force = normalize(displacement) * (spring_force + attraction_force);
    return clamp_force(total_force);
}

// Calculate repulsion force between nodes
fn calculate_repulsion_force(pos1: vec3<f32>, pos2: vec3<f32>, mass1: f32, mass2: f32) -> vec3<f32> {
    let displacement = pos2 - pos1;
    let distance_sq = dot(displacement, displacement);
    
    if (distance_sq < MIN_DISTANCE * MIN_DISTANCE) {
        return normalize(displacement) * -MAX_FORCE;
    }
    
    // Coulomb-like repulsion scaled by masses and adjusted for graph size
    let force_magnitude = -params.repulsion_strength * mass1 * mass2 / max(distance_sq, 0.1);
    let force = normalize(displacement) * min(abs(force_magnitude), MAX_FORCE) * sign(force_magnitude);
    return clamp_force(force);
}

// Calculate center gravity force
fn calculate_center_force(position: vec3<f32>) -> vec3<f32> {
    let to_center = -position;
    let distance = length(to_center);
    
    if (distance > CENTER_RADIUS) {
        // Stronger centering force during initial layout
        let center_strength = select(0.1, 0.2, params.is_initial_layout == 1u);
        let force = normalize(to_center) * center_strength * (distance - CENTER_RADIUS);
        return clamp_force(force);
    }
    return vec3<f32>(0.0);
}

@compute @workgroup_size(WORKGROUP_SIZE)
fn compute_main(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let node_id = global_id.x;
    let n_nodes = arrayLength(&nodes_buffer.nodes);

    if (node_id >= n_nodes) {
        return;
    }

    var node = nodes_buffer.nodes[node_id];
    
    // Validate input node data
    if (!is_valid_float3(get_position(node)) || !is_valid_float3(get_velocity(node))) {
        // Reset invalid node to origin
        node.position = vec3<f32>(0.0);
        node.velocity = vec3<f32>(0.0);
        nodes_buffer.nodes[node_id] = node;
        return;
    }

    var total_force = vec3<f32>(0.0);
    let node_mass = decode_mass(node.mass);
    let node_pos = get_position(node);

    // Calculate forces from edges (bi-directional)
    let n_edges = arrayLength(&edges_buffer.edges);
    for (var i = 0u; i < n_edges; i = i + 1u) {
        let edge = edges_buffer.edges[i];
        if (edge.source == node_id || edge.target_idx == node_id) {
            let other_id = select(edge.source, edge.target_idx, edge.source == node_id);
            let other_node = nodes_buffer.nodes[other_id];
            
            // Validate other node
            if (!is_valid_float3(get_position(other_node))) {
                continue;
            }
            
            let other_mass = decode_mass(other_node.mass);
            let other_pos = get_position(other_node);
            
            // Accumulate spring force
            let spring_force = calculate_spring_force(
                node_pos,
                other_pos,
                node_mass,
                other_mass,
                edge.weight
            );
            total_force += spring_force;
        }
    }

    // Calculate repulsion forces with all other nodes
    for (var i = 0u; i < n_nodes; i = i + 1u) {
        if (i != node_id) {
            let other_node = nodes_buffer.nodes[i];
            
            // Validate other node
            if (!is_valid_float3(get_position(other_node))) {
                continue;
            }
            
            let other_mass = decode_mass(other_node.mass);
            let other_pos = get_position(other_node);
            
            let repulsion_force = calculate_repulsion_force(
                node_pos,
                other_pos,
                node_mass,
                other_mass
            );
            total_force += repulsion_force;
        }
    }

    // Add center gravity force
    let center_force = calculate_center_force(node_pos);
    total_force += center_force;

    // Scale forces based on layout phase
    let force_scale = select(1.0, 2.0, params.is_initial_layout == 1u);
    total_force *= force_scale;
    total_force = clamp_force(total_force);

    // Update velocity with damping
    var velocity = get_velocity(node);
    velocity = (velocity + total_force * params.time_step) * params.damping;

    // Apply velocity limits
    let speed = length(velocity);
    if (speed > MAX_VELOCITY) {
        velocity = (velocity / speed) * MAX_VELOCITY;
    }

    // Update position
    let new_pos = node_pos + velocity * params.time_step;

    // Apply position bounds
    let bounded_pos = clamp(
        new_pos,
        vec3<f32>(-BOUNDARY_LIMIT),
        vec3<f32>(BOUNDARY_LIMIT)
    );

    // Validate final values
    if (!is_valid_float3(bounded_pos) || !is_valid_float3(velocity)) {
        // Reset to origin if invalid
        node.position = vec3<f32>(0.0);
        node.velocity = vec3<f32>(0.0);
    } else {
        // Update node with new values
        node.position = bounded_pos;
        node.velocity = velocity;
    }

    nodes_buffer.nodes[node_id] = node;
}

----
utils/update_positions.wgsl
struct PositionUpdate {
    position: vec3<f32>,  // 12 bytes (x, y, z)
    velocity: vec3<f32>,  // 12 bytes (vx, vy, vz)
}

@group(0) @binding(0) var<storage, read_write> position_updates: array<PositionUpdate>;

// Constants
const MAX_VELOCITY: f32 = 100.0;
const MAX_POSITION: f32 = 1000.0;  // Maximum distance from origin

// Utility functions
fn is_valid_float(x: f32) -> bool {
    return x == x && abs(x) < 1e10;  // Check for NaN and infinity
}

fn is_valid_float3(v: vec3<f32>) -> bool {
    return is_valid_float(v.x) && is_valid_float(v.y) && is_valid_float(v.z);
}

fn clamp_position(pos: vec3<f32>) -> vec3<f32> {
    return clamp(pos, vec3<f32>(-MAX_POSITION), vec3<f32>(MAX_POSITION));
}

fn clamp_velocity(vel: vec3<f32>) -> vec3<f32> {
    let speed = length(vel);
    if (speed > MAX_VELOCITY) {
        return (vel / speed) * MAX_VELOCITY;
    }
    return vel;
}

@compute @workgroup_size(256)
fn update_positions(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let node_id = global_id.x;
    let n_nodes = arrayLength(&position_updates);

    if (node_id >= n_nodes) { return; }

    var update = position_updates[node_id];
    
    // Validate and clamp position
    if (!is_valid_float3(update.position)) {
        update.position = vec3<f32>(0.0);
    } else {
        update.position = clamp_position(update.position);
    }
    
    // Validate and clamp velocity
    if (!is_valid_float3(update.velocity)) {
        update.velocity = vec3<f32>(0.0);
    } else {
        update.velocity = clamp_velocity(update.velocity);
    }
    
    position_updates[node_id] = update;
}

----
utils/socket_flow_messages.rs
use serde::{Deserialize, Serialize};
use bytemuck::{Pod, Zeroable};
use std::collections::HashMap;
use cudarc::driver::{DeviceRepr, ValidAsZeroBits};

#[repr(C)]
#[derive(Debug, Clone, Copy, Pod, Zeroable, Serialize, Deserialize)]
pub struct NodeData {
    pub position: [f32; 3],  // 12 bytes - matches THREE.Vector3
    pub velocity: [f32; 3],  // 12 bytes - matches THREE.Vector3
    pub mass: u8,            // 1 byte - quantized mass
    pub flags: u8,           // 1 byte - node state flags
    pub padding: [u8; 2],    // 2 bytes - alignment padding
}

// Implement DeviceRepr for NodeData
unsafe impl DeviceRepr for NodeData {}

// Implement ValidAsZeroBits for NodeData
unsafe impl ValidAsZeroBits for NodeData {}

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "camelCase")]
pub struct Node {
    // Core data
    pub id: String,
    pub label: String,
    pub data: NodeData,

    // Metadata
    #[serde(skip_serializing_if = "HashMap::is_empty")]
    pub metadata: HashMap<String, String>,
    #[serde(skip)]
    pub file_size: u64,

    // Rendering properties
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub node_type: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub size: Option<f32>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub color: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub weight: Option<f32>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub user_data: Option<HashMap<String, String>>,
}

impl Node {
    pub fn new(id: String) -> Self {
        Self {
            id: id.clone(),
            label: id,
            data: NodeData {
                position: [0.0; 3],
                velocity: [0.0; 3],
                mass: 127, // Default mass
                flags: 0,
                padding: [0; 2],
            },
            metadata: HashMap::new(),
            file_size: 0,
            node_type: None,
            size: None,
            color: None,
            weight: None,
            group: None,
            user_data: None,
        }
    }

    pub fn update_mass(&mut self) {
        if self.file_size == 0 {
            self.data.mass = 127; // Default mass
            return;
        }
        
        // Scale file size logarithmically to 0-255 range
        let log_size = (self.file_size as f64).log2();
        let max_log = (1024.0 * 1024.0 * 1024.0_f64).log2(); // 1GB
        let normalized = (log_size / max_log).min(1.0);
        self.data.mass = (normalized * 255.0) as u8;
    }

    pub fn update_from_gpu_node(&mut self, gpu_node: &NodeData) {
        self.data = *gpu_node;
    }

    // Convenience getters/setters for x, y, z coordinates
    pub fn x(&self) -> f32 { self.data.position[0] }
    pub fn y(&self) -> f32 { self.data.position[1] }
    pub fn z(&self) -> f32 { self.data.position[2] }
    pub fn vx(&self) -> f32 { self.data.velocity[0] }
    pub fn vy(&self) -> f32 { self.data.velocity[1] }
    pub fn vz(&self) -> f32 { self.data.velocity[2] }
    
    pub fn set_x(&mut self, val: f32) { self.data.position[0] = val; }
    pub fn set_y(&mut self, val: f32) { self.data.position[1] = val; }
    pub fn set_z(&mut self, val: f32) { self.data.position[2] = val; }
    pub fn set_vx(&mut self, val: f32) { self.data.velocity[0] = val; }
    pub fn set_vy(&mut self, val: f32) { self.data.velocity[1] = val; }
    pub fn set_vz(&mut self, val: f32) { self.data.velocity[2] = val; }
}

// Simple binary format for position/velocity updates
#[repr(C)]
#[derive(Debug, Clone, Copy, Pod, Zeroable)]
pub struct BinaryNodeData {
    pub position: [f32; 3],  // x, y, z as f32
    pub velocity: [f32; 3],  // vx, vy, vz as f32
}

// Implement DeviceRepr for BinaryNodeData
unsafe impl DeviceRepr for BinaryNodeData {}

// Implement ValidAsZeroBits for BinaryNodeData
unsafe impl ValidAsZeroBits for BinaryNodeData {}

impl BinaryNodeData {
    pub fn from_node_data(data: &NodeData) -> Self {
        Self {
            position: data.position,
            velocity: data.velocity,
        }
    }
}

// WebSocket message types
#[derive(Debug, Serialize, Deserialize)]
#[serde(tag = "type")]
pub enum Message {
    #[serde(rename = "ping")]
    Ping { timestamp: u64 },
    
    #[serde(rename = "pong")]
    Pong { timestamp: u64 },
}

// Separate message types for ping/pong
#[derive(Debug, Serialize, Deserialize)]
pub struct PingMessage {
    #[serde(rename = "type")]
    pub type_: String,
    pub timestamp: u64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct PongMessage {
    #[serde(rename = "type")]
    pub type_: String,
    pub timestamp: u64,
}

impl PingMessage {
    pub fn new(timestamp: u64) -> Self {
        Self {
            type_: "ping".to_string(),
            timestamp,
        }
    }
}

impl PongMessage {
    pub fn new(timestamp: u64) -> Self {
        Self {
            type_: "pong".to_string(),
            timestamp,
        }
    }
}

----
utils/socket_flow_constants.rs
// WebSocket protocol version
pub const BINARY_PROTOCOL_VERSION: i32 = 1;

// WebSocket constants - matching nginx configuration
pub const HEARTBEAT_INTERVAL: u64 = 30; // seconds - matches nginx proxy_connect_timeout
pub const CLIENT_TIMEOUT: u64 = 60; // seconds - double heartbeat interval for safety
pub const MAX_CLIENT_TIMEOUT: u64 = 3600; // seconds - matches nginx proxy_read_timeout
pub const BINARY_CHUNK_SIZE: usize = 64 * 1024; // 64KB

// Update rate constants
pub const POSITION_UPDATE_RATE: u32 = 5; // Hz (matching client's MAX_UPDATES_PER_SECOND)
pub const METADATA_UPDATE_RATE: u32 = 1; // Hz

// Binary message constants
pub const NODE_POSITION_SIZE: usize = 24; // 6 f32s per node (position + velocity)

// Connection limits
pub const MAX_CONNECTIONS: usize = 100;
pub const MAX_MESSAGE_SIZE: usize = 32 * 1024 * 1024;  // 32MB - matches nginx client_max_body_size

----
utils/logger.js
// Debug levels
export const LogLevel = {
    DEBUG: 'debug',
    INFO: 'info',
    WARN: 'warn',
    ERROR: 'error'
};

class Logger {
    constructor() {
        this.isDebugEnabled = process.env.NODE_ENV !== 'production';
        this.debugNamespaces = new Set();
    }

    // Enable debug for specific namespaces
    enableDebug(namespace) {
        this.debugNamespaces.add(namespace);
    }

    // Disable debug for specific namespaces
    disableDebug(namespace) {
        this.debugNamespaces.delete(namespace);
    }

    // Format message with timestamp and namespace
    formatMessage(namespace, level, message, ...args) {
        const timestamp = new Date().toISOString();
        const formattedMessage = typeof message === 'string' ? message : JSON.stringify(message);
        return `[${timestamp}] [${namespace}] [${level.toUpperCase()}] ${formattedMessage}`;
    }

    // Core logging function
    log(namespace, level, message, ...args) {
        if (!this.isDebugEnabled && level === LogLevel.DEBUG) return;
        if (!this.debugNamespaces.has(namespace) && level === LogLevel.DEBUG) return;

        const formattedMessage = this.formatMessage(namespace, level, message);
        
        switch (level) {
            case LogLevel.DEBUG:
                console.debug(formattedMessage, ...args);
                break;
            case LogLevel.INFO:
                console.info(formattedMessage, ...args);
                break;
            case LogLevel.WARN:
                console.warn(formattedMessage, ...args);
                break;
            case LogLevel.ERROR:
                console.error(formattedMessage, ...args);
                break;
        }
    }

    // Convenience methods
    debug(namespace, message, ...args) {
        this.log(namespace, LogLevel.DEBUG, message, ...args);
    }

    info(namespace, message, ...args) {
        this.log(namespace, LogLevel.INFO, message, ...args);
    }

    warn(namespace, message, ...args) {
        this.log(namespace, LogLevel.WARN, message, ...args);
    }

    error(namespace, message, ...args) {
        this.log(namespace, LogLevel.ERROR, message, ...args);
    }

    // Performance logging
    time(namespace, label) {
        if (this.isDebugEnabled) {
            console.time(`[${namespace}] ${label}`);
        }
    }

    timeEnd(namespace, label) {
        if (this.isDebugEnabled) {
            console.timeEnd(`[${namespace}] ${label}`);
        }
    }

    // Group logging for better visualization
    group(namespace, label) {
        if (this.isDebugEnabled) {
            console.group(`[${namespace}] ${label}`);
        }
    }

    groupEnd() {
        if (this.isDebugEnabled) {
            console.groupEnd();
        }
    }
}

// Create singleton instance
const logger = new Logger();

// Enable debug for core components by default
logger.enableDebug('webxr');
logger.enableDebug('graph');
logger.enableDebug('websocket');
logger.enableDebug('ragflow');
logger.enableDebug('perplexity');
logger.enableDebug('audio');

export default logger;

----
utils/mod.rs
pub mod audio_processor;
pub mod case_conversion;
pub mod debug_logging;
pub mod gpu_compute;
pub mod socket_flow_constants;
pub mod socket_flow_messages;

----
utils/case_conversion.rs
use regex::Regex;
use lazy_static::lazy_static;

lazy_static! {
    static ref CAMEL_TO_SNAKE: Regex = Regex::new(r"([a-z0-9])([A-Z])").unwrap();
    static ref SNAKE_TO_CAMEL: Regex = Regex::new(r"[_-]([a-z])").unwrap();
    static ref CAMEL_TO_KEBAB: Regex = Regex::new(r"([a-z0-9])([A-Z])").unwrap();
    static ref SNAKE_TO_KEBAB: Regex = Regex::new(r"_").unwrap();
    static ref KEBAB_TO_SNAKE: Regex = Regex::new(r"-").unwrap();
}

pub fn to_snake_case(s: &str) -> String {
    // First convert kebab-case to snake_case
    let s = KEBAB_TO_SNAKE.replace_all(s, "_");
    // Then convert camelCase to snake_case
    CAMEL_TO_SNAKE.replace_all(&s, "${1}_${2}").to_lowercase()
}

pub fn to_camel_case(s: &str) -> String {
    // First convert kebab-case to snake_case
    let s = KEBAB_TO_SNAKE.replace_all(s, "_").to_string();
    
    // Then convert snake_case to camelCase
    let s = SNAKE_TO_CAMEL.replace_all(&s, |caps: &regex::Captures| {
        caps[1].to_uppercase()
    }).to_string();
    
    // Handle the first character
    let mut chars = s.chars();
    match chars.next() {
        None => String::new(),
        Some(first) => first.to_lowercase().collect::<String>() + chars.as_str(),
    }
}

pub fn to_kebab_case(s: &str) -> String {
    // First convert to snake case (handles both camelCase and existing snake_case)
    let snake = to_snake_case(s);
    // Then replace underscores with hyphens
    SNAKE_TO_KEBAB.replace_all(&snake, "-").to_string()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_to_snake_case() {
        // Test camelCase to snake_case
        assert_eq!(to_snake_case("baseSize"), "base_size");
        assert_eq!(to_snake_case("enableHoverEffect"), "enable_hover_effect");
        assert_eq!(to_snake_case("backgroundColor"), "background_color");
        
        // Test kebab-case to snake_case
        assert_eq!(to_snake_case("base-size"), "base_size");
        assert_eq!(to_snake_case("enable-hover-effect"), "enable_hover_effect");
        
        // Test already snake_case
        assert_eq!(to_snake_case("base_size"), "base_size");
        assert_eq!(to_snake_case("enable_hover_effect"), "enable_hover_effect");
        
        // Test mixed cases
        assert_eq!(to_snake_case("base-Size"), "base_size");
        assert_eq!(to_snake_case("enable_hoverEffect"), "enable_hover_effect");
    }

    #[test]
    fn test_to_camel_case() {
        // Test snake_case to camelCase
        assert_eq!(to_camel_case("base_size"), "baseSize");
        assert_eq!(to_camel_case("enable_hover_effect"), "enableHoverEffect");
        
        // Test kebab-case to camelCase
        assert_eq!(to_camel_case("base-size"), "baseSize");
        assert_eq!(to_camel_case("enable-hover-effect"), "enableHoverEffect");
        
        // Test already camelCase
        assert_eq!(to_camel_case("baseSize"), "baseSize");
        assert_eq!(to_camel_case("enableHoverEffect"), "enableHoverEffect");
        
        // Test mixed cases
        assert_eq!(to_camel_case("base-Size"), "baseSize");
        assert_eq!(to_camel_case("enable_hoverEffect"), "enableHoverEffect");
    }

    #[test]
    fn test_to_kebab_case() {
        // Test camelCase to kebab-case
        assert_eq!(to_kebab_case("baseSize"), "base-size");
        assert_eq!(to_kebab_case("enableHoverEffect"), "enable-hover-effect");
        
        // Test snake_case to kebab-case
        assert_eq!(to_kebab_case("base_size"), "base-size");
        assert_eq!(to_kebab_case("enable_hover_effect"), "enable-hover-effect");
        
        // Test already kebab-case
        assert_eq!(to_kebab_case("base-size"), "base-size");
        assert_eq!(to_kebab_case("enable-hover-effect"), "enable-hover-effect");
        
        // Test mixed cases
        assert_eq!(to_kebab_case("base_Size"), "base-size");
        assert_eq!(to_kebab_case("enable-hoverEffect"), "enable-hover-effect");
    }
}

----
utils/gpu_compute.cu
 
----
utils/gpu_compute.rs
use cudarc::driver::{CudaDevice, CudaFunction, CudaSlice, LaunchConfig, LaunchAsync, DeviceRepr, ValidAsZeroBits};
use cudarc::nvrtc::Ptx;
use std::io::Error;
use std::sync::Arc;
use log::debug;
use crate::models::graph::GraphData;
use crate::utils::socket_flow_messages::NodeData;
use crate::models::simulation_params::SimulationParams;
use tokio::sync::RwLock;
use bytemuck::{Pod, Zeroable};

// Implement DeviceRepr for VelocityData
unsafe impl DeviceRepr for VelocityData {}
unsafe impl ValidAsZeroBits for VelocityData {}

// Define a proper type for velocities that can be used with CUDA
#[repr(C)]
#[derive(Clone, Copy, Pod, Zeroable)]
struct VelocityData {
    x: f32,
    y: f32,
    z: f32,
}

const BLOCK_SIZE: u32 = 256;
const MAX_NODES: u32 = 1_000_000;
const NODE_SIZE: u32 = 28; // 24 bytes for position/velocity + 4 bytes for mass/flags/padding
const SHARED_MEM_SIZE: u32 = BLOCK_SIZE * NODE_SIZE;

pub struct GPUCompute {
    device: Arc<CudaDevice>,
    force_kernel: CudaFunction,
    node_data: CudaSlice<NodeData>,
    velocity_data: CudaSlice<VelocityData>,
    num_nodes: u32,
    simulation_params: SimulationParams,
}

impl GPUCompute {
    pub async fn new(graph: &GraphData) -> Result<Self, Error> {
        let num_nodes = graph.nodes.len() as u32;
        if num_nodes > MAX_NODES {
            return Err(Error::new(
                std::io::ErrorKind::Other,
                format!("Node count exceeds limit: {}", MAX_NODES),
            ));
        }

        debug!("Initializing CUDA device");
        let device = Arc::new(CudaDevice::new(0).map_err(|e| Error::new(std::io::ErrorKind::Other, e.to_string()))?);

        debug!("Loading force computation kernel");
        let ptx = Ptx::from_file("/app/compute_forces.ptx");
            
        device.load_ptx(ptx, "compute_forces", &["compute_forces"])
            .map_err(|e| Error::new(std::io::ErrorKind::Other, e.to_string()))?;
            
        let force_kernel = device.get_func("compute_forces", "compute_forces")
            .ok_or_else(|| Error::new(std::io::ErrorKind::Other, "Function compute_forces not found"))?;

        debug!("Allocating device memory for {} nodes", num_nodes);
        let node_data = device.alloc_zeros::<NodeData>(num_nodes as usize)
            .map_err(|e| Error::new(std::io::ErrorKind::Other, e.to_string()))?;
        let velocity_data = device.alloc_zeros::<VelocityData>(num_nodes as usize)
            .map_err(|e| Error::new(std::io::ErrorKind::Other, e.to_string()))?;

        debug!("Creating GPU compute instance");
        let mut instance = Self {
            device: Arc::clone(&device),
            force_kernel,
            node_data,
            velocity_data,
            num_nodes,
            simulation_params: SimulationParams::default(),
        };

        debug!("Copying initial graph data to device memory");
        instance.update_graph_data(graph)?;

        Ok(instance)
    }

    pub async fn create_for_app_state(graph: &GraphData) -> Result<Arc<RwLock<Self>>, Error> {
        let instance = Self::new(graph).await?;
        Ok(Arc::new(RwLock::new(instance)))
    }

    pub fn update_graph_data(&mut self, graph: &GraphData) -> Result<(), Error> {
        debug!("Updating graph data for {} nodes", graph.nodes.len());

        // Extract NodeData from graph nodes
        let node_data: Vec<NodeData> = graph.nodes.iter()
            .map(|node| node.data)
            .collect();

        // Extract velocities
        let velocity_data: Vec<VelocityData> = graph.nodes.iter()
            .map(|node| VelocityData {
                x: node.data.velocity[0],
                y: node.data.velocity[1],
                z: node.data.velocity[2],
            })
            .collect();

        // Copy data to GPU
        self.device.htod_sync_copy_into(&node_data, &mut self.node_data)
            .map_err(|e| Error::new(std::io::ErrorKind::Other, e.to_string()))?;
        self.device.htod_sync_copy_into(&velocity_data, &mut self.velocity_data)
            .map_err(|e| Error::new(std::io::ErrorKind::Other, e.to_string()))?;

        self.num_nodes = graph.nodes.len() as u32;
        Ok(())
    }

    pub fn update_simulation_params(&mut self, params: &SimulationParams) -> Result<(), Error> {
        debug!("Updating simulation parameters: {:?}", params);
        self.simulation_params = params.clone();
        Ok(())
    }

    pub fn step(&mut self) -> Result<(), Error> {
        let blocks = (self.num_nodes + BLOCK_SIZE - 1) / BLOCK_SIZE;
        let cfg = LaunchConfig {
            grid_dim: (blocks, 1, 1),
            block_dim: (BLOCK_SIZE, 1, 1),
            shared_mem_bytes: SHARED_MEM_SIZE,
        };

        let params = &self.simulation_params;
        unsafe {
            let kernel = self.force_kernel.clone();
            kernel.launch(cfg, (
                &mut self.node_data,     // nodes buffer
                &mut self.velocity_data, // velocity buffer
                0u64,                   // unused parameter
                self.num_nodes,  // num_nodes
                params.spring_strength, // spring_strength
                params.spring_length,   // spring_length
                params.repulsion,      // repulsion
                params.attraction,     // attraction
                params.damping,        // damping
            )).map_err(|e| Error::new(std::io::ErrorKind::Other, e.to_string()))?;
        }
        Ok(())
    }

    pub fn get_node_data(&self) -> Result<Vec<NodeData>, Error> {
        let mut node_data = vec![NodeData {
            position: [0.0; 3],
            velocity: [0.0; 3],
            mass: 0,
            flags: 0,
            padding: [0; 2],
        }; self.num_nodes as usize];

        self.device.dtoh_sync_copy_into(&self.node_data, &mut node_data)
            .map_err(|e| Error::new(std::io::ErrorKind::Other, e.to_string()))?;

        // Update velocities from separate buffer
        let mut velocities = vec![VelocityData { x: 0.0, y: 0.0, z: 0.0 }; self.num_nodes as usize];
        self.device.dtoh_sync_copy_into(&self.velocity_data, &mut velocities)
            .map_err(|e| Error::new(std::io::ErrorKind::Other, e.to_string()))?;

        // Combine position and velocity data
        for (node, vel) in node_data.iter_mut().zip(velocities.iter()) {
            node.velocity = [vel.x, vel.y, vel.z];
        }

        Ok(node_data)
    }

    pub fn compute_forces(&mut self, params: &SimulationParams) -> Result<(), Error> {
        let nodes = self.get_node_data()?;

        unsafe {
            // Log all nodes before kernel
            for (i, node) in nodes.iter().enumerate() {
                debug!("Before kernel, node {}: pos=({:.3}, {:.3}, {:.3}), vel=({:.3}, {:.3}, {:.3})", 
                    i,
                    node.position[0], node.position[1], node.position[2],
                    node.velocity[0], node.velocity[1], node.velocity[2]);
            }

            let blocks = (self.num_nodes + BLOCK_SIZE - 1) / BLOCK_SIZE;
            let cfg = LaunchConfig {
                grid_dim: (blocks, 1, 1),
                block_dim: (BLOCK_SIZE, 1, 1),
                shared_mem_bytes: SHARED_MEM_SIZE,
            };

            let kernel = self.force_kernel.clone();
            kernel.launch(cfg, (
                &mut self.node_data,     // nodes buffer
                &mut self.velocity_data, // velocity buffer
                0u64,                   // unused parameter
                self.num_nodes,  // num_nodes
                params.spring_strength, // spring_strength
                params.spring_length,   // spring_length
                params.repulsion,      // repulsion
                params.attraction,     // attraction
                params.damping,        // damping
            )).map_err(|e| Error::new(std::io::ErrorKind::Other, e.to_string()))?;

            // Log all nodes after kernel
            let after = self.get_node_data()?;
            for (i, node) in after.iter().enumerate() {
                debug!("After kernel, node {}: pos=({:.3}, {:.3}, {:.3}), vel=({:.3}, {:.3}, {:.3})", 
                    i,
                    node.position[0], node.position[1], node.position[2],
                    node.velocity[0], node.velocity[1], node.velocity[2]);
            }
        }

        Ok(())
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::models::graph::GraphData;

    #[tokio::test]
    async fn test_gpu_compute_initialization() {
        let graph = GraphData::default();
        let gpu_compute = GPUCompute::new(&graph).await;
        assert!(gpu_compute.is_ok());
    }

    #[tokio::test]
    async fn test_node_data_transfer() {
        let mut graph = GraphData::default();
        // Add test nodes...
        let gpu_compute = GPUCompute::new(&graph).await.unwrap();
        let node_data = gpu_compute.get_node_data().unwrap();
        assert_eq!(node_data.len(), graph.nodes.len());
    }
}

----
utils/compute_forces.ptx
//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-34097967
// Cuda compilation tools, release 12.4, V12.4.131
// Based on NVVM 7.0.1
//

.version 8.4
.target sm_75
.address_size 64

	// .globl	compute_forces
// _ZZ14compute_forcesE16shared_positions has been demoted
// _ZZ14compute_forcesE13shared_masses has been demoted

.visible .entry compute_forces(
	.param .u64 compute_forces_param_0,
	.param .u64 compute_forces_param_1,
	.param .u64 compute_forces_param_2,
	.param .u32 compute_forces_param_3,
	.param .f32 compute_forces_param_4,
	.param .f32 compute_forces_param_5,
	.param .f32 compute_forces_param_6,
	.param .f32 compute_forces_param_7,
	.param .f32 compute_forces_param_8
)
{
	.reg .pred 	%p<109>;
	.reg .b16 	%rs<64>;
	.reg .f32 	%f<664>;
	.reg .b32 	%r<82>;
	.reg .b64 	%rd<46>;
	// demoted variable
	.shared .align 4 .b8 _ZZ14compute_forcesE16shared_positions[3072];
	// demoted variable
	.shared .align 4 .b8 _ZZ14compute_forcesE13shared_masses[1024];

	ld.param.u64 	%rd5, [compute_forces_param_0];
	ld.param.u32 	%r42, [compute_forces_param_3];
	ld.param.f32 	%f222, [compute_forces_param_4];
	ld.param.f32 	%f223, [compute_forces_param_5];
	ld.param.f32 	%f224, [compute_forces_param_6];
	ld.param.f32 	%f225, [compute_forces_param_7];
	cvta.to.global.u64 	%rd1, %rd5;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r43, %ctaid.x;
	mov.u32 	%r2, %tid.x;
	mad.lo.s32 	%r3, %r43, %r1, %r2;
	setp.ge.u32 	%p1, %r3, %r42;
	@%p1 bra 	$L__BB0_79;

	mul.wide.s32 	%rd6, %r3, 16;
	add.s64 	%rd3, %rd1, %rd6;
	ld.global.f32 	%f1, [%rd3];
	ld.global.f32 	%f2, [%rd3+4];
	ld.global.f32 	%f3, [%rd3+8];
	ld.global.u8 	%rs17, [%rd3+12];
	cvt.rn.f32.u16 	%f4, %rs17;
	add.s32 	%r44, %r1, %r42;
	add.s32 	%r4, %r44, -1;
	setp.gt.u32 	%p2, %r1, %r4;
	mov.f32 	%f655, 0f00000000;
	mov.f32 	%f656, %f655;
	mov.f32 	%f657, %f655;
	@%p2 bra 	$L__BB0_76;

	ld.global.u8 	%rs1, [%rd3+13];
	mov.u32 	%r46, _ZZ14compute_forcesE16shared_positions;
	mad.lo.s32 	%r5, %r2, 12, %r46;
	shl.b32 	%r47, %r2, 2;
	mov.u32 	%r48, _ZZ14compute_forcesE13shared_masses;
	add.s32 	%r6, %r48, %r47;
	mov.u32 	%r76, 0;
	div.u32 	%r8, %r4, %r1;
	mov.f32 	%f657, 0f00000000;
	mov.f32 	%f656, %f657;
	mov.f32 	%f655, %f657;

$L__BB0_3:
	neg.s32 	%r71, %r1;
	mul.lo.s32 	%r10, %r1, %r76;
	sub.s32 	%r49, %r10, %r42;
	max.u32 	%r11, %r49, %r71;
	neg.s32 	%r12, %r11;
	add.s32 	%r13, %r10, %r2;
	setp.ge.u32 	%p3, %r13, %r42;
	@%p3 bra 	$L__BB0_5;

	mul.wide.s32 	%rd7, %r13, 16;
	add.s64 	%rd8, %rd1, %rd7;
	ld.global.f32 	%f233, [%rd8];
	ld.global.f32 	%f234, [%rd8+4];
	ld.global.f32 	%f235, [%rd8+8];
	ld.global.u8 	%rs18, [%rd8+12];
	st.shared.f32 	[%r5], %f233;
	st.shared.f32 	[%r5+4], %f234;
	st.shared.f32 	[%r5+8], %f235;
	cvt.rn.f32.u16 	%f236, %rs18;
	st.shared.f32 	[%r6], %f236;

$L__BB0_5:
	setp.eq.s32 	%p4, %r1, 0;
	bar.sync 	0;
	setp.ge.u32 	%p5, %r10, %r42;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_75;

	mul.lo.s32 	%r80, %r1, %r76;
	neg.s32 	%r74, %r1;
	sub.s32 	%r73, %r80, %r42;
	max.u32 	%r72, %r73, %r74;
	and.b32  	%r14, %r12, 7;
	setp.gt.u32 	%p7, %r72, -8;
	mov.u32 	%r81, 0;
	@%p7 bra 	$L__BB0_41;

	sub.s32 	%r79, %r12, %r14;
	mov.u32 	%r81, 0;
	mov.u32 	%r80, %r10;

$L__BB0_8:
	.pragma "nounroll";
	mad.lo.s32 	%r19, %r81, 12, %r46;
	shl.b32 	%r53, %r81, 2;
	add.s32 	%r20, %r48, %r53;
	setp.eq.s32 	%p8, %r80, %r3;
	@%p8 bra 	$L__BB0_12;

	mul.wide.u32 	%rd9, %r80, 16;
	add.s64 	%rd10, %rd1, %rd9;
	ld.global.u8 	%rs2, [%rd10+13];
	and.b16  	%rs19, %rs2, 1;
	setp.eq.b16 	%p9, %rs19, 1;
	mov.pred 	%p10, 0;
	xor.pred  	%p11, %p9, %p10;
	not.pred 	%p12, %p11;
	@%p12 bra 	$L__BB0_12;

	ld.shared.f32 	%f238, [%r19];
	sub.f32 	%f239, %f1, %f238;
	ld.shared.f32 	%f240, [%r19+4];
	sub.f32 	%f241, %f2, %f240;
	ld.shared.f32 	%f242, [%r19+8];
	sub.f32 	%f243, %f3, %f242;
	mul.f32 	%f244, %f241, %f241;
	fma.rn.f32 	%f245, %f239, %f239, %f244;
	fma.rn.f32 	%f246, %f243, %f243, %f245;
	sqrt.rn.f32 	%f247, %f246;
	mov.f32 	%f248, 0f3DCCCCCD;
	max.f32 	%f11, %f247, %f248;
	rcp.rn.f32 	%f249, %f11;
	mul.f32 	%f12, %f239, %f249;
	mul.f32 	%f13, %f241, %f249;
	mul.f32 	%f14, %f243, %f249;
	ld.shared.f32 	%f250, [%r20];
	mul.f32 	%f251, %f250, %f4;
	sqrt.rn.f32 	%f252, %f251;
	mul.f32 	%f253, %f252, %f224;
	div.rn.f32 	%f254, %f253, %f246;
	fma.rn.f32 	%f655, %f254, %f12, %f655;
	fma.rn.f32 	%f656, %f254, %f13, %f656;
	fma.rn.f32 	%f657, %f254, %f14, %f657;
	and.b16  	%rs20, %rs1, %rs2;
	and.b16  	%rs21, %rs20, 2;
	setp.eq.s16 	%p13, %rs21, 0;
	@%p13 bra 	$L__BB0_12;

	sub.f32 	%f255, %f11, %f223;
	mul.f32 	%f256, %f255, %f222;
	mul.f32 	%f257, %f256, %f225;
	mul.f32 	%f258, %f257, %f12;
	sub.f32 	%f655, %f655, %f258;
	mul.f32 	%f259, %f257, %f13;
	sub.f32 	%f656, %f656, %f259;
	mul.f32 	%f260, %f257, %f14;
	sub.f32 	%f657, %f657, %f260;

$L__BB0_12:
	add.s32 	%r55, %r81, %r10;
	add.s32 	%r21, %r55, 1;
	setp.eq.s32 	%p14, %r21, %r3;
	@%p14 bra 	$L__BB0_16;

	mul.wide.u32 	%rd11, %r21, 16;
	add.s64 	%rd12, %rd1, %rd11;
	ld.global.u8 	%rs3, [%rd12+13];
	and.b16  	%rs22, %rs3, 1;
	setp.eq.b16 	%p15, %rs22, 1;
	mov.pred 	%p16, 0;
	xor.pred  	%p17, %p15, %p16;
	not.pred 	%p18, %p17;
	@%p18 bra 	$L__BB0_16;

	ld.shared.f32 	%f261, [%r19+12];
	sub.f32 	%f262, %f1, %f261;
	ld.shared.f32 	%f263, [%r19+16];
	sub.f32 	%f264, %f2, %f263;
	ld.shared.f32 	%f265, [%r19+20];
	sub.f32 	%f266, %f3, %f265;
	mul.f32 	%f267, %f264, %f264;
	fma.rn.f32 	%f268, %f262, %f262, %f267;
	fma.rn.f32 	%f269, %f266, %f266, %f268;
	sqrt.rn.f32 	%f270, %f269;
	mov.f32 	%f271, 0f3DCCCCCD;
	max.f32 	%f24, %f270, %f271;
	rcp.rn.f32 	%f272, %f24;
	mul.f32 	%f25, %f262, %f272;
	mul.f32 	%f26, %f264, %f272;
	mul.f32 	%f27, %f266, %f272;
	ld.shared.f32 	%f273, [%r20+4];
	mul.f32 	%f274, %f273, %f4;
	sqrt.rn.f32 	%f275, %f274;
	mul.f32 	%f276, %f275, %f224;
	div.rn.f32 	%f277, %f276, %f269;
	fma.rn.f32 	%f655, %f277, %f25, %f655;
	fma.rn.f32 	%f656, %f277, %f26, %f656;
	fma.rn.f32 	%f657, %f277, %f27, %f657;
	and.b16  	%rs23, %rs1, %rs3;
	and.b16  	%rs24, %rs23, 2;
	setp.eq.s16 	%p19, %rs24, 0;
	@%p19 bra 	$L__BB0_16;

	sub.f32 	%f278, %f24, %f223;
	mul.f32 	%f279, %f278, %f222;
	mul.f32 	%f280, %f279, %f225;
	mul.f32 	%f281, %f280, %f25;
	sub.f32 	%f655, %f655, %f281;
	mul.f32 	%f282, %f280, %f26;
	sub.f32 	%f656, %f656, %f282;
	mul.f32 	%f283, %f280, %f27;
	sub.f32 	%f657, %f657, %f283;

$L__BB0_16:
	add.s32 	%r22, %r55, 2;
	setp.eq.s32 	%p20, %r22, %r3;
	@%p20 bra 	$L__BB0_20;

	mul.wide.u32 	%rd13, %r22, 16;
	add.s64 	%rd14, %rd1, %rd13;
	ld.global.u8 	%rs4, [%rd14+13];
	and.b16  	%rs25, %rs4, 1;
	setp.eq.b16 	%p21, %rs25, 1;
	mov.pred 	%p22, 0;
	xor.pred  	%p23, %p21, %p22;
	not.pred 	%p24, %p23;
	@%p24 bra 	$L__BB0_20;

	ld.shared.f32 	%f284, [%r19+24];
	sub.f32 	%f285, %f1, %f284;
	ld.shared.f32 	%f286, [%r19+28];
	sub.f32 	%f287, %f2, %f286;
	ld.shared.f32 	%f288, [%r19+32];
	sub.f32 	%f289, %f3, %f288;
	mul.f32 	%f290, %f287, %f287;
	fma.rn.f32 	%f291, %f285, %f285, %f290;
	fma.rn.f32 	%f292, %f289, %f289, %f291;
	sqrt.rn.f32 	%f293, %f292;
	mov.f32 	%f294, 0f3DCCCCCD;
	max.f32 	%f37, %f293, %f294;
	rcp.rn.f32 	%f295, %f37;
	mul.f32 	%f38, %f285, %f295;
	mul.f32 	%f39, %f287, %f295;
	mul.f32 	%f40, %f289, %f295;
	ld.shared.f32 	%f296, [%r20+8];
	mul.f32 	%f297, %f296, %f4;
	sqrt.rn.f32 	%f298, %f297;
	mul.f32 	%f299, %f298, %f224;
	div.rn.f32 	%f300, %f299, %f292;
	fma.rn.f32 	%f655, %f300, %f38, %f655;
	fma.rn.f32 	%f656, %f300, %f39, %f656;
	fma.rn.f32 	%f657, %f300, %f40, %f657;
	and.b16  	%rs26, %rs1, %rs4;
	and.b16  	%rs27, %rs26, 2;
	setp.eq.s16 	%p25, %rs27, 0;
	@%p25 bra 	$L__BB0_20;

	sub.f32 	%f301, %f37, %f223;
	mul.f32 	%f302, %f301, %f222;
	mul.f32 	%f303, %f302, %f225;
	mul.f32 	%f304, %f303, %f38;
	sub.f32 	%f655, %f655, %f304;
	mul.f32 	%f305, %f303, %f39;
	sub.f32 	%f656, %f656, %f305;
	mul.f32 	%f306, %f303, %f40;
	sub.f32 	%f657, %f657, %f306;

$L__BB0_20:
	add.s32 	%r23, %r55, 3;
	setp.eq.s32 	%p26, %r23, %r3;
	@%p26 bra 	$L__BB0_24;

	mul.wide.u32 	%rd15, %r23, 16;
	add.s64 	%rd16, %rd1, %rd15;
	ld.global.u8 	%rs5, [%rd16+13];
	and.b16  	%rs28, %rs5, 1;
	setp.eq.b16 	%p27, %rs28, 1;
	mov.pred 	%p28, 0;
	xor.pred  	%p29, %p27, %p28;
	not.pred 	%p30, %p29;
	@%p30 bra 	$L__BB0_24;

	ld.shared.f32 	%f307, [%r19+36];
	sub.f32 	%f308, %f1, %f307;
	ld.shared.f32 	%f309, [%r19+40];
	sub.f32 	%f310, %f2, %f309;
	ld.shared.f32 	%f311, [%r19+44];
	sub.f32 	%f312, %f3, %f311;
	mul.f32 	%f313, %f310, %f310;
	fma.rn.f32 	%f314, %f308, %f308, %f313;
	fma.rn.f32 	%f315, %f312, %f312, %f314;
	sqrt.rn.f32 	%f316, %f315;
	mov.f32 	%f317, 0f3DCCCCCD;
	max.f32 	%f50, %f316, %f317;
	rcp.rn.f32 	%f318, %f50;
	mul.f32 	%f51, %f308, %f318;
	mul.f32 	%f52, %f310, %f318;
	mul.f32 	%f53, %f312, %f318;
	ld.shared.f32 	%f319, [%r20+12];
	mul.f32 	%f320, %f319, %f4;
	sqrt.rn.f32 	%f321, %f320;
	mul.f32 	%f322, %f321, %f224;
	div.rn.f32 	%f323, %f322, %f315;
	fma.rn.f32 	%f655, %f323, %f51, %f655;
	fma.rn.f32 	%f656, %f323, %f52, %f656;
	fma.rn.f32 	%f657, %f323, %f53, %f657;
	and.b16  	%rs29, %rs1, %rs5;
	and.b16  	%rs30, %rs29, 2;
	setp.eq.s16 	%p31, %rs30, 0;
	@%p31 bra 	$L__BB0_24;

	sub.f32 	%f324, %f50, %f223;
	mul.f32 	%f325, %f324, %f222;
	mul.f32 	%f326, %f325, %f225;
	mul.f32 	%f327, %f326, %f51;
	sub.f32 	%f655, %f655, %f327;
	mul.f32 	%f328, %f326, %f52;
	sub.f32 	%f656, %f656, %f328;
	mul.f32 	%f329, %f326, %f53;
	sub.f32 	%f657, %f657, %f329;

$L__BB0_24:
	add.s32 	%r24, %r55, 4;
	setp.eq.s32 	%p32, %r24, %r3;
	@%p32 bra 	$L__BB0_28;

	mul.wide.u32 	%rd17, %r24, 16;
	add.s64 	%rd18, %rd1, %rd17;
	ld.global.u8 	%rs6, [%rd18+13];
	and.b16  	%rs31, %rs6, 1;
	setp.eq.b16 	%p33, %rs31, 1;
	mov.pred 	%p34, 0;
	xor.pred  	%p35, %p33, %p34;
	not.pred 	%p36, %p35;
	@%p36 bra 	$L__BB0_28;

	ld.shared.f32 	%f330, [%r19+48];
	sub.f32 	%f331, %f1, %f330;
	ld.shared.f32 	%f332, [%r19+52];
	sub.f32 	%f333, %f2, %f332;
	ld.shared.f32 	%f334, [%r19+56];
	sub.f32 	%f335, %f3, %f334;
	mul.f32 	%f336, %f333, %f333;
	fma.rn.f32 	%f337, %f331, %f331, %f336;
	fma.rn.f32 	%f338, %f335, %f335, %f337;
	sqrt.rn.f32 	%f339, %f338;
	mov.f32 	%f340, 0f3DCCCCCD;
	max.f32 	%f63, %f339, %f340;
	rcp.rn.f32 	%f341, %f63;
	mul.f32 	%f64, %f331, %f341;
	mul.f32 	%f65, %f333, %f341;
	mul.f32 	%f66, %f335, %f341;
	ld.shared.f32 	%f342, [%r20+16];
	mul.f32 	%f343, %f342, %f4;
	sqrt.rn.f32 	%f344, %f343;
	mul.f32 	%f345, %f344, %f224;
	div.rn.f32 	%f346, %f345, %f338;
	fma.rn.f32 	%f655, %f346, %f64, %f655;
	fma.rn.f32 	%f656, %f346, %f65, %f656;
	fma.rn.f32 	%f657, %f346, %f66, %f657;
	and.b16  	%rs32, %rs1, %rs6;
	and.b16  	%rs33, %rs32, 2;
	setp.eq.s16 	%p37, %rs33, 0;
	@%p37 bra 	$L__BB0_28;

	sub.f32 	%f347, %f63, %f223;
	mul.f32 	%f348, %f347, %f222;
	mul.f32 	%f349, %f348, %f225;
	mul.f32 	%f350, %f349, %f64;
	sub.f32 	%f655, %f655, %f350;
	mul.f32 	%f351, %f349, %f65;
	sub.f32 	%f656, %f656, %f351;
	mul.f32 	%f352, %f349, %f66;
	sub.f32 	%f657, %f657, %f352;

$L__BB0_28:
	add.s32 	%r25, %r55, 5;
	setp.eq.s32 	%p38, %r25, %r3;
	@%p38 bra 	$L__BB0_32;

	mul.wide.u32 	%rd19, %r25, 16;
	add.s64 	%rd20, %rd1, %rd19;
	ld.global.u8 	%rs7, [%rd20+13];
	and.b16  	%rs34, %rs7, 1;
	setp.eq.b16 	%p39, %rs34, 1;
	mov.pred 	%p40, 0;
	xor.pred  	%p41, %p39, %p40;
	not.pred 	%p42, %p41;
	@%p42 bra 	$L__BB0_32;

	ld.shared.f32 	%f353, [%r19+60];
	sub.f32 	%f354, %f1, %f353;
	ld.shared.f32 	%f355, [%r19+64];
	sub.f32 	%f356, %f2, %f355;
	ld.shared.f32 	%f357, [%r19+68];
	sub.f32 	%f358, %f3, %f357;
	mul.f32 	%f359, %f356, %f356;
	fma.rn.f32 	%f360, %f354, %f354, %f359;
	fma.rn.f32 	%f361, %f358, %f358, %f360;
	sqrt.rn.f32 	%f362, %f361;
	mov.f32 	%f363, 0f3DCCCCCD;
	max.f32 	%f76, %f362, %f363;
	rcp.rn.f32 	%f364, %f76;
	mul.f32 	%f77, %f354, %f364;
	mul.f32 	%f78, %f356, %f364;
	mul.f32 	%f79, %f358, %f364;
	ld.shared.f32 	%f365, [%r20+20];
	mul.f32 	%f366, %f365, %f4;
	sqrt.rn.f32 	%f367, %f366;
	mul.f32 	%f368, %f367, %f224;
	div.rn.f32 	%f369, %f368, %f361;
	fma.rn.f32 	%f655, %f369, %f77, %f655;
	fma.rn.f32 	%f656, %f369, %f78, %f656;
	fma.rn.f32 	%f657, %f369, %f79, %f657;
	and.b16  	%rs35, %rs1, %rs7;
	and.b16  	%rs36, %rs35, 2;
	setp.eq.s16 	%p43, %rs36, 0;
	@%p43 bra 	$L__BB0_32;

	sub.f32 	%f370, %f76, %f223;
	mul.f32 	%f371, %f370, %f222;
	mul.f32 	%f372, %f371, %f225;
	mul.f32 	%f373, %f372, %f77;
	sub.f32 	%f655, %f655, %f373;
	mul.f32 	%f374, %f372, %f78;
	sub.f32 	%f656, %f656, %f374;
	mul.f32 	%f375, %f372, %f79;
	sub.f32 	%f657, %f657, %f375;

$L__BB0_32:
	add.s32 	%r26, %r55, 6;
	setp.eq.s32 	%p44, %r26, %r3;
	@%p44 bra 	$L__BB0_36;

	mul.wide.u32 	%rd21, %r26, 16;
	add.s64 	%rd22, %rd1, %rd21;
	ld.global.u8 	%rs8, [%rd22+13];
	and.b16  	%rs37, %rs8, 1;
	setp.eq.b16 	%p45, %rs37, 1;
	mov.pred 	%p46, 0;
	xor.pred  	%p47, %p45, %p46;
	not.pred 	%p48, %p47;
	@%p48 bra 	$L__BB0_36;

	ld.shared.f32 	%f376, [%r19+72];
	sub.f32 	%f377, %f1, %f376;
	ld.shared.f32 	%f378, [%r19+76];
	sub.f32 	%f379, %f2, %f378;
	ld.shared.f32 	%f380, [%r19+80];
	sub.f32 	%f381, %f3, %f380;
	mul.f32 	%f382, %f379, %f379;
	fma.rn.f32 	%f383, %f377, %f377, %f382;
	fma.rn.f32 	%f384, %f381, %f381, %f383;
	sqrt.rn.f32 	%f385, %f384;
	mov.f32 	%f386, 0f3DCCCCCD;
	max.f32 	%f89, %f385, %f386;
	rcp.rn.f32 	%f387, %f89;
	mul.f32 	%f90, %f377, %f387;
	mul.f32 	%f91, %f379, %f387;
	mul.f32 	%f92, %f381, %f387;
	ld.shared.f32 	%f388, [%r20+24];
	mul.f32 	%f389, %f388, %f4;
	sqrt.rn.f32 	%f390, %f389;
	mul.f32 	%f391, %f390, %f224;
	div.rn.f32 	%f392, %f391, %f384;
	fma.rn.f32 	%f655, %f392, %f90, %f655;
	fma.rn.f32 	%f656, %f392, %f91, %f656;
	fma.rn.f32 	%f657, %f392, %f92, %f657;
	and.b16  	%rs38, %rs1, %rs8;
	and.b16  	%rs39, %rs38, 2;
	setp.eq.s16 	%p49, %rs39, 0;
	@%p49 bra 	$L__BB0_36;

	sub.f32 	%f393, %f89, %f223;
	mul.f32 	%f394, %f393, %f222;
	mul.f32 	%f395, %f394, %f225;
	mul.f32 	%f396, %f395, %f90;
	sub.f32 	%f655, %f655, %f396;
	mul.f32 	%f397, %f395, %f91;
	sub.f32 	%f656, %f656, %f397;
	mul.f32 	%f398, %f395, %f92;
	sub.f32 	%f657, %f657, %f398;

$L__BB0_36:
	add.s32 	%r27, %r55, 7;
	setp.eq.s32 	%p50, %r27, %r3;
	@%p50 bra 	$L__BB0_40;

	mul.wide.u32 	%rd23, %r27, 16;
	add.s64 	%rd24, %rd1, %rd23;
	ld.global.u8 	%rs9, [%rd24+13];
	and.b16  	%rs40, %rs9, 1;
	setp.eq.b16 	%p51, %rs40, 1;
	mov.pred 	%p52, 0;
	xor.pred  	%p53, %p51, %p52;
	not.pred 	%p54, %p53;
	@%p54 bra 	$L__BB0_40;

	ld.shared.f32 	%f399, [%r19+84];
	sub.f32 	%f400, %f1, %f399;
	ld.shared.f32 	%f401, [%r19+88];
	sub.f32 	%f402, %f2, %f401;
	ld.shared.f32 	%f403, [%r19+92];
	sub.f32 	%f404, %f3, %f403;
	mul.f32 	%f405, %f402, %f402;
	fma.rn.f32 	%f406, %f400, %f400, %f405;
	fma.rn.f32 	%f407, %f404, %f404, %f406;
	sqrt.rn.f32 	%f408, %f407;
	mov.f32 	%f409, 0f3DCCCCCD;
	max.f32 	%f102, %f408, %f409;
	rcp.rn.f32 	%f410, %f102;
	mul.f32 	%f103, %f400, %f410;
	mul.f32 	%f104, %f402, %f410;
	mul.f32 	%f105, %f404, %f410;
	ld.shared.f32 	%f411, [%r20+28];
	mul.f32 	%f412, %f411, %f4;
	sqrt.rn.f32 	%f413, %f412;
	mul.f32 	%f414, %f413, %f224;
	div.rn.f32 	%f415, %f414, %f407;
	fma.rn.f32 	%f655, %f415, %f103, %f655;
	fma.rn.f32 	%f656, %f415, %f104, %f656;
	fma.rn.f32 	%f657, %f415, %f105, %f657;
	and.b16  	%rs41, %rs1, %rs9;
	and.b16  	%rs42, %rs41, 2;
	setp.eq.s16 	%p55, %rs42, 0;
	@%p55 bra 	$L__BB0_40;

	sub.f32 	%f416, %f102, %f223;
	mul.f32 	%f417, %f416, %f222;
	mul.f32 	%f418, %f417, %f225;
	mul.f32 	%f419, %f418, %f103;
	sub.f32 	%f655, %f655, %f419;
	mul.f32 	%f420, %f418, %f104;
	sub.f32 	%f656, %f656, %f420;
	mul.f32 	%f421, %f418, %f105;
	sub.f32 	%f657, %f657, %f421;

$L__BB0_40:
	add.s32 	%r81, %r81, 8;
	add.s32 	%r80, %r81, %r10;
	add.s32 	%r79, %r79, -8;
	setp.ne.s32 	%p56, %r79, 0;
	@%p56 bra 	$L__BB0_8;

$L__BB0_41:
	setp.eq.s32 	%p57, %r14, 0;
	@%p57 bra 	$L__BB0_75;

	setp.eq.s32 	%p58, %r80, %r3;
	mad.lo.s32 	%r33, %r81, 12, %r46;
	shl.b32 	%r63, %r81, 2;
	add.s32 	%r34, %r48, %r63;
	@%p58 bra 	$L__BB0_46;

	mul.wide.u32 	%rd25, %r80, 16;
	add.s64 	%rd26, %rd1, %rd25;
	ld.global.u8 	%rs10, [%rd26+13];
	and.b16  	%rs43, %rs10, 1;
	setp.eq.b16 	%p59, %rs43, 1;
	mov.pred 	%p60, 0;
	xor.pred  	%p61, %p59, %p60;
	not.pred 	%p62, %p61;
	@%p62 bra 	$L__BB0_46;

	ld.shared.f32 	%f422, [%r33];
	sub.f32 	%f423, %f1, %f422;
	ld.shared.f32 	%f424, [%r33+4];
	sub.f32 	%f425, %f2, %f424;
	ld.shared.f32 	%f426, [%r33+8];
	sub.f32 	%f427, %f3, %f426;
	mul.f32 	%f428, %f425, %f425;
	fma.rn.f32 	%f429, %f423, %f423, %f428;
	fma.rn.f32 	%f430, %f427, %f427, %f429;
	sqrt.rn.f32 	%f431, %f430;
	mov.f32 	%f432, 0f3DCCCCCD;
	max.f32 	%f121, %f431, %f432;
	rcp.rn.f32 	%f433, %f121;
	mul.f32 	%f122, %f423, %f433;
	mul.f32 	%f123, %f425, %f433;
	mul.f32 	%f124, %f427, %f433;
	ld.shared.f32 	%f434, [%r34];
	mul.f32 	%f435, %f434, %f4;
	sqrt.rn.f32 	%f436, %f435;
	mul.f32 	%f437, %f436, %f224;
	div.rn.f32 	%f438, %f437, %f430;
	fma.rn.f32 	%f655, %f438, %f122, %f655;
	fma.rn.f32 	%f656, %f438, %f123, %f656;
	fma.rn.f32 	%f657, %f438, %f124, %f657;
	and.b16  	%rs44, %rs1, %rs10;
	and.b16  	%rs45, %rs44, 2;
	setp.eq.s16 	%p63, %rs45, 0;
	@%p63 bra 	$L__BB0_46;

	sub.f32 	%f439, %f121, %f223;
	mul.f32 	%f440, %f439, %f222;
	mul.f32 	%f441, %f440, %f225;
	mul.f32 	%f442, %f441, %f122;
	sub.f32 	%f655, %f655, %f442;
	mul.f32 	%f443, %f441, %f123;
	sub.f32 	%f656, %f656, %f443;
	mul.f32 	%f444, %f441, %f124;
	sub.f32 	%f657, %f657, %f444;

$L__BB0_46:
	add.s32 	%r65, %r81, %r10;
	add.s32 	%r35, %r65, 1;
	setp.eq.s32 	%p64, %r14, 1;
	@%p64 bra 	$L__BB0_75;

	setp.eq.s32 	%p65, %r35, %r3;
	@%p65 bra 	$L__BB0_51;

	mul.wide.u32 	%rd27, %r35, 16;
	add.s64 	%rd28, %rd1, %rd27;
	ld.global.u8 	%rs11, [%rd28+13];
	and.b16  	%rs46, %rs11, 1;
	setp.eq.b16 	%p66, %rs46, 1;
	mov.pred 	%p67, 0;
	xor.pred  	%p68, %p66, %p67;
	not.pred 	%p69, %p68;
	@%p69 bra 	$L__BB0_51;

	ld.shared.f32 	%f445, [%r33+12];
	sub.f32 	%f446, %f1, %f445;
	ld.shared.f32 	%f447, [%r33+16];
	sub.f32 	%f448, %f2, %f447;
	ld.shared.f32 	%f449, [%r33+20];
	sub.f32 	%f450, %f3, %f449;
	mul.f32 	%f451, %f448, %f448;
	fma.rn.f32 	%f452, %f446, %f446, %f451;
	fma.rn.f32 	%f453, %f450, %f450, %f452;
	sqrt.rn.f32 	%f454, %f453;
	mov.f32 	%f455, 0f3DCCCCCD;
	max.f32 	%f134, %f454, %f455;
	rcp.rn.f32 	%f456, %f134;
	mul.f32 	%f135, %f446, %f456;
	mul.f32 	%f136, %f448, %f456;
	mul.f32 	%f137, %f450, %f456;
	ld.shared.f32 	%f457, [%r34+4];
	mul.f32 	%f458, %f457, %f4;
	sqrt.rn.f32 	%f459, %f458;
	mul.f32 	%f460, %f459, %f224;
	div.rn.f32 	%f461, %f460, %f453;
	fma.rn.f32 	%f655, %f461, %f135, %f655;
	fma.rn.f32 	%f656, %f461, %f136, %f656;
	fma.rn.f32 	%f657, %f461, %f137, %f657;
	and.b16  	%rs47, %rs1, %rs11;
	and.b16  	%rs48, %rs47, 2;
	setp.eq.s16 	%p70, %rs48, 0;
	@%p70 bra 	$L__BB0_51;

	sub.f32 	%f462, %f134, %f223;
	mul.f32 	%f463, %f462, %f222;
	mul.f32 	%f464, %f463, %f225;
	mul.f32 	%f465, %f464, %f135;
	sub.f32 	%f655, %f655, %f465;
	mul.f32 	%f466, %f464, %f136;
	sub.f32 	%f656, %f656, %f466;
	mul.f32 	%f467, %f464, %f137;
	sub.f32 	%f657, %f657, %f467;

$L__BB0_51:
	add.s32 	%r36, %r65, 2;
	setp.eq.s32 	%p71, %r14, 2;
	@%p71 bra 	$L__BB0_75;

	setp.eq.s32 	%p72, %r36, %r3;
	@%p72 bra 	$L__BB0_56;

	mul.wide.u32 	%rd29, %r36, 16;
	add.s64 	%rd30, %rd1, %rd29;
	ld.global.u8 	%rs12, [%rd30+13];
	and.b16  	%rs49, %rs12, 1;
	setp.eq.b16 	%p73, %rs49, 1;
	mov.pred 	%p74, 0;
	xor.pred  	%p75, %p73, %p74;
	not.pred 	%p76, %p75;
	@%p76 bra 	$L__BB0_56;

	ld.shared.f32 	%f468, [%r33+24];
	sub.f32 	%f469, %f1, %f468;
	ld.shared.f32 	%f470, [%r33+28];
	sub.f32 	%f471, %f2, %f470;
	ld.shared.f32 	%f472, [%r33+32];
	sub.f32 	%f473, %f3, %f472;
	mul.f32 	%f474, %f471, %f471;
	fma.rn.f32 	%f475, %f469, %f469, %f474;
	fma.rn.f32 	%f476, %f473, %f473, %f475;
	sqrt.rn.f32 	%f477, %f476;
	mov.f32 	%f478, 0f3DCCCCCD;
	max.f32 	%f147, %f477, %f478;
	rcp.rn.f32 	%f479, %f147;
	mul.f32 	%f148, %f469, %f479;
	mul.f32 	%f149, %f471, %f479;
	mul.f32 	%f150, %f473, %f479;
	ld.shared.f32 	%f480, [%r34+8];
	mul.f32 	%f481, %f480, %f4;
	sqrt.rn.f32 	%f482, %f481;
	mul.f32 	%f483, %f482, %f224;
	div.rn.f32 	%f484, %f483, %f476;
	fma.rn.f32 	%f655, %f484, %f148, %f655;
	fma.rn.f32 	%f656, %f484, %f149, %f656;
	fma.rn.f32 	%f657, %f484, %f150, %f657;
	and.b16  	%rs50, %rs1, %rs12;
	and.b16  	%rs51, %rs50, 2;
	setp.eq.s16 	%p77, %rs51, 0;
	@%p77 bra 	$L__BB0_56;

	sub.f32 	%f485, %f147, %f223;
	mul.f32 	%f486, %f485, %f222;
	mul.f32 	%f487, %f486, %f225;
	mul.f32 	%f488, %f487, %f148;
	sub.f32 	%f655, %f655, %f488;
	mul.f32 	%f489, %f487, %f149;
	sub.f32 	%f656, %f656, %f489;
	mul.f32 	%f490, %f487, %f150;
	sub.f32 	%f657, %f657, %f490;

$L__BB0_56:
	add.s32 	%r37, %r65, 3;
	setp.eq.s32 	%p78, %r14, 3;
	@%p78 bra 	$L__BB0_75;

	setp.eq.s32 	%p79, %r37, %r3;
	@%p79 bra 	$L__BB0_61;

	mul.wide.u32 	%rd31, %r37, 16;
	add.s64 	%rd32, %rd1, %rd31;
	ld.global.u8 	%rs13, [%rd32+13];
	and.b16  	%rs52, %rs13, 1;
	setp.eq.b16 	%p80, %rs52, 1;
	mov.pred 	%p81, 0;
	xor.pred  	%p82, %p80, %p81;
	not.pred 	%p83, %p82;
	@%p83 bra 	$L__BB0_61;

	ld.shared.f32 	%f491, [%r33+36];
	sub.f32 	%f492, %f1, %f491;
	ld.shared.f32 	%f493, [%r33+40];
	sub.f32 	%f494, %f2, %f493;
	ld.shared.f32 	%f495, [%r33+44];
	sub.f32 	%f496, %f3, %f495;
	mul.f32 	%f497, %f494, %f494;
	fma.rn.f32 	%f498, %f492, %f492, %f497;
	fma.rn.f32 	%f499, %f496, %f496, %f498;
	sqrt.rn.f32 	%f500, %f499;
	mov.f32 	%f501, 0f3DCCCCCD;
	max.f32 	%f160, %f500, %f501;
	rcp.rn.f32 	%f502, %f160;
	mul.f32 	%f161, %f492, %f502;
	mul.f32 	%f162, %f494, %f502;
	mul.f32 	%f163, %f496, %f502;
	ld.shared.f32 	%f503, [%r34+12];
	mul.f32 	%f504, %f503, %f4;
	sqrt.rn.f32 	%f505, %f504;
	mul.f32 	%f506, %f505, %f224;
	div.rn.f32 	%f507, %f506, %f499;
	fma.rn.f32 	%f655, %f507, %f161, %f655;
	fma.rn.f32 	%f656, %f507, %f162, %f656;
	fma.rn.f32 	%f657, %f507, %f163, %f657;
	and.b16  	%rs53, %rs1, %rs13;
	and.b16  	%rs54, %rs53, 2;
	setp.eq.s16 	%p84, %rs54, 0;
	@%p84 bra 	$L__BB0_61;

	sub.f32 	%f508, %f160, %f223;
	mul.f32 	%f509, %f508, %f222;
	mul.f32 	%f510, %f509, %f225;
	mul.f32 	%f511, %f510, %f161;
	sub.f32 	%f655, %f655, %f511;
	mul.f32 	%f512, %f510, %f162;
	sub.f32 	%f656, %f656, %f512;
	mul.f32 	%f513, %f510, %f163;
	sub.f32 	%f657, %f657, %f513;

$L__BB0_61:
	add.s32 	%r38, %r65, 4;
	setp.eq.s32 	%p85, %r14, 4;
	@%p85 bra 	$L__BB0_75;

	setp.eq.s32 	%p86, %r38, %r3;
	@%p86 bra 	$L__BB0_66;

	mul.wide.u32 	%rd33, %r38, 16;
	add.s64 	%rd34, %rd1, %rd33;
	ld.global.u8 	%rs14, [%rd34+13];
	and.b16  	%rs55, %rs14, 1;
	setp.eq.b16 	%p87, %rs55, 1;
	mov.pred 	%p88, 0;
	xor.pred  	%p89, %p87, %p88;
	not.pred 	%p90, %p89;
	@%p90 bra 	$L__BB0_66;

	ld.shared.f32 	%f514, [%r33+48];
	sub.f32 	%f515, %f1, %f514;
	ld.shared.f32 	%f516, [%r33+52];
	sub.f32 	%f517, %f2, %f516;
	ld.shared.f32 	%f518, [%r33+56];
	sub.f32 	%f519, %f3, %f518;
	mul.f32 	%f520, %f517, %f517;
	fma.rn.f32 	%f521, %f515, %f515, %f520;
	fma.rn.f32 	%f522, %f519, %f519, %f521;
	sqrt.rn.f32 	%f523, %f522;
	mov.f32 	%f524, 0f3DCCCCCD;
	max.f32 	%f173, %f523, %f524;
	rcp.rn.f32 	%f525, %f173;
	mul.f32 	%f174, %f515, %f525;
	mul.f32 	%f175, %f517, %f525;
	mul.f32 	%f176, %f519, %f525;
	ld.shared.f32 	%f526, [%r34+16];
	mul.f32 	%f527, %f526, %f4;
	sqrt.rn.f32 	%f528, %f527;
	mul.f32 	%f529, %f528, %f224;
	div.rn.f32 	%f530, %f529, %f522;
	fma.rn.f32 	%f655, %f530, %f174, %f655;
	fma.rn.f32 	%f656, %f530, %f175, %f656;
	fma.rn.f32 	%f657, %f530, %f176, %f657;
	and.b16  	%rs56, %rs1, %rs14;
	and.b16  	%rs57, %rs56, 2;
	setp.eq.s16 	%p91, %rs57, 0;
	@%p91 bra 	$L__BB0_66;

	sub.f32 	%f531, %f173, %f223;
	mul.f32 	%f532, %f531, %f222;
	mul.f32 	%f533, %f532, %f225;
	mul.f32 	%f534, %f533, %f174;
	sub.f32 	%f655, %f655, %f534;
	mul.f32 	%f535, %f533, %f175;
	sub.f32 	%f656, %f656, %f535;
	mul.f32 	%f536, %f533, %f176;
	sub.f32 	%f657, %f657, %f536;

$L__BB0_66:
	add.s32 	%r39, %r65, 5;
	setp.eq.s32 	%p92, %r14, 5;
	@%p92 bra 	$L__BB0_75;

	setp.eq.s32 	%p93, %r39, %r3;
	@%p93 bra 	$L__BB0_71;

	mul.wide.u32 	%rd35, %r39, 16;
	add.s64 	%rd36, %rd1, %rd35;
	ld.global.u8 	%rs15, [%rd36+13];
	and.b16  	%rs58, %rs15, 1;
	setp.eq.b16 	%p94, %rs58, 1;
	mov.pred 	%p95, 0;
	xor.pred  	%p96, %p94, %p95;
	not.pred 	%p97, %p96;
	@%p97 bra 	$L__BB0_71;

	ld.shared.f32 	%f537, [%r33+60];
	sub.f32 	%f538, %f1, %f537;
	ld.shared.f32 	%f539, [%r33+64];
	sub.f32 	%f540, %f2, %f539;
	ld.shared.f32 	%f541, [%r33+68];
	sub.f32 	%f542, %f3, %f541;
	mul.f32 	%f543, %f540, %f540;
	fma.rn.f32 	%f544, %f538, %f538, %f543;
	fma.rn.f32 	%f545, %f542, %f542, %f544;
	sqrt.rn.f32 	%f546, %f545;
	mov.f32 	%f547, 0f3DCCCCCD;
	max.f32 	%f186, %f546, %f547;
	rcp.rn.f32 	%f548, %f186;
	mul.f32 	%f187, %f538, %f548;
	mul.f32 	%f188, %f540, %f548;
	mul.f32 	%f189, %f542, %f548;
	ld.shared.f32 	%f549, [%r34+20];
	mul.f32 	%f550, %f549, %f4;
	sqrt.rn.f32 	%f551, %f550;
	mul.f32 	%f552, %f551, %f224;
	div.rn.f32 	%f553, %f552, %f545;
	fma.rn.f32 	%f655, %f553, %f187, %f655;
	fma.rn.f32 	%f656, %f553, %f188, %f656;
	fma.rn.f32 	%f657, %f553, %f189, %f657;
	and.b16  	%rs59, %rs1, %rs15;
	and.b16  	%rs60, %rs59, 2;
	setp.eq.s16 	%p98, %rs60, 0;
	@%p98 bra 	$L__BB0_71;

	sub.f32 	%f554, %f186, %f223;
	mul.f32 	%f555, %f554, %f222;
	mul.f32 	%f556, %f555, %f225;
	mul.f32 	%f557, %f556, %f187;
	sub.f32 	%f655, %f655, %f557;
	mul.f32 	%f558, %f556, %f188;
	sub.f32 	%f656, %f656, %f558;
	mul.f32 	%f559, %f556, %f189;
	sub.f32 	%f657, %f657, %f559;

$L__BB0_71:
	add.s32 	%r40, %r65, 6;
	setp.eq.s32 	%p99, %r40, %r3;
	setp.eq.s32 	%p100, %r14, 6;
	or.pred  	%p101, %p100, %p99;
	@%p101 bra 	$L__BB0_75;

	mul.wide.u32 	%rd37, %r40, 16;
	add.s64 	%rd38, %rd1, %rd37;
	ld.global.u8 	%rs16, [%rd38+13];
	and.b16  	%rs61, %rs16, 1;
	setp.eq.b16 	%p102, %rs61, 1;
	mov.pred 	%p103, 0;
	xor.pred  	%p104, %p102, %p103;
	not.pred 	%p105, %p104;
	@%p105 bra 	$L__BB0_75;

	ld.shared.f32 	%f560, [%r33+72];
	sub.f32 	%f561, %f1, %f560;
	ld.shared.f32 	%f562, [%r33+76];
	sub.f32 	%f563, %f2, %f562;
	ld.shared.f32 	%f564, [%r33+80];
	sub.f32 	%f565, %f3, %f564;
	mul.f32 	%f566, %f563, %f563;
	fma.rn.f32 	%f567, %f561, %f561, %f566;
	fma.rn.f32 	%f568, %f565, %f565, %f567;
	sqrt.rn.f32 	%f569, %f568;
	mov.f32 	%f570, 0f3DCCCCCD;
	max.f32 	%f199, %f569, %f570;
	rcp.rn.f32 	%f571, %f199;
	mul.f32 	%f200, %f561, %f571;
	mul.f32 	%f201, %f563, %f571;
	mul.f32 	%f202, %f565, %f571;
	ld.shared.f32 	%f572, [%r34+24];
	mul.f32 	%f573, %f572, %f4;
	sqrt.rn.f32 	%f574, %f573;
	mul.f32 	%f575, %f574, %f224;
	div.rn.f32 	%f576, %f575, %f568;
	fma.rn.f32 	%f655, %f576, %f200, %f655;
	fma.rn.f32 	%f656, %f576, %f201, %f656;
	fma.rn.f32 	%f657, %f576, %f202, %f657;
	and.b16  	%rs62, %rs1, %rs16;
	and.b16  	%rs63, %rs62, 2;
	setp.eq.s16 	%p106, %rs63, 0;
	@%p106 bra 	$L__BB0_75;

	sub.f32 	%f577, %f199, %f223;
	mul.f32 	%f578, %f577, %f222;
	mul.f32 	%f579, %f578, %f225;
	mul.f32 	%f580, %f579, %f200;
	sub.f32 	%f655, %f655, %f580;
	mul.f32 	%f581, %f579, %f201;
	sub.f32 	%f656, %f656, %f581;
	mul.f32 	%f582, %f579, %f202;
	sub.f32 	%f657, %f657, %f582;

$L__BB0_75:
	bar.sync 	0;
	add.s32 	%r76, %r76, 1;
	setp.lt.u32 	%p107, %r76, %r8;
	@%p107 bra 	$L__BB0_3;

$L__BB0_76:
	mul.f32 	%f583, %f656, %f656;
	fma.rn.f32 	%f584, %f655, %f655, %f583;
	fma.rn.f32 	%f585, %f657, %f657, %f584;
	sqrt.rn.f32 	%f215, %f585;
	setp.leu.f32 	%p108, %f215, 0f447A0000;
	@%p108 bra 	$L__BB0_78;

	mov.f32 	%f586, 0f447A0000;
	div.rn.f32 	%f587, %f586, %f215;
	mul.f32 	%f655, %f655, %f587;
	mul.f32 	%f656, %f656, %f587;
	mul.f32 	%f657, %f657, %f587;

$L__BB0_78:
	ld.param.f32 	%f600, [compute_forces_param_8];
	cvt.s64.s32 	%rd45, %r3;
	ld.param.u64 	%rd44, [compute_forces_param_1];
	mul.wide.s32 	%rd43, %r3, 16;
	add.s64 	%rd42, %rd1, %rd43;
	cvta.to.global.u64 	%rd39, %rd44;
	mul.lo.s64 	%rd40, %rd45, 12;
	add.s64 	%rd41, %rd39, %rd40;
	ld.global.f32 	%f588, [%rd41];
	fma.rn.f32 	%f589, %f655, 0f3C83126F, %f588;
	mul.f32 	%f590, %f589, %f600;
	ld.global.f32 	%f591, [%rd41+4];
	fma.rn.f32 	%f592, %f656, 0f3C83126F, %f591;
	mul.f32 	%f593, %f592, %f600;
	ld.global.f32 	%f594, [%rd41+8];
	fma.rn.f32 	%f595, %f657, 0f3C83126F, %f594;
	mul.f32 	%f596, %f595, %f600;
	fma.rn.f32 	%f597, %f590, 0f3C83126F, %f1;
	fma.rn.f32 	%f598, %f593, 0f3C83126F, %f2;
	fma.rn.f32 	%f599, %f596, 0f3C83126F, %f3;
	st.global.f32 	[%rd42], %f597;
	st.global.f32 	[%rd42+4], %f598;
	st.global.f32 	[%rd42+8], %f599;
	st.global.f32 	[%rd41], %f590;
	st.global.f32 	[%rd41+4], %f593;
	st.global.f32 	[%rd41+8], %f596;

$L__BB0_79:
	ret;

}


----
utils/debug_logging.rs
use serde_json::Value;
use std::sync::atomic::{AtomicBool, Ordering};
use log::debug;

// Global debug state
pub static DEBUG_MODE: AtomicBool = AtomicBool::new(false);
pub static WEBSOCKET_DEBUG: AtomicBool = AtomicBool::new(false);
pub static DATA_DEBUG: AtomicBool = AtomicBool::new(false);

// Initialize debug settings
pub fn init_debug_settings(debug_mode: bool, websocket_debug: bool, data_debug: bool) {
    DEBUG_MODE.store(debug_mode, Ordering::SeqCst);
    WEBSOCKET_DEBUG.store(websocket_debug, Ordering::SeqCst);
    DATA_DEBUG.store(data_debug, Ordering::SeqCst);
}

// Data types for debug logging
#[derive(Debug)]
pub enum WsDebugData<'a> {
    Binary {
        data: &'a [u8],
        is_initial: bool,
        node_count: usize,
    },
    Json(Value),
    Text(String),
}

impl<'a> std::fmt::Display for WsDebugData<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            WsDebugData::Binary { data, is_initial, node_count } => {
                write!(f, "Binary message: {} bytes, initial: {}, nodes: {}", 
                    data.len(), is_initial, node_count)
            },
            WsDebugData::Json(value) => {
                write!(f, "JSON message: {}", value)
            },
            WsDebugData::Text(text) => {
                write!(f, "Text message: {}", text)
            }
        }
    }
}

// Logging macros with different levels
#[macro_export]
macro_rules! log_error {
    ($($arg:tt)*) => {{
        use log::error;
        error!($($arg)*);
    }}
}

#[macro_export]
macro_rules! log_warn {
    ($($arg:tt)*) => {{
        use log::warn;
        if $crate::utils::debug_logging::DEBUG_MODE.load(std::sync::atomic::Ordering::SeqCst) {
            warn!($($arg)*);
        }
    }}
}

#[macro_export]
macro_rules! log_websocket {
    ($($arg:tt)*) => {{
        use log::debug;
        if $crate::utils::debug_logging::WEBSOCKET_DEBUG.load(std::sync::atomic::Ordering::SeqCst) {
            debug!("[WS] {}", format!($($arg)*));
        }
    }}
}

#[macro_export]
macro_rules! log_data {
    ($($arg:tt)*) => {{
        use log::debug;
        if $crate::utils::debug_logging::DATA_DEBUG.load(std::sync::atomic::Ordering::SeqCst) {
            debug!("[DATA] {}", format!($($arg)*));
        }
    }}
}

// Helper functions for common debug scenarios
pub fn log_ws_message(data: WsDebugData) {
    if !WEBSOCKET_DEBUG.load(Ordering::SeqCst) {
        return;
    }

    match data {
        WsDebugData::Binary { data, is_initial, node_count } => {
            debug!(
                "WebSocket Binary Message:\n  Size: {} bytes\n  Initial: {}\n  Node Count: {}\n  Header: {:?}",
                data.len(),
                is_initial,
                node_count,
                &data[..std::cmp::min(data.len(), 32)]
            );
        },
        WsDebugData::Json(value) => {
            if let Ok(pretty) = serde_json::to_string_pretty(&value) {
                debug!("WebSocket JSON Message:\n{}", pretty);
            } else {
                debug!("WebSocket JSON Message: {}", value);
            }
        },
        WsDebugData::Text(text) => {
            debug!("WebSocket Text Message: {}", text);
        }
    }
}

pub fn log_data_operation(operation: &str, details: &str) {
    if !DATA_DEBUG.load(Ordering::SeqCst) {
        return;
    }
    debug!("Data Operation - {}: {}", operation, details);
}

pub fn log_binary_headers(data: &[u8], context: &str) {
    if !DEBUG_MODE.load(Ordering::SeqCst) {
        return;
    }
    debug!(
        "Binary Headers [{}]:\n  Size: {} bytes\n  Header: {:?}",
        context,
        data.len(),
        &data[..std::cmp::min(data.len(), 32)]
    );
}

pub fn log_json_data(context: &str, value: &Value) {
    if !DEBUG_MODE.load(Ordering::SeqCst) {
        return;
    }
    if let Ok(pretty) = serde_json::to_string_pretty(value) {
        debug!("JSON Data [{}]:\n{}", context, pretty);
    } else {
        debug!("JSON Data [{}]: {}", context, value);
    }
}

// Test that debug settings are working
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_debug_settings() {
        init_debug_settings(true, true, false);
        assert!(DEBUG_MODE.load(Ordering::SeqCst));
        assert!(WEBSOCKET_DEBUG.load(Ordering::SeqCst));
        assert!(!DATA_DEBUG.load(Ordering::SeqCst));
    }
}

----
utils/tests/socket_flow_tests.rs
use std::sync::Arc;
use tokio::sync::RwLock;
use crate::utils::socket_flow_messages::{Node, NodeData};
use crate::models::edge::Edge;
use crate::config::Settings;
use crate::models::graph::GraphData;
use crate::utils::socket_flow_messages::{ServerMessage, ClientMessage, BinaryNodeData, UpdatePositionsMessage};
use crate::AppState;

#[tokio::test]
async fn test_binary_node_data_conversion() {
    // Create test node data
    let node_data = NodeData {
        position: [1.0, 2.0, 3.0],
        velocity: [0.1, 0.2, 0.3],
        mass: 127,
        flags: 0,
        padding: [0; 2],
    };

    // Create test node
    let node = Node {
        id: "test_node".to_string(),
        label: "Test Node".to_string(),
        data: node_data,
        metadata: Default::default(),
        file_size: 0,
        node_type: None,
        size: None,
        color: None,
        weight: None,
        group: None,
        user_data: None,
    };

    // Convert to BinaryNodeData
    let binary_data = BinaryNodeData::from_node_data(&node.id, &node.data);

    // Verify conversion
    assert_eq!(binary_data.node_id, "test_node");
    assert_eq!(binary_data.data.position, [1.0, 2.0, 3.0]);
    assert_eq!(binary_data.data.velocity, [0.1, 0.2, 0.3]);
    assert_eq!(binary_data.data.mass, 127);
}

#[tokio::test]
async fn test_update_positions_message() {
    // Create test nodes
    let node1_data = NodeData {
        position: [1.0, 2.0, 3.0],
        velocity: [0.1, 0.2, 0.3],
        mass: 127,
        flags: 0,
        padding: [0; 2],
    };

    let node2_data = NodeData {
        position: [4.0, 5.0, 6.0],
        velocity: [0.4, 0.5, 0.6],
        mass: 127,
        flags: 0,
        padding: [0; 2],
    };

    let nodes = vec![
        Node {
            id: "node1".to_string(),
            label: "Node 1".to_string(),
            data: node1_data,
            metadata: Default::default(),
            file_size: 0,
            node_type: None,
            size: None,
            color: None,
            weight: None,
            group: None,
            user_data: None,
        },
        Node {
            id: "node2".to_string(),
            label: "Node 2".to_string(),
            data: node2_data,
            metadata: Default::default(),
            file_size: 0,
            node_type: None,
            size: None,
            color: None,
            weight: None,
            group: None,
            user_data: None,
        },
    ];

    // Create update message
    let binary_nodes: Vec<BinaryNodeData> = nodes.iter()
        .map(|node| BinaryNodeData::from_node_data(&node.id, &node.data))
        .collect();

    let update_msg = UpdatePositionsMessage {
        nodes: binary_nodes,
    };

    // Verify message
    assert_eq!(update_msg.nodes.len(), 2);
    assert_eq!(update_msg.nodes[0].node_id, "node1");
    assert_eq!(update_msg.nodes[0].data.position, [1.0, 2.0, 3.0]);
    assert_eq!(update_msg.nodes[1].node_id, "node2");
    assert_eq!(update_msg.nodes[1].data.position, [4.0, 5.0, 6.0]);
}

----
models/position_update.rs
use serde::{Deserialize, Serialize};
use crate::utils::socket_flow_messages::NodeData;

#[derive(Debug, Serialize, Deserialize)]
pub struct PositionUpdate {
    pub node_id: String,
    pub data: NodeData,
}

impl PositionUpdate {
    pub fn new(node_id: String, data: NodeData) -> Self {
        Self { node_id, data }
    }
}

----
models/graph.rs
use crate::utils::socket_flow_messages::Node;
use super::edge::Edge;
use super::metadata::MetadataStore;
use serde::{Deserialize, Serialize};

/// Represents the graph data structure containing nodes, edges, and metadata.
/// All fields use camelCase serialization for client compatibility.
#[derive(Default, Serialize, Deserialize, Clone, Debug)]
#[serde(rename_all = "camelCase")]
pub struct GraphData {
    /// List of nodes in the graph.
    pub nodes: Vec<Node>,
    /// List of edges connecting the nodes.
    pub edges: Vec<Edge>,
    /// Metadata associated with the graph, using camelCase keys.
    pub metadata: MetadataStore,
}

impl GraphData {
    pub fn new() -> Self {
        Self {
            nodes: Vec::new(),
            edges: Vec::new(),
            metadata: MetadataStore::new(),
        }
    }
}

----
models/node.rs
// Node and NodeData have been moved to utils/socket_flow_messages.rs
// This file is kept as a placeholder to maintain module structure
// but its contents have been consolidated as part of the Vector3 standardization

----
models/mod.rs
pub mod edge;
pub mod graph;
pub mod metadata;
pub mod node;
pub mod pagination;
pub mod position_update;
pub mod simulation_params;

----
models/metadata.rs
use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

/// Stores metadata about a processed file.
/// All fields use camelCase serialization for client compatibility.
#[derive(Debug, Clone, Serialize, Deserialize, Default)]
#[serde(rename_all = "camelCase")]
pub struct Metadata {
    #[serde(default)]
    pub file_name: String,
    #[serde(default)]
    pub file_size: usize,
    #[serde(default)]
    pub node_size: f64,
    #[serde(default)]
    pub hyperlink_count: usize,
    #[serde(default)]
    pub sha1: String,
    #[serde(default = "Utc::now")]
    pub last_modified: DateTime<Utc>,
    #[serde(default)]
    pub perplexity_link: String,
    #[serde(default)]
    pub last_perplexity_process: Option<DateTime<Utc>>,
    #[serde(default)]
    pub topic_counts: HashMap<String, usize>,
}

/// Type alias for metadata storage with camelCase keys
pub type MetadataStore = HashMap<String, Metadata>;

// Implement helper methods directly on HashMap<String, Metadata>
pub trait MetadataOps {
    fn validate_files(&self, markdown_dir: &str) -> bool;
}

impl MetadataOps for MetadataStore {
    fn validate_files(&self, markdown_dir: &str) -> bool {
        if self.is_empty() {
            return false;
        }

        // Check if the markdown files referenced in metadata actually exist
        for filename in self.keys() {
            let file_path = format!("{}/{}", markdown_dir, filename);
            if !std::path::Path::new(&file_path).exists() {
                return false;
            }
        }
        
        true
    }
}

----
models/pagination.rs
use serde::{Deserialize, Serialize};
use crate::models::edge::Edge;
use crate::utils::socket_flow_messages::Node;

#[derive(Debug, Deserialize)]
pub struct PaginationParams {
    pub page: Option<u32>,
    pub page_size: Option<u32>,
}

#[derive(Debug, Serialize)]
pub struct PaginatedGraphData {
    pub nodes: Vec<Node>,
    pub edges: Vec<Edge>,
    pub total_pages: u32,
    pub current_page: u32,
    pub total_nodes: usize,
    pub total_edges: usize,
    pub metadata: serde_json::Value,
}

----
models/edge.rs
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

/// Edge structure representing connections between nodes
#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "camelCase")]
pub struct Edge {
    pub source: String,
    pub target: String,
    pub weight: f32,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub edge_type: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub metadata: Option<HashMap<String, String>>,
}

impl Edge {
    pub fn new(source: String, target: String, weight: f32) -> Self {
        Self {
            source,
            target,
            weight,
            edge_type: None,
            metadata: None,
        }
    }
}

----
models/simulation_params.rs
use serde::{Deserialize, Serialize};
use bytemuck::{Pod, Zeroable};

#[derive(Debug, Clone, Copy, Serialize, Deserialize, PartialEq)]
#[serde(rename_all = "camelCase")]
pub enum SimulationMode {
    Remote,  // GPU-accelerated remote computation
    GPU,     // Local GPU computation
    Local,   // CPU-based computation
}

impl Default for SimulationMode {
    fn default() -> Self {
        SimulationMode::Remote
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize, PartialEq)]
#[serde(rename_all = "camelCase")]
pub enum SimulationPhase {
    Initial,    // Heavy computation for initial layout
    Dynamic,    // Lighter computation for dynamic updates
    Finalize,   // Final positioning and cleanup
}

impl Default for SimulationPhase {
    fn default() -> Self {
        SimulationPhase::Initial
    }
}

// GPU-compatible simulation parameters
#[repr(C)]
#[derive(Default, Clone, Copy, Pod, Zeroable, Debug)]
pub struct GPUSimulationParams {
    pub iterations: u32,
    pub spring_length: f32,
    pub spring_strength: f32,
    pub repulsion: f32,
    pub attraction: f32,
    pub damping: f32,
    pub time_step: f32,
    pub padding: u32,  // For alignment
}

#[derive(Default, Serialize, Deserialize, Clone, Debug)]
#[serde(rename_all = "camelCase")]
pub struct SimulationParams {
    pub iterations: u32,           // Range: 1-500, Default: varies by phase
    pub spring_length: f32,        // Range: 10-500, Default: 100
    pub spring_strength: f32,      // Range: 0.1-10, Default: 0.5
    pub repulsion: f32,           // Range: 1-1000, Default: 100
    pub attraction: f32,          // Range: 0.1-10, Default: 1.0
    pub damping: f32,             // Range: 0-1, Default: 0.5
    pub time_step: f32,           // Range: 0.01-1, Default: 0.2 (5fps)
    pub phase: SimulationPhase,   // Current simulation phase
    pub mode: SimulationMode,     // Computation mode
}

impl SimulationParams {
    pub fn new() -> Self {
        Self {
            iterations: 100,
            spring_length: 100.0,
            spring_strength: 0.5,
            repulsion: 100.0,
            attraction: 1.0,
            damping: 0.5,
            time_step: 0.2,        // Updated to 5fps
            phase: SimulationPhase::Initial,
            mode: SimulationMode::Remote,
        }
    }

    pub fn with_phase(phase: SimulationPhase) -> Self {
        match phase {
            SimulationPhase::Initial => Self {
                iterations: 300,           // Reduced from 500
                spring_length: 100.0,
                spring_strength: 0.5,      // Reduced from 1.0
                repulsion: 100.0,          // Reduced from 200.0
                attraction: 1.0,           // Reduced from 2.0
                damping: 0.95,            // Increased from 0.9
                time_step: 0.2,           // Updated to 5fps
                phase,
                mode: SimulationMode::Remote,
            },
            SimulationPhase::Dynamic => Self {
                iterations: 50,
                spring_length: 100.0,
                spring_strength: 0.5,
                repulsion: 100.0,
                attraction: 1.0,
                damping: 0.5,
                time_step: 0.2,           // Updated to 5fps
                phase,
                mode: SimulationMode::Remote,
            },
            SimulationPhase::Finalize => Self {
                iterations: 200,
                spring_length: 100.0,
                spring_strength: 0.1,
                repulsion: 50.0,
                attraction: 0.5,
                damping: 0.95,
                time_step: 0.2,           // Updated to 5fps
                phase,
                mode: SimulationMode::Remote,
            },
        }
    }

    pub fn default_for_phase(phase: SimulationPhase) -> Self {
        match phase {
            SimulationPhase::Initial => Self {
                iterations: 500,
                spring_length: 150.0,
                spring_strength: 0.05,
                repulsion: 2500.0,
                attraction: 0.5,
                damping: 0.85,
                time_step: 0.1,
                phase,
                mode: SimulationMode::Remote,
            },
            SimulationPhase::Dynamic => Self {
                iterations: 50,
                spring_length: 100.0,
                spring_strength: 0.5,
                repulsion: 100.0,
                attraction: 1.0,
                damping: 0.5,
                time_step: 0.2,
                phase,
                mode: SimulationMode::Remote,
            },
            SimulationPhase::Finalize => Self {
                iterations: 200,
                spring_length: 100.0,
                spring_strength: 0.1,
                repulsion: 50.0,
                attraction: 0.5,
                damping: 0.95,
                time_step: 0.2,
                phase,
                mode: SimulationMode::Remote,
            },
        }
    }

    // Convert to GPU-compatible parameters
    pub fn to_gpu_params(&self) -> GPUSimulationParams {
        GPUSimulationParams {
            iterations: self.iterations,
            spring_length: self.spring_length,
            spring_strength: self.spring_strength,
            repulsion: self.repulsion,
            attraction: self.attraction,
            damping: self.damping,
            time_step: self.time_step,
            padding: 0,
        }
    }
}

----
api/mod.rs
//! # WebXR Graph API Documentation
//! 
//! This module provides the API endpoints for the WebXR graph visualization system.
//! 
//! ## WebXR Session Management
//! 
//! ```rust
//! /// Initializes a WebXR session with the specified features
//! #[post("/api/xr/session")]
//! async fn init_xr_session(
//!     features: web::Json<XRFeatureRequest>,
//!     state: web::Data<AppState>,
//! ) -> Result<HttpResponse, Error>;
//! 
//! /// Updates XR controller positions and interactions
//! #[post("/api/xr/input")]
//! async fn update_xr_input(
//!     input: web::Json<XRInputState>,
//!     state: web::Data<AppState>,
//! ) -> Result<HttpResponse, Error>;
//! ```
//! 
//! ## Logseq Integration
//! 
//! ```rust
//! /// Fetches and processes Logseq graph data
//! #[get("/api/logseq/graph")]
//! async fn get_logseq_graph(
//!     state: web::Data<AppState>,
//! ) -> Result<HttpResponse, Error>;
//! 
//! /// Updates Logseq content through RAGFlow
//! #[post("/api/logseq/update")]
//! async fn update_logseq_content(
//!     content: web::Json<LogseqUpdate>,
//!     state: web::Data<AppState>,
//! ) -> Result<HttpResponse, Error>;
//! ```
//! 
//! ## RAGFlow Integration
//! 
//! ```rust
//! /// Processes a question using RAGFlow
//! #[post("/api/ragflow/query")]
//! async fn process_ragflow_query(
//!     query: web::Json<RAGFlowQuery>,
//!     state: web::Data<AppState>,
//! ) -> Result<HttpResponse, Error>;
//! ``` 
----
handlers/file_handler.rs
use actix_web::{web::{self, ServiceConfig}, Error as ActixError, HttpResponse};
use serde_json::json;
use log::{info, debug, error};

use crate::AppState;
use crate::services::file_service::FileService;
use crate::services::graph_service::GraphService;

pub async fn fetch_and_process_files(state: web::Data<AppState>) -> HttpResponse {
    info!("Initiating optimized file fetch and processing");

    // Load or create metadata
    let mut metadata_store = match FileService::load_or_create_metadata() {
        Ok(store) => store,
        Err(e) => {
            error!("Failed to load or create metadata: {}", e);
            return HttpResponse::InternalServerError().json(json!({
                "status": "error",
                "message": format!("Failed to initialize metadata: {}", e)
            }));
        }
    };
    
    // Process files with optimized approach
    let file_service = FileService::new(state.settings.clone());
    match file_service.fetch_and_process_files(&*state.github_service, state.settings.clone(), &mut metadata_store).await {
        Ok(processed_files) => {
            let file_names: Vec<String> = processed_files.iter()
                .map(|pf| pf.file_name.clone())
                .collect();

            info!("Successfully processed {} public markdown files", processed_files.len());

            // Update metadata store
            {
                let mut metadata = state.metadata.write().await;
                for processed_file in &processed_files {
                    metadata_store.insert(processed_file.file_name.clone(), processed_file.metadata.clone());
                    debug!("Updated metadata for: {}", processed_file.file_name);
                }
                *metadata = metadata_store.clone();
            }

            // Save the updated metadata
            if let Err(e) = FileService::save_metadata(&metadata_store) {
                error!("Failed to save metadata: {}", e);
                return HttpResponse::InternalServerError().json(json!({
                    "status": "error",
                    "message": format!("Failed to save metadata: {}", e)
                }));
            }

            HttpResponse::Ok().json(json!({
                "status": "success",
                "message": format!("Successfully processed {} files", processed_files.len()),
                "files": file_names
            }))
        }
        Err(e) => {
            error!("Failed to process files: {}", e);
            HttpResponse::InternalServerError().json(json!({
                "status": "error",
                "message": format!("Failed to process files: {}", e)
            }))
        }
    }
}

pub async fn get_file_content(_state: web::Data<AppState>, file_name: web::Path<String>) -> HttpResponse {
    let file_path = format!("{}/{}", crate::services::file_service::MARKDOWN_DIR, file_name);
    
    match tokio::fs::read_to_string(&file_path).await {
        Ok(content) => HttpResponse::Ok().body(content),
        Err(e) => {
            error!("Failed to read file {}: {}", file_name, e);
            HttpResponse::NotFound().json(json!({
                "status": "error",
                "message": format!("File not found or unreadable: {}", file_name)
            }))
        }
    }
}

pub async fn refresh_graph(state: web::Data<AppState>) -> HttpResponse {
    info!("Manually triggering graph refresh");

    // Load metadata from file
    let metadata_store = match FileService::load_or_create_metadata() {
        Ok(store) => store,
        Err(e) => {
            error!("Failed to load metadata: {}", e);
            return HttpResponse::InternalServerError().json(json!({
                "status": "error",
                "message": format!("Failed to load metadata: {}", e)
            }));
        }
    };

    // Build graph directly from metadata
    match GraphService::build_graph_from_metadata(&metadata_store).await {
        Ok(graph_data) => {
            let mut graph = state.graph_service.graph_data.write().await;
            *graph = graph_data.clone();
            info!("Graph data structure refreshed successfully");

            // Send binary position update to clients
            if let Some(gpu) = &state.gpu_compute {
                if let Ok(_nodes) = gpu.read().await.get_node_data() {
                    // Note: Socket-flow server will handle broadcasting
                    debug!("GPU node positions updated successfully");
                } else {
                    error!("Failed to get node positions from GPU");
                }
            }

            HttpResponse::Ok().json(json!({
                "status": "success",
                "message": "Graph refreshed successfully"
            }))
        },
        Err(e) => {
            error!("Failed to refresh graph data: {}", e);
            HttpResponse::InternalServerError().json(json!({
                "status": "error",
                "message": format!("Failed to refresh graph data: {}", e)
            }))
        }
    }
}

pub fn config(cfg: &mut ServiceConfig) {
    cfg.service(web::resource("/fetch").to(fetch_and_process_files))
       .service(web::resource("/content/{file_name}").to(get_file_content))
       .service(web::resource("/refresh").to(refresh_graph))
       .service(web::resource("/update").to(update_graph));
}

pub async fn update_graph(state: web::Data<AppState>) -> Result<HttpResponse, ActixError> {
    // Load metadata from file
    let metadata_store = match FileService::load_or_create_metadata() {
        Ok(store) => store,
        Err(e) => {
            error!("Failed to load metadata: {}", e);
            return Ok(HttpResponse::InternalServerError().json(json!({
                "status": "error",
                "message": format!("Failed to load metadata: {}", e)
            })));
        }
    };

    // Build graph directly from metadata
    match GraphService::build_graph_from_metadata(&metadata_store).await {
        Ok(graph) => {
            // Update graph data
            *state.graph_service.graph_data.write().await = graph.clone();
            
            // Send binary position update to clients
            if let Some(gpu) = &state.gpu_compute {
                if let Ok(_nodes) = gpu.read().await.get_node_data() {
                    // Note: Socket-flow server will handle broadcasting
                    debug!("GPU node positions updated successfully");
                } else {
                    error!("Failed to get node positions from GPU");
                }
            }
            
            Ok(HttpResponse::Ok().json(json!({
                "status": "success",
                "message": "Graph updated successfully"
            })))
        },
        Err(e) => {
            error!("Failed to build graph: {}", e);
            Ok(HttpResponse::InternalServerError().json(json!({
                "status": "error",
                "message": format!("Failed to build graph: {}", e)
            })))
        }
    }
}

----
handlers/mod.rs
pub mod file_handler;
pub mod graph_handler;
pub mod perplexity_handler;
pub mod ragflow_handler;
pub mod settings;
pub mod socket_flow_handler;

----
handlers/graph_handler.rs
use actix_web::{web::{self, ServiceConfig}, HttpResponse, Responder, Result, Error as ActixError};
use serde_json::json;
use crate::AppState;
use serde::{Serialize, Deserialize};
use log::{info, debug, error, warn};
use std::collections::HashMap;
use crate::models::metadata::Metadata;
use crate::utils::socket_flow_messages::Node;
use crate::services::file_service::FileService;
use crate::services::graph_service::GraphService;

#[derive(Serialize)]
#[serde(rename_all = "camelCase")]
pub struct GraphResponse {
    pub nodes: Vec<Node>,
    pub edges: Vec<crate::models::edge::Edge>,
    pub metadata: HashMap<String, Metadata>,
}

#[derive(Serialize)]
#[serde(rename_all = "camelCase")]
pub struct PaginatedGraphResponse {
    pub nodes: Vec<Node>,
    pub edges: Vec<crate::models::edge::Edge>,
    pub metadata: HashMap<String, Metadata>,
    pub total_pages: usize,
    pub current_page: usize,
    pub total_items: usize,
    pub page_size: usize,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct GraphQuery {
    pub query: Option<String>,
    pub page: Option<usize>,
    #[serde(rename = "pageSize")]
    pub page_size: Option<usize>,
    pub sort: Option<String>,
    pub filter: Option<String>,
}

pub async fn get_graph_data(state: web::Data<AppState>) -> impl Responder {
    info!("Received request for graph data");
    
    // Get graph data with error handling
    let graph = match state.graph_service.graph_data.try_read() {
        Ok(graph) => {
            debug!("Successfully acquired read lock on graph data");
            graph
        },
        Err(e) => {
            error!("Failed to acquire read lock on graph data: {}", e);
            return HttpResponse::InternalServerError().json(json!({
                "error": "Failed to access graph data",
                "details": e.to_string()
            }));
        }
    };
    
    // Check if graph data is valid
    if graph.nodes.is_empty() {
        info!("Graph is empty, initializing with default data");
        return HttpResponse::Ok().json(GraphResponse {
            nodes: Vec::new(),
            edges: Vec::new(),
            metadata: HashMap::new(),
        });
    }
    
    debug!("Preparing graph response with {} nodes and {} edges",
        graph.nodes.len(),
        graph.edges.len()
    );

    // Validate node positions
    let invalid_nodes: Vec<_> = graph.nodes.iter()
        .filter(|n| {
            let pos = [n.x(), n.y(), n.z()];
            let invalid = pos.iter().any(|&p| !p.is_finite() || p.abs() > 1000.0);
            if invalid {
                error!("Node {} has invalid position: [{}, {}, {}]", n.id, n.x(), n.y(), n.z());
            }
            invalid
        })
        .map(|n| n.id.clone())
        .collect();

    if !invalid_nodes.is_empty() {
        error!("Found {} nodes with invalid positions: {:?}", invalid_nodes.len(), invalid_nodes);
        return HttpResponse::InternalServerError().json(json!({
            "error": "Invalid node positions detected",
            "details": format!("Found {} nodes with invalid positions", invalid_nodes.len()),
            "invalid_nodes": invalid_nodes
        }));
    }

    // Validate edges
    let invalid_edges: Vec<_> = graph.edges.iter()
        .filter(|e| {
            let invalid = !graph.nodes.iter().any(|n| n.id == e.source) || 
                         !graph.nodes.iter().any(|n| n.id == e.target);
            if invalid {
                error!("Edge {}->{} references non-existent nodes", e.source, e.target);
            }
            invalid
        })
        .map(|e| format!("{}->{}", e.source, e.target))
        .collect();

    if !invalid_edges.is_empty() {
        error!("Found {} invalid edges: {:?}", invalid_edges.len(), invalid_edges);
        return HttpResponse::InternalServerError().json(json!({
            "error": "Invalid edges detected",
            "details": format!("Found {} edges referencing non-existent nodes", invalid_edges.len()),
            "invalid_edges": invalid_edges
        }));
    }

    // Validate metadata
    let missing_metadata: Vec<_> = graph.nodes.iter()
        .filter(|n| !graph.metadata.contains_key(&format!("{}.md", n.id)))
        .map(|n| n.id.clone())
        .collect();

    if !missing_metadata.is_empty() {
        error!("Found {} nodes missing metadata: {:?}", missing_metadata.len(), missing_metadata);
        return HttpResponse::InternalServerError().json(json!({
            "error": "Missing metadata detected",
            "details": format!("Found {} nodes missing metadata", missing_metadata.len()),
            "nodes_missing_metadata": missing_metadata
        }));
    }

    debug!("All validations passed, returning graph data");
    HttpResponse::Ok().json(GraphResponse {
        nodes: graph.nodes.clone(),
        edges: graph.edges.clone(),
        metadata: graph.metadata.clone(),
    })
}

pub async fn get_paginated_graph_data(
    state: web::Data<AppState>,
    query: web::Query<GraphQuery>,
) -> impl Responder {
    info!("Received request for paginated graph data with params: {:?}", query);

    // Convert to 0-based indexing internally
    let page = query.page.map(|p| p.saturating_sub(1)).unwrap_or(0);
    let page_size = query.page_size.unwrap_or(100);

    if page_size == 0 {
        error!("Invalid page size: {}", page_size);
        return HttpResponse::BadRequest().json(serde_json::json!({
            "error": "Page size must be greater than 0"
        }));
    }

    let graph = state.graph_service.graph_data.read().await;
    let total_items = graph.nodes.len();
    
    if total_items == 0 {
        debug!("Graph is empty");
        return HttpResponse::Ok().json(PaginatedGraphResponse {
            nodes: Vec::new(),
            edges: Vec::new(),
            metadata: HashMap::new(),
            total_pages: 0,
            current_page: 1, // Return 1-based page number
            total_items: 0,
            page_size,
        });
    }

    let total_pages = (total_items + page_size - 1) / page_size;

    if page >= total_pages {
        warn!("Requested page {} exceeds total pages {}", page + 1, total_pages);
        return HttpResponse::BadRequest().json(serde_json::json!({
            "error": format!("Page {} exceeds total available pages {}", page + 1, total_pages)
        }));
    }

    let start = page * page_size;
    let end = std::cmp::min(start + page_size, total_items);

    debug!("Calculating slice from {} to {} out of {} total items", start, end, total_items);

    let page_nodes = graph.nodes[start..end].to_vec();

    // Get edges where either source or target is in the current page
    let node_ids: std::collections::HashSet<_> = page_nodes.iter()
        .map(|node| node.id.clone())
        .collect();

    let relevant_edges: Vec<_> = graph.edges.iter()
        .filter(|edge| {
            // Include edges where either the source or target is in our page
            node_ids.contains(&edge.source) || node_ids.contains(&edge.target)
        })
        .cloned()
        .collect();

    debug!("Found {} relevant edges for {} nodes", relevant_edges.len(), page_nodes.len());

    let response = PaginatedGraphResponse {
        nodes: page_nodes,
        edges: relevant_edges,
        metadata: graph.metadata.clone(),
        total_pages,
        current_page: page + 1, // Convert back to 1-based indexing for response
        total_items,
        page_size,
    };

    HttpResponse::Ok().json(response)
}

// Rebuild graph from existing metadata
pub async fn refresh_graph(state: web::Data<AppState>) -> Result<HttpResponse, ActixError> {
    info!("Refreshing graph data");

    // Load or create metadata
    let mut metadata = match FileService::load_or_create_metadata() {
        Ok(store) => store,
        Err(e) => {
            error!("Failed to load or create metadata: {}", e);
            return Ok(HttpResponse::InternalServerError().json(json!({
                "status": "error",
                "message": format!("Failed to initialize metadata: {}", e)
            })));
        }
    };

    // Process files with optimized approach
    let file_service = FileService::new(state.settings.clone());
    match file_service.fetch_and_process_files(&*state.github_service, state.settings.clone(), &mut metadata).await {
        Ok(processed_files) => {
            let file_names: Vec<String> = processed_files.iter()
                .map(|pf| pf.file_name.clone())
                .collect();

            info!("Successfully processed {} public markdown files", processed_files.len());

            // Update metadata store
            {
                let mut metadata_store = state.metadata.write().await;
                for processed_file in &processed_files {
                    metadata_store.insert(processed_file.file_name.clone(), processed_file.metadata.clone());
                }
            }

            // Save the updated metadata
            if let Err(e) = FileService::save_metadata(&metadata) {
                error!("Failed to save metadata: {}", e);
                return Ok(HttpResponse::InternalServerError().json(json!({
                    "status": "error",
                    "message": format!("Failed to save metadata: {}", e)
                })));
            }

            Ok(HttpResponse::Ok().json(json!({
                "status": "success",
                "message": format!("Successfully processed {} files", processed_files.len()),
                "files": file_names
            })))
        }
        Err(e) => {
            error!("Failed to process files: {}", e);
            Ok(HttpResponse::InternalServerError().json(json!({
                "status": "error",
                "message": format!("Failed to process files: {}", e)
            })))
        }
    }
}

// Fetch new metadata and rebuild graph
pub fn config(cfg: &mut ServiceConfig) {
    cfg.service(web::resource("/data").to(get_graph_data))
       .service(web::resource("/data/paginated").to(get_paginated_graph_data))
       .service(
           web::resource("/update")
               .route(web::post().to(update_graph))
       );
}

pub async fn update_graph(state: web::Data<AppState>) -> impl Responder {
    info!("Received request to update graph");
    
    // Load current metadata
    let mut metadata = match FileService::load_or_create_metadata() {
        Ok(m) => m,
        Err(e) => {
            error!("Failed to load metadata: {}", e);
            return HttpResponse::InternalServerError().json(serde_json::json!({
                "success": false,
                "error": format!("Failed to load metadata: {}", e)
            }));
        }
    };
    
    // Fetch and process new files
    let file_service = FileService::new(state.settings.clone());
    match file_service.fetch_and_process_files(&*state.github_service, state.settings.clone(), &mut metadata).await {
        Ok(processed_files) => {
            if processed_files.is_empty() {
                debug!("No new files to process");
                return HttpResponse::Ok().json(serde_json::json!({
                    "success": true,
                    "message": "No updates needed"
                }));
            }
            
            debug!("Processing {} new files", processed_files.len());
            
            // Update metadata in app state
            {
                let mut app_metadata = state.metadata.write().await;
                *app_metadata = metadata.clone();
            }
            
            // Build new graph
            match GraphService::build_graph_from_metadata(&metadata).await {
                Ok(mut new_graph) => {
                    let mut graph = state.graph_service.graph_data.write().await;
                    
                    // Preserve existing node positions
                    let old_positions: HashMap<String, (f32, f32, f32)> = graph.nodes.iter()
                        .map(|node| (node.id.clone(), (node.x(), node.y(), node.z())))
                        .collect();
                    
                    // Update positions in new graph
                    for node in &mut new_graph.nodes {
                        if let Some(&(x, y, z)) = old_positions.get(&node.id) {
                            node.set_x(x);
                            node.set_y(y);
                            node.set_z(z);
                        }
                    }

                    // Calculate layout using GPU if available
                    let settings = state.settings.read().await;
                    let params = settings.graph.simulation_params.clone();
                    drop(settings);

                    if let Err(e) = GraphService::calculate_layout(
                        &state.gpu_compute,
                        &mut new_graph,
                        &params
                    ).await {
                        error!("Failed to calculate layout: {}", e);
                    }
                    
                    *graph = new_graph;
                    debug!("Graph updated successfully");
                    
                    HttpResponse::Ok().json(serde_json::json!({
                        "success": true,
                        "message": format!("Graph updated with {} new files", processed_files.len())
                    }))
                },
                Err(e) => {
                    error!("Failed to build graph: {}", e);
                    HttpResponse::InternalServerError().json(serde_json::json!({
                        "success": false,
                        "error": format!("Failed to build graph: {}", e)
                    }))
                }
            }
        },
        Err(e) => {
            error!("Failed to fetch and process files: {}", e);
            HttpResponse::InternalServerError().json(serde_json::json!({
                "success": false,
                "error": format!("Failed to fetch and process files: {}", e)
            }))
        }
    }
}

----
handlers/socket_flow_handler.rs
use std::sync::Arc;
use actix::prelude::*;
use actix_web::{web, Error, HttpRequest, HttpResponse};
use actix_web_actors::ws;
use tokio::sync::RwLock;
use log::{info, debug, error};
use serde::{Deserialize, Serialize};
use serde_json::json;
use std::time::Duration;

use crate::app_state::AppState;
use crate::config::Settings;

// Constants matching client/state/graphData.ts
const NODE_POSITION_SIZE: usize = 24;  // 6 floats * 4 bytes
const MAX_MESSAGE_SIZE: usize = 1024 * 1024; // 1MB
const MAX_CONNECTIONS: usize = 100;
const HEARTBEAT_INTERVAL: Duration = Duration::from_secs(30);
const CLIENT_TIMEOUT: Duration = Duration::from_secs(60);

#[derive(Debug, Serialize, Deserialize)]
pub struct WebSocketSettings {
    update_rate: u32,
}

pub struct SocketFlowServer {
    app_state: Arc<AppState>,
    settings: Arc<RwLock<Settings>>,
    connection_alive: bool,
    update_handle: Option<SpawnHandle>,
    last_heartbeat: std::time::Instant,
}

impl SocketFlowServer {
    const POSITION_UPDATE_INTERVAL: Duration = Duration::from_millis(16);

    pub fn new(app_state: Arc<AppState>, settings: Arc<RwLock<Settings>>) -> Self {
        Self {
            app_state,
            settings,
            connection_alive: true,
            update_handle: None,
            last_heartbeat: std::time::Instant::now(),
        }
    }

    fn start_position_updates(&mut self, ctx: &mut <Self as Actor>::Context) {
        // Cancel existing interval if any
        if let Some(handle) = self.update_handle.take() {
            ctx.cancel_future(handle);
        }

        // Start heartbeat check
        ctx.run_interval(HEARTBEAT_INTERVAL, |actor, ctx| {
            if std::time::Instant::now().duration_since(actor.last_heartbeat) > CLIENT_TIMEOUT {
                error!("Client heartbeat timeout");
                actor.connection_alive = false;
                ctx.stop();
                return;
            }
            ctx.ping(b"");
        });

        // Clone Arc references for the interval closure
        let app_state = Arc::clone(&self.app_state);
        let settings = Arc::clone(&self.settings);
        
        let handle = ctx.run_interval(Self::POSITION_UPDATE_INTERVAL, move |actor, ctx| {
            // Check connection limit
            let current_connections = actor.app_state.active_connections.load(std::sync::atomic::Ordering::Relaxed);
            if current_connections > MAX_CONNECTIONS {
                error!("Maximum connections reached: {}", current_connections);
                ctx.stop();
                return;
            }

            // Get current node positions and velocities
            let app_state_clone = Arc::clone(&app_state);
            
            // Get update rate from settings
            let update_rate = settings.blocking_read().system.websocket.update_rate;
            let update_interval = Duration::from_secs(1) / update_rate;
            
            if update_interval != Self::POSITION_UPDATE_INTERVAL {
                debug!("Adjusting update interval to {:.2}ms", update_interval.as_secs_f64() * 1000.0);
                // Recreate the interval with the new timing
                if let Some(handle) = actor.update_handle.take() {
                    ctx.cancel_future(handle);
                }
                return;
            }
            
            // Spawn a future to get positions
            let fut = async move {
                let nodes = app_state_clone.graph_service.get_node_positions().await;
                
                // Create binary data: NODE_POSITION_SIZE bytes per node
                let mut binary_data = Vec::with_capacity(nodes.len() * NODE_POSITION_SIZE);
                
                for node in nodes {
                    // Position (x, y, z) and velocity (vx, vy, vz)
                    for i in 0..3 {
                        binary_data.extend_from_slice(&node.data.position[i].to_le_bytes());
                    }
                    for i in 0..3 {
                        binary_data.extend_from_slice(&node.data.velocity[i].to_le_bytes());
                    }
                }
                
                if binary_data.len() > MAX_MESSAGE_SIZE {
                    error!("Binary message size exceeds limit: {}", binary_data.len());
                    return Vec::new();
                }
                
                binary_data
            };
            
            ctx.spawn(fut.into_actor(actor).map(|binary_data, _actor, ctx| {
                if !binary_data.is_empty() {
                    ctx.binary(binary_data);
                }
            }));
        });

        self.update_handle = Some(handle);
    }
}

impl Actor for SocketFlowServer {
    type Context = ws::WebsocketContext<Self>;

    fn started(&mut self, ctx: &mut Self::Context) {
        info!("[WebSocket] Client connected");
        
        // Check connection limit
        let current = self.app_state.active_connections.load(std::sync::atomic::Ordering::Relaxed);
        if current > MAX_CONNECTIONS {
            error!("Maximum connections reached: {}", current);
            ctx.stop();
            return;
        }
        
        self.app_state.increment_connections();
        info!("[WebSocket] Active connections: {}", current);
        self.start_position_updates(ctx);
    }

    fn stopped(&mut self, _ctx: &mut Self::Context) {
        info!("[WebSocket] Client disconnected");
        self.connection_alive = false;
        self.app_state.decrement_connections();
        let current = self.app_state.active_connections.load(std::sync::atomic::Ordering::Relaxed);
        info!("[WebSocket] Remaining active connections: {}", current);
    }
}

impl StreamHandler<Result<ws::Message, ws::ProtocolError>> for SocketFlowServer {
    fn handle(&mut self, msg: Result<ws::Message, ws::ProtocolError>, ctx: &mut Self::Context) {
        match msg {
            Ok(ws::Message::Binary(bin)) => {
                if bin.len() > MAX_MESSAGE_SIZE {
                    error!("[WebSocket] Message too large: {} bytes", bin.len());
                    ctx.stop();
                    return;
                }
                
                // Handle binary node position updates from client
                if bin.len() % NODE_POSITION_SIZE != 0 {
                    error!("[WebSocket] Malformed binary message: length {} is invalid", bin.len());
                    return;
                }
                
                let num_nodes = bin.len() / NODE_POSITION_SIZE;
                let mut positions = Vec::with_capacity(num_nodes);
                
                for i in 0..num_nodes {
                    let mut position = [0.0; 3];
                    let mut velocity = [0.0; 3];
                    
                    // Read position and velocity components
                    for j in 0..3 {
                        let pos_bytes = [
                            bin[i * NODE_POSITION_SIZE + j * 4],
                            bin[i * NODE_POSITION_SIZE + j * 4 + 1],
                            bin[i * NODE_POSITION_SIZE + j * 4 + 2],
                            bin[i * NODE_POSITION_SIZE + j * 4 + 3],
                        ];
                        position[j] = f32::from_le_bytes(pos_bytes);
                        
                        let vel_bytes = [
                            bin[i * NODE_POSITION_SIZE + (j + 3) * 4],
                            bin[i * NODE_POSITION_SIZE + (j + 3) * 4 + 1],
                            bin[i * NODE_POSITION_SIZE + (j + 3) * 4 + 2],
                            bin[i * NODE_POSITION_SIZE + (j + 3) * 4 + 3],
                        ];
                        velocity[j] = f32::from_le_bytes(vel_bytes);
                    }
                    
                    positions.push((position, velocity));
                }
                
                debug!("[WebSocket] Successfully processed {} node position updates", positions.len());
            }
            Ok(ws::Message::Close(reason)) => {
                info!("[WebSocket] Client disconnected: {:?}", reason);
                ctx.stop();
            }
            Ok(ws::Message::Ping(msg)) => {
                debug!("[WebSocket] Received ping");
                ctx.pong(&msg);
            },
            Ok(ws::Message::Pong(_)) => {
                debug!("[WebSocket] Received pong");
            },
            Err(e) => {
                error!("[WebSocket] Protocol error: {}", e);
                ctx.stop();
            }
            _ => () // Ignore other message types
        }
    }
}

pub async fn socket_flow_handler(
    req: HttpRequest,
    stream: web::Payload,
    app_state: web::Data<AppState>,
    settings: web::Data<Arc<RwLock<Settings>>>,
) -> Result<HttpResponse, Error> {
    // Enhanced connection debugging
    info!("[WebSocket] New connection request from {:?}", req.peer_addr());
    debug!("[WebSocket] Headers: {:?}", req.headers());
    debug!("[WebSocket] URI: {:?}", req.uri());
    
    // Check connection limits
    let current_connections = app_state.active_connections.load(std::sync::atomic::Ordering::Relaxed);
    if current_connections >= MAX_CONNECTIONS {
        error!("[WebSocket] Connection limit reached: {}/{}", current_connections, MAX_CONNECTIONS);
        return Ok(HttpResponse::ServiceUnavailable().json(json!({
            "error": "Connection limit reached"
        })));
    }

    // Create server instance
    let server = SocketFlowServer::new(
        app_state.into_inner(),
        settings.get_ref().clone()
    );

    // Start WebSocket connection
    info!("[WebSocket] Starting WebSocket connection");
    match ws::start(server, &req, stream) {
        Ok(response) => {
            info!("[WebSocket] WebSocket connection established successfully");
            Ok(response)
        }
        Err(e) => {
            error!("[WebSocket] Failed to start WebSocket connection: {:?}", e);
            Ok(HttpResponse::InternalServerError().json(json!({
                "error": format!("Failed to start WebSocket connection: {}", e)
            })))
        }
    }
}

pub async fn get_websocket_settings(
    settings: web::Data<Arc<RwLock<Settings>>>
) -> Result<HttpResponse, Error> {
    let settings = settings.read().await;
    let ws_settings = WebSocketSettings {
        update_rate: settings.system.websocket.update_rate,
    };
    
    Ok(HttpResponse::Ok().json(ws_settings))
}

const MAX_UPDATE_RATE: u32 = 120; // Maximum updates per second

pub async fn update_websocket_settings(
    settings: web::Data<Arc<RwLock<Settings>>>,
    new_settings: web::Json<WebSocketSettings>
) -> Result<HttpResponse, Error> {
    // Validate update rate
    if new_settings.update_rate == 0 {
        return Ok(HttpResponse::BadRequest().json(json!({
            "error": "Update rate must be greater than 0"
        })));
    }

    if new_settings.update_rate > MAX_UPDATE_RATE {
        return Ok(HttpResponse::BadRequest().json(json!({
            "error": format!("Update rate cannot exceed {} updates per second", MAX_UPDATE_RATE)
        })));
    }

    let mut settings = settings.write().await;
    settings.system.websocket.update_rate = new_settings.update_rate;
    debug!("[WebSocket] Updated update rate to: {}", new_settings.update_rate);
    
    Ok(HttpResponse::Ok().json(new_settings.0))
}

----
handlers/ragflow_handler.rs
use actix_web::{web, HttpResponse, ResponseError, Responder};
use crate::AppState;
use serde::{Serialize, Deserialize};
use log::error;
use serde_json::json;
use futures::StreamExt;
use actix_web::web::Bytes;
use crate::services::ragflow_service::RAGFlowError;

#[derive(Debug, Deserialize)]
pub struct InitChatRequest {
    pub user_id: String,
}

#[derive(Debug, Serialize)]
pub struct InitChatResponse {
    pub success: bool,
    pub conversation_id: String,
    pub message: Option<String>,
}

#[derive(Serialize, Deserialize)]
pub struct SendMessageRequest {
    pub message: String,
    pub quote: Option<bool>,
    pub doc_ids: Option<Vec<String>>,
    pub stream: Option<bool>,
}

// Implement ResponseError for RAGFlowError
impl ResponseError for RAGFlowError {
    fn error_response(&self) -> HttpResponse {
        HttpResponse::InternalServerError()
            .json(json!({"error": self.to_string()}))
    }
}

/// Handler for sending a message to the RAGFlow service.
pub async fn send_message(
    state: web::Data<AppState>,
    request: web::Json<SendMessageRequest>,
) -> impl Responder {
    let ragflow_service = match &state.ragflow_service {
        Some(service) => service,
        None => return HttpResponse::ServiceUnavailable().json(json!({
            "error": "RAGFlow service is not available"
        }))
    };

    let conversation_id = state.ragflow_conversation_id.clone();
    match ragflow_service.send_message(
        conversation_id,
        request.message.clone(),
        request.quote.unwrap_or(false),
        request.doc_ids.clone(),
        request.stream.unwrap_or(false),
    ).await {
        Ok(response_stream) => {
            let mapped_stream = response_stream.map(|result| {
                result.map(|answer| {
                    let json_response = json!({
                        "answer": answer,
                        "success": true
                    });
                    Bytes::from(json_response.to_string())
                })
                .map_err(actix_web::error::ErrorInternalServerError)
            });
            HttpResponse::Ok().streaming(mapped_stream)
        },
        Err(e) => {
            error!("Error sending message: {}", e);
            HttpResponse::InternalServerError().json(json!({
                "error": format!("Failed to send message: {}", e)
            }))
        }
    }
}

/// Handler for initiating a new chat conversation.
pub async fn init_chat(
    state: web::Data<AppState>,
    request: web::Json<InitChatRequest>,
) -> impl Responder {
    let user_id = request.user_id.clone();
    let ragflow_service = match &state.ragflow_service {
        Some(service) => service,
        None => return HttpResponse::ServiceUnavailable().json(json!({
            "error": "RAGFlow service is not available"
        }))
    };

    match ragflow_service.create_conversation(user_id.clone()).await {
        Ok(conversation_id) => HttpResponse::Ok().json(InitChatResponse {
            success: true,
            conversation_id,
            message: None,
        }),
        Err(e) => {
            error!("Failed to initialize chat: {}", e);
            HttpResponse::InternalServerError().json(json!({
                "error": format!("Failed to initialize chat: {}", e)
            }))
        }
    }
}

/// Handler for retrieving chat history.
pub async fn get_chat_history(
    _state: web::Data<AppState>,
    _conversation_id: web::Path<String>,
) -> impl Responder {
    HttpResponse::NotImplemented().json(json!({
        "message": "Chat history retrieval is not implemented"
    }))
}

----
handlers/perplexity_handler.rs
use crate::AppState;
use actix_web::{post, web, HttpResponse, Responder};
use serde::{Deserialize, Serialize};
use serde_json::json;
use log::{error, info};

#[derive(Debug, Deserialize)]
pub struct PerplexityRequest {
    pub query: String,
    pub conversation_id: Option<String>,
}

#[derive(Debug, Serialize)]
pub struct PerplexityResponse {
    pub answer: String,
    pub conversation_id: String,
}

#[post("")]
pub async fn handle_perplexity(
    state: web::Data<AppState>,
    request: web::Json<PerplexityRequest>,
) -> impl Responder {
    info!("Received perplexity request: {:?}", request);

    let perplexity_service = match &state.perplexity_service {
        Some(service) => service,
        None => return HttpResponse::ServiceUnavailable().json(json!({
            "error": "Perplexity service is not available"
        }))
    };

    let conversation_id = state.ragflow_conversation_id.clone();
    match perplexity_service.query(&request.query, &conversation_id).await {
        Ok(answer) => {
            let response = PerplexityResponse {
                answer,
                conversation_id,
            };
            HttpResponse::Ok().json(response)
        }
        Err(e) => {
            error!("Error processing perplexity request: {}", e);
            HttpResponse::InternalServerError().json(format!("Error: {}", e))
        }
    }
}

----
handlers/settings/websocket.rs
use actix_web::{get, put, web, HttpResponse};
use serde::{Deserialize, Serialize};
use serde_json::Value;
use std::sync::Arc;
use tokio::sync::RwLock;
use log::{debug, error};

use crate::config::Settings;
use crate::handlers::settings::common::{SettingResponse, get_setting_value, update_setting_value};

// Note: Connection keep-alive is handled by WebSocket protocol-level ping/pong frames
// automatically by the actix-web-actors framework on the server and browser WebSocket API
// on the client. No custom heartbeat implementation is needed.
#[derive(Debug, Serialize, Deserialize)]
pub struct WebSocketSettings {
    pub reconnect_attempts: u32,
    pub reconnect_delay: u64,
    pub update_rate: u32,
}

#[get("")]
async fn get_websocket_settings(settings: web::Data<Arc<RwLock<Settings>>>) -> HttpResponse {
    debug!("Getting WebSocket settings");
    let settings = settings.read().await;
    
    match serde_json::to_value(&settings.system.websocket) {
        Ok(settings_value) => {
            debug!("Successfully retrieved WebSocket settings: {:?}", settings_value);
            HttpResponse::Ok().json(SettingResponse {
                category: "websocket".to_string(),
                setting: "all".to_string(),
                value: settings_value,
                success: true,
                error: None,
            })
        },
        Err(e) => {
            error!("Failed to serialize WebSocket settings: {}", e);
            HttpResponse::InternalServerError().json(SettingResponse {
                category: "websocket".to_string(),
                setting: "all".to_string(),
                value: Value::Null,
                success: false,
                error: Some(format!("Failed to serialize WebSocket settings: {}", e)),
            })
        }
    }
}

#[get("/{setting}")]
async fn get_websocket_setting(
    settings: web::Data<Arc<RwLock<Settings>>>,
    path: web::Path<String>,
) -> HttpResponse {
    let setting = path.into_inner();
    let settings = settings.read().await;
    
    debug!("Getting WebSocket setting: {}", setting);
    match get_setting_value(&settings, "websocket", &setting) {
        Ok(value) => {
            debug!("Successfully retrieved WebSocket setting {}: {:?}", setting, value);
            HttpResponse::Ok().json(SettingResponse {
                category: "websocket".to_string(),
                setting: setting.clone(),
                value,
                success: true,
                error: None,
            })
        },
        Err(e) => {
            error!("Failed to get WebSocket setting {}: {}", setting, e);
            HttpResponse::BadRequest().json(SettingResponse {
                category: "websocket".to_string(),
                setting: setting.clone(),
                value: Value::Null,
                success: false,
                error: Some(e),
            })
        }
    }
}

#[put("/{setting}")]
async fn update_websocket_setting(
    settings: web::Data<Arc<RwLock<Settings>>>,
    path: web::Path<String>,
    value: web::Json<Value>,
) -> HttpResponse {
    let setting = path.into_inner();
    let mut settings = settings.write().await;
    
    debug!("Updating WebSocket setting: {} = {:?}", setting, value);
    
    // Validate setting value based on type
    let validation_error = match setting.as_str() {
        "reconnectAttempts" => {
            if let Some(v) = value.as_u64() {
                if v == 0 || v > 10 {
                    Some("reconnectAttempts must be between 1 and 10")
                } else {
                    None
                }
            } else {
                Some("reconnectAttempts must be a positive integer")
            }
        },
        "reconnectDelay" => {
            if let Some(v) = value.as_u64() {
                if !(1..=60000).contains(&v) {
                    Some("reconnectDelay must be between 1 and 60000 milliseconds")
                } else {
                    None
                }
            } else {
                Some("reconnectDelay must be a positive integer")
            }
        },
        "updateRate" => {
            if let Some(v) = value.as_u64() {
                if !(1..=120).contains(&v) {
                    Some("updateRate must be between 1 and 120")
                } else {
                    None
                }
            } else {
                Some("updateRate must be a positive integer")
            }
        },
        _ => None
    };

    if let Some(error_msg) = validation_error {
        error!("WebSocket setting validation failed: {}", error_msg);
        return HttpResponse::BadRequest().json(SettingResponse {
            category: "websocket".to_string(),
            setting: setting.clone(),
            value: Value::Null,
            success: false,
            error: Some(error_msg.to_string()),
        });
    }
    
    match update_setting_value(&mut settings, "websocket", &setting, &value) {
        Ok(_) => {
            debug!("Successfully updated WebSocket setting {}: {:?}", setting, value);
            HttpResponse::Ok().json(SettingResponse {
                category: "websocket".to_string(),
                setting: setting.clone(),
                value: value.into_inner(),
                success: true,
                error: None,
            })
        },
        Err(e) => {
            error!("Failed to update WebSocket setting {}: {}", setting, e);
            HttpResponse::BadRequest().json(SettingResponse {
                category: "websocket".to_string(),
                setting: setting.clone(),
                value: Value::Null,
                success: false,
                error: Some(e),
            })
        }
    }
}

pub fn config(cfg: &mut web::ServiceConfig) {
    cfg
        .service(get_websocket_settings)
        .service(get_websocket_setting)
        .service(update_websocket_setting);
}

----
handlers/settings/visualization.rs
use actix_web::{get, put, web, HttpResponse};
use serde_json::Value;
use std::sync::Arc;
use tokio::sync::RwLock;
use std::collections::HashMap;
use log::{error, debug};

use crate::config::Settings;
use super::common::{SettingResponse, CategorySettingsResponse, CategorySettingsUpdate, get_setting_value, update_setting_value};

// List of categories that make up visualization settings
const VISUALIZATION_CATEGORIES: [&str; 8] = [
    "animations",
    "bloom",
    "edges",
    "hologram",
    "labels",
    "nodes",
    "physics",
    "rendering"
];

#[get("/visualization")]
async fn get_visualization_settings(
    settings: web::Data<Arc<RwLock<Settings>>>,
) -> HttpResponse {
    debug!("Getting all visualization settings");
    
    let settings_guard = settings.read().await;
    let mut combined_settings = HashMap::new();
    
    // Process each category from root level settings
    for category in VISUALIZATION_CATEGORIES.iter() {
        debug!("Processing category: {}", category);
        let category_value = match *category {
            "animations" => serde_json::to_value(&settings_guard.visualization.animations),
            "bloom" => serde_json::to_value(&settings_guard.visualization.bloom),
            "edges" => serde_json::to_value(&settings_guard.visualization.edges),
            "hologram" => serde_json::to_value(&settings_guard.visualization.hologram),
            "labels" => serde_json::to_value(&settings_guard.visualization.labels),
            "nodes" => serde_json::to_value(&settings_guard.visualization.nodes),
            "physics" => serde_json::to_value(&settings_guard.visualization.physics),
            "rendering" => serde_json::to_value(&settings_guard.visualization.rendering),
            _ => continue,
        };

        if let Ok(value) = category_value {
            if let Some(map) = value.as_object() {
                for (key, value) in map {
                    let combined_key = format!("{}_{}", category, key);
                    debug!("Adding setting: {}", combined_key);
                    combined_settings.insert(combined_key, value.clone());
                }
            }
        } else {
            error!("Failed to serialize {} settings", category);
        }
    }

    debug!("Returning {} combined settings", combined_settings.len());
    HttpResponse::Ok().json(CategorySettingsResponse {
        category: "visualization".to_string(),
        settings: combined_settings,
        success: true,
        error: None,
    })
}

#[put("/visualization")]
async fn update_visualization_settings(
    settings: web::Data<Arc<RwLock<Settings>>>,
    update: web::Json<CategorySettingsUpdate>,
) -> HttpResponse {
    debug!("Updating visualization settings");
    let mut settings_guard = settings.write().await;
    let mut success = true;
    let mut error_msg = None;

    for (key, value) in update.settings.iter() {
        // Split the key into category and setting
        let parts: Vec<&str> = key.split('_').collect();
        if parts.len() < 2 {
            error!("Invalid setting key format: {}", key);
            success = false;
            error_msg = Some(format!("Invalid setting key format: {}", key));
            break;
        }

        let category = parts[0];
        let setting = parts[1..].join("_");

        if !VISUALIZATION_CATEGORIES.contains(&category) {
            error!("Invalid category: {}", category);
            success = false;
            error_msg = Some(format!("Invalid category: {}", category));
            break;
        }

        debug!("Updating setting {}.{}", category, setting);
        if let Err(e) = update_setting_value(&mut settings_guard, category, &setting, value) {
            error!("Failed to update setting {}.{}: {}", category, setting, e);
            success = false;
            error_msg = Some(e);
            break;
        }
    }

    HttpResponse::Ok().json(CategorySettingsResponse {
        category: "visualization".to_string(),
        settings: update.settings.clone(),
        success,
        error: error_msg,
    })
}

#[get("/visualization/{category}/{setting}")]
async fn get_visualization_setting(
    settings: web::Data<Arc<RwLock<Settings>>>,
    path: web::Path<(String, String)>,
) -> HttpResponse {
    let (category, setting) = path.into_inner();
    debug!("Getting visualization setting: {}.{}", category, setting);

    if !VISUALIZATION_CATEGORIES.contains(&category.as_str()) {
        error!("Invalid category: {}", category);
        return HttpResponse::BadRequest().json(SettingResponse {
            category: "visualization".to_string(),
            setting: format!("{}.{}", category, setting),
            value: Value::Null,
            success: false,
            error: Some(format!("Invalid category: {}", category)),
        });
    }

    let settings_guard = settings.read().await;

    match get_setting_value(&settings_guard, &category, &setting) {
        Ok(value) => {
            debug!("Successfully retrieved setting value");
            HttpResponse::Ok().json(SettingResponse {
                category: "visualization".to_string(),
                setting: format!("{}.{}", category, setting),
                value,
                success: true,
                error: None,
            })
        },
        Err(e) => {
            error!("Failed to get setting value: {}", e);
            HttpResponse::BadRequest().json(SettingResponse {
                category: "visualization".to_string(),
                setting: format!("{}.{}", category, setting),
                value: Value::Null,
                success: false,
                error: Some(e),
            })
        }
    }
}

#[put("/visualization/{category}/{setting}")]
async fn update_visualization_setting(
    settings: web::Data<Arc<RwLock<Settings>>>,
    path: web::Path<(String, String)>,
    value: web::Json<Value>,
) -> HttpResponse {
    let (category, setting) = path.into_inner();
    debug!("Updating visualization setting: {}.{}", category, setting);

    if !VISUALIZATION_CATEGORIES.contains(&category.as_str()) {
        error!("Invalid category: {}", category);
        return HttpResponse::BadRequest().json(SettingResponse {
            category: "visualization".to_string(),
            setting: format!("{}.{}", category, setting),
            value: value.into_inner(),
            success: false,
            error: Some(format!("Invalid category: {}", category)),
        });
    }

    let mut settings_guard = settings.write().await;

    match update_setting_value(&mut settings_guard, &category, &setting, &value) {
        Ok(_) => {
            debug!("Successfully updated setting value");
            HttpResponse::Ok().json(SettingResponse {
                category: "visualization".to_string(),
                setting: format!("{}.{}", category, setting),
                value: value.into_inner(),
                success: true,
                error: None,
            })
        },
        Err(e) => {
            error!("Failed to update setting value: {}", e);
            HttpResponse::BadRequest().json(SettingResponse {
                category: "visualization".to_string(),
                setting: format!("{}.{}", category, setting),
                value: value.into_inner(),
                success: false,
                error: Some(e),
            })
        }
    }
}

pub fn config(cfg: &mut web::ServiceConfig) {
    cfg.service(get_visualization_settings)
       .service(update_visualization_settings)
       .service(get_visualization_setting)
       .service(update_visualization_setting);
}

----
handlers/settings/mod.rs
use actix_web::{web, get, put, HttpResponse};
use std::sync::Arc;
use tokio::sync::RwLock;
use log::debug;
use serde::{Serialize, Deserialize};
use serde_json::Value;
use std::collections::HashMap;
use crate::config::Settings;
use crate::utils::case_conversion::to_snake_case;

#[derive(Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct SettingResponse {
    pub category: String,
    pub setting: String,
    pub value: Value,
    pub success: bool,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct CategorySettingsResponse {
    pub category: String,
    pub settings: HashMap<String, Value>,
    pub success: bool,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
}

// Helper function to get all settings
fn get_all_settings(settings: &Settings) -> Value {
    debug!("Getting all settings");
    serde_json::to_value(settings.clone()).unwrap_or_default()
}

// Helper function to get setting value from settings object
fn get_setting_value(settings: &Settings, category: &str, setting: &str) -> Result<Value, String> {
    debug!("Getting setting value for {}.{}", category, setting);
    
    // Convert kebab-case to snake_case
    let category_snake = to_snake_case(category);
    let setting_snake = to_snake_case(setting);
    
    // Convert settings to Value for easier access
    let settings_value = serde_json::to_value(settings.clone())
        .map_err(|e| format!("Failed to serialize settings: {}", e))?;
    
    // Get category object
    let category_value = settings_value.get(&category_snake)
        .ok_or_else(|| format!("Category '{}' not found", category))?;
    
    // Get setting value
    let setting_value = category_value.get(&setting_snake)
        .ok_or_else(|| format!("Setting '{}' not found in category '{}'", setting, category))?;
    
    Ok(setting_value.clone())
}

// Helper function to update setting value in settings object
fn update_setting_value(settings: &mut Settings, category: &str, setting: &str, value: &Value) -> Result<(), String> {
    debug!("Updating setting value for {}.{}", category, setting);
    
    // Convert kebab-case to snake_case
    let category_snake = to_snake_case(category);
    let setting_snake = to_snake_case(setting);
    
    // Convert settings to Value for manipulation
    let mut settings_value = serde_json::to_value(settings.clone())
        .map_err(|e| format!("Failed to serialize settings: {}", e))?;
    
    // Get category object
    let category_value = settings_value.get_mut(&category_snake)
        .ok_or_else(|| format!("Category '{}' not found", category))?;
    
    // Update setting value
    if let Some(obj) = category_value.as_object_mut() {
        obj.insert(setting_snake.clone(), value.clone());
        
        // Convert back to Settings
        *settings = serde_json::from_value(settings_value)
            .map_err(|e| format!("Failed to deserialize settings: {}", e))?;
        Ok(())
    } else {
        Err(format!("Category '{}' is not an object", category))
    }
}

// Helper function to get all settings for a category
fn get_category_settings(settings: &Settings, category: &str) -> Result<Value, String> {
    debug!("Getting settings for category: {}", category);
    
    // Convert kebab-case to snake_case
    let category_snake = to_snake_case(category);
    
    // Convert settings to Value
    let settings_value = serde_json::to_value(settings.clone())
        .map_err(|e| format!("Failed to serialize settings: {}", e))?;
    
    // Get category object
    let category_value = settings_value.get(&category_snake)
        .ok_or_else(|| format!("Category '{}' not found", category))?;
    
    Ok(category_value.clone())
}

#[get("")]
async fn get_all_settings_handler(
    settings: web::Data<Arc<RwLock<Settings>>>,
) -> HttpResponse {
    let settings_guard = settings.read().await;
    let settings_value = get_all_settings(&settings_guard);
    HttpResponse::Ok().json(settings_value)
}

#[get("/{category}/{setting}")]
async fn get_setting_handler(
    settings: web::Data<Arc<RwLock<Settings>>>,
    path: web::Path<(String, String)>,
) -> HttpResponse {
    let (category, setting) = path.into_inner();
    let settings_guard = settings.read().await;
    
    match get_setting_value(&settings_guard, &category, &setting) {
        Ok(value) => HttpResponse::Ok().json(SettingResponse {
            category,
            setting,
            value,
            success: true,
            error: None,
        }),
        Err(e) => HttpResponse::NotFound().json(SettingResponse {
            category,
            setting,
            value: Value::Null,
            success: false,
            error: Some(e),
        }),
    }
}

#[put("/{category}/{setting}")]
async fn update_setting_handler(
    settings: web::Data<Arc<RwLock<Settings>>>,
    path: web::Path<(String, String)>,
    value: web::Json<Value>,
) -> HttpResponse {
    let (category, setting) = path.into_inner();
    let mut settings_guard = settings.write().await;
    
    match update_setting_value(&mut settings_guard, &category, &setting, &value) {
        Ok(_) => HttpResponse::Ok().json(SettingResponse {
            category,
            setting,
            value: value.into_inner(),
            success: true,
            error: None,
        }),
        Err(e) => HttpResponse::BadRequest().json(SettingResponse {
            category,
            setting,
            value: value.into_inner(),
            success: false,
            error: Some(e),
        }),
    }
}

#[get("/{category}")]
async fn get_category_settings_handler(
    settings: web::Data<Arc<RwLock<Settings>>>,
    path: web::Path<String>,
) -> HttpResponse {
    let category = path.into_inner();
    let settings_guard = settings.read().await;
    
    match get_category_settings(&settings_guard, &category) {
        Ok(settings) => HttpResponse::Ok().json(CategorySettingsResponse {
            category,
            settings: settings.as_object()
                .map(|obj| obj.iter()
                    .map(|(k, v)| (k.clone(), v.clone()))
                    .collect::<HashMap<String, Value>>())
                .unwrap_or_default(),
            success: true,
            error: None,
        }),
        Err(e) => HttpResponse::NotFound().json(CategorySettingsResponse {
            category,
            settings: HashMap::new(),
            success: false,
            error: Some(e),
        }),
    }
}

pub mod common;
pub mod websocket;
pub mod visualization;

// Register all settings handlers
pub fn config(cfg: &mut web::ServiceConfig) {
    cfg
        .service(get_all_settings_handler)
        .service(get_category_settings_handler)
        .service(get_setting_handler)
        .service(update_setting_handler)
        .service(
            web::scope("/websocket")
                .configure(websocket::config)
        );
}

----
handlers/settings/common.rs
use serde::{Deserialize, Serialize};
use serde_json::Value;
use std::collections::HashMap;
use log::debug;
use crate::config::Settings;
use convert_case::{Case, Casing};

// Convert kebab-case from API to snake_case for internal use
pub fn to_snake_case(s: &str) -> String {
    s.to_case(Case::Snake)
}

// Convert snake_case to kebab-case for API responses
pub fn to_kebab_case(s: &str) -> String {
    s.to_case(Case::Kebab)
}

// Convert nested object keys from snake_case to kebab-case
pub fn convert_to_kebab_case(value: Value) -> Value {
    match value {
        Value::Object(obj) => {
            let mut new_obj = serde_json::Map::new();
            for (k, v) in obj {
                let kebab_key = to_kebab_case(&k);
                new_obj.insert(kebab_key, convert_to_kebab_case(v));
            }
            Value::Object(new_obj)
        }
        Value::Array(arr) => Value::Array(
            arr.into_iter()
               .map(convert_to_kebab_case)
               .collect()
        ),
        v => v,
    }
}

// Convert nested object keys from kebab-case to snake_case
pub fn convert_to_snake_case(value: Value) -> Value {
    match value {
        Value::Object(obj) => {
            let mut new_obj = serde_json::Map::new();
            for (k, v) in obj {
                let snake_key = to_snake_case(&k);
                new_obj.insert(snake_key, convert_to_snake_case(v));
            }
            Value::Object(new_obj)
        }
        Value::Array(arr) => Value::Array(
            arr.into_iter()
               .map(convert_to_snake_case)
               .collect()
        ),
        v => v,
    }
}

#[derive(Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct SettingResponse {
    pub category: String,
    pub setting: String,
    pub value: Value,
    pub success: bool,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct CategorySettingsResponse {
    pub category: String,
    pub settings: HashMap<String, Value>,
    pub success: bool,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct CategorySettingsUpdate {
    pub settings: HashMap<String, Value>,
}

pub fn get_category_settings_value(settings: &Settings, category: &str) -> Result<Value, String> {
    debug!("Getting settings for category: {}", category);
    let category_snake = to_snake_case(category);
    
    let settings_value = serde_json::to_value(settings)
        .map_err(|e| format!("Failed to serialize settings: {}", e))?;
    
    let category_value = settings_value.get(&category_snake)
        .ok_or_else(|| format!("Category '{}' not found", category))?;
    
    // Convert response to kebab-case
    Ok(convert_to_kebab_case(category_value.clone()))
}

pub fn get_setting_value(settings: &Settings, category: &str, setting: &str) -> Result<Value, String> {
    debug!("Getting setting value for {}.{}", category, setting);
    let category_snake = to_snake_case(category);
    let setting_snake = to_snake_case(setting);
    
    let category_value = get_category_settings_value(settings, &category_snake)?;
    
    let setting_value = category_value.get(&setting_snake)
        .ok_or_else(|| format!("Setting '{}' not found", setting))?;
    
    // Convert response to kebab-case
    Ok(convert_to_kebab_case(setting_value.clone()))
}

pub fn update_setting_value(settings: &mut Settings, category: &str, setting: &str, value: &Value) -> Result<(), String> {
    debug!("Updating setting {}.{}", category, setting);
    
    let category_snake = to_snake_case(category);
    let setting_snake = to_snake_case(setting);
    
    // Convert incoming value's keys to snake_case
    let snake_value = convert_to_snake_case(value.clone());
    
    let mut settings_value = serde_json::to_value(&*settings)
        .map_err(|e| format!("Failed to serialize settings: {}", e))?;
    
    if let Some(obj) = settings_value.get_mut(&category_snake)
        .and_then(|v| v.as_object_mut())
    {
        obj.insert(setting_snake.clone(), snake_value);
        *settings = serde_json::from_value(settings_value)
            .map_err(|e| format!("Failed to deserialize settings: {}", e))?;
        Ok(())
    } else {
        Err(format!("Category '{}' not found or invalid", category))
    }
}

pub fn set_field_value<T>(obj: &mut T, field: &str, value: Value) -> Result<(), String> 
where
    T: serde::Serialize + serde::de::DeserializeOwned,
{
    let map = serde_json::to_value(&*obj)
        .map_err(|e| format!("Failed to serialize object: {}", e))?
        .as_object()
        .ok_or_else(|| "Failed to convert object to map".to_string())?
        .clone();

    let mut updated_map = map.clone();
    updated_map.insert(field.to_string(), value);

    *obj = serde_json::from_value(Value::Object(updated_map))
        .map_err(|e| format!("Failed to deserialize updated object: {}", e))?;

    Ok(())
}

----
types/speech.rs
use std::fmt;
use tokio::sync::mpsc::error::SendError;

#[derive(Debug, Clone)]
pub enum TTSProvider {
    OpenAI,
    Sonata,
}

#[derive(Debug)]
pub enum SpeechCommand {
    Initialize,
    SendMessage(String),
    Close,
    SetTTSProvider(TTSProvider),
}

#[derive(Debug)]
pub struct SpeechError {
    message: String,
}

impl fmt::Display for SpeechError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "{}", self.message)
    }
}

impl std::error::Error for SpeechError {}

impl From<SendError<SpeechCommand>> for SpeechError {
    fn from(error: SendError<SpeechCommand>) -> Self {
        SpeechError {
            message: error.to_string(),
        }
    }
}

----
types/mod.rs
pub mod speech;
pub use speech::*;

----
services/perplexity_service.rs
use crate::config::Settings;
use crate::models::metadata::Metadata;
use crate::services::file_service::ProcessedFile;
use chrono::Utc;
use log::{error, info};
use reqwest::Client;
use serde::{Deserialize, Serialize};
use std::error::Error as StdError;
use std::fs;
use std::path::Path;
use std::sync::Arc;
use tokio::sync::RwLock;
use std::collections::HashMap;

const MARKDOWN_DIR: &str = "data/markdown";

#[derive(Debug, Serialize, Deserialize)]
struct PerplexityResponse {
    content: String,
    link: String,
}

#[derive(Debug, Serialize)]
struct QueryRequest {
    query: String,
    conversation_id: String,
    model: String,
    max_tokens: u32,
    temperature: f32,
    top_p: f32,
    presence_penalty: f32,
    frequency_penalty: f32,
}

pub struct PerplexityService {
    client: Client,
    settings: Arc<RwLock<Settings>>,
}

impl PerplexityService {
    pub async fn new(settings: Arc<RwLock<Settings>>) -> Result<Self, Box<dyn StdError + Send + Sync>> {
        let timeout = {
            let settings_read = settings.read().await;
            settings_read.perplexity.timeout
        };

        let client = Client::builder()
            .timeout(std::time::Duration::from_secs(timeout))
            .build()?;

        Ok(Self { 
            client,
            settings: Arc::clone(&settings)
        })
    }

    pub async fn query(&self, query: &str, conversation_id: &str) -> Result<String, Box<dyn StdError + Send + Sync>> {
        let settings = self.settings.read().await;
        let api_url = &settings.perplexity.api_url;
        info!("Sending query to Perplexity API: {}", api_url);

        let request = QueryRequest {
            query: query.to_string(),
            conversation_id: conversation_id.to_string(),
            model: settings.perplexity.model.clone(),
            max_tokens: settings.perplexity.max_tokens,
            temperature: settings.perplexity.temperature,
            top_p: settings.perplexity.top_p,
            presence_penalty: settings.perplexity.presence_penalty,
            frequency_penalty: settings.perplexity.frequency_penalty,
        };

        let response = self.client
            .post(api_url)
            .header("Authorization", format!("Bearer {}", settings.perplexity.api_key))
            .json(&request)
            .send()
            .await?;

        let status = response.status();
        if !status.is_success() {
            let error_text = response.text().await?;
            error!("Perplexity API error: Status: {}, Error: {}", status, error_text);
            return Err(format!("Perplexity API error: {}", error_text).into());
        }

        let perplexity_response: PerplexityResponse = response.json().await?;
        Ok(perplexity_response.content)
    }

    pub async fn process_file(&self, file_name: &str) -> Result<ProcessedFile, Box<dyn StdError + Send + Sync>> {
        let file_path = format!("{}/{}", MARKDOWN_DIR, file_name);
        if !Path::new(&file_path).exists() {
            return Err(format!("File not found: {}", file_name).into());
        }

        let content = fs::read_to_string(&file_path)?;
        let settings = self.settings.read().await;
        
        let api_url = &settings.perplexity.api_url;
        info!("Sending request to Perplexity API: {}", api_url);

        let response = self.client
            .post(api_url)
            .header("Authorization", format!("Bearer {}", settings.perplexity.api_key))
            .json(&content)
            .send()
            .await?;

        let status = response.status();
        if !status.is_success() {
            let error_text = response.text().await?;
            error!("Perplexity API error: Status: {}, Error: {}", status, error_text);
            return Err(format!("Perplexity API error: {}", error_text).into());
        }

        let perplexity_response: PerplexityResponse = response.json().await?;
        
        // Create metadata for processed file
        let metadata = Metadata {
            file_name: file_name.to_string(),
            file_size: perplexity_response.content.len(),
            node_size: 10.0, // Default size
            hyperlink_count: 0,
            sha1: String::new(),
            last_modified: Utc::now(),
            perplexity_link: perplexity_response.link,
            last_perplexity_process: Some(Utc::now()),
            topic_counts: HashMap::new(),
        };

        Ok(ProcessedFile {
            file_name: file_name.to_string(),
            content: perplexity_response.content,
            is_public: true,
            metadata,
        })
    }
}

----
services/file_service.rs
use crate::models::metadata::{Metadata, MetadataStore, MetadataOps};
use crate::models::graph::GraphData;
use crate::config::Settings;
use serde::{Deserialize, Serialize};
use reqwest::Client;
use async_trait::async_trait;
use log::{info, debug, error};
use regex::Regex;
use std::collections::{HashMap, HashSet};
use std::fs;
use std::path::Path;
use chrono::{Utc, DateTime};
use std::sync::Arc;
use tokio::sync::RwLock;
use std::error::Error as StdError;
use std::time::Duration;
use tokio::time::sleep;
use actix_web::web;
use reqwest::Url;

// Constants
const METADATA_PATH: &str = "/app/data/markdown/metadata.json";
pub const MARKDOWN_DIR: &str = "/app/data/markdown";
const GITHUB_API_DELAY: Duration = Duration::from_millis(100); // Rate limiting delay
const MIN_NODE_SIZE: f64 = 5.0;
const MAX_NODE_SIZE: f64 = 50.0;

#[derive(Serialize, Deserialize, Clone)]
pub struct GithubFile {
    pub name: String,
    pub path: String,
    pub sha: String,
    pub size: usize,
    pub url: String,
    pub download_url: String,
}

#[derive(Serialize, Deserialize, Clone, Eq, PartialEq, Hash)]
pub struct GithubFileMetadata {
    pub name: String,
    pub sha: String,
    pub download_url: String,
    pub etag: Option<String>,
    #[serde(with = "chrono::serde::ts_seconds_option")]
    pub last_checked: Option<DateTime<Utc>>,
    #[serde(with = "chrono::serde::ts_seconds_option")]
    pub last_modified: Option<DateTime<Utc>>,
}

#[derive(Serialize, Deserialize, Clone)]
pub struct ProcessedFile {
    pub file_name: String,
    pub content: String,
    pub is_public: bool,
    pub metadata: Metadata,
}

// Structure to hold reference information
#[derive(Default)]
struct ReferenceInfo {
    direct_mentions: usize,
}

#[async_trait]
pub trait GitHubService: Send + Sync {
    async fn fetch_file_metadata(&self, skip_debug_filter: bool) -> Result<Vec<GithubFileMetadata>, Box<dyn StdError + Send + Sync>>;
    async fn get_download_url(&self, file_name: &str) -> Result<Option<String>, Box<dyn StdError + Send + Sync>>;
    async fn fetch_file_content(&self, download_url: &str) -> Result<String, Box<dyn StdError + Send + Sync>>;
    async fn get_file_last_modified(&self, file_path: &str) -> Result<DateTime<Utc>, Box<dyn StdError + Send + Sync>>;
}

pub struct RealGitHubService {
    client: Client,
    token: String,
    owner: String,
    repo: String,
    base_path: String,
    _settings: Arc<RwLock<Settings>>,
}

impl RealGitHubService {
    pub fn new(
        token: String,
        owner: String,
        repo: String,
        base_path: String,
        _settings: Arc<RwLock<Settings>>,
    ) -> Result<Self, Box<dyn std::error::Error + Send + Sync>> {
        let client = Client::builder()
            .user_agent("rust-github-api")
            .timeout(Duration::from_secs(30))
            .build()?;

        // Trim any leading/trailing slashes from base_path
        let base_path = base_path.trim_matches('/').to_string();

        debug!("Initializing GitHub service with base_path: {}", base_path);

        Ok(Self {
            client,
            token,
            owner,
            repo,
            base_path,
            _settings,
        })
    }

    fn encode_url(&self, path: &str) -> Result<String, Box<dyn StdError + Send + Sync>> {
        let base = format!("https://api.github.com/repos/{}/{}/contents", self.owner, self.repo);
        let full_path = if path.is_empty() {
            self.base_path.clone()
        } else if self.base_path.is_empty() {
            path.to_string()
        } else {
            format!("{}/{}", self.base_path, path)
        };

        let url = if full_path.is_empty() {
            base
        } else {
            format!("{}/{}", base, full_path)
        };

        debug!("Constructed GitHub API URL: {}", url);
        Ok(url)
    }
}

#[async_trait]
impl GitHubService for RealGitHubService {
    async fn fetch_file_metadata(&self, skip_debug_filter: bool) -> Result<Vec<GithubFileMetadata>, Box<dyn StdError + Send + Sync>> {
        // Get the contents of the base directory
        let url = format!(
            "https://api.github.com/repos/{}/{}/contents/{}",
            self.owner,
            self.repo,
            self.base_path
        );
        
        debug!("Fetching GitHub metadata from URL: {}", url);

        // Set headers exactly as in the working curl command
        let response = self.client.get(&url)
            .header("Authorization", format!("Bearer {}", self.token))
            .header("Accept", "application/vnd.github+json")
            .send()
            .await?;

        // Get status and headers for debugging
        let status = response.status();
        let headers = response.headers().clone();
        
        debug!("GitHub API response status: {}", status);
        debug!("GitHub API response headers: {:?}", headers);

        // Get response body
        let body = response.text().await?;
        
        // Log the first 1000 characters of the response for debugging
        debug!("GitHub API response preview: {}", &body[..body.len().min(1000)]);

        // Check for error response
        if !status.is_success() {
            let error_msg = match serde_json::from_str::<serde_json::Value>(&body) {
                Ok(error_json) => {
                    let msg = error_json["message"].as_str().unwrap_or("Unknown error");
                    format!("GitHub API error: {} - {}", status, msg)
                },
                Err(_) => format!("GitHub API error: {} - {}", status, body)
            };
            error!("{}", error_msg);
            return Err(error_msg.into());
        }

        // Parse response as array
        let contents: Vec<serde_json::Value> = match serde_json::from_str(&body) {
            Ok(parsed) => parsed,
            Err(e) => {
                error!("Failed to parse GitHub API response: {}", e);
                error!("Response body: {}", body);
                return Err(Box::new(e));
            }
        };

        let settings = self._settings.read().await;
        let debug_enabled = settings.system.debug.enabled;
        drop(settings);
        
        let mut markdown_files = Vec::new();
        
        for item in contents {
            if item["type"].as_str().unwrap_or("") == "file" && 
               item["name"].as_str().unwrap_or("").ends_with(".md") {
                let name = item["name"].as_str().unwrap_or("").to_string();
                
                // In debug mode and not skipping filter, only process Debug Test Page.md and debug linked node.md
                if !skip_debug_filter && debug_enabled && !name.contains("Debug Test Page") && !name.contains("debug linked node") {
                    continue;
                }

                debug!("Processing markdown file: {}", name);
                
                let last_modified = match self.get_file_last_modified(&format!("{}/{}", self.base_path, name)).await {
                    Ok(time) => Some(time),
                    Err(e) => {
                        error!("Failed to get last modified time for {}: {}", name, e);
                        continue;
                    }
                };
                
                markdown_files.push(GithubFileMetadata {
                    name,
                    sha: item["sha"].as_str().unwrap_or("").to_string(),
                    download_url: item["download_url"].as_str().unwrap_or("").to_string(),
                    etag: None,
                    last_checked: Some(Utc::now()),
                    last_modified,
                });
            }
        }

        if debug_enabled {
            info!("Debug mode: Processing only debug test files");
        }

        debug!("Found {} markdown files", markdown_files.len());
        Ok(markdown_files)
    }

    async fn get_download_url(&self, file_name: &str) -> Result<Option<String>, Box<dyn StdError + Send + Sync>> {
        let path = if self.base_path.is_empty() {
            file_name.to_string()
        } else {
            format!("{}/{}", self.base_path, file_name)
        };
        
        let url = self.encode_url(&path)?;

        let response = self.client.get(&url)
            .header("Authorization", format!("Bearer {}", self.token))
            .header("Accept", "application/vnd.github+json")
            .send()
            .await?;

        if response.status().is_success() {
            let file: GithubFile = response.json().await?;
            Ok(Some(file.download_url))
        } else {
            Ok(None)
        }
    }

    async fn fetch_file_content(&self, download_url: &str) -> Result<String, Box<dyn StdError + Send + Sync>> {
        // Parse and validate the download URL
        let parsed_url = Url::parse(download_url)
            .map_err(|e| format!("Invalid download URL: {}", e))?;
            
        let response = self.client.get(parsed_url)
            .header("Authorization", format!("Bearer {}", self.token))
            .header("Accept", "application/vnd.github+json")
            .send()
            .await?;

        let status = response.status();
        if !status.is_success() {
            let error_text = response.text().await?;
            error!("Failed to fetch file content. Status: {}, Error: {}", status, error_text);
            return Err(format!("Failed to fetch file content: {}", error_text).into());
        }

        let content = response.text().await?;
        Ok(content)
    }

    async fn get_file_last_modified(&self, file_path: &str) -> Result<DateTime<Utc>, Box<dyn StdError + Send + Sync>> {
        let url = format!(
            "https://api.github.com/repos/{}/{}/commits",
            self.owner, self.repo
        );

        let response = self.client.get(&url)
            .header("Authorization", format!("Bearer {}", self.token))
            .header("Accept", "application/vnd.github+json")
            .query(&[("path", file_path), ("per_page", "1")])
            .send()
            .await?;

        let status = response.status();
        if !status.is_success() {
            let error_text = response.text().await?;
            error!("Failed to get last modified time. Status: {}, Error: {}", status, error_text);
            return Err(format!("GitHub API error: {} - {}", status, error_text).into());
        }

        let commits: Vec<serde_json::Value> = response.json().await?;
        
        if let Some(last_commit) = commits.first() {
            if let Some(commit) = last_commit["commit"]["committer"]["date"].as_str() {
                if let Ok(date) = DateTime::parse_from_rfc3339(commit) {
                    return Ok(date.with_timezone(&Utc));
                } else {
                    error!("Failed to parse commit date: {}", commit);
                    return Err("Failed to parse commit date from GitHub response".into());
                }
            } else {
                error!("No committer date found in commit data");
                return Err("No committer date found in GitHub response".into());
            }
        } else {
            error!("No commits found for file: {}", file_path);
            return Err(format!("No commit history found for file: {}", file_path).into());
        }
    }
}

pub struct FileService {
    settings: Arc<RwLock<Settings>>,
}

impl FileService {
    pub fn new(settings: Arc<RwLock<Settings>>) -> Self {
        Self { settings }
    }

    /// Process uploaded file and return graph data
    pub async fn process_file_upload(&self, payload: web::Bytes) -> Result<GraphData, Box<dyn StdError + Send + Sync>> {
        let content = String::from_utf8(payload.to_vec())?;
        let metadata = Self::load_or_create_metadata()?;
        let mut graph_data = GraphData::new();
        
        // Create a temporary file to process
        let temp_filename = format!("temp_{}.md", Utc::now().timestamp());
        let temp_path = format!("{}/{}", MARKDOWN_DIR, temp_filename);
        fs::write(&temp_path, &content)?;

        // Extract references and create metadata
        let valid_nodes: Vec<String> = metadata.keys()
            .map(|name| name.trim_end_matches(".md").to_string())
            .collect();

        let references = Self::extract_references(&content, &valid_nodes);
        let topic_counts = Self::convert_references_to_topic_counts(references);

        // Create metadata for the uploaded file
        let file_size = content.len();
        let node_size = Self::calculate_node_size(file_size);
        let file_metadata = Metadata {
            file_name: temp_filename.clone(),
            file_size,
            node_size,
            hyperlink_count: Self::count_hyperlinks(&content),
            sha1: Self::calculate_sha1(&content),
            last_modified: Utc::now(),
            perplexity_link: String::new(),
            last_perplexity_process: None,
            topic_counts,
        };

        // Update graph data
        graph_data.metadata.insert(temp_filename.clone(), file_metadata);

        // Clean up temporary file
        if let Err(e) = fs::remove_file(&temp_path) {
            error!("Failed to remove temporary file: {}", e);
        }

        Ok(graph_data)
    }

    /// List available files
    pub async fn list_files(&self) -> Result<Vec<String>, Box<dyn StdError + Send + Sync>> {
        let metadata = Self::load_or_create_metadata()?;
        Ok(metadata.keys().cloned().collect())
    }

    /// Load a specific file and return graph data
    pub async fn load_file(&self, filename: &str) -> Result<GraphData, Box<dyn StdError + Send + Sync>> {
        let file_path = format!("{}/{}", MARKDOWN_DIR, filename);
        if !Path::new(&file_path).exists() {
            return Err(format!("File not found: {}", filename).into());
        }

        let content = fs::read_to_string(&file_path)?;
        let metadata = Self::load_or_create_metadata()?;
        let mut graph_data = GraphData::new();

        // Extract references and update metadata
        let valid_nodes: Vec<String> = metadata.keys()
            .map(|name| name.trim_end_matches(".md").to_string())
            .collect();

        let references = Self::extract_references(&content, &valid_nodes);
        let topic_counts = Self::convert_references_to_topic_counts(references);

        // Update or create metadata for the file
        let file_size = content.len();
        let node_size = Self::calculate_node_size(file_size);
        let file_metadata = Metadata {
            file_name: filename.to_string(),
            file_size,
            node_size,
            hyperlink_count: Self::count_hyperlinks(&content),
            sha1: Self::calculate_sha1(&content),
            last_modified: Utc::now(),
            perplexity_link: String::new(),
            last_perplexity_process: None,
            topic_counts,
        };

        // Update graph data
        graph_data.metadata.insert(filename.to_string(), file_metadata);
        
        Ok(graph_data)
    }

    /// Load metadata from file or create new if not exists
    pub fn load_or_create_metadata() -> Result<MetadataStore, Box<dyn StdError + Send + Sync>> {
        if Path::new(METADATA_PATH).exists() {
            let content = fs::read_to_string(METADATA_PATH)?;
            if !content.trim().is_empty() {
                return Ok(serde_json::from_str(&content)?);
            }
        }
        Ok(MetadataStore::new())
    }

    /// Calculate node size based on file size
    fn calculate_node_size(file_size: usize) -> f64 {
        // Use logarithmic scaling for node size
        let size = if file_size == 0 {
            MIN_NODE_SIZE
        } else {
            let log_size = (file_size as f64).ln();
            let min_log = 0f64;
            let max_log = (100_000f64).ln(); // Assuming 100KB as max expected size
            
            let normalized = (log_size - min_log) / (max_log - min_log);
            MIN_NODE_SIZE + normalized * (MAX_NODE_SIZE - MIN_NODE_SIZE)
        };
        
        size.clamp(MIN_NODE_SIZE, MAX_NODE_SIZE)
    }

    /// Extract references to other files based on their names (case insensitive)
    fn extract_references(content: &str, valid_nodes: &[String]) -> HashMap<String, ReferenceInfo> {
        let mut references = HashMap::new();
        let content_lower = content.to_lowercase();
        
        for node_name in valid_nodes {
            let mut ref_info = ReferenceInfo::default();
            let node_name_lower = node_name.to_lowercase();
            
            // Create a regex pattern with word boundaries
            let pattern = format!(r"\b{}\b", regex::escape(&node_name_lower));
            if let Ok(re) = Regex::new(&pattern) {
                // Count case-insensitive matches of the filename
                let count = re.find_iter(&content_lower).count();
                
                // If we found any references, add them to the map
                if count > 0 {
                    debug!("Found {} references to {} in content", count, node_name);
                    ref_info.direct_mentions = count;
                    references.insert(format!("{}.md", node_name), ref_info);
                }
            }
        }
        
        references
    }

    fn convert_references_to_topic_counts(references: HashMap<String, ReferenceInfo>) -> HashMap<String, usize> {
        references.into_iter()
            .map(|(name, info)| {
                debug!("Converting reference for {} with {} mentions", name, info.direct_mentions);
                (name, info.direct_mentions)
            })
            .collect()
    }

    /// Initialize the local markdown directory and metadata structure.
    pub async fn initialize_local_storage(
        github_service: &dyn GitHubService,
        _settings: Arc<RwLock<Settings>>,
    ) -> Result<(), Box<dyn StdError + Send + Sync>> {
        info!("Checking local storage status");
        
        // Ensure required directories exist
        Self::ensure_directories()?;

        // Check if we already have a valid local setup
        if Self::has_valid_local_setup() {
            info!("Valid local setup found, skipping initialization");
            return Ok(());
        }

        info!("Initializing local storage with files from GitHub");

        // Step 1: Get all markdown files from GitHub
        let github_files = github_service.fetch_file_metadata(false).await?;
        info!("Found {} markdown files in GitHub", github_files.len());

        let mut file_sizes = HashMap::new();
        let mut file_contents = HashMap::new();
        let mut file_metadata = HashMap::new();
        let mut metadata_store = MetadataStore::new();
        
        // Step 2: First pass - collect all files and their contents
        for file_meta in github_files {
            match github_service.fetch_file_content(&file_meta.download_url).await {
                Ok(content) => {
                    // Check if file starts with "public:: true"
                    let first_line = content.lines().next().unwrap_or("").trim();
                    if first_line != "public:: true" {
                        debug!("Skipping non-public file: {}", file_meta.name);
                        continue;
                    }

                    let node_name = file_meta.name.trim_end_matches(".md").to_string();
                    file_sizes.insert(node_name.clone(), content.len());
                    file_contents.insert(node_name, content);
                    file_metadata.insert(file_meta.name.clone(), file_meta);
                }
                Err(e) => {
                    error!("Failed to fetch content for {}: {}", file_meta.name, e);
                }
            }
            sleep(GITHUB_API_DELAY).await;
        }

        // Get list of valid node names (filenames without .md)
        let valid_nodes: Vec<String> = file_contents.keys().cloned().collect();

        // Step 3: Second pass - extract references and create metadata
        for (node_name, content) in &file_contents {
            let file_name = format!("{}.md", node_name);
            let file_path = format!("{}/{}", MARKDOWN_DIR, file_name);
            
            // Calculate SHA1 of content
            let local_sha1 = Self::calculate_sha1(content);
            
            // Save file content
            fs::write(&file_path, content)?;

            // Extract references
            let references = Self::extract_references(content, &valid_nodes);
            let topic_counts = Self::convert_references_to_topic_counts(references);

            // Get GitHub metadata
            let github_meta = file_metadata.get(&file_name).unwrap();
            let last_modified = github_meta.last_modified.unwrap_or(Utc::now());

            // Calculate node size
            let file_size = *file_sizes.get(node_name).unwrap();
            let node_size = Self::calculate_node_size(file_size);

            // Create metadata entry
            let metadata = Metadata {
                file_name: file_name.clone(),
                file_size,
                node_size,
                hyperlink_count: Self::count_hyperlinks(content),
                sha1: local_sha1,
                last_modified,
                perplexity_link: String::new(),
                last_perplexity_process: None,
                topic_counts,
            };

            metadata_store.insert(file_name, metadata);
        }

        // Step 4: Save metadata
        info!("Saving metadata for {} public files", metadata_store.len());
        Self::save_metadata(&metadata_store)?;

        info!("Initialization complete. Processed {} public files", metadata_store.len());

        Ok(())
    }

    /// Check if we have a valid local setup
    fn has_valid_local_setup() -> bool {
        if let Ok(metadata_content) = fs::read_to_string(METADATA_PATH) {
            if metadata_content.trim().is_empty() {
                return false;
            }
            
            if let Ok(metadata) = serde_json::from_str::<MetadataStore>(&metadata_content) {
                return metadata.validate_files(MARKDOWN_DIR);
            }
        }
        false
    }

    /// Ensures all required directories exist with proper permissions
    fn ensure_directories() -> Result<(), Box<dyn StdError + Send + Sync>> {
        // Create parent data directory first
        let data_dir = Path::new("/app/data");
        if !data_dir.exists() {
            info!("Creating data directory at {:?}", data_dir);
            fs::create_dir_all(data_dir)?;
            // Set permissions to allow writing
            #[cfg(unix)]
            {
                use std::os::unix::fs::PermissionsExt;
                fs::set_permissions(data_dir, fs::Permissions::from_mode(0o777))?;
            }
        }

        // Create markdown directory
        let markdown_dir = Path::new(MARKDOWN_DIR);
        if !markdown_dir.exists() {
            info!("Creating markdown directory at {:?}", markdown_dir);
            fs::create_dir_all(markdown_dir)?;
            // Set permissions to allow writing
            #[cfg(unix)]
            {
                use std::os::unix::fs::PermissionsExt;
                fs::set_permissions(markdown_dir, fs::Permissions::from_mode(0o777))?;
            }
        }

        // Create metadata directory if it doesn't exist
        let metadata_dir = Path::new(METADATA_PATH).parent().unwrap();
        if !metadata_dir.exists() {
            info!("Creating metadata directory at {:?}", metadata_dir);
            fs::create_dir_all(metadata_dir)?;
            // Set permissions to allow writing
            #[cfg(unix)]
            {
                use std::os::unix::fs::PermissionsExt;
                fs::set_permissions(metadata_dir, fs::Permissions::from_mode(0o777))?;
            }
        }

        // Verify permissions by attempting to create a test file
        let test_file = format!("{}/test_permissions", MARKDOWN_DIR);
        match fs::write(&test_file, "test") {
            Ok(_) => {
                info!("Successfully wrote test file to {}", test_file);
                fs::remove_file(&test_file)?;
                info!("Successfully removed test file");
                info!("Directory permissions verified");
                Ok(())
            },
            Err(e) => {
                error!("Failed to verify directory permissions: {}", e);
                error!("Current directory: {:?}", std::env::current_dir()?);
                error!("Directory contents: {:?}", fs::read_dir(MARKDOWN_DIR)?);
                Err(Box::new(e))
            }
        }
    }

    /// Handles incremental updates after initial setup
    pub async fn fetch_and_process_files(
        &self,
        github_service: &dyn GitHubService,
        _settings: Arc<RwLock<Settings>>,
        metadata_store: &mut MetadataStore,
    ) -> Result<Vec<ProcessedFile>, Box<dyn StdError + Send + Sync>> {
        // Ensure directories exist before any operations
        Self::ensure_directories()?;

        // Get metadata for markdown files in target directory
        let settings = self.settings.read().await;
        let skip_debug_filter = !settings.system.debug.enabled;
        drop(settings);
        let github_files_metadata = github_service.fetch_file_metadata(skip_debug_filter).await?;
        debug!("Fetched metadata for {} markdown files", github_files_metadata.len());

        let mut processed_files = Vec::new();

        // Save current metadata
        Self::save_metadata(metadata_store)?;

        // Clean up local files that no longer exist in GitHub
        let github_files: HashSet<_> = github_files_metadata.iter()
            .map(|meta| meta.name.clone())
            .collect();

        let local_files: HashSet<_> = metadata_store.keys().cloned().collect();
        let removed_files: Vec<_> = local_files.difference(&github_files).collect();

        for file_name in removed_files {
            let file_path = format!("{}/{}", MARKDOWN_DIR, file_name);
            if let Err(e) = fs::remove_file(&file_path) {
                error!("Failed to remove file {}: {}", file_path, e);
            }
            metadata_store.remove(file_name);
        }

        // Get list of valid node names (filenames without .md)
        let valid_nodes: Vec<String> = github_files_metadata.iter()
            .map(|f| f.name.trim_end_matches(".md").to_string())
            .collect();

        // Process files that need updating
        let files_to_process: Vec<_> = github_files_metadata.into_iter()
            .filter(|file_meta| {
                let local_meta = metadata_store.get(&file_meta.name);
                local_meta.map_or(true, |meta| meta.sha1 != file_meta.sha)
            })
            .collect();

        // Process each file
        for file_meta in files_to_process {
            match github_service.fetch_file_content(&file_meta.download_url).await {
                Ok(content) => {
                    let first_line = content.lines().next().unwrap_or("").trim();
                    if first_line != "public:: true" {
                        debug!("Skipping non-public file: {}", file_meta.name);
                        continue;
                    }

                    let file_path = format!("{}/{}", MARKDOWN_DIR, file_meta.name);
                    fs::write(&file_path, &content)?;

                    // Extract references
                    let references = Self::extract_references(&content, &valid_nodes);
                    let topic_counts = Self::convert_references_to_topic_counts(references);

                    // Calculate node size
                    let file_size = content.len();
                    let node_size = Self::calculate_node_size(file_size);

                    let new_metadata = Metadata {
                        file_name: file_meta.name.clone(),
                        file_size,
                        node_size,
                        hyperlink_count: Self::count_hyperlinks(&content),
                        sha1: Self::calculate_sha1(&content),
                        last_modified: file_meta.last_modified.unwrap_or(Utc::now()),
                        perplexity_link: String::new(),
                        last_perplexity_process: None,
                        topic_counts,
                    };

                    metadata_store.insert(file_meta.name.clone(), new_metadata.clone());
                    processed_files.push(ProcessedFile {
                        file_name: file_meta.name,
                        content,
                        is_public: true,
                        metadata: new_metadata,
                    });
                }
                Err(e) => {
                    error!("Failed to fetch content: {}", e);
                }
            }
            sleep(GITHUB_API_DELAY).await;
        }

        // Save updated metadata
        Self::save_metadata(metadata_store)?;

        Ok(processed_files)
    }

    /// Save metadata to file
    pub fn save_metadata(metadata: &MetadataStore) -> Result<(), Box<dyn StdError + Send + Sync>> {
        let json = serde_json::to_string_pretty(metadata)?;
        fs::write(METADATA_PATH, json)?;
        Ok(())
    }

    /// Calculate SHA1 hash of content
    fn calculate_sha1(content: &str) -> String {
        use sha1::{Sha1, Digest};
        let mut hasher = Sha1::new();
        hasher.update(content.as_bytes());
        format!("{:x}", hasher.finalize())
    }

    /// Count hyperlinks in content
    fn count_hyperlinks(content: &str) -> usize {
        let re = Regex::new(r"\[([^\]]+)\]\(([^)]+)\)").unwrap();
        re.find_iter(content).count()
    }
}

----
services/graph_service.rs
use std::sync::Arc;
use tokio::sync::RwLock;
use std::collections::{HashMap, HashSet};
use actix_web::web;
use log::{info, warn, error, debug};
use rand::Rng;
use serde_json;

use crate::models::graph::GraphData;
use crate::utils::socket_flow_messages::Node;
use crate::models::edge::Edge;
use crate::models::metadata::MetadataStore;
use crate::app_state::AppState;
use crate::utils::gpu_compute::GPUCompute;
use crate::models::simulation_params::SimulationParams;
use crate::models::pagination::PaginatedGraphData;
use crate::services::file_service::FileService;

#[derive(Clone)]
pub struct GraphService {
    pub graph_data: Arc<RwLock<GraphData>>,
}

impl Default for GraphService {
    fn default() -> Self {
        Self::new()
    }
}

impl GraphService {
    pub fn new() -> Self {
        Self {
            graph_data: Arc::new(RwLock::new(GraphData::default())),
        }
    }

    pub async fn new_with_metadata(metadata_store: &MetadataStore) -> Self {
        let graph_data = Self::build_graph_from_metadata(metadata_store)
            .await
            .unwrap_or_else(|e| {
                error!("Failed to build graph from metadata: {}", e);
                GraphData::default()
            });
        
        Self {
            graph_data: Arc::new(RwLock::new(graph_data)),
        }
    }

    pub async fn build_graph_from_metadata(metadata_store: &MetadataStore) -> Result<GraphData, Box<dyn std::error::Error>> {
        let mut graph = GraphData::new();
        let mut edge_map = HashMap::new();

        info!("Building graph from {} metadata entries", metadata_store.len());

        // First pass: Create nodes from files in metadata
        let mut valid_nodes = HashSet::new();
        for file_name in metadata_store.keys() {
            let node_id = file_name.trim_end_matches(".md").to_string();
            valid_nodes.insert(node_id);
        }
        debug!("Found {} valid nodes in metadata", valid_nodes.len());

        // Create nodes for all valid node IDs
        for node_id in &valid_nodes {
            let mut node = Node::new(node_id.clone());
            
            // Get metadata for this node
            if let Some(metadata) = metadata_store.get(&format!("{}.md", node_id)) {
                node.size = Some(metadata.node_size as f32);
                node.file_size = metadata.file_size as u64;
                node.label = node_id.clone(); // Set label to node ID (filename without .md)
                
                // Add metadata fields to node's metadata map
                node.metadata.insert("fileSize".to_string(), metadata.file_size.to_string());
                node.metadata.insert("hyperlinkCount".to_string(), metadata.hyperlink_count.to_string());
                node.metadata.insert("lastModified".to_string(), metadata.last_modified.to_string());

                debug!("Created node {} with size={}, file_size={}", 
                    node_id, 
                    node.size.unwrap_or(0.0), 
                    node.file_size
                );
            } else {
                error!("No metadata found for node {}", node_id);
                return Err(format!("Missing metadata for node {}", node_id).into());
            }
            
            // Add node to graph
            graph.nodes.push(node);
        }

        // Store metadata in graph
        graph.metadata = metadata_store.clone();

        // Second pass: Create edges from topic counts
        let mut edge_count = 0;
        for (source_file, metadata) in metadata_store.iter() {
            let source_id = source_file.trim_end_matches(".md").to_string();
            
            for (target_file, count) in &metadata.topic_counts {
                let target_id = target_file.trim_end_matches(".md").to_string();
                
                // Only create edge if both nodes exist and they're different
                if source_id != target_id && valid_nodes.contains(&target_id) {
                    let edge_key = if source_id < target_id {
                        (source_id.clone(), target_id.clone())
                    } else {
                        (target_id.clone(), source_id.clone())
                    };

                    if let Some(existing_count) = edge_map.get_mut(&edge_key) {
                        *existing_count += *count as f32;
                        debug!("Updated edge weight for {:?} to {}", edge_key, existing_count);
                    } else {
                        edge_map.insert(edge_key, *count as f32);
                        edge_count += 1;
                        if edge_count % 100 == 0 {
                            debug!("Created {} edges so far", edge_count);
                        }
                    }
                }
            }
        }

        // Create final edges from edge map
        for ((source, target), weight) in edge_map {
            let edge = Edge::new(source, target, weight);
            graph.edges.push(edge);
        }

        info!("Completed graph building with {} nodes and {} edges", graph.nodes.len(), graph.edges.len());
        
        // Validate final graph
        if graph.nodes.is_empty() {
            error!("Generated graph has no nodes");
            return Err("Generated graph has no nodes".into());
        }

        if graph.edges.is_empty() {
            warn!("Generated graph has no edges");
        }

        Ok(graph)
    }

    pub async fn build_graph(state: &web::Data<AppState>) -> Result<GraphData, Box<dyn std::error::Error + Send + Sync>> {
        let current_graph = state.graph_service.graph_data.read().await;
        let mut graph = GraphData::new();

        // Copy metadata from current graph
        graph.metadata = current_graph.metadata.clone();

        let mut edge_map = HashMap::new();

        // Create nodes from metadata entries
        let mut valid_nodes = HashSet::new();
        for file_name in graph.metadata.keys() {
            let node_id = file_name.trim_end_matches(".md").to_string();
            valid_nodes.insert(node_id);
        }

        // Create nodes for all valid node IDs
        for node_id in &valid_nodes {
            let mut node = Node::new(node_id.clone());
            
            // Get metadata for this node
            if let Some(metadata) = graph.metadata.get(&format!("{}.md", node_id)) {
                node.size = Some(metadata.node_size as f32);
                node.file_size = metadata.file_size as u64;
                node.label = node_id.clone(); // Set label to node ID (filename without .md)
                
                // Add metadata fields to node's metadata map
                node.metadata.insert("fileSize".to_string(), metadata.file_size.to_string());
                node.metadata.insert("hyperlinkCount".to_string(), metadata.hyperlink_count.to_string());
                node.metadata.insert("lastModified".to_string(), metadata.last_modified.to_string());
            }
            
            graph.nodes.push(node);
        }

        // Create edges from metadata topic counts
        for (source_file, metadata) in graph.metadata.iter() {
            let source_id = source_file.trim_end_matches(".md").to_string();
            
            // Process outbound links from this file to other topics
            for (target_file, count) in &metadata.topic_counts {
                let target_id = target_file.trim_end_matches(".md").to_string();
                
                // Only create edge if both nodes exist and they're different
                if source_id != target_id && valid_nodes.contains(&target_id) {
                    let edge_key = if source_id < target_id {
                        (source_id.clone(), target_id.clone())
                    } else {
                        (target_id.clone(), source_id.clone())
                    };

                    // Sum the weights for bi-directional references
                    edge_map.entry(edge_key)
                        .and_modify(|w| *w += *count as f32)
                        .or_insert(*count as f32);
                }
            }
        }

        // Convert edge map to edges
        graph.edges = edge_map.into_iter()
            .map(|((source, target), weight)| {
                Edge::new(source, target, weight)
            })
            .collect();

        // Initialize random positions for all nodes
        Self::initialize_random_positions(&mut graph);

        info!("Built graph with {} nodes and {} edges", graph.nodes.len(), graph.edges.len());
        Ok(graph)
    }

    fn initialize_random_positions(graph: &mut GraphData) {
        let mut rng = rand::thread_rng();
        let initial_radius = 100.0; // Match default spring length
        
        debug!("Initializing random positions for {} nodes with radius {}", graph.nodes.len(), initial_radius);
        
        for node in &mut graph.nodes {
            // Use spherical coordinates for uniform distribution
            let theta = rng.gen_range(0.0..std::f32::consts::PI * 2.0);
            let phi = rng.gen_range(0.0..std::f32::consts::PI);
            let r = initial_radius * rng.gen::<f32>().cbrt(); // Cube root for uniform volume distribution
            
            // Convert to Cartesian coordinates
            let x = r * theta.cos() * phi.sin();
            let y = r * theta.sin() * phi.sin();
            let z = r * phi.cos();
            
            // Validate coordinates before setting
            if !x.is_finite() || !y.is_finite() || !z.is_finite() {
                warn!("Generated invalid position for node {}: [{}, {}, {}]", node.id, x, y, z);
                // Use fallback position
                node.set_x(0.0);
                node.set_y(0.0);
                node.set_z(0.0);
            } else {
                node.set_x(x);
                node.set_y(y);
                node.set_z(z);
                debug!("Set position for node {}: [{}, {}, {}]", node.id, x, y, z);
            }
            
            // Initialize velocities to zero
            node.set_vx(0.0);
            node.set_vy(0.0);
            node.set_vz(0.0);
        }
        
        debug!("Finished initializing random positions");
    }

    pub async fn calculate_layout(
        gpu_compute: &Option<Arc<RwLock<GPUCompute>>>,
        graph: &mut GraphData,
        params: &SimulationParams,
    ) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
        // Initialize positions if needed, regardless of GPU availability
        if graph.nodes.iter().all(|n| n.x() == 0.0 && n.y() == 0.0 && n.z() == 0.0) {
            Self::initialize_random_positions(graph);
        }

        // Only proceed with force-directed layout if GPU is available
        if let Some(gpu) = gpu_compute {
            info!("Using GPU for layout calculation");
            let mut gpu_compute = gpu.write().await;
            
            gpu_compute.update_graph_data(graph)?;
            gpu_compute.update_simulation_params(params)?;
            
            // Run iterations with more frequent updates
            for _ in 0..params.iterations {
                gpu_compute.step()?;
                
                // Update positions every iteration for smoother motion
                let updated_nodes = gpu_compute.get_node_data()?;
                for (i, node) in graph.nodes.iter_mut().enumerate() {
                    node.update_from_gpu_node(&updated_nodes[i]);
                }
            }
        } else {
            info!("GPU not available. Using CPU-based force-directed layout.");
            
            // Simple force-directed layout on CPU
            let repulsion = params.repulsion;
            let spring = params.spring_strength;
            let damping = params.damping;
            let dt = params.time_step;
            
            for _ in 0..params.iterations {
                // Calculate forces for each node
                let mut forces = vec![[0.0f32; 3]; graph.nodes.len()];
                
                // Repulsion forces between all nodes
                for i in 0..graph.nodes.len() {
                    for j in (i + 1)..graph.nodes.len() {
                        let dx = graph.nodes[j].x() - graph.nodes[i].x();
                        let dy = graph.nodes[j].y() - graph.nodes[i].y();
                        let dz = graph.nodes[j].z() - graph.nodes[i].z();
                        
                        let dist = (dx * dx + dy * dy + dz * dz).sqrt().max(0.1);
                        let force = repulsion / (dist * dist);
                        
                        let fx = dx / dist * force;
                        let fy = dy / dist * force;
                        let fz = dz / dist * force;
                        
                        forces[i][0] -= fx;
                        forces[i][1] -= fy;
                        forces[i][2] -= fz;
                        forces[j][0] += fx;
                        forces[j][1] += fy;
                        forces[j][2] += fz;
                    }
                }
                
                // Spring forces along edges
                for edge in &graph.edges {
                    let source_idx = graph.nodes.iter().position(|n| n.id == edge.source).unwrap();
                    let target_idx = graph.nodes.iter().position(|n| n.id == edge.target).unwrap();
                    
                    let dx = graph.nodes[target_idx].x() - graph.nodes[source_idx].x();
                    let dy = graph.nodes[target_idx].y() - graph.nodes[source_idx].y();
                    let dz = graph.nodes[target_idx].z() - graph.nodes[source_idx].z();
                    
                    let dist = (dx * dx + dy * dy + dz * dz).sqrt().max(0.1);
                    let force = spring * (dist - params.spring_length) * edge.weight;
                    
                    let fx = dx / dist * force;
                    let fy = dy / dist * force;
                    let fz = dz / dist * force;
                    
                    forces[source_idx][0] += fx;
                    forces[source_idx][1] += fy;
                    forces[source_idx][2] += fz;
                    forces[target_idx][0] -= fx;
                    forces[target_idx][1] -= fy;
                    forces[target_idx][2] -= fz;
                }
                
                // Update velocities and positions
                for (i, node) in graph.nodes.iter_mut().enumerate() {
                    // Update velocity with damping
                    node.set_vx(node.vx() * damping + forces[i][0] * dt);
                    node.set_vy(node.vy() * damping + forces[i][1] * dt);
                    node.set_vz(node.vz() * damping + forces[i][2] * dt);
                    
                    // Update position
                    node.set_x(node.x() + node.vx() * dt);
                    node.set_y(node.y() + node.vy() * dt);
                    node.set_z(node.z() + node.vz() * dt);
                    
                    // Clamp positions to prevent nodes from flying too far
                    let max_pos = 1000.0;
                    node.set_x(node.x().clamp(-max_pos, max_pos));
                    node.set_y(node.y().clamp(-max_pos, max_pos));
                    node.set_z(node.z().clamp(-max_pos, max_pos));
                }
            }
        }
        Ok(())
    }

    pub async fn get_paginated_graph_data(
        &self,
        page: u32,
        page_size: u32,
    ) -> Result<PaginatedGraphData, Box<dyn std::error::Error + Send + Sync>> {
        let graph = self.graph_data.read().await;
        
        // Convert page and page_size to usize for vector operations
        let page = page as usize;
        let page_size = page_size as usize;
        let total_nodes = graph.nodes.len();
        
        let start = page * page_size;
        let end = std::cmp::min((page + 1) * page_size, total_nodes);

        let page_nodes: Vec<Node> = graph.nodes
            .iter()
            .skip(start)
            .take(end - start)
            .cloned()
            .collect();

        // Get edges that connect to these nodes
        let node_ids: HashSet<String> = page_nodes.iter()
            .map(|n| n.id.clone())
            .collect();

        let edges: Vec<Edge> = graph.edges
            .iter()
            .filter(|e| node_ids.contains(&e.source) || node_ids.contains(&e.target))
            .cloned()
            .collect();

        Ok(PaginatedGraphData {
            nodes: page_nodes,
            edges: edges.clone(),
            metadata: serde_json::to_value(graph.metadata.clone()).unwrap_or_default(),
            total_nodes,
            total_edges: graph.edges.len(),
            total_pages: ((total_nodes as f32 / page_size as f32).ceil()) as u32,
            current_page: page as u32,
        })
    }

    pub async fn get_node_positions(&self) -> Vec<Node> {
        let graph = self.graph_data.read().await;
        graph.nodes.clone()
    }

    pub async fn update_graph(&self) -> Result<GraphData, String> {
        info!("Updating graph data");

        // Load or create metadata
        let metadata_store = match FileService::load_or_create_metadata() {
            Ok(store) => store,
            Err(e) => {
                error!("Failed to load metadata: {}", e);
                return Err(format!("Failed to load metadata: {}", e));
            }
        };

        info!("Loaded metadata with {} entries", metadata_store.len());

        // Build graph from metadata
        let graph = match Self::build_graph_from_metadata(&metadata_store).await {
            Ok(g) => g,
            Err(e) => {
                error!("Failed to build graph: {}", e);
                return Err(format!("Failed to build graph: {}", e));
            }
        };

        Ok(graph)
    }
}

----
services/mod.rs
pub mod file_service;
pub mod github_service;
pub mod graph_service;
pub mod perplexity_service;
pub mod ragflow_service;
pub mod speech_service;

----
services/speech_service.rs
use tokio::sync::{mpsc, Mutex, RwLock};
use tokio_tungstenite::{connect_async, WebSocketStream, MaybeTlsStream};
use tungstenite::protocol::Message;
use tungstenite::http::Request;
use serde_json::json;
use std::sync::Arc;
use tokio::task;
use crate::config::Settings;
use log::{info, error, debug};
use futures::{SinkExt, StreamExt};
use std::error::Error;
use tokio::net::TcpStream;
use url::Url;
use std::process::{Command, Stdio};
use std::io::Write;
use base64::Engine as _;
use base64::engine::general_purpose::STANDARD as BASE64;
use crate::types::speech::{SpeechError, SpeechCommand, TTSProvider};

pub struct SpeechService {
    sender: Arc<Mutex<mpsc::Sender<SpeechCommand>>>,
    settings: Arc<RwLock<Settings>>,
    tts_provider: Arc<RwLock<TTSProvider>>,
}

impl SpeechService {
    pub fn new(settings: Arc<RwLock<Settings>>) -> Self {
        let (tx, rx) = mpsc::channel(100);
        let sender = Arc::new(Mutex::new(tx));

        let service = SpeechService {
            sender,
            settings,
            tts_provider: Arc::new(RwLock::new(TTSProvider::Sonata)),
        };

        service.start(rx);
        service
    }

    fn start(&self, mut receiver: mpsc::Receiver<SpeechCommand>) {
        let settings = Arc::clone(&self.settings);
        let tts_provider: Arc<RwLock<TTSProvider>> = Arc::clone(&self.tts_provider);

        task::spawn(async move {
            let mut ws_stream: Option<WebSocketStream<MaybeTlsStream<TcpStream>>> = None;

            while let Some(command) = receiver.recv().await {
                match command {
                    SpeechCommand::Initialize => {
                        let current_provider = tts_provider.read().await;
                        if let TTSProvider::OpenAI = *current_provider {
                            let settings = settings.read().await;
                            
                            let url = "wss://api.openai.com/v1/realtime?model=gpt-4o-realtime-preview-2024-10-01".to_string();
                            let url = match Url::parse(&url) {
                                Ok(url) => url,
                                Err(e) => {
                                    error!("Failed to parse OpenAI URL: {}", e);
                                    continue;
                                }
                            };
                            
                            let request = match Request::builder()
                                .uri(url.as_str())
                                .header("Authorization", format!("Bearer {}", settings.openai.api_key))
                                .header("OpenAI-Beta", "realtime=v1")
                                .header("Content-Type", "application/json")
                                .header("User-Agent", "WebXR Graph")
                                .header("Sec-WebSocket-Version", "13")
                                .header("Sec-WebSocket-Key", tungstenite::handshake::client::generate_key())
                                .header("Connection", "Upgrade")
                                .header("Upgrade", "websocket")
                                .body(()) {
                                    Ok(req) => req,
                                    Err(e) => {
                                        error!("Failed to build request: {}", e);
                                        continue;
                                    }
                                };

                            match connect_async(request).await {
                                Ok((mut stream, _)) => {
                                    info!("Connected to OpenAI Realtime API");
                                    
                                    let init_event = json!({
                                        "type": "response.create",
                                        "response": {
                                            "modalities": ["text", "audio"],
                                            "instructions": "You are a helpful AI assistant. Respond naturally and conversationally."
                                        }
                                    });
                                    
                                    if let Err(e) = stream.send(Message::Text(init_event.to_string())).await {
                                        error!("Failed to send initial response.create event: {}", e);
                                        continue;
                                    }
                                    
                                    ws_stream = Some(stream);
                                },
                                Err(e) => error!("Failed to connect to OpenAI Realtime API: {}", e),
                            }
                        }
                    },
                    SpeechCommand::SendMessage(msg) => {
                        let current_provider = tts_provider.read().await;
                        match *current_provider {
                            TTSProvider::OpenAI => {
                                if let Some(stream) = &mut ws_stream {
                                    let msg_event = json!({
                                        "type": "conversation.item.create",
                                        "item": {
                                            "type": "message",
                                            "role": "user",
                                            "content": [{
                                                "type": "input_text",
                                                "text": msg
                                            }]
                                        }
                                    });

                                    if let Err(e) = stream.send(Message::Text(msg_event.to_string())).await {
                                        error!("Failed to send message to OpenAI: {}", e);
                                        continue;
                                    }

                                    let response_event = json!({
                                        "type": "response.create"
                                    });
                                    
                                    if let Err(e) = stream.send(Message::Text(response_event.to_string())).await {
                                        error!("Failed to request response from OpenAI: {}", e);
                                        continue;
                                    }
                                    
                                    while let Some(message) = stream.next().await {
                                        match message {
                                            Ok(Message::Text(text)) => {
                                                let event = match serde_json::from_str::<serde_json::Value>(&text) {
                                                    Ok(event) => event,
                                                    Err(e) => {
                                                        error!("Failed to parse server event: {}", e);
                                                        continue;
                                                    }
                                                };
                                                
                                                match event["type"].as_str() {
                                                    Some("conversation.item.created") => {
                                                        if let Some(content) = event["item"]["content"].as_array() {
                                                            for item in content {
                                                                if item["type"] == "audio" {
                                                                    if let Some(audio_data) = item["audio"].as_str() {
                                                                        match BASE64.decode(audio_data) {
                                                                            Ok(audio_bytes) => {
                                                                                // Note: Audio data will be handled by socket-flow server
                                                                                debug!("Received audio data of size: {}", audio_bytes.len());
                                                                            },
                                                                            Err(e) => error!("Failed to decode audio data: {}", e),
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    Some("error") => {
                                                        error!("OpenAI Realtime API error: {:?}", event);
                                                        break;
                                                    },
                                                    Some("response.completed") => break,
                                                    _ => {}
                                                }
                                            },
                                            Ok(Message::Close(_)) => break,
                                            Err(e) => {
                                                error!("Error receiving from OpenAI: {}", e);
                                                break;
                                            },
                                            _ => {}
                                        }
                                    }
                                } else {
                                    error!("OpenAI WebSocket not initialized");
                                }
                            },
                            TTSProvider::Sonata => {
                                let mut child = match Command::new("python3")
                                    .arg("src/generate_audio.py")
                                    .stdin(Stdio::piped())
                                    .stdout(Stdio::piped())
                                    .spawn() {
                                        Ok(child) => child,
                                        Err(e) => {
                                            error!("Failed to spawn Python process: {}", e);
                                            continue;
                                        }
                                    };

                                if let Some(mut stdin) = child.stdin.take() {
                                    if let Err(e) = stdin.write_all(msg.as_bytes()) {
                                        error!("Failed to write to stdin: {}", e);
                                        continue;
                                    }
                                    drop(stdin);
                                }

                                match child.wait_with_output() {
                                    Ok(output) => {
                                        if output.status.success() {
                                            // Note: Audio data will be handled by socket-flow server
                                            debug!("Generated audio data of size: {}", output.stdout.len());
                                        } else {
                                            error!("Sonata TTS failed: {}", String::from_utf8_lossy(&output.stderr));
                                        }
                                    },
                                    Err(e) => error!("Failed to get child process output: {}", e),
                                }
                            }
                        }
                    },
                    SpeechCommand::Close => {
                        if let Some(mut stream) = ws_stream.take() {
                            if let Err(e) = stream.send(Message::Close(None)).await {
                                error!("Failed to send close frame: {}", e);
                            }
                        }
                        break;
                    },
                    SpeechCommand::SetTTSProvider(new_provider) => {
                        let mut provider = tts_provider.write().await;
                        *provider = new_provider;
                        info!("TTS provider set to: {:?}", *provider);
                    }
                }
            }
        });
    }

    pub async fn initialize(&self) -> Result<(), Box<dyn Error>> {
        let command = SpeechCommand::Initialize;
        self.sender.lock().await.send(command).await.map_err(|e| Box::new(SpeechError::from(e)))?;
        Ok(())
    }

    pub async fn send_message(&self, message: String) -> Result<(), Box<dyn Error>> {
        let command = SpeechCommand::SendMessage(message);
        self.sender.lock().await.send(command).await.map_err(|e| Box::new(SpeechError::from(e)))?;
        Ok(())
    }

    pub async fn close(&self) -> Result<(), Box<dyn Error>> {
        let command = SpeechCommand::Close;
        self.sender.lock().await.send(command).await.map_err(|e| Box::new(SpeechError::from(e)))?;
        Ok(())
    }

    pub async fn set_tts_provider(&self, use_openai: bool) -> Result<(), Box<dyn Error>> {
        let provider = if use_openai {
            TTSProvider::OpenAI
        } else {
            TTSProvider::Sonata
        };
        let command = SpeechCommand::SetTTSProvider(provider);
        self.sender.lock().await.send(command).await.map_err(|e| Box::new(SpeechError::from(e)))?;
        Ok(())
    }
}

----
services/ragflow_service.rs
use reqwest::{Client, StatusCode};
use log::{error, info};
use crate::config::Settings;
use std::fmt;
use futures::stream::{Stream, StreamExt};
use std::pin::Pin;
use serde_json::json;
use std::sync::Arc;
use tokio::sync::RwLock;

#[derive(Debug)]
pub enum RAGFlowError {
    ReqwestError(reqwest::Error),
    StatusError(StatusCode, String),
    ParseError(String),
    IoError(std::io::Error),
}

impl fmt::Display for RAGFlowError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            RAGFlowError::ReqwestError(e) => write!(f, "Reqwest error: {}", e),
            RAGFlowError::StatusError(status, msg) => write!(f, "Status error ({}): {}", status, msg),
            RAGFlowError::ParseError(msg) => write!(f, "Parse error: {}", msg),
            RAGFlowError::IoError(e) => write!(f, "IO error: {}", e),
        }
    }
}

impl std::error::Error for RAGFlowError {}

impl From<reqwest::Error> for RAGFlowError {
    fn from(err: reqwest::Error) -> Self {
        RAGFlowError::ReqwestError(err)
    }
}

impl From<std::io::Error> for RAGFlowError {
    fn from(err: std::io::Error) -> Self {
        RAGFlowError::IoError(err)
    }
}

pub struct RAGFlowService {
    client: Client,
    api_key: String,
    base_url: String,
}

impl RAGFlowService {
    pub async fn new(settings: Arc<RwLock<Settings>>) -> Result<Self, RAGFlowError> {
        let client = Client::new();
        let settings = settings.read().await;

        Ok(RAGFlowService {
            client,
            api_key: settings.ragflow.api_key.clone(),
            base_url: settings.ragflow.api_base_url.clone(),
        })
    }

    pub async fn create_conversation(&self, user_id: String) -> Result<String, RAGFlowError> {
        info!("Creating conversation for user: {}", user_id);
        let url = format!("{}/api/new_conversation", self.base_url.trim_end_matches('/'));
        info!("Full URL for create_conversation: {}", url);
        
        let response = self.client.get(&url)
            .header("Authorization", format!("Bearer {}", self.api_key))
            .query(&[("user_id", user_id)])
            .send()
            .await?;

        let status = response.status();
        info!("Response status: {}", status);

        if status.is_success() {
            let result: serde_json::Value = response.json().await?;
            info!("Successful response: {:?}", result);
            Ok(result["data"]["id"].as_str().unwrap_or("").to_string())
        } else {
            let error_message = response.text().await?;
            error!("Failed to create conversation. Status: {}, Error: {}", status, error_message);
            Err(RAGFlowError::StatusError(status, error_message))
        }
    }

    pub async fn send_message(
        &self,
        conversation_id: String,
        message: String,
        quote: bool,
        doc_ids: Option<Vec<String>>,
        stream: bool,
    ) -> Result<Pin<Box<dyn Stream<Item = Result<String, RAGFlowError>> + Send + 'static>>, RAGFlowError> {
        info!("Sending message to conversation: {}", conversation_id);
        let url = format!("{}/api/completion", self.base_url.trim_end_matches('/'));
        info!("Full URL for send_message: {}", url);
        
        let mut request_body = json!({
            "conversation_id": conversation_id,
            "messages": [{"role": "user", "content": message}],
            "quote": quote,
            "stream": stream
        });

        if let Some(ids) = doc_ids {
            request_body["doc_ids"] = serde_json::json!(ids.join(","));
        }

        info!("Request body: {:?}", request_body);

        let response = self.client.post(&url)
            .header("Authorization", format!("Bearer {}", self.api_key))
            .header("Content-Type", "application/json")
            .json(&request_body)
            .send()
            .await?;

        let status = response.status();
        info!("Response status: {}", status);
       
        if status.is_success() {
            let stream = response.bytes_stream().map(move |chunk_result| {
                match chunk_result {
                    Ok(chunk) => {
                        match serde_json::from_slice::<serde_json::Value>(&chunk) {
                            Ok(json_response) => {
                                // Extract text answer from the response
                                match json_response["data"]["answer"].as_str()
                                    .or_else(|| json_response["answer"].as_str()) {
                                    Some(answer) => Ok(answer.to_string()),
                                    None => Err(RAGFlowError::ParseError("No answer found in response".to_string()))
                                }
                            },
                            Err(e) => Err(RAGFlowError::ParseError(format!("Failed to parse JSON response: {}", e))),
                        }
                    },
                    Err(e) => Err(RAGFlowError::ReqwestError(e)),
                }
            });

            Ok(Box::pin(stream))
        } else {
            let error_message = response.text().await?;
            error!("Failed to send message. Status: {}, Error: {}", status, error_message);
            Err(RAGFlowError::StatusError(status, error_message))
        }
    }

    pub async fn get_conversation_history(&self, conversation_id: String) -> Result<serde_json::Value, RAGFlowError> {
        let url = format!("{}/api/conversation/{}", self.base_url.trim_end_matches('/'), conversation_id);
        let response = self.client.get(&url)
            .header("Authorization", format!("Bearer {}", self.api_key))
            .send()
            .await?;

        let status = response.status();
        if status.is_success() {
            let history: serde_json::Value = response.json().await?;
            Ok(history)
        } else {
            let error_message = response.text().await?;
            error!("Failed to get conversation history. Status: {}, Error: {}", status, error_message);
            Err(RAGFlowError::StatusError(status, error_message))
        }
    }
}

impl Clone for RAGFlowService {
    fn clone(&self) -> Self {
        RAGFlowService {
            client: self.client.clone(),
            api_key: self.api_key.clone(),
            base_url: self.base_url.clone(),
        }
    }
}

----
services/github_service.rs
use reqwest::Client;
use serde::{Serialize, Deserialize};
use async_trait::async_trait;
use log::{info, error};
use std::error::Error;
use base64::{Engine as _, engine::general_purpose::STANDARD as BASE64};

#[derive(Debug)]
pub enum GitHubError {
    ApiError(String),
    NetworkError(reqwest::Error),
    SerializationError(serde_json::Error),
    ValidationError(String),
    Base64Error(base64::DecodeError),
}

impl std::fmt::Display for GitHubError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            GitHubError::ApiError(msg) => write!(f, "GitHub API error: {}", msg),
            GitHubError::NetworkError(e) => write!(f, "Network error: {}", e),
            GitHubError::SerializationError(e) => write!(f, "Serialization error: {}", e),
            GitHubError::ValidationError(msg) => write!(f, "Validation error: {}", msg),
            GitHubError::Base64Error(e) => write!(f, "Base64 encoding error: {}", e),
        }
    }
}

impl Error for GitHubError {}

impl From<reqwest::Error> for GitHubError {
    fn from(err: reqwest::Error) -> Self {
        GitHubError::NetworkError(err)
    }
}

impl From<serde_json::Error> for GitHubError {
    fn from(err: serde_json::Error) -> Self {
        GitHubError::SerializationError(err)
    }
}

impl From<base64::DecodeError> for GitHubError {
    fn from(err: base64::DecodeError) -> Self {
        GitHubError::Base64Error(err)
    }
}

#[derive(Debug, Serialize)]
struct CreateBranchRequest {
    pub ref_name: String,
    pub sha: String,
}

#[derive(Debug, Serialize)]
struct CreatePullRequest {
    pub title: String,
    pub head: String,
    pub base: String,
    pub body: String,
}

#[derive(Debug, Serialize)]
struct UpdateFileRequest {
    pub message: String,
    pub content: String,
    pub sha: String,
    pub branch: String,
}

#[derive(Debug, Deserialize)]
struct FileResponse {
    pub sha: String,
}

#[async_trait]
pub trait GitHubPRService: Send + Sync {
    async fn create_pull_request(
        &self,
        file_name: &str,
        content: &str,
        original_sha: &str,
    ) -> Result<String, Box<dyn Error + Send + Sync>>;
}

pub struct RealGitHubPRService {
    client: Client,
    token: String,
    owner: String,
    repo: String,
    base_path: String,
}

impl RealGitHubPRService {
    pub fn new(
        token: String,
        owner: String,
        repo: String,
        base_path: String,
    ) -> Result<Self, Box<dyn Error + Send + Sync>> {
        let client = Client::builder()
            .user_agent("rust-github-api")
            .build()
            .map_err(GitHubError::from)?;

        Ok(Self {
            client,
            token,
            owner,
            repo,
            base_path,
        })
    }

    async fn get_main_branch_sha(&self) -> Result<String, Box<dyn Error + Send + Sync>> {
        let url = format!(
            "https://api.github.com/repos/{}/{}/git/ref/heads/main",
            self.owner, self.repo
        );

        let response = self.client
            .get(&url)
            .header("Authorization", format!("Bearer {}", self.token))
            .header("Accept", "application/vnd.github+json")
            .send()
            .await
            .map_err(GitHubError::from)?;

        if !response.status().is_success() {
            let error_text = response.text().await.map_err(GitHubError::from)?;
            error!("Failed to get main branch SHA: {}", error_text);
            return Err(GitHubError::ApiError(error_text).into());
        }

        let response_json: serde_json::Value = response.json().await.map_err(GitHubError::from)?;
        Ok(response_json["object"]["sha"]
            .as_str()
            .ok_or_else(|| GitHubError::ValidationError("SHA not found".to_string()))?
            .to_string())
    }

    async fn create_branch(&self, branch_name: &str, sha: &str) -> Result<(), Box<dyn Error + Send + Sync>> {
        let url = format!(
            "https://api.github.com/repos/{}/{}/git/refs",
            self.owner, self.repo
        );

        let body = CreateBranchRequest {
            ref_name: format!("refs/heads/{}", branch_name),
            sha: sha.to_string(),
        };

        let response = self.client
            .post(&url)
            .header("Authorization", format!("Bearer {}", self.token))
            .header("Accept", "application/vnd.github+json")
            .json(&body)
            .send()
            .await
            .map_err(GitHubError::from)?;

        if !response.status().is_success() {
            let error_text = response.text().await.map_err(GitHubError::from)?;
            error!("Failed to create branch: {}", error_text);
            return Err(GitHubError::ApiError(error_text).into());
        }

        Ok(())
    }

    async fn update_file(
        &self,
        file_path: &str,
        content: &str,
        branch_name: &str,
        original_sha: &str,
    ) -> Result<String, Box<dyn Error + Send + Sync>> {
        let url = format!(
            "https://api.github.com/repos/{}/{}/contents/{}",
            self.owner, self.repo, file_path
        );

        let encoded_content = BASE64.encode(content);
        
        let body = UpdateFileRequest {
            message: format!("Update {} with Perplexity-enhanced content", file_path),
            content: encoded_content,
            sha: original_sha.to_string(),
            branch: branch_name.to_string(),
        };

        let response = self.client
            .put(&url)
            .header("Authorization", format!("Bearer {}", self.token))
            .header("Accept", "application/vnd.github+json")
            .json(&body)
            .send()
            .await
            .map_err(GitHubError::from)?;

        if !response.status().is_success() {
            let error_text = response.text().await.map_err(GitHubError::from)?;
            error!("Failed to update file: {}", error_text);
            return Err(GitHubError::ApiError(error_text).into());
        }

        let file_response: FileResponse = response.json().await.map_err(GitHubError::from)?;
        Ok(file_response.sha)
    }
}

#[async_trait]
impl GitHubPRService for RealGitHubPRService {
    async fn create_pull_request(
        &self,
        file_name: &str,
        content: &str,
        original_sha: &str,
    ) -> Result<String, Box<dyn Error + Send + Sync>> {
        let timestamp = chrono::Utc::now().timestamp();
        let branch_name = format!("perplexity-update-{}-{}", file_name.replace(".md", ""), timestamp);
        
        let main_sha = self.get_main_branch_sha().await?;
        self.create_branch(&branch_name, &main_sha).await?;
        
        let file_path = format!("{}/{}", self.base_path, file_name);
        let new_sha = self.update_file(&file_path, content, &branch_name, original_sha).await?;
        
        let url = format!(
            "https://api.github.com/repos/{}/{}/pulls",
            self.owner, self.repo
        );

        let pr_body = CreatePullRequest {
            title: format!("Perplexity Enhancement: {}", file_name),
            head: branch_name,
            base: "main".to_string(),
            body: format!(
                "This PR contains Perplexity-enhanced content for {}.\n\nOriginal SHA: {}\nNew SHA: {}",
                file_name, original_sha, new_sha
            ),
        };

        let response = self.client
            .post(&url)
            .header("Authorization", format!("Bearer {}", self.token))
            .header("Accept", "application/vnd.github+json")
            .json(&pr_body)
            .send()
            .await
            .map_err(GitHubError::from)?;

        if !response.status().is_success() {
            let error_text = response.text().await.map_err(GitHubError::from)?;
            error!("Failed to create PR: {}", error_text);
            return Err(GitHubError::ApiError(error_text).into());
        }

        let pr_response: serde_json::Value = response.json().await.map_err(GitHubError::from)?;
        let pr_url = pr_response["html_url"]
            .as_str()
            .ok_or_else(|| GitHubError::ValidationError("PR URL not found".to_string()))?
            .to_string();

        info!("Created PR: {}", pr_url);
        Ok(pr_url)
    }
}

--END--The following text represents a project with code. The structure of the text consists of sections beginning with ----, followed by a single line containing the file path and file name, and then a variable number of lines containing the file contents. The text representing the project ends when the symbols --END-- are encountered. Any further text beyond --END-- is meant to be interpreted as instructions using the aforementioned project as context.
----
index.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>LogseqXR Graph Visualization</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      overflow: hidden;
      font-family: Arial, sans-serif;
      background: #212121;  /* Match scene background */
      color: #ffffff;
    }

    #scene-container {
      position: absolute;
      width: 100%;
      height: 100%;
      background: transparent;
    }

    #control-panel {
      position: fixed;
      top: 0;
      right: 0;
      height: 100vh;
      background: rgba(33, 33, 33, 0.95);  /* Match scene background */
      border-left: 1px solid rgba(255, 255, 255, 0.1);
      padding: 15px;
      z-index: 1000;
      min-width: 300px;
      overflow-y: auto;
      box-shadow: -2px 0 10px rgba(0, 0, 0, 0.3);
    }

    .control-panel-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 15px;
      padding-bottom: 10px;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .control-panel-header h3 {
      margin: 0;
      font-size: 1.2em;
      color: #ffffff;
    }

    .connection-status {
      display: inline-block;
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 0.9em;
    }

    .connection-status.connected {
      background: rgba(76, 175, 80, 0.2);
      color: #4CAF50;
    }

    .connection-status.disconnected {
      background: rgba(244, 67, 54, 0.2);
      color: #F44336;
    }

    .settings-group {
      margin-bottom: 20px;
      padding: 10px;
      border-radius: 4px;
      background: rgba(255, 255, 255, 0.05);
    }

    .settings-group h4 {
      margin: 0 0 10px 0;
      color: #ffffff;
      font-size: 1em;
    }

    .setting-item {
      margin-bottom: 10px;
    }

    .setting-item label {
      display: block;
      margin-bottom: 5px;
      color: rgba(255, 255, 255, 0.8);
    }

    .setting-item input[type="text"],
    .setting-item input[type="number"],
    .setting-item select {
      width: 100%;
      padding: 6px;
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 4px;
      background: rgba(255, 255, 255, 0.1);
      color: #ffffff;
    }

    .setting-item input[type="checkbox"] {
      margin-right: 8px;
    }

    .setting-item input:focus,
    .setting-item select:focus {
      outline: none;
      border-color: rgba(255, 255, 255, 0.3);
      background: rgba(255, 255, 255, 0.15);
    }
  </style>
</head>
<body>
  <div id="scene-container">
    <canvas id="main-canvas"></canvas>
  </div>
  <div id="control-panel">
    <div class="control-panel-header">
      <h3>Settings</h3>
      <div class="connection-status">
        <span class="status-indicator"></span>
        <span id="connection-status">Connecting...</span>
      </div>
    </div>
    <div class="control-panel-content">
      <!-- Settings sections will be dynamically populated by ControlPanel.ts -->
    </div>
    <div class="settings-actions">
      <button id="reset-settings">Reset</button>
      <button id="save-settings">Save</button>
    </div>
  </div>
  <script type="module" src="./index.ts"></script>
</body>
</html>

----
tsconfig.json
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "module": "ESNext",
    "lib": [
      "es2020",
      "dom",
      "dom.iterable",
      "webworker",
      "webworker.importscripts",
      "webworker.iterable"
    ],
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitAny": true,
    "noImplicitThis": true,
    "noImplicitReturns": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "strictBindCallApply": true,
    "strictPropertyInitialization": true,
    "allowJs": true,
    "checkJs": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "sourceMap": true
  },
  "include": ["**/*.ts", "**/*.d.ts"],
  "exclude": ["node_modules"]
}

----
index.ts
import { Scene, PerspectiveCamera, WebGLRenderer, Camera } from 'three';
import { Settings } from './types/settings';
import { EnhancedNodeManager } from './rendering/EnhancedNodeManager';
import { EdgeManager } from './rendering/EdgeManager';
import { HologramManager } from './rendering/HologramManager';
import { TextRenderer } from './rendering/textRenderer';
import { WebSocketService } from './websocket/websocketService';
import { LoggerImpl } from './core/logger';

export class GraphVisualization {
    private scene: Scene;
    private camera: PerspectiveCamera;
    private renderer: WebGLRenderer;
    private nodeManager: EnhancedNodeManager;
    private edgeManager: EdgeManager;
    private hologramManager: HologramManager;
    private textRenderer: TextRenderer;
    private websocketService: WebSocketService;
    private _settings: Settings;

    public get settings(): Settings {
        return this._settings;
    }

    constructor(settings: Settings) {
        this._settings = settings;
        // Initialize logger settings first
        LoggerImpl.setSettings(settings);

        // Initialize scene
        this.scene = new Scene();
        this.camera = new PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        this.renderer = new WebGLRenderer({ antialias: true });
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(this.renderer.domElement);

        // Initialize managers with visualization settings
        this.nodeManager = new EnhancedNodeManager(
            this.scene,
            settings.visualization,
            this.camera
        );
        this.edgeManager = new EdgeManager(this.scene, settings);
        this.hologramManager = new HologramManager(this.scene, this.renderer, settings);
        this.textRenderer = new TextRenderer(this.camera as Camera);
        this.websocketService = WebSocketService.getInstance();

        // Start animation loop
        this.animate();
    }

    private animate() {
        requestAnimationFrame(this.animate.bind(this));

        // Update managers
        const deltaTime = 0.016; // Approximately 60fps
        this.nodeManager.updateNodePositions([]);
        this.hologramManager.update(deltaTime);

        // Render
        this.renderer.render(this.scene, this.camera);
    }

    public handleSettingsUpdate(settings: Settings) {
        this._settings = settings;
        this.nodeManager.updateSettings(settings.visualization);
        this.edgeManager.handleSettingsUpdate(settings);
        this.hologramManager.updateSettings(settings);
        const labelSettings = settings.visualization.labels || {
            enabled: false,
            size: 12,
            color: '#ffffff'
        };
        this.textRenderer.handleSettingsUpdate(labelSettings);
    }

    public dispose() {
        this.nodeManager.dispose();
        this.edgeManager.dispose();
        this.hologramManager.dispose();
        this.textRenderer.dispose();
        this.websocketService.close();
        document.body.removeChild(this.renderer.domElement);
    }
}

// Initialize the visualization
const settings: Settings = {
    render: {
        ambientLightIntensity: 0.5,
        directionalLightIntensity: 0.8,
        environmentIntensity: 1,
        backgroundColor: '#000000',
        enableAmbientOcclusion: true,
        enableAntialiasing: true,
        enableShadows: true,
        showGrid: true
    },
    controls: {
        autoRotate: false,
        rotateSpeed: 1.0,
        zoomSpeed: 1.0,
        panSpeed: 1.0
    },
    visualization: {
        bloom: {
            enabled: false,
            strength: 0.5,
            radius: 1,
            edgeBloomStrength: 0.5,
            nodeBloomStrength: 0.5,
            environmentBloomStrength: 0.5
        },
        physics: {
            enabled: false,
            attractionStrength: 0.1,
            repulsionStrength: 0.1,
            springStrength: 0.1,
            damping: 0.5,
            iterations: 1,
            maxVelocity: 10,
            collisionRadius: 1,
            enableBounds: true,
            boundsSize: 100
        },
        nodes: {
            color: '#ffffff',
            defaultSize: 1,
            minSize: 0.5,
            maxSize: 2,
            quality: 'medium',
            enableInstancing: true,
            enableHologram: true,
            enableMetadataShape: false,
            enableMetadataVisualization: false,
            baseSize: 1,
            sizeRange: [0.5, 2],
            baseColor: '#ffffff',
            metalness: 0.5,
            roughness: 0.5,
            opacity: 1,
            colorRangeAge: ['#ff0000', '#00ff00'],
            colorRangeLinks: ['#0000ff', '#ff00ff'],
            material: {
                type: 'phong',
                transparent: false,
                opacity: 1.0
            }
        },
        edges: {
            color: '#666666',
            defaultWidth: 1,
            minWidth: 0.5,
            maxWidth: 3,
            arrowSize: 0.2,
            baseWidth: 1,
            enableArrows: false,
            opacity: 0.8,
            widthRange: [0.5, 3]
        },
        labels: {
            enabled: true,
            size: 14,
            color: '#ffffff',
            enableLabels: true,
            desktopFontSize: 14,
            textColor: '#ffffff'
        },
        hologram: {
            color: '#00ff00',
            opacity: 0.5,
            glowIntensity: 0.8,
            rotationSpeed: 0.5,
            enabled: true,
            ringCount: 3,
            ringColor: '#00ff00',
            ringOpacity: 0.5,
            ringSizes: [1, 1.5, 2],
            ringRotationSpeed: 0.5,
            enableBuckminster: false,
            buckminsterScale: 1,
            buckminsterOpacity: 0.5,
            enableGeodesic: true,
            geodesicScale: 1,
            geodesicOpacity: 0.5,
            enableTriangleSphere: true,
            triangleSphereScale: 1,
            triangleSphereOpacity: 0.5,
            globalRotationSpeed: 0.2
        },
        animations: {
            enableNodeAnimations: false,
            enableMotionBlur: false,
            motionBlurStrength: 0.5,
            selectionWaveEnabled: false,
            pulseEnabled: false,
            pulseSpeed: 1.0,
            pulseStrength: 0.5,
            waveSpeed: 1.0
        }
    },
    xr: {
        quality: 'high',
        mode: 'vr',
        roomScale: true,
        spaceType: 'local',
        input: 'hands',
        haptics: true,
        passthrough: false,
        visuals: {
            handMeshEnabled: true,
            handMeshColor: '#ffffff',
            handMeshOpacity: 0.5,
            handPointSize: 5,
            handRayEnabled: true,
            handRayColor: '#00ff00',
            handRayWidth: 2,
            gestureSsmoothing: 0.5
        },
        environment: {
            enableLightEstimation: true,
            enablePlaneDetection: true,
            enableSceneUnderstanding: true,
            planeColor: '#808080',
            planeOpacity: 0.5,
            showPlaneOverlay: true,
            snapToFloor: true
        }
    },
    system: {
        network: {
            bindAddress: '127.0.0.1',
            domain: 'localhost',
            port: 3000,
            enableHttp2: true,
            enableTls: false,
            minTlsVersion: 'TLS1.2',
            maxRequestSize: 10485760,
            enableRateLimiting: true,
            rateLimitRequests: 100,
            rateLimitWindow: 60,
            tunnelId: ''
        },
        websocket: {
            url: '',
            reconnectAttempts: 5,
            reconnectDelay: 5000,
            binaryChunkSize: 65536,
            compressionEnabled: true,
            compressionThreshold: 1024,
            maxConnections: 100,
            maxMessageSize: 32 * 1024 * 1024,
            updateRate: 60
        },
        security: {
            allowedOrigins: ['http://localhost:3000'],
            auditLogPath: './audit.log',
            cookieHttponly: true,
            cookieSamesite: 'Lax',
            cookieSecure: false,
            csrfTokenTimeout: 3600,
            enableAuditLogging: true,
            enableRequestValidation: true,
            sessionTimeout: 86400
        },
        debug: {
            enabled: true,
            enableDataDebug: true,
            enableWebsocketDebug: true,
            logBinaryHeaders: true,
            logFullJson: true,
            logLevel: 'debug'
        }
    }
};

new GraphVisualization(settings);

----
websocket/websocketService.ts
import { createLogger } from '../core/logger';
import { buildWsUrl } from '../core/api';

const logger = createLogger('WebSocketService');

enum ConnectionState {
    DISCONNECTED = 'disconnected',
    CONNECTING = 'connecting',
    CONNECTED = 'connected',
    RECONNECTING = 'reconnecting',
    FAILED = 'failed'
}

// Simple interface matching server's binary format
interface NodeData {
    position: [number, number, number];
    velocity: [number, number, number];
}

interface NodeUpdate {
    id: string;
    position: {
        x: number;
        y: number;
        z: number;
    };
}

interface SettingsUpdateMessage {
    category: string;
    setting: string;
    value: any;
}

type BinaryMessageCallback = (nodes: NodeData[]) => void;

export class WebSocketService {
    private static instance: WebSocketService | null = null;
    private ws: WebSocket | null = null;
    private binaryMessageCallback: BinaryMessageCallback | null = null;
    private reconnectTimeout: number | null = null;
    private connectionState: ConnectionState = ConnectionState.DISCONNECTED;
    private reconnectAttempts: number = 0;
    private readonly _maxReconnectAttempts: number = 5;
    private readonly initialReconnectDelay: number = 5000; // 5 seconds
    private readonly maxReconnectDelay: number = 60000; // 60 seconds
    private url: string = '';
    private settingsStore: Map<string, any> = new Map();
    private connectionStatusHandler: ((status: boolean) => void) | null = null;
    private settingsUpdateHandler: ((settings: any) => void) | null = null;

    private constructor() {
        // Don't automatically connect - wait for explicit connect() call
    }

    public connect(): void {
        if (this.connectionState !== ConnectionState.DISCONNECTED) {
            logger.warn('WebSocket already connected or connecting');
            return;
        }
        this.initializeWebSocket();
    }

    private async initializeWebSocket(): Promise<void> {
        if (this.connectionState !== ConnectionState.DISCONNECTED) {
            return;
        }

        try {
            // Always use buildWsUrl() to ensure proper protocol and path
            this.url = buildWsUrl();
            
            if (!this.url) {
                throw new Error('No WebSocket URL available');
            }

            // Ensure URL uses wss:// protocol when on HTTPS
            if (window.location.protocol === 'https:' && !this.url.startsWith('wss://')) {
                this.url = this.url.replace('ws://', 'wss://');
            }

            this.connectionState = ConnectionState.CONNECTING;
            this.ws = new WebSocket(this.url);
            this.setupWebSocketHandlers();
        } catch (error) {
            logger.error('Failed to initialize WebSocket:', error);
            this.handleReconnect();
        }
    }

    private getReconnectDelay(): number {
        // Exponential backoff with max delay
        const delay = Math.min(
            this.initialReconnectDelay * Math.pow(2, this.reconnectAttempts),
            this.maxReconnectDelay
        );
        // Add some jitter
        return delay + (Math.random() * 1000);
    }

    private setupWebSocketHandlers(): void {
        if (!this.ws) return;
        
        this.ws.binaryType = 'arraybuffer';

        this.ws.onopen = (): void => {
            logger.info(`WebSocket connected successfully to ${this.url}`);
            this.connectionState = ConnectionState.CONNECTED;
            this.reconnectAttempts = 0;

            // Notify connection status change
            if (this.connectionStatusHandler) {
                this.connectionStatusHandler(true);
            }

            // Send initial protocol messages
            this.sendMessage({ type: 'requestInitialData' });
            this.sendMessage({ type: 'enableBinaryUpdates' });
        };

        this.ws.onerror = (event: Event): void => {
            logger.error('WebSocket error:', event);
            if (this.ws) {
                logger.debug('WebSocket readyState:', this.ws.readyState);
            }
        };

        this.ws.onclose = (event: CloseEvent): void => {
            logger.warn(`WebSocket closed with code ${event.code}: ${event.reason}`);
            
            // Notify connection status change
            if (this.connectionStatusHandler) {
                this.connectionStatusHandler(false);
            }
            
            this.handleReconnect();
        };

        this.ws.onmessage = (event: MessageEvent) => {
            if (event.data instanceof Blob) {
                this.handleBinaryMessage(event.data);
            } else {
                try {
                    const message = JSON.parse(event.data);
                    if (message.type === 'settings') {
                        this.handleSettingsUpdate(message);
                    }
                } catch (e) {
                    logger.error('Failed to parse WebSocket message:', e);
                }
            }
        };
    }

    private async handleBinaryMessage(blob: Blob): Promise<void> {
        try {
            const arrayBuffer = await blob.arrayBuffer();
            const dataView = new DataView(arrayBuffer);
            const nodeCount = dataView.getUint32(0, true); // true for little-endian
            const nodes: NodeData[] = [];
            
            let offset = 4; // Start after node count
            for (let i = 0; i < nodeCount; i++) {
                const position: [number, number, number] = [
                    dataView.getFloat32(offset, true),
                    dataView.getFloat32(offset + 4, true),
                    dataView.getFloat32(offset + 8, true)
                ];
                offset += 12;

                const velocity: [number, number, number] = [
                    dataView.getFloat32(offset, true),
                    dataView.getFloat32(offset + 4, true),
                    dataView.getFloat32(offset + 8, true)
                ];
                offset += 12;

                nodes.push({ position, velocity });
            }

            if (this.binaryMessageCallback) {
                this.binaryMessageCallback(nodes);
            }
        } catch (e) {
            logger.error('Failed to process binary message:', e);
        }
    }

    private handleReconnect(): void {
        const wasConnected = this.connectionState === ConnectionState.CONNECTED;
        this.connectionState = ConnectionState.DISCONNECTED;
        this.binaryMessageCallback = null;
        
        if (this.reconnectTimeout !== null) {
            window.clearTimeout(this.reconnectTimeout);
        }
        
        if (this.reconnectAttempts < this._maxReconnectAttempts &&
            (wasConnected || this.reconnectAttempts === 0)) {
            
            this.reconnectAttempts++;
            const delay = this.getReconnectDelay();
            
            logger.info(
                `WebSocket connection closed, attempt ${this.reconnectAttempts}/${this._maxReconnectAttempts} in ${delay}ms`
            );
            
            this.connectionState = ConnectionState.RECONNECTING;
            
            this.reconnectTimeout = window.setTimeout(() => {
                this.reconnectTimeout = null;
                this.connect();
            }, delay);
        } else if (this.reconnectAttempts >= this._maxReconnectAttempts) {
            logger.warn('Maximum reconnection attempts reached, WebSocket disabled');
            this.connectionState = ConnectionState.FAILED;
            if (this.connectionStatusHandler) {
                this.connectionStatusHandler(false);
            }
        } else {
            logger.info('WebSocket connection closed');
        }
    }

    private handleSettingsUpdate(message: SettingsUpdateMessage): void {
        try {
            const { category, setting, value } = message;
            const settingsKey = `${category}.${setting}`;
            
            // Update local settings store
            this.settingsStore.set(settingsKey, value);

            // Notify settings update handler
            if (this.settingsUpdateHandler) {
                const settings = this.getSettingsSnapshot();
                this.settingsUpdateHandler(settings);
            }

            logger.debug(`Updated setting ${settingsKey}:`, value);
        } catch (e) {
            logger.error('Failed to handle settings update:', e);
        }
    }

    private getSettingsSnapshot(): any {
        const settings: any = {};
        for (const [key, value] of this.settingsStore.entries()) {
            const [category, setting] = key.split('.');
            if (!settings[category]) {
                settings[category] = {};
            }
            settings[category][setting] = value;
        }
        return settings;
    }

    public updateSettings(category: string, setting: string, value: any): void {
        if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
            logger.warn('WebSocket not connected, cannot update settings');
            return;
        }

        const message = {
            type: 'settings_update',
            category,
            setting,
            value
        };

        this.sendMessage(message);
    }

    public static getInstance(): WebSocketService {
        if (!WebSocketService.instance) {
            WebSocketService.instance = new WebSocketService();
        }
        return WebSocketService.instance;
    }

    public onBinaryMessage(callback: BinaryMessageCallback): void {
        this.binaryMessageCallback = callback;
    }

    public getConnectionStatus(): ConnectionState {
        return this.connectionState;
    }

    private sendMessage(message: any): void {
        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            try {
                this.ws.send(JSON.stringify(message));
            } catch (error) {
                logger.error('Error sending message:', error);
            }
        }
    }

    public sendNodeUpdates(updates: NodeUpdate[]): void {
        if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
            logger.warn('WebSocket not connected, cannot send node updates');
            return;
        }

        const buffer = new ArrayBuffer(4 + updates.length * 24); // 4 bytes for count + 24 bytes per node (3 floats for position, 3 for velocity)
        const dataView = new DataView(buffer);
        
        dataView.setUint32(0, updates.length, true); // Set node count
        
        let offset = 4;
        updates.forEach(update => {
            // Position
            dataView.setFloat32(offset, update.position.x, true);
            dataView.setFloat32(offset + 4, update.position.y, true);
            dataView.setFloat32(offset + 8, update.position.z, true);
            offset += 12;

            // Velocity (set to 0 as it's not included in NodeUpdate)
            dataView.setFloat32(offset, 0, true);
            dataView.setFloat32(offset + 4, 0, true);
            dataView.setFloat32(offset + 8, 0, true);
            offset += 12;
        });

        this.ws.send(buffer);
    }

    public onConnectionStatusChange(handler: (status: boolean) => void): void {
        this.connectionStatusHandler = handler;
        // Immediately call handler with current status if connected
        if (this.connectionState === ConnectionState.CONNECTED && handler) {
            handler(true);
        }
    }

    public onSettingsUpdate(handler: (settings: any) => void): void {
        this.settingsUpdateHandler = handler;
    }

    public dispose(): void {
        if (this.reconnectTimeout !== null) {
            window.clearTimeout(this.reconnectTimeout);
            this.reconnectTimeout = null;
        }
        
        if (this.ws) {
            this.ws.close();
            this.ws = null;
        }
        
        this.binaryMessageCallback = null;
        this.connectionStatusHandler = null;
        this.settingsUpdateHandler = null;
        this.connectionState = ConnectionState.DISCONNECTED;
        WebSocketService.instance = null;
    }

    public close(): void {
        if (this.ws) {
            this.ws.close();
            this.ws = null;
        }
    }
}

----
xr/xrSessionManager.ts
/**
 * XR session management and rendering
 */

import {
    Group,
    GridHelper,
    PlaneGeometry,
    MeshPhongMaterial,
    Mesh,
    RingGeometry,
    MeshBasicMaterial,
    DirectionalLight,
    SphereGeometry,
    Color,
    DoubleSide
} from 'three';
import { XRControllerModelFactory } from 'three/examples/jsm/webxr/XRControllerModelFactory';
import { createLogger } from '../core/utils';
import { platformManager } from '../platform/platformManager';
import { CustomXRLightEstimate } from '../types/xr';
import { SceneManager } from '../rendering/scene';
import { BACKGROUND_COLOR } from '../core/constants';

const _logger = createLogger('XRSessionManager');

// Type guards for WebXR features
function hasLightEstimate(frame: XRFrame): frame is XRFrame & { getLightEstimate(): CustomXRLightEstimate | null } {
  return 'getLightEstimate' in frame;
}

function hasHitTest(session: XRSession): session is XRSession & { requestHitTestSource(options: XRHitTestOptionsInit): Promise<XRHitTestSource> } {
  return 'requestHitTestSource' in session;
}

export class XRSessionManager {
    private static instance: XRSessionManager;
    private sceneManager: SceneManager;
    private session: XRSession | null = null;
    private referenceSpace: XRReferenceSpace | null = null;
    private isPresenting: boolean = false;

    // XR specific objects
    private cameraRig: Group;
    private arGroup: Group; // New group for AR elements
    private controllers: Group[];
    private controllerGrips: Group[];
    private controllerModelFactory: XRControllerModelFactory;

    // AR specific objects
    private gridHelper: GridHelper;
    private groundPlane: Mesh;
    private hitTestMarker: Mesh;
    private arLight: DirectionalLight;
    private hitTestSource: XRHitTestSource | null = null;
    private hitTestSourceRequested = false;

    // Event handlers
    private xrSessionStartCallback: (() => void) | null = null;
    private xrSessionEndCallback: (() => void) | null = null;
    private xrAnimationFrameCallback: ((frame: XRFrame) => void) | null = null;
    private controllerAddedCallback: ((controller: Group) => void) | null = null;
    private controllerRemovedCallback: ((controller: Group) => void) | null = null;

    constructor(sceneManager: SceneManager) {
        this.sceneManager = sceneManager;
        
        // Initialize XR objects
        this.cameraRig = new Group();
        this.arGroup = new Group(); // Initialize AR group
        this.controllers = [new Group(), new Group()];
        this.controllerGrips = [new Group(), new Group()];
        this.controllerModelFactory = new XRControllerModelFactory();

        // Initialize AR objects
        this.gridHelper = this.createGridHelper();
        this.groundPlane = this.createGroundPlane();
        this.hitTestMarker = this.createHitTestMarker();
        this.arLight = this.createARLight();

        this.setupXRObjects();
    }

    static getInstance(sceneManager: SceneManager): XRSessionManager {
        if (!XRSessionManager.instance) {
            XRSessionManager.instance = new XRSessionManager(sceneManager);
        }
        return XRSessionManager.instance;
    }

    private createGridHelper(): GridHelper {
        const grid = new GridHelper(10, 10, 0x808080, 0x808080);
        grid.material.transparent = true;
        grid.material.opacity = 0.5;
        grid.position.y = -0.01; // Slightly below ground to avoid z-fighting
        grid.visible = false; // Start hidden until AR session begins
        grid.layers.set(1); // Set to AR layer
        return grid;
    }

    private createGroundPlane(): Mesh {
        const geometry = new PlaneGeometry(10, 10);
        const material = new MeshPhongMaterial({
            color: 0x999999,
            transparent: true,
            opacity: 0.3,
            side: DoubleSide
        });
        const plane = new Mesh(geometry, material);
        plane.rotateX(-Math.PI / 2);
        plane.position.y = -0.02; // Below grid
        plane.visible = false; // Start hidden until AR session begins
        plane.layers.set(1); // Set to AR layer
        return plane;
    }

    private createHitTestMarker(): Mesh {
        const geometry = new RingGeometry(0.15, 0.2, 32);
        const material = new MeshBasicMaterial({
            color: 0xffffff,
            transparent: true,
            opacity: 0.8,
            side: DoubleSide
        });
        const marker = new Mesh(geometry, material);
        marker.rotateX(-Math.PI / 2);
        marker.visible = false;
        marker.layers.set(1); // Set to AR layer
        return marker;
    }

    private createARLight(): DirectionalLight {
        const light = new DirectionalLight(0xffffff, 1);
        light.position.set(1, 1, 1);
        light.layers.set(1); // Set to AR layer
        return light;
    }

    private setupXRObjects(): void {
        const scene = this.sceneManager.getScene();
        
        // Add camera rig to scene
        scene.add(this.cameraRig);

        // Add AR group to camera rig
        this.cameraRig.add(this.arGroup);

        // Add AR objects to AR group
        this.arGroup.add(this.gridHelper);
        this.arGroup.add(this.groundPlane);
        this.arGroup.add(this.hitTestMarker);
        this.arGroup.add(this.arLight);

        // Setup controllers
        this.controllers.forEach((_controller, index) => {
            this.setupController(index);
        });

        // Setup controller grips
        this.controllerGrips.forEach(grip => {
            this.setupControllerGrip(grip);
        });
    }

    private setupController(index: number): void {
        const controller = this.controllers[index];
        const controllerGrip = this.controllerGrips[index];

        controller.addEventListener('connected', (event: any) => {
            const controllerModel = this.buildController(event.data);
            controller.add(controllerModel);
            this.notifyControllerAdded(controller);
        });

        controller.addEventListener('disconnected', () => {
            controller.remove(...controller.children);
            this.notifyControllerRemoved(controller);
        });

        this.cameraRig.add(controller);
        this.cameraRig.add(controllerGrip);
    }

    private setupControllerGrip(grip: Group): void {
        const controllerModel = this.controllerModelFactory.createControllerModel(grip);
        grip.add(controllerModel);
    }

    private buildController(_inputSource: XRInputSource): Group {
        const controller = new Group();
        const geometry = new SphereGeometry(0.1, 16, 16);
        const material = new MeshBasicMaterial({ color: 0xffffff });
        const sphere = new Mesh(geometry, material);
        controller.add(sphere);
        return controller;
    }

    async initXRSession(): Promise<void> {
        if (this.isPresenting) {
            _logger.warn('XR session already active');
            return;
        }

        if (!platformManager.getCapabilities().xr.isSupported || !navigator.xr) {
            throw new Error('XR not supported on this platform');
        }

        try {
            const session = await navigator.xr.requestSession('immersive-ar', {
                requiredFeatures: ['local-floor', 'hit-test'],
                optionalFeatures: ['hand-tracking', 'layers', 'light-estimation']
            });

            if (!session) {
                throw new Error('Failed to create XR session');
            }

            this.session = session;

            // Setup XR rendering
            const renderer = this.sceneManager.getRenderer();
            await renderer.xr.setSession(this.session);
            
            // Configure renderer for AR
            renderer.xr.enabled = true;
            
            // Clear background for AR passthrough
            const scene = this.sceneManager.getScene();
            scene.background = null;
            
            // Get reference space
            this.referenceSpace = await this.session.requestReferenceSpace('local-floor');
            
            // Setup session event handlers
            this.session.addEventListener('end', this.onXRSessionEnd);

            // Enable AR layer for camera
            const camera = this.sceneManager.getCamera();
            camera.layers.enable(1);

            // Reset camera rig position
            this.cameraRig.position.set(0, 0, 0);
            this.cameraRig.quaternion.identity();

            // Show AR visualization elements after a short delay to ensure proper placement
            setTimeout(() => {
                this.gridHelper.visible = true;
                this.groundPlane.visible = true;
                this.arLight.visible = true;
            }, 1000);
            
            this.isPresenting = true;
            _logger.log('info', 'XR session initialized');

            // Notify session start
            if (this.xrSessionStartCallback) {
                this.xrSessionStartCallback();
            }
        } catch (error) {
            _logger.error('Failed to initialize XR session:', error);
            throw error;
        }
    }

    async endXRSession(): Promise<void> {
        if (this.session) {
            await this.session.end();
        }
    }

    private onXRSessionEnd = (): void => {
        if (this.hitTestSource) {
            this.hitTestSource.cancel();
            this.hitTestSource = null;
        }
        
        this.session = null;
        this.referenceSpace = null;
        this.hitTestSourceRequested = false;
        this.isPresenting = false;

        // Hide AR visualization elements
        this.gridHelper.visible = false;
        this.groundPlane.visible = false;
        this.hitTestMarker.visible = false;
        this.arLight.visible = false;

        // Reset camera rig
        this.cameraRig.position.set(0, 0, 0);
        this.cameraRig.quaternion.identity();

        // Reset scene background
        const scene = this.sceneManager.getScene();
        scene.background = new Color(BACKGROUND_COLOR);

        // Disable AR layer for camera
        const camera = this.sceneManager.getCamera();
        camera.layers.disable(1);

        // Reset renderer settings
        const renderer = this.sceneManager.getRenderer();
        renderer.xr.enabled = false;

        _logger.log('info', 'XR session ended');

        // Notify session end
        if (this.xrSessionEndCallback) {
            this.xrSessionEndCallback();
        }
    }

    onXRFrame(frame: XRFrame): void {
        if (!this.session || !this.referenceSpace) return;

        // Get pose
        const pose = frame.getViewerPose(this.referenceSpace);
        if (!pose) return;

        // Let Three.js handle camera updates through WebXRManager
        // Handle hit testing
        this.handleHitTest(frame);

        // Update controller poses
        this.controllers.forEach((controller) => {
            const inputSource = controller.userData.inputSource as XRInputSource;
            if (inputSource) {
                const targetRayPose = frame.getPose(inputSource.targetRaySpace, this.referenceSpace!);
                if (targetRayPose) {
                    controller.matrix.fromArray(targetRayPose.transform.matrix);
                    controller.matrix.decompose(controller.position, controller.quaternion, controller.scale);
                }
            }
        });

        // Update lighting if available
        if (hasLightEstimate(frame)) {
            const lightEstimate = frame.getLightEstimate();
            if (lightEstimate) {
                this.updateARLighting(lightEstimate);
            }
        }

        // Call animation frame callback
        if (this.xrAnimationFrameCallback) {
            this.xrAnimationFrameCallback(frame);
        }
    }

    private async handleHitTest(frame: XRFrame): Promise<void> {
        if (!this.hitTestSourceRequested && this.session && hasHitTest(this.session)) {
            try {
                const viewerSpace = await this.session.requestReferenceSpace('viewer');
                if (!viewerSpace) {
                    throw new Error('Failed to get viewer reference space');
                }

                const hitTestSource = await this.session.requestHitTestSource({
                    space: viewerSpace
                });

                if (hitTestSource) {
                    this.hitTestSource = hitTestSource;
                    this.hitTestSourceRequested = true;
                }
            } catch (error) {
                _logger.error('Failed to initialize hit test source:', error);
                this.hitTestSourceRequested = true; // Prevent further attempts
            }
        }

        if (this.hitTestSource && this.referenceSpace) {
            const hitTestResults = frame.getHitTestResults(this.hitTestSource);
            if (hitTestResults.length > 0) {
                const hit = hitTestResults[0];
                const pose = hit.getPose(this.referenceSpace);
                if (pose) {
                    this.hitTestMarker.visible = true;
                    this.hitTestMarker.position.set(
                        pose.transform.position.x,
                        pose.transform.position.y,
                        pose.transform.position.z
                    );

                    // Update grid and ground plane position to match hit test
                    this.gridHelper.position.y = pose.transform.position.y;
                    this.groundPlane.position.y = pose.transform.position.y - 0.01;
                }
            } else {
                this.hitTestMarker.visible = false;
            }
        }
    }

    private updateARLighting(lightEstimate: CustomXRLightEstimate): void {
        const intensity = lightEstimate.primaryLightIntensity.value;
        const direction = lightEstimate.primaryLightDirection;
        
        if (direction) {
            this.arLight.position.set(direction.x, direction.y, direction.z);
        }
        this.arLight.intensity = intensity || 1;
    }

    setSessionCallbacks(
        onStart: () => void,
        onEnd: () => void,
        onFrame: (frame: XRFrame) => void
    ): void {
        this.xrSessionStartCallback = onStart;
        this.xrSessionEndCallback = onEnd;
        this.xrAnimationFrameCallback = onFrame;
    }

    onControllerAdded(callback: (controller: Group) => void): void {
        this.controllerAddedCallback = callback;
    }

    onControllerRemoved(callback: (controller: Group) => void): void {
        this.controllerRemovedCallback = callback;
    }

    private notifyControllerAdded(controller: Group): void {
        this.controllerAddedCallback?.(controller);
    }

    private notifyControllerRemoved(controller: Group): void {
        this.controllerRemovedCallback?.(controller);
    }

    getCameraRig(): Group {
        return this.cameraRig;
    }

    getControllers(): Group[] {
        return this.controllers;
    }

    getControllerGrips(): Group[] {
        return this.controllerGrips;
    }

    isXRPresenting(): boolean {
        return this.isPresenting;
    }

    getSession(): XRSession | null {
        return this.session;
    }

    getReferenceSpace(): XRReferenceSpace | null {
        return this.referenceSpace;
    }

    dispose(): void {
        if (this.session) {
            this.session.end().catch(console.error);
        }

        this.controllers.forEach(controller => {
            controller.removeEventListener('connected', (event: any) => {
                const controllerModel = this.buildController(event.data);
                controller.add(controllerModel);
                this.notifyControllerAdded(controller);
            });

            controller.removeEventListener('disconnected', () => {
                controller.remove(...controller.children);
                this.notifyControllerRemoved(controller);
            });
        });

        this.controllerGrips.forEach(grip => {
            grip.remove(...grip.children);
        });

        this.hitTestSource?.cancel();
        this.hitTestSource = null;
        this.hitTestSourceRequested = false;

        this.session = null;
        this.referenceSpace = null;
        this.isPresenting = false;
    }
}

----
xr/xrInteraction.ts
import { XRSessionManager } from './xrSessionManager';
import { NodeManager } from '../rendering/nodes';
import { SettingsStore } from '../state/SettingsStore';
import { createLogger } from '../core/logger';
import { WebSocketService } from '../websocket/websocketService';
import * as THREE from 'three';

const logger = createLogger('XRInteraction');

export class XRInteraction {
    private static instance: XRInteraction | null = null;
    private readonly settingsStore: SettingsStore;
    private updateBatch: Map<string, THREE.Vector3> = new Map();
    private batchUpdateTimeout: NodeJS.Timeout | null = null;
    private settingsUnsubscribers: Array<() => void> = [];
    private interactionEnabled: boolean = false;
    private websocketService: WebSocketService;

    private constructor(_: XRSessionManager, __: NodeManager) {
        this.settingsStore = SettingsStore.getInstance();
        this.websocketService = WebSocketService.getInstance();
        this.initializeSettings();
    }

    private initializeSettings(): void {
        try {
            this.setupSettingsSubscription();
        } catch (error) {
            logger.error('Failed to setup settings subscription:', error);
        }
    }

    public static getInstance(xrManager: XRSessionManager, nodeManager: NodeManager): XRInteraction {
        if (!XRInteraction.instance) {
            XRInteraction.instance = new XRInteraction(xrManager, nodeManager);
        }
        return XRInteraction.instance;
    }

    private setupSettingsSubscription(): void {
        // Clear any existing subscriptions
        this.settingsUnsubscribers.forEach(unsub => unsub());
        this.settingsUnsubscribers = [];

        // Subscribe to XR interaction enabled state
        let unsubscriber: (() => void) | undefined;
        this.settingsStore.subscribe('xr.interaction.enabled', (value) => {
            this.interactionEnabled = typeof value === 'boolean' ? value : value === 'true';
            if (!this.interactionEnabled) {
                this.clearHandState();
            }
        }).then(unsub => {
            unsubscriber = unsub;
            if (unsubscriber) {
                this.settingsUnsubscribers.push(unsubscriber);
            }
        });
    }

    private clearHandState(): void {
        this.updateBatch.clear();
        if (this.batchUpdateTimeout) {
            clearTimeout(this.batchUpdateTimeout);
            this.batchUpdateTimeout = null;
        }
    }

    private flushPositionUpdates(): void {
        if (this.updateBatch.size === 0) return;

        const updates = Array.from(this.updateBatch.entries()).map(([id, position]) => ({
            id,
            position: {
                x: position.x,
                y: position.y,
                z: position.z
            }
        }));

        this.websocketService.sendNodeUpdates(updates);
        this.updateBatch.clear();
    }

    public update(): void {
        if (!this.interactionEnabled) return;
        this.flushPositionUpdates();
    }

    public dispose(): void {
        // Clear subscriptions
        this.settingsUnsubscribers.forEach(unsub => unsub());
        this.settingsUnsubscribers = [];

        // Flush any pending updates
        this.flushPositionUpdates();

        XRInteraction.instance = null;
    }
}

----
state/defaultSettings.ts
import { Settings, VisualizationSettings } from '../types/settings';
import { LABEL_COLOR } from '../core/constants';

// Helper function to convert number to hex color
function toHexColor(num: number): string {
    return `#${num.toString(16).padStart(6, '0')}`;
}

// Export visualization defaults separately for reuse
export const defaultVisualizationSettings: VisualizationSettings = {
    animations: {
        enableMotionBlur: false,
        enableNodeAnimations: true,
        motionBlurStrength: 0.5,
        selectionWaveEnabled: false,
        pulseEnabled: false,
        pulseSpeed: 1.0,
        pulseStrength: 0.5,
        waveSpeed: 1.0
    },
    bloom: {
        enabled: true,
        strength: 0.5,
        radius: 1,
        edgeBloomStrength: 0.5,
        nodeBloomStrength: 0.5,
        environmentBloomStrength: 0.5
    },
    edges: {
        color: '#666666',
        defaultWidth: 1,
        minWidth: 0.5,
        maxWidth: 3,
        arrowSize: 0.2,
        baseWidth: 1,
        enableArrows: true,
        opacity: 0.8,
        widthRange: [0.5, 3]
    },
    hologram: {
        color: '#00ff00',
        opacity: 0.5,
        glowIntensity: 0.8,
        rotationSpeed: 0.5,
        enabled: true,
        ringCount: 3,
        ringColor: '#00ff00',
        ringOpacity: 0.5,
        ringSizes: [1, 1.5, 2],
        ringRotationSpeed: 0.5,
        enableBuckminster: true,
        buckminsterScale: 1,
        buckminsterOpacity: 0.5,
        enableGeodesic: true,
        geodesicScale: 1,
        geodesicOpacity: 0.5,
        enableTriangleSphere: true,
        triangleSphereScale: 1,
        triangleSphereOpacity: 0.5,
        globalRotationSpeed: 0.2
    },
    labels: {
        enabled: true,
        size: 1,
        color: toHexColor(LABEL_COLOR),
        enableLabels: true,
        desktopFontSize: 48,
        textColor: toHexColor(LABEL_COLOR)
    },
    nodes: {
        color: '#ffffff',
        defaultSize: 1,
        minSize: 0.5,
        maxSize: 2,
        baseColor: '#ffffff',
        baseSize: 1,
        sizeRange: [0.5, 2],
        enableMetadataShape: true,
        colorRangeAge: ['#ff0000', '#00ff00'],
        colorRangeLinks: ['#0000ff', '#ff00ff'],
        metalness: 0.5,
        roughness: 0.5,
        opacity: 1,
        enableMetadataVisualization: true,
        enableHologram: true,
        enableInstancing: true,
        quality: 'medium',
        material: {
            type: 'phong',
            transparent: false,
            opacity: 1.0
        }
    },
    physics: {
        enabled: true,
        attractionStrength: 0.1,
        repulsionStrength: 0.1,
        springStrength: 0.1,
        damping: 0.5,
        iterations: 1,
        maxVelocity: 10,
        collisionRadius: 1,
        enableBounds: true,
        boundsSize: 100
    },
};

// Main settings object with all defaults
export const defaultSettings: Settings = {
    visualization: defaultVisualizationSettings,
    render: {
        ambientLightIntensity: 0.5,
        directionalLightIntensity: 0.8,
        environmentIntensity: 1,
        backgroundColor: '#000000',
        enableAmbientOcclusion: true,
        enableAntialiasing: true,
        enableShadows: true,
        showGrid: true
    },
    controls: {
        autoRotate: false,
        rotateSpeed: 1.0,
        zoomSpeed: 1.0,
        panSpeed: 1.0
    },
    xr: {
        mode: 'ar',
        roomScale: true,
        spaceType: 'local',
        quality: 'high',
        input: 'hands',
        visuals: {
            handMeshEnabled: true,
            handMeshColor: '#ffffff',
            handMeshOpacity: 0.5,
            handPointSize: 5,
            handRayEnabled: true,
            handRayColor: '#00ff00',
            handRayWidth: 2,
            gestureSsmoothing: 0.5
        },
        environment: {
            enableLightEstimation: true,
            enablePlaneDetection: true,
            enableSceneUnderstanding: true,
            planeColor: '#808080',
            planeOpacity: 0.5,
            showPlaneOverlay: true,
            snapToFloor: true
        },
        passthrough: false,
        haptics: true
    },
    system: {
        network: {
            bindAddress: '127.0.0.1',
            domain: 'localhost',
            port: 3000,
            enableHttp2: true,
            enableTls: false,
            minTlsVersion: 'TLS1.2',
            maxRequestSize: 10485760,
            enableRateLimiting: true,
            rateLimitRequests: 100,
            rateLimitWindow: 60,
            tunnelId: ''
        },
        websocket: {
            url: '',
            reconnectAttempts: 5,
            reconnectDelay: 5000,
            binaryChunkSize: 65536,
            compressionEnabled: true,
            compressionThreshold: 1024,
            maxConnections: 100,
            maxMessageSize: 32 * 1024 * 1024,
            updateRate: 60
        },
        security: {
            allowedOrigins: ['http://localhost:3000'],
            auditLogPath: './audit.log',
            cookieHttponly: true,
            cookieSamesite: 'Lax',
            cookieSecure: false,
            csrfTokenTimeout: 3600,
            enableAuditLogging: true,
            enableRequestValidation: true,
            sessionTimeout: 86400
        },
        debug: {
            enabled: true,
            enableDataDebug: true,
            enableWebsocketDebug: true,
            logBinaryHeaders: true,
            logFullJson: true,
            logLevel: 'info'
        }
    }
};

----
state/SettingsStore.ts
import { Settings } from '../types/settings';
import { createLogger } from '../core/logger';
import { defaultSettings } from './defaultSettings';

const logger = createLogger('SettingsStore');

export type SettingsChangeCallback = (path: string, value: unknown) => void;

export class SettingsStore {
    private static instance: SettingsStore | null = null;
    private settings: Settings;
    private initialized: boolean = false;
    private initializationPromise: Promise<void> | null = null;
    private pendingChanges: Set<string> = new Set();
    private subscribers: Map<string, Set<SettingsChangeCallback>> = new Map();
    private syncTimer: number | null = null;

    private constructor() {
        // Initialize with default settings
        this.settings = { ...defaultSettings };
    }

    public static getInstance(): SettingsStore {
        if (!SettingsStore.instance) {
            SettingsStore.instance = new SettingsStore();
        }
        return SettingsStore.instance;
    }

    public async initialize(): Promise<void> {
        if (this.initialized) {
            return Promise.resolve();
        }
        if (this.initializationPromise) {
            return this.initializationPromise;
        }

        this.initializationPromise = (async () => {
            try {
                // Using default settings directly
                this.settings = { ...defaultSettings };
                logger.info('Using default settings (server sync disabled)');

                this.initialized = true;
                logger.info('SettingsStore initialized');
            } catch (error) {
                logger.error('Failed to initialize settings:', error);
                // Use defaults on error
                this.settings = { ...defaultSettings };
                this.initialized = true;
            }
        })();

        return this.initializationPromise;
    }

    public isInitialized(): boolean {
        return this.initialized;
    }

    public async subscribe(path: string, callback: SettingsChangeCallback): Promise<() => void> {
        // Wait for initialization if not already initialized
        if (!this.initialized) {
            await this.initialize();
        }

        if (!this.subscribers.has(path)) {
            this.subscribers.set(path, new Set());
        }
        this.subscribers.get(path)?.add(callback);

        // Immediately call callback with current value
        const value = this.get(path);
        if (value !== undefined) {
            callback(path, value);
        }

        // Return unsubscribe function
        return () => {
            const pathSubscribers = this.subscribers.get(path);
            if (pathSubscribers) {
                pathSubscribers.delete(callback);
                if (pathSubscribers.size === 0) {
                    this.subscribers.delete(path);
                }
            }
        };
    }

    public get(path: string): unknown {
        if (!this.initialized) {
            logger.warn('Attempting to access settings before initialization');
            return undefined;
        }
        
        if (!path) {
            return this.settings;
        }
        
        try {
            return path.split('.').reduce((obj: any, key) => {
                if (obj === null || obj === undefined) {
                    throw new Error(`Invalid path: ${path}`);
                }
                return obj[key];
            }, this.settings);
        } catch (error) {
            logger.error(`Error accessing setting at path ${path}:`, error);
            return undefined;
        }
    }

    public set(path: string, value: unknown): void {
        if (!this.initialized) {
            logger.error('Attempting to set settings before initialization');
            throw new Error('SettingsStore not initialized');
        }

        try {
            const parts = path.split('.');
            const lastKey = parts.pop()!;
            const target = parts.reduce((obj: any, key) => {
                if (!(key in obj)) {
                    obj[key] = {};
                }
                return obj[key];
            }, this.settings);

            if (!target || typeof target !== 'object') {
                throw new Error(`Invalid settings path: ${path}`);
            }

            target[lastKey] = value;
            this.pendingChanges.add(path);
            this.notifySubscribers(path, value);
        } catch (error) {
            logger.error(`Error setting value at path ${path}:`, error);
            throw error;
        }
    }

    private notifySubscribers(path: string, value: unknown): void {
        const subscribers = this.subscribers.get(path);
        if (subscribers) {
            subscribers.forEach(callback => {
                try {
                    callback(path, value);
                } catch (error) {
                    logger.error(`Error in settings subscriber for ${path}:`, error);
                }
            });
        }
    }

    public dispose(): void {
        if (this.syncTimer !== null) {
            window.clearInterval(this.syncTimer);
            this.syncTimer = null;
        }
        this.subscribers.clear();
        this.pendingChanges.clear();
        this.initialized = false;
    }
}

----
state/graphData.ts
import { Vector3 } from 'three';
import { createLogger } from '../core/utils';
import { GraphData, Node, Edge } from '../core/types';

const logger = createLogger('GraphDataManager');

// Server-side data structures
interface ServerNode {
    id: string;
    label: string;
    metadata?: Record<string, unknown>;
    data?: {
        position?: number[];
        velocity?: { x: number; y: number; z: number };
        type?: string;
    };
    properties?: Record<string, unknown>;
}

interface ServerEdge {
    source: string;
    target: string;
    edge_type?: string;
    metadata?: Record<string, unknown>;
    properties?: Record<string, unknown>;
}

interface TransformedNode extends Omit<Node, 'data' | 'position'> {
    data: {
        position: Vector3;
        velocity: Vector3;
        type?: string;
    };
}

class ServerDataTransformer {
    transform(data: { nodes: ServerNode[]; edges: ServerEdge[]; metadata?: Record<string, unknown> }): GraphData {
        return {
            nodes: data.nodes.map(node => {
                const position = new Vector3(
                    node.data?.position?.[0] || Math.random() * 100 - 50,
                    node.data?.position?.[1] || Math.random() * 100 - 50,
                    node.data?.position?.[2] || Math.random() * 100 - 50
                );
                return {
                    id: node.id,
                    label: node.label,
                    position, // Required by Node interface
                    data: {
                        position, // Also keep in data for consistency
                        velocity: new Vector3(0, 0, 0),
                        type: node.data?.type
                    },
                    properties: node.properties || node.metadata || {}
                } as Node;
            }),
            edges: data.edges.map(edge => ({
                source: edge.source,
                target: edge.target,
                type: edge.edge_type || 'default',
                properties: edge.properties || edge.metadata || {}
            })),
            metadata: data.metadata || {}
        };
    }
}

export class GraphDataManager {
    private static instance: GraphDataManager;
    private nodes = new Map<string, TransformedNode>();
    private edges = new Map<string, Edge>();
    private currentPage = 0;
    private hasMorePages = true;
    private loadingNodes = false;
    private pageSize = 100;
    private updateListeners = new Set<(data: GraphData) => void>();
    private positionUpdateListeners = new Set<(positions: Float32Array) => void>();
    private metadata: Record<string, unknown> = {};
    private transformer: ServerDataTransformer;

    constructor() {
        this.transformer = new ServerDataTransformer();
    }

    static getInstance(): GraphDataManager {
        if (!GraphDataManager.instance) {
            GraphDataManager.instance = new GraphDataManager();
        }
        return GraphDataManager.instance;
    }

    async loadInitialGraphData(): Promise<void> {
        try {
            debugger; // Breakpoint 1: Before initial graph data load
            // Reset state
            this.nodes.clear();
            this.edges.clear();
            this.currentPage = 0;
            this.hasMorePages = true;
            this.loadingNodes = false;

            // First, update the graph data from the backend
            try {
                debugger; // Breakpoint 2: Before graph update request
                const updateResponse = await fetch('/api/graph/update', {
                    method: 'POST',
                });

                if (!updateResponse.ok) {
                    logger.warn('Graph update returned ' + updateResponse.status + ', continuing with initial load');
                } else {
                    const updateResult = await updateResponse.json();
                    debugger; // Breakpoint 3: After graph update response
                    logger.debug('Graph update result:', updateResult);
                }
            } catch (updateError) {
                logger.warn('Graph update failed, continuing with initial load:', updateError);
            }

            // Then load the first page
            await this.loadNextPage();
            
            // Notify listeners of initial data
            debugger; // Breakpoint 4: Before notifying listeners
            this.notifyUpdateListeners();

            logger.debug('Initial graph data loaded:', {
                nodes: this.nodes.size,
                edges: this.edges.size
            });
        } catch (error) {
            logger.error('Failed to load initial graph data:', error);
            // Don't throw here, allow app to continue with empty graph
            this.notifyUpdateListeners();
        }
    }

    private async loadNextPage(): Promise<void> {
        if (this.loadingNodes || !this.hasMorePages) return;

        try {
            this.loadingNodes = true;
            debugger; // Breakpoint 5: Before fetching next page
            const response = await fetch(`/api/graph/data/paginated?page=${this.currentPage}&pageSize=${this.pageSize}`);
            
            if (!response.ok) {
                throw new Error(`Failed to fetch graph data: ${response.status} ${response.statusText}`);
            }

            const serverData = await response.json();
            debugger; // Breakpoint 6: After receiving page data, before processing
            logger.debug('Received graph data:', {
                nodesCount: serverData.nodes?.length || 0,
                edgesCount: serverData.edges?.length || 0,
                totalPages: serverData.totalPages,
                currentPage: serverData.currentPage,
                metadata: serverData.metadata
            });
            
            if (!serverData.nodes || !Array.isArray(serverData.nodes)) {
                throw new Error('Invalid graph data: nodes array is missing or invalid');
            }
            
            // Transform and update graph with new nodes and edges
            const transformedData = this.transformer.transform(serverData);
            transformedData.nodes.forEach(node => {
                const transformedNode = {
                    ...node,
                    position: node.data?.position || node.position // Ensure position is at top level, fallback to node.position
                } as unknown as TransformedNode;
                this.nodes.set(node.id, transformedNode);
            });
            transformedData.edges.forEach(edge => {
                const edgeId = this.createEdgeId(edge.source, edge.target);
                this.edges.set(edgeId, edge);
            });

            debugger; // Breakpoint 7: After processing page data, before pagination update
            // Update pagination state
            this.currentPage = serverData.currentPage;
            this.hasMorePages = serverData.currentPage < serverData.totalPages;

            // Notify listeners of updated data
            this.notifyUpdateListeners();

            logger.debug('Loaded page ' + this.currentPage + ' of graph data:', {
                nodes: this.nodes.size,
                edges: this.edges.size
            });
        } catch (error) {
            logger.error('Failed to load graph data:', error);
            this.hasMorePages = false;  // Stop trying to load more pages on error
        } finally {
            this.loadingNodes = false;
        }
    }

    private createEdgeId(source: string, target: string): string {
        return `${source}-${target}`;
    }

    /**
     * Subscribe to graph data updates
     */
    subscribe(listener: (data: GraphData) => void): () => void {
        this.updateListeners.add(listener);
        return () => {
            this.updateListeners.delete(listener);
        };
    }

    /**
     * Subscribe to position updates only
     */
    subscribeToPositionUpdates(listener: (positions: Float32Array) => void): () => void {
        this.positionUpdateListeners.add(listener);
        return () => {
            this.positionUpdateListeners.delete(listener);
        };
    }

    /**
     * Get the current graph data
     */
    getGraphData(): GraphData {
        return {
            nodes: Array.from(this.nodes.values()).map(node => ({
                ...node,
                position: node.data.position // Ensure position is at top level
            })) as Node[],
            edges: Array.from(this.edges.values()),
            metadata: this.metadata
        };
    }

    private notifyUpdateListeners(): void {
        const data = this.getGraphData();
        debugger; // Breakpoint: Before notifying graph data listeners
        this.updateListeners.forEach(listener => {
            try {
                listener(data);
            } catch (error) {
                logger.error('Error in graph update listener:', error);
            }
        });
    }

    /**
     * Update graph metadata
     */
    updateMetadata(metadata: Record<string, unknown>): void {
        this.metadata = { ...this.metadata, ...metadata };
        this.notifyUpdateListeners();
    }

    /**
     * Update node positions in bulk using a Float32Array
     * This is used for physics simulation updates
     */
    updatePositions(positions: Float32Array): void {
        debugger; // Breakpoint: Before updating positions
        this.positionUpdateListeners.forEach(listener => {
            try {
                listener(positions);
            } catch (error) {
                logger.error('Error in position update listener:', error);
            }
        });
    }
}

// Export a singleton instance
export const graphDataManager = GraphDataManager.getInstance();

----
state/SettingsObserver.ts
import { Settings } from '../types/settings';
import { createLogger } from '../core/logger';

const logger = createLogger('SettingsObserver');

export type SettingsChangeCallback = (settings: Settings) => void;

export class SettingsObserver {
    private static instance: SettingsObserver;
    private observers = new Map<string, SettingsChangeCallback>();

    private constructor() {}

    static getInstance(): SettingsObserver {
        if (!SettingsObserver.instance) {
            SettingsObserver.instance = new SettingsObserver();
        }
        return SettingsObserver.instance;
    }

    subscribe(id: string, callback: SettingsChangeCallback): () => void {
        logger.debug(`Subscribing observer: ${id}`);
        this.observers.set(id, callback);
        return () => this.unsubscribe(id);
    }

    unsubscribe(id: string): void {
        logger.debug(`Unsubscribing observer: ${id}`);
        this.observers.delete(id);
    }

    notifyAll(settings: Settings): void {
        logger.debug(`Notifying ${this.observers.size} observers of settings change`);
        this.observers.forEach((callback, id) => {
            try {
                callback(settings);
            } catch (error) {
                logger.error(`Error in settings observer ${id}:`, error);
            }
        });
    }
}

----
state/settings.ts
import { Settings } from '../types/settings';
import { createLogger } from '../core/logger';
import { SettingsStore } from './SettingsStore';
import { defaultSettings } from './defaultSettings';
import {
    SettingsCategory,
    SettingsPath,
    SettingValue,
    getSettingValue,
    setSettingValue,
    isValidSettingPath
} from '../types/settings/utils';

const logger = createLogger('SettingsManager');

export class SettingsManager {
    private store: SettingsStore;
    private initialized: boolean = false;
    private settings: Settings = { ...defaultSettings };

    constructor() {
        this.store = SettingsStore.getInstance();
    }

    private useDefaultSettings(): void {
        // Reset to default settings
        this.settings = { ...defaultSettings };
        this.initialized = true;
    }

    public async initialize(): Promise<void> {
        if (this.initialized) return;

        // Using default settings while server sync is disabled
        this.useDefaultSettings();
        logger.info('Using default settings (server sync disabled)');
    }

    public getCurrentSettings(): Settings {
        // Always return settings, which will be defaults if initialization failed
        return this.settings;
    }

    public async updateSetting(path: SettingsPath, value: SettingValue): Promise<void> {
        if (!isValidSettingPath(path)) {
            throw new Error(`Invalid settings path: ${path}`);
        }

        try {
            setSettingValue(this.settings, path, value);
            if (this.initialized) {
                await this.store.set(path, value);
            } else {
                logger.warn(`Setting ${path} updated in memory only - store not initialized`);
            }
            logger.debug(`Updated setting ${path} to ${value}`);
        } catch (error) {
            logger.error(`Failed to update setting ${path}:`, error);
            throw error;
        }
    }

    public get(path: SettingsPath): SettingValue {
        if (!isValidSettingPath(path)) {
            throw new Error(`Invalid settings path: ${path}`);
        }
        
        try {
            return getSettingValue(this.settings, path);
        } catch (error) {
            logger.error(`Error getting setting at path ${path}:`, error);
            // Return default value for this path if available
            return getSettingValue(defaultSettings, path);
        }
    }

    public getCategory(category: SettingsCategory): Settings[typeof category] {
        if (!(category in this.settings)) {
            logger.warn(`Category ${category} not found, using defaults`);
            return defaultSettings[category];
        }
        return this.settings[category];
    }

    public subscribe(path: string, callback: (value: unknown) => void): () => void {
        const store = SettingsStore.getInstance();
        let unsubscriber: (() => void) | undefined;
        
        store.subscribe(path, (_, value) => {
            callback(value);
        }).then(unsub => {
            unsubscriber = unsub;
        });

        return () => {
            if (unsubscriber) {
                unsubscriber();
            }
        };
    }

    public onSettingChange(path: SettingsPath, callback: (value: SettingValue) => void): () => void {
        const store = SettingsStore.getInstance();
        let unsubscriber: (() => void) | undefined;
        
        store.subscribe(path, (_, value) => {
            callback(value as SettingValue);
        }).then(unsub => {
            unsubscriber = unsub;
        });

        return () => {
            if (unsubscriber) {
                unsubscriber();
            }
        };
    }

    public async batchUpdate(updates: Array<{ path: SettingsPath; value: SettingValue }>): Promise<void> {
        try {
            // Validate all paths first
            for (const { path } of updates) {
                if (!isValidSettingPath(path)) {
                    throw new Error(`Invalid settings path: ${path}`);
                }
            }

            // Apply updates to local settings first
            for (const { path, value } of updates) {
                setSettingValue(this.settings, path, value);
            }

            // Then sync with store if initialized
            if (this.initialized) {
                await Promise.all(
                    updates.map(({ path, value }) => this.store.set(path, value))
                );
            } else {
                logger.warn('Settings updated in memory only - store not initialized');
            }
        } catch (error) {
            logger.error('Failed to apply batch updates:', error);
            throw error;
        }
    }

    public dispose(): void {
        this.store.dispose();
        this.initialized = false;
    }
}

// Export singleton instance
export const settingsManager = new SettingsManager();

----
ui/ControlPanel.css
/* Control Panel Styles */

.control-panel {
    position: fixed;
    top: 20px;
    right: 20px;
    width: 300px;
    max-height: calc(100vh - 40px);
    background-color: rgba(30, 30, 30, 0.95);
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    color: #ffffff;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    overflow-y: auto;
    z-index: 1000;
    padding: 16px;
}

.control-panel-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 16px;
    padding-bottom: 8px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.control-panel-header h2 {
    margin: 0;
    font-size: 18px;
    font-weight: 500;
}

.connection-status {
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
}

.connection-status.connected {
    background-color: rgba(39, 174, 96, 0.2);
    color: #2ecc71;
}

.connection-status.disconnected {
    background-color: rgba(231, 76, 60, 0.2);
    color: #e74c3c;
}

.settings-section {
    margin-bottom: 24px;
}

.settings-section h3 {
    margin: 0 0 12px 0;
    font-size: 16px;
    font-weight: 500;
    color: #bdc3c7;
}

.setting-container {
    margin-bottom: 12px;
    display: flex;
    flex-direction: column;
    gap: 4px;
}

.setting-container label {
    font-size: 14px;
    color: #ecf0f1;
}

.setting-container input[type="text"],
.setting-container input[type="number"] {
    background-color: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 4px;
    padding: 6px 8px;
    color: #ffffff;
    font-size: 14px;
    width: 100%;
}

.setting-container input[type="checkbox"] {
    width: 16px;
    height: 16px;
}

.setting-container input[type="color"] {
    width: 100%;
    height: 32px;
    padding: 2px;
    background-color: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 4px;
}

.array-input {
    display: flex;
    gap: 8px;
}

.array-input input {
    flex: 1;
}

.reset-button {
    width: 100%;
    padding: 8px 16px;
    background-color: rgba(231, 76, 60, 0.2);
    border: 1px solid rgba(231, 76, 60, 0.4);
    border-radius: 4px;
    color: #e74c3c;
    font-size: 14px;
    cursor: pointer;
    transition: all 0.2s ease;
}

.reset-button:hover {
    background-color: rgba(231, 76, 60, 0.3);
    border-color: rgba(231, 76, 60, 0.6);
}

.randomize-button-container {
    padding: 16px;
    margin-bottom: 16px;
    border-bottom: 1px solid #ccc;
}

.randomize-button {
    width: 100%;
    padding: 12px;
    font-size: 16px;
    color: white;
    background-color: #2196f3;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.randomize-button:hover {
    background-color: #1976d2;
}

.randomize-button:active {
    background-color: #0d47a1;
}

/* Scrollbar styles */
.control-panel::-webkit-scrollbar {
    width: 8px;
}

.control-panel::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 4px;
}

.control-panel::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.2);
    border-radius: 4px;
}

.control-panel::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.3);
}

----
ui/ControlPanel.ts
import { Settings } from '../types/settings';
import { createLogger } from '../core/logger';
import { SettingsStore } from '../state/SettingsStore';
import './ControlPanel.css';

const logger = createLogger('ControlPanel');

export class ControlPanel {
    private container: HTMLElement;
    private settings: Settings;
    private unsubscribers: Array<() => void> = [];
    private settingsStore: SettingsStore;

    constructor(container: HTMLElement) {
        this.container = container;
        this.settingsStore = SettingsStore.getInstance();
        this.settings = {} as Settings;
        this.initializePanel();
    }

    private async initializePanel(): Promise<void> {
        try {
            await this.settingsStore.initialize();
            this.settings = this.settingsStore.get('') as Settings;
            this.createPanelElements();
            await this.setupSettingsSubscriptions();
        } catch (error) {
            logger.error('Failed to initialize control panel:', error);
        }
    }

    private createPanelElements(): void {
        // Clear existing content
        this.container.innerHTML = '';

        // Create settings sections
        const flatSettings = this.flattenSettings(this.settings);
        const groupedSettings = this.groupSettingsByCategory(flatSettings);

        for (const [category, settings] of Object.entries(groupedSettings)) {
            const section = this.createSection(category);
            
            for (const [path, value] of Object.entries(settings)) {
                const control = this.createSettingControl(path, value);
                if (control) {
                    section.appendChild(control);
                }
            }
            
            this.container.appendChild(section);
        }
    }

    private flattenSettings(obj: unknown, prefix: string = ''): Record<string, unknown> {
        const result: Record<string, unknown> = {};
        
        if (obj && typeof obj === 'object' && !Array.isArray(obj)) {
            for (const [key, value] of Object.entries(obj)) {
                const newKey = prefix ? `${prefix}.${key}` : key;
                
                if (value && typeof value === 'object' && !Array.isArray(value)) {
                    Object.assign(result, this.flattenSettings(value, newKey));
                } else {
                    result[newKey] = value;
                }
            }
        }
        
        return result;
    }

    private groupSettingsByCategory(flatSettings: Record<string, unknown>): Record<string, Record<string, unknown>> {
        const result: Record<string, Record<string, unknown>> = {};
        
        for (const [path, value] of Object.entries(flatSettings)) {
            const category = path.split('.')[0];
            if (!result[category]) {
                result[category] = {};
            }
            result[category][path] = value;
        }
        
        return result;
    }

    private createSection(category: string): HTMLElement {
        const section = document.createElement('div');
        section.className = 'settings-section';
        
        const header = document.createElement('h2');
        header.textContent = this.formatCategoryName(category);
        section.appendChild(header);
        
        return section;
    }

    private createSettingControl(path: string, value: unknown): HTMLElement | null {
        const container = document.createElement('div');
        container.className = 'setting-control';
        
        const label = document.createElement('label');
        label.textContent = this.formatSettingName(path.split('.').pop()!);
        container.appendChild(label);
        
        const control = this.createInputElement(path, value);
        if (!control) {
            return null;
        }
        
        container.appendChild(control);
        return container;
    }

    private createInputElement(path: string, value: unknown): HTMLElement | null {
        const type = this.getInputType(value);
        if (!type) {
            return null;
        }

        let input: HTMLElement;
        
        switch (type) {
            case 'checkbox':
                input = document.createElement('input');
                (input as HTMLInputElement).type = 'checkbox';
                (input as HTMLInputElement).checked = value as boolean;
                input.onchange = (e: Event) => {
                    const target = e.target as HTMLInputElement;
                    this.settingsStore.set(path, target.checked);
                };
                break;

            case 'number':
                input = document.createElement('input');
                (input as HTMLInputElement).type = 'number';
                (input as HTMLInputElement).value = String(value);
                (input as HTMLInputElement).step = this.getStepValue(path);
                input.onchange = (e: Event) => {
                    const target = e.target as HTMLInputElement;
                    this.settingsStore.set(path, parseFloat(target.value));
                };
                break;

            case 'color':
                input = document.createElement('input');
                (input as HTMLInputElement).type = 'color';
                (input as HTMLInputElement).value = value as string;
                input.onchange = (e: Event) => {
                    const target = e.target as HTMLInputElement;
                    this.settingsStore.set(path, target.value);
                };
                break;

            case 'select':
                input = document.createElement('select');
                if (Array.isArray(value)) {
                    value.forEach(option => {
                        const opt = document.createElement('option');
                        opt.value = String(option);
                        opt.textContent = String(option);
                        input.appendChild(opt);
                    });
                }
                input.onchange = (e: Event) => {
                    const target = e.target as HTMLSelectElement;
                    this.settingsStore.set(path, target.value);
                };
                break;

            default:
                input = document.createElement('input');
                (input as HTMLInputElement).type = 'text';
                (input as HTMLInputElement).value = String(value);
                input.onchange = (e: Event) => {
                    const target = e.target as HTMLInputElement;
                    this.settingsStore.set(path, target.value);
                };
        }

        input.id = `setting-${path}`;
        return input;
    }

    private getInputType(value: unknown): string | null {
        switch (typeof value) {
            case 'boolean':
                return 'checkbox';
            case 'number':
                return 'number';
            case 'string':
                if (value.match(/^#[0-9a-f]{6}$/i)) {
                    return 'color';
                }
                return 'text';
            case 'object':
                if (Array.isArray(value)) {
                    return 'select';
                }
                return null;
            default:
                return null;
        }
    }

    private getStepValue(path: string): string {
        if (path.includes('opacity') || path.includes('strength')) {
            return '0.1';
        }
        return '1';
    }

    private formatCategoryName(category: string): string {
        return category
            .split(/(?=[A-Z])/)
            .map(word => word.charAt(0).toUpperCase() + word.slice(1))
            .join(' ');
    }

    private formatSettingName(setting: string): string {
        return setting
            .split(/(?=[A-Z])/)
            .map(word => word.charAt(0).toUpperCase() + word.slice(1))
            .join(' ');
    }

    private setupSettingsSubscriptions(): void {
        // Clear existing subscriptions
        this.unsubscribers.forEach(unsub => unsub());
        this.unsubscribers = [];

        const settings = this.settingsStore;
        let unsubscriber: (() => void) | undefined;

        // Subscribe to settings changes
        settings.subscribe('visualization.labels.enableLabels', (value) => {
            this.updateLabelVisibility(typeof value === 'boolean' ? value : value === 'true');
        }).then(unsub => {
            unsubscriber = unsub;
            if (unsubscriber) {
                this.unsubscribers.push(unsubscriber);
            }
        });

        const flatSettings = this.flattenSettings(this.settings);
        for (const path of Object.keys(flatSettings)) {
            settings.subscribe(path, (value) => {
                this.updateSettingValue(path, value);
            }).then(unsub => {
                if (unsub) {
                    this.unsubscribers.push(unsub);
                }
            });
        }
    }

    private updateLabelVisibility(value: boolean): void {
        // Update label visibility in the UI
        const labelElements = document.querySelectorAll('.node-label');
        labelElements.forEach(el => {
            (el as HTMLElement).style.display = value ? 'block' : 'none';
        });
    }

    private updateSettingValue(path: string, value: unknown): void {
        const element = document.getElementById(`setting-${path}`);
        if (!element) {
            logger.warn(`No element found for setting: ${path}`);
            return;
        }

        if (element instanceof HTMLInputElement) {
            switch (element.type) {
                case 'checkbox':
                    element.checked = value as boolean;
                    break;
                case 'number':
                    element.value = String(value);
                    break;
                case 'color':
                    element.value = value as string;
                    break;
                default:
                    element.value = String(value);
            }
        } else if (element instanceof HTMLSelectElement) {
            element.value = String(value);
        }
    }

    public dispose(): void {
        this.unsubscribers.forEach(unsub => unsub());
        this.unsubscribers = [];
        this.container.innerHTML = '';
    }
}

----
ui/index.ts
import { ControlPanel } from './ControlPanel';
import './ControlPanel.css';

export { ControlPanel };

----
public/fonts/helvetiker_regular.typeface.json
{"glyphs":{"ο":{"x_min":0,"x_max":712,"ha":815,"o":"m 356 -25 q 96 88 192 -25 q 0 368 0 201 q 92 642 0 533 q 356 761 192 761 q 617 644 517 761 q 712 368 712 533 q 619 91 712 201 q 356 -25 520 -25 m 356 85 q 527 175 465 85 q 583 369 583 255 q 528 562 583 484 q 356 651 466 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 356 85 250 85 "},"S":{"x_min":0,"x_max":788,"ha":890,"o":"m 788 291 q 662 54 788 144 q 397 -26 550 -26 q 116 68 226 -26 q 0 337 0 168 l 131 337 q 200 152 131 220 q 384 85 269 85 q 557 129 479 85 q 650 270 650 183 q 490 429 650 379 q 194 513 341 470 q 33 739 33 584 q 142 964 33 881 q 388 1041 242 1041 q 644 957 543 1041 q 756 716 756 867 l 625 716 q 561 874 625 816 q 395 933 497 933 q 243 891 309 933 q 164 759 164 841 q 325 609 164 656 q 625 526 475 568 q 788 291 788 454 "},"¦":{"x_min":343,"x_max":449,"ha":792,"o":"m 449 462 l 343 462 l 343 986 l 449 986 l 449 462 m 449 -242 l 343 -242 l 343 280 l 449 280 l 449 -242 "},"/":{"x_min":183.25,"x_max":608.328125,"ha":792,"o":"m 608 1041 l 266 -129 l 183 -129 l 520 1041 l 608 1041 "},"Τ":{"x_min":-0.4375,"x_max":777.453125,"ha":839,"o":"m 777 893 l 458 893 l 458 0 l 319 0 l 319 892 l 0 892 l 0 1013 l 777 1013 l 777 893 "},"y":{"x_min":0,"x_max":684.78125,"ha":771,"o":"m 684 738 l 388 -83 q 311 -216 356 -167 q 173 -279 252 -279 q 97 -266 133 -279 l 97 -149 q 132 -155 109 -151 q 168 -160 155 -160 q 240 -114 213 -160 q 274 -26 248 -98 l 0 738 l 137 737 l 341 139 l 548 737 l 684 738 "},"Π":{"x_min":0,"x_max":803,"ha":917,"o":"m 803 0 l 667 0 l 667 886 l 140 886 l 140 0 l 0 0 l 0 1012 l 803 1012 l 803 0 "},"ΐ":{"x_min":-111,"x_max":339,"ha":361,"o":"m 339 800 l 229 800 l 229 925 l 339 925 l 339 800 m -1 800 l -111 800 l -111 925 l -1 925 l -1 800 m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 737 l 167 737 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 103 239 101 q 284 112 257 104 l 284 3 m 302 1040 l 113 819 l 30 819 l 165 1040 l 302 1040 "},"g":{"x_min":0,"x_max":686,"ha":838,"o":"m 686 34 q 586 -213 686 -121 q 331 -306 487 -306 q 131 -252 216 -306 q 31 -84 31 -190 l 155 -84 q 228 -174 166 -138 q 345 -207 284 -207 q 514 -109 454 -207 q 564 89 564 -27 q 461 6 521 36 q 335 -23 401 -23 q 88 100 184 -23 q 0 370 0 215 q 87 634 0 522 q 330 758 183 758 q 457 728 398 758 q 564 644 515 699 l 564 737 l 686 737 l 686 34 m 582 367 q 529 560 582 481 q 358 652 468 652 q 189 561 250 652 q 135 369 135 482 q 189 176 135 255 q 361 85 251 85 q 529 176 468 85 q 582 367 582 255 "},"²":{"x_min":0,"x_max":442,"ha":539,"o":"m 442 383 l 0 383 q 91 566 0 492 q 260 668 176 617 q 354 798 354 727 q 315 875 354 845 q 227 905 277 905 q 136 869 173 905 q 99 761 99 833 l 14 761 q 82 922 14 864 q 232 974 141 974 q 379 926 316 974 q 442 797 442 878 q 351 635 442 704 q 183 539 321 611 q 92 455 92 491 l 442 455 l 442 383 "},"–":{"x_min":0,"x_max":705.5625,"ha":803,"o":"m 705 334 l 0 334 l 0 410 l 705 410 l 705 334 "},"Κ":{"x_min":0,"x_max":819.5625,"ha":893,"o":"m 819 0 l 650 0 l 294 509 l 139 356 l 139 0 l 0 0 l 0 1013 l 139 1013 l 139 526 l 626 1013 l 809 1013 l 395 600 l 819 0 "},"ƒ":{"x_min":-46.265625,"x_max":392,"ha":513,"o":"m 392 651 l 259 651 l 79 -279 l -46 -278 l 134 651 l 14 651 l 14 751 l 135 751 q 151 948 135 900 q 304 1041 185 1041 q 334 1040 319 1041 q 392 1034 348 1039 l 392 922 q 337 931 360 931 q 271 883 287 931 q 260 793 260 853 l 260 751 l 392 751 l 392 651 "},"e":{"x_min":0,"x_max":714,"ha":813,"o":"m 714 326 l 140 326 q 200 157 140 227 q 359 87 260 87 q 488 130 431 87 q 561 245 545 174 l 697 245 q 577 48 670 123 q 358 -26 484 -26 q 97 85 195 -26 q 0 363 0 197 q 94 642 0 529 q 358 765 195 765 q 626 627 529 765 q 714 326 714 503 m 576 429 q 507 583 564 522 q 355 650 445 650 q 206 583 266 650 q 140 429 152 522 l 576 429 "},"ό":{"x_min":0,"x_max":712,"ha":815,"o":"m 356 -25 q 94 91 194 -25 q 0 368 0 202 q 92 642 0 533 q 356 761 192 761 q 617 644 517 761 q 712 368 712 533 q 619 91 712 201 q 356 -25 520 -25 m 356 85 q 527 175 465 85 q 583 369 583 255 q 528 562 583 484 q 356 651 466 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 356 85 250 85 m 576 1040 l 387 819 l 303 819 l 438 1040 l 576 1040 "},"J":{"x_min":0,"x_max":588,"ha":699,"o":"m 588 279 q 287 -26 588 -26 q 58 73 126 -26 q 0 327 0 158 l 133 327 q 160 172 133 227 q 288 96 198 96 q 426 171 391 96 q 449 336 449 219 l 449 1013 l 588 1013 l 588 279 "},"»":{"x_min":-1,"x_max":503,"ha":601,"o":"m 503 302 l 280 136 l 281 256 l 429 373 l 281 486 l 280 608 l 503 440 l 503 302 m 221 302 l 0 136 l 0 255 l 145 372 l 0 486 l -1 608 l 221 440 l 221 302 "},"©":{"x_min":-3,"x_max":1008,"ha":1106,"o":"m 502 -7 q 123 151 263 -7 q -3 501 -3 294 q 123 851 -3 706 q 502 1011 263 1011 q 881 851 739 1011 q 1008 501 1008 708 q 883 151 1008 292 q 502 -7 744 -7 m 502 60 q 830 197 709 60 q 940 501 940 322 q 831 805 940 681 q 502 944 709 944 q 174 805 296 944 q 65 501 65 680 q 173 197 65 320 q 502 60 294 60 m 741 394 q 661 246 731 302 q 496 190 591 190 q 294 285 369 190 q 228 497 228 370 q 295 714 228 625 q 499 813 370 813 q 656 762 588 813 q 733 625 724 711 l 634 625 q 589 704 629 673 q 498 735 550 735 q 377 666 421 735 q 334 504 334 597 q 374 340 334 408 q 490 272 415 272 q 589 304 549 272 q 638 394 628 337 l 741 394 "},"ώ":{"x_min":0,"x_max":922,"ha":1030,"o":"m 687 1040 l 498 819 l 415 819 l 549 1040 l 687 1040 m 922 339 q 856 97 922 203 q 650 -26 780 -26 q 538 9 587 -26 q 461 103 489 44 q 387 12 436 46 q 277 -22 339 -22 q 69 97 147 -22 q 0 338 0 202 q 45 551 0 444 q 161 737 84 643 l 302 737 q 175 552 219 647 q 124 336 124 446 q 155 179 124 248 q 275 88 197 88 q 375 163 341 88 q 400 294 400 219 l 400 572 l 524 572 l 524 294 q 561 135 524 192 q 643 88 591 88 q 762 182 719 88 q 797 341 797 257 q 745 555 797 450 q 619 737 705 637 l 760 737 q 874 551 835 640 q 922 339 922 444 "},"^":{"x_min":193.0625,"x_max":598.609375,"ha":792,"o":"m 598 772 l 515 772 l 395 931 l 277 772 l 193 772 l 326 1013 l 462 1013 l 598 772 "},"«":{"x_min":0,"x_max":507.203125,"ha":604,"o":"m 506 136 l 284 302 l 284 440 l 506 608 l 507 485 l 360 371 l 506 255 l 506 136 m 222 136 l 0 302 l 0 440 l 222 608 l 221 486 l 73 373 l 222 256 l 222 136 "},"D":{"x_min":0,"x_max":828,"ha":935,"o":"m 389 1013 q 714 867 593 1013 q 828 521 828 729 q 712 161 828 309 q 382 0 587 0 l 0 0 l 0 1013 l 389 1013 m 376 124 q 607 247 523 124 q 681 510 681 355 q 607 771 681 662 q 376 896 522 896 l 139 896 l 139 124 l 376 124 "},"∙":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 "},"ÿ":{"x_min":0,"x_max":47,"ha":125,"o":"m 47 3 q 37 -7 47 -7 q 28 0 30 -7 q 39 -4 32 -4 q 45 3 45 -1 l 37 0 q 28 9 28 0 q 39 19 28 19 l 47 16 l 47 19 l 47 3 m 37 1 q 44 8 44 1 q 37 16 44 16 q 30 8 30 16 q 37 1 30 1 m 26 1 l 23 22 l 14 0 l 3 22 l 3 3 l 0 25 l 13 1 l 22 25 l 26 1 "},"w":{"x_min":0,"x_max":1009.71875,"ha":1100,"o":"m 1009 738 l 783 0 l 658 0 l 501 567 l 345 0 l 222 0 l 0 738 l 130 738 l 284 174 l 432 737 l 576 738 l 721 173 l 881 737 l 1009 738 "},"$":{"x_min":0,"x_max":700,"ha":793,"o":"m 664 717 l 542 717 q 490 825 531 785 q 381 872 450 865 l 381 551 q 620 446 540 522 q 700 241 700 370 q 618 45 700 116 q 381 -25 536 -25 l 381 -152 l 307 -152 l 307 -25 q 81 62 162 -25 q 0 297 0 149 l 124 297 q 169 146 124 204 q 307 81 215 89 l 307 441 q 80 536 148 469 q 13 725 13 603 q 96 910 13 839 q 307 982 180 982 l 307 1077 l 381 1077 l 381 982 q 574 917 494 982 q 664 717 664 845 m 307 565 l 307 872 q 187 831 233 872 q 142 724 142 791 q 180 618 142 656 q 307 565 218 580 m 381 76 q 562 237 562 96 q 517 361 562 313 q 381 423 472 409 l 381 76 "},"\\":{"x_min":-0.015625,"x_max":425.0625,"ha":522,"o":"m 425 -129 l 337 -129 l 0 1041 l 83 1041 l 425 -129 "},"µ":{"x_min":0,"x_max":697.21875,"ha":747,"o":"m 697 -4 q 629 -14 658 -14 q 498 97 513 -14 q 422 9 470 41 q 313 -23 374 -23 q 207 4 258 -23 q 119 81 156 32 l 119 -278 l 0 -278 l 0 738 l 124 738 l 124 343 q 165 173 124 246 q 308 83 216 83 q 452 178 402 83 q 493 359 493 255 l 493 738 l 617 738 l 617 214 q 623 136 617 160 q 673 92 637 92 q 697 96 684 92 l 697 -4 "},"Ι":{"x_min":42,"x_max":181,"ha":297,"o":"m 181 0 l 42 0 l 42 1013 l 181 1013 l 181 0 "},"Ύ":{"x_min":0,"x_max":1144.5,"ha":1214,"o":"m 1144 1012 l 807 416 l 807 0 l 667 0 l 667 416 l 325 1012 l 465 1012 l 736 533 l 1004 1012 l 1144 1012 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 "},"’":{"x_min":0,"x_max":139,"ha":236,"o":"m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 "},"Ν":{"x_min":0,"x_max":801,"ha":915,"o":"m 801 0 l 651 0 l 131 822 l 131 0 l 0 0 l 0 1013 l 151 1013 l 670 191 l 670 1013 l 801 1013 l 801 0 "},"-":{"x_min":8.71875,"x_max":350.390625,"ha":478,"o":"m 350 317 l 8 317 l 8 428 l 350 428 l 350 317 "},"Q":{"x_min":0,"x_max":968,"ha":1072,"o":"m 954 5 l 887 -79 l 744 35 q 622 -11 687 2 q 483 -26 556 -26 q 127 130 262 -26 q 0 504 0 279 q 127 880 0 728 q 484 1041 262 1041 q 841 884 708 1041 q 968 507 968 735 q 933 293 968 398 q 832 104 899 188 l 954 5 m 723 191 q 802 330 777 248 q 828 499 828 412 q 744 790 828 673 q 483 922 650 922 q 228 791 322 922 q 142 505 142 673 q 227 221 142 337 q 487 91 323 91 q 632 123 566 91 l 520 215 l 587 301 l 723 191 "},"ς":{"x_min":1,"x_max":676.28125,"ha":740,"o":"m 676 460 l 551 460 q 498 595 542 546 q 365 651 448 651 q 199 578 263 651 q 136 401 136 505 q 266 178 136 241 q 508 106 387 142 q 640 -50 640 62 q 625 -158 640 -105 q 583 -278 611 -211 l 465 -278 q 498 -182 490 -211 q 515 -80 515 -126 q 381 12 515 -15 q 134 91 197 51 q 1 388 1 179 q 100 651 1 542 q 354 761 199 761 q 587 680 498 761 q 676 460 676 599 "},"M":{"x_min":0,"x_max":954,"ha":1067,"o":"m 954 0 l 819 0 l 819 869 l 537 0 l 405 0 l 128 866 l 128 0 l 0 0 l 0 1013 l 200 1013 l 472 160 l 757 1013 l 954 1013 l 954 0 "},"Ψ":{"x_min":0,"x_max":1006,"ha":1094,"o":"m 1006 678 q 914 319 1006 429 q 571 200 814 200 l 571 0 l 433 0 l 433 200 q 92 319 194 200 q 0 678 0 429 l 0 1013 l 139 1013 l 139 679 q 191 417 139 492 q 433 326 255 326 l 433 1013 l 571 1013 l 571 326 l 580 326 q 813 423 747 326 q 868 679 868 502 l 868 1013 l 1006 1013 l 1006 678 "},"C":{"x_min":0,"x_max":886,"ha":944,"o":"m 886 379 q 760 87 886 201 q 455 -26 634 -26 q 112 136 236 -26 q 0 509 0 283 q 118 882 0 737 q 469 1041 245 1041 q 748 955 630 1041 q 879 708 879 859 l 745 708 q 649 862 724 805 q 473 920 573 920 q 219 791 312 920 q 136 509 136 675 q 217 229 136 344 q 470 99 311 99 q 672 179 591 99 q 753 379 753 259 l 886 379 "},"!":{"x_min":0,"x_max":138,"ha":236,"o":"m 138 684 q 116 409 138 629 q 105 244 105 299 l 33 244 q 16 465 33 313 q 0 684 0 616 l 0 1013 l 138 1013 l 138 684 m 138 0 l 0 0 l 0 151 l 138 151 l 138 0 "},"{":{"x_min":0,"x_max":480.5625,"ha":578,"o":"m 480 -286 q 237 -213 303 -286 q 187 -45 187 -159 q 194 48 187 -15 q 201 141 201 112 q 164 264 201 225 q 0 314 118 314 l 0 417 q 164 471 119 417 q 201 605 201 514 q 199 665 201 644 q 193 772 193 769 q 241 941 193 887 q 480 1015 308 1015 l 480 915 q 336 866 375 915 q 306 742 306 828 q 310 662 306 717 q 314 577 314 606 q 288 452 314 500 q 176 365 256 391 q 289 275 257 337 q 314 143 314 226 q 313 84 314 107 q 310 -11 310 -5 q 339 -131 310 -94 q 480 -182 377 -182 l 480 -286 "},"X":{"x_min":-0.015625,"x_max":854.15625,"ha":940,"o":"m 854 0 l 683 0 l 423 409 l 166 0 l 0 0 l 347 519 l 18 1013 l 186 1013 l 428 637 l 675 1013 l 836 1013 l 504 520 l 854 0 "},"#":{"x_min":0,"x_max":963.890625,"ha":1061,"o":"m 963 690 l 927 590 l 719 590 l 655 410 l 876 410 l 840 310 l 618 310 l 508 -3 l 393 -2 l 506 309 l 329 310 l 215 -2 l 102 -3 l 212 310 l 0 310 l 36 410 l 248 409 l 312 590 l 86 590 l 120 690 l 347 690 l 459 1006 l 573 1006 l 462 690 l 640 690 l 751 1006 l 865 1006 l 754 690 l 963 690 m 606 590 l 425 590 l 362 410 l 543 410 l 606 590 "},"ι":{"x_min":42,"x_max":284,"ha":361,"o":"m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 738 l 167 738 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 103 239 101 q 284 112 257 104 l 284 3 "},"Ά":{"x_min":0,"x_max":906.953125,"ha":982,"o":"m 283 1040 l 88 799 l 5 799 l 145 1040 l 283 1040 m 906 0 l 756 0 l 650 303 l 251 303 l 143 0 l 0 0 l 376 1012 l 529 1012 l 906 0 m 609 421 l 452 866 l 293 421 l 609 421 "},")":{"x_min":0,"x_max":318,"ha":415,"o":"m 318 365 q 257 25 318 191 q 87 -290 197 -141 l 0 -290 q 140 21 93 -128 q 193 360 193 189 q 141 704 193 537 q 0 1024 97 850 l 87 1024 q 257 706 197 871 q 318 365 318 542 "},"ε":{"x_min":0,"x_max":634.71875,"ha":714,"o":"m 634 234 q 527 38 634 110 q 300 -25 433 -25 q 98 29 183 -25 q 0 204 0 93 q 37 314 0 265 q 128 390 67 353 q 56 460 82 419 q 26 555 26 505 q 114 712 26 654 q 295 763 191 763 q 499 700 416 763 q 589 515 589 631 l 478 515 q 419 618 464 580 q 307 657 374 657 q 207 630 253 657 q 151 547 151 598 q 238 445 151 469 q 389 434 280 434 l 389 331 l 349 331 q 206 315 255 331 q 125 210 125 287 q 183 107 125 145 q 302 76 233 76 q 436 117 379 76 q 509 234 493 159 l 634 234 "},"Δ":{"x_min":0,"x_max":952.78125,"ha":1028,"o":"m 952 0 l 0 0 l 400 1013 l 551 1013 l 952 0 m 762 124 l 476 867 l 187 124 l 762 124 "},"}":{"x_min":0,"x_max":481,"ha":578,"o":"m 481 314 q 318 262 364 314 q 282 136 282 222 q 284 65 282 97 q 293 -58 293 -48 q 241 -217 293 -166 q 0 -286 174 -286 l 0 -182 q 143 -130 105 -182 q 171 -2 171 -93 q 168 81 171 22 q 165 144 165 140 q 188 275 165 229 q 306 365 220 339 q 191 455 224 391 q 165 588 165 505 q 168 681 165 624 q 171 742 171 737 q 141 865 171 827 q 0 915 102 915 l 0 1015 q 243 942 176 1015 q 293 773 293 888 q 287 675 293 741 q 282 590 282 608 q 318 466 282 505 q 481 417 364 417 l 481 314 "},"‰":{"x_min":-3,"x_max":1672,"ha":1821,"o":"m 846 0 q 664 76 732 0 q 603 244 603 145 q 662 412 603 344 q 846 489 729 489 q 1027 412 959 489 q 1089 244 1089 343 q 1029 76 1089 144 q 846 0 962 0 m 845 103 q 945 143 910 103 q 981 243 981 184 q 947 340 981 301 q 845 385 910 385 q 745 342 782 385 q 709 243 709 300 q 742 147 709 186 q 845 103 781 103 m 888 986 l 284 -25 l 199 -25 l 803 986 l 888 986 m 241 468 q 58 545 126 468 q -3 715 -3 615 q 56 881 -3 813 q 238 958 124 958 q 421 881 353 958 q 483 712 483 813 q 423 544 483 612 q 241 468 356 468 m 241 855 q 137 811 175 855 q 100 710 100 768 q 136 612 100 653 q 240 572 172 572 q 344 614 306 572 q 382 713 382 656 q 347 810 382 771 q 241 855 308 855 m 1428 0 q 1246 76 1314 0 q 1185 244 1185 145 q 1244 412 1185 344 q 1428 489 1311 489 q 1610 412 1542 489 q 1672 244 1672 343 q 1612 76 1672 144 q 1428 0 1545 0 m 1427 103 q 1528 143 1492 103 q 1564 243 1564 184 q 1530 340 1564 301 q 1427 385 1492 385 q 1327 342 1364 385 q 1291 243 1291 300 q 1324 147 1291 186 q 1427 103 1363 103 "},"a":{"x_min":0,"x_max":698.609375,"ha":794,"o":"m 698 0 q 661 -12 679 -7 q 615 -17 643 -17 q 536 12 564 -17 q 500 96 508 41 q 384 6 456 37 q 236 -25 312 -25 q 65 31 130 -25 q 0 194 0 88 q 118 390 0 334 q 328 435 180 420 q 488 483 476 451 q 495 523 495 504 q 442 619 495 584 q 325 654 389 654 q 209 617 257 654 q 152 513 161 580 l 33 513 q 123 705 33 633 q 332 772 207 772 q 528 712 448 772 q 617 531 617 645 l 617 163 q 624 108 617 126 q 664 90 632 90 l 698 94 l 698 0 m 491 262 l 491 372 q 272 329 350 347 q 128 201 128 294 q 166 113 128 144 q 264 83 205 83 q 414 130 346 83 q 491 262 491 183 "},"—":{"x_min":0,"x_max":941.671875,"ha":1039,"o":"m 941 334 l 0 334 l 0 410 l 941 410 l 941 334 "},"=":{"x_min":8.71875,"x_max":780.953125,"ha":792,"o":"m 780 510 l 8 510 l 8 606 l 780 606 l 780 510 m 780 235 l 8 235 l 8 332 l 780 332 l 780 235 "},"N":{"x_min":0,"x_max":801,"ha":914,"o":"m 801 0 l 651 0 l 131 823 l 131 0 l 0 0 l 0 1013 l 151 1013 l 670 193 l 670 1013 l 801 1013 l 801 0 "},"ρ":{"x_min":0,"x_max":712,"ha":797,"o":"m 712 369 q 620 94 712 207 q 362 -26 521 -26 q 230 2 292 -26 q 119 83 167 30 l 119 -278 l 0 -278 l 0 362 q 91 643 0 531 q 355 764 190 764 q 617 647 517 764 q 712 369 712 536 m 583 366 q 530 559 583 480 q 359 651 469 651 q 190 562 252 651 q 135 370 135 483 q 189 176 135 257 q 359 85 250 85 q 528 175 466 85 q 583 366 583 254 "},"2":{"x_min":59,"x_max":731,"ha":792,"o":"m 731 0 l 59 0 q 197 314 59 188 q 457 487 199 315 q 598 691 598 580 q 543 819 598 772 q 411 867 488 867 q 272 811 328 867 q 209 630 209 747 l 81 630 q 182 901 81 805 q 408 986 271 986 q 629 909 536 986 q 731 694 731 826 q 613 449 731 541 q 378 316 495 383 q 201 122 235 234 l 731 122 l 731 0 "},"¯":{"x_min":0,"x_max":941.671875,"ha":938,"o":"m 941 1033 l 0 1033 l 0 1109 l 941 1109 l 941 1033 "},"Z":{"x_min":0,"x_max":779,"ha":849,"o":"m 779 0 l 0 0 l 0 113 l 621 896 l 40 896 l 40 1013 l 779 1013 l 778 887 l 171 124 l 779 124 l 779 0 "},"u":{"x_min":0,"x_max":617,"ha":729,"o":"m 617 0 l 499 0 l 499 110 q 391 10 460 45 q 246 -25 322 -25 q 61 58 127 -25 q 0 258 0 136 l 0 738 l 125 738 l 125 284 q 156 148 125 202 q 273 82 197 82 q 433 165 369 82 q 493 340 493 243 l 493 738 l 617 738 l 617 0 "},"k":{"x_min":0,"x_max":612.484375,"ha":697,"o":"m 612 738 l 338 465 l 608 0 l 469 0 l 251 382 l 121 251 l 121 0 l 0 0 l 0 1013 l 121 1013 l 121 402 l 456 738 l 612 738 "},"Η":{"x_min":0,"x_max":803,"ha":917,"o":"m 803 0 l 667 0 l 667 475 l 140 475 l 140 0 l 0 0 l 0 1013 l 140 1013 l 140 599 l 667 599 l 667 1013 l 803 1013 l 803 0 "},"Α":{"x_min":0,"x_max":906.953125,"ha":985,"o":"m 906 0 l 756 0 l 650 303 l 251 303 l 143 0 l 0 0 l 376 1013 l 529 1013 l 906 0 m 609 421 l 452 866 l 293 421 l 609 421 "},"s":{"x_min":0,"x_max":604,"ha":697,"o":"m 604 217 q 501 36 604 104 q 292 -23 411 -23 q 86 43 166 -23 q 0 238 0 114 l 121 237 q 175 122 121 164 q 300 85 223 85 q 415 112 363 85 q 479 207 479 147 q 361 309 479 276 q 140 372 141 370 q 21 544 21 426 q 111 708 21 647 q 298 761 190 761 q 492 705 413 761 q 583 531 583 643 l 462 531 q 412 625 462 594 q 298 657 363 657 q 199 636 242 657 q 143 558 143 608 q 262 454 143 486 q 484 394 479 397 q 604 217 604 341 "},"B":{"x_min":0,"x_max":778,"ha":876,"o":"m 580 546 q 724 469 670 535 q 778 311 778 403 q 673 83 778 171 q 432 0 575 0 l 0 0 l 0 1013 l 411 1013 q 629 957 541 1013 q 732 768 732 892 q 691 633 732 693 q 580 546 650 572 m 393 899 l 139 899 l 139 588 l 379 588 q 521 624 462 588 q 592 744 592 667 q 531 859 592 819 q 393 899 471 899 m 419 124 q 566 169 504 124 q 635 303 635 219 q 559 436 635 389 q 402 477 494 477 l 139 477 l 139 124 l 419 124 "},"…":{"x_min":0,"x_max":614,"ha":708,"o":"m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 m 378 0 l 236 0 l 236 151 l 378 151 l 378 0 m 614 0 l 472 0 l 472 151 l 614 151 l 614 0 "},"?":{"x_min":0,"x_max":607,"ha":704,"o":"m 607 777 q 543 599 607 674 q 422 474 482 537 q 357 272 357 391 l 236 272 q 297 487 236 395 q 411 619 298 490 q 474 762 474 691 q 422 885 474 838 q 301 933 371 933 q 179 880 228 933 q 124 706 124 819 l 0 706 q 94 963 0 872 q 302 1044 177 1044 q 511 973 423 1044 q 607 777 607 895 m 370 0 l 230 0 l 230 151 l 370 151 l 370 0 "},"H":{"x_min":0,"x_max":803,"ha":915,"o":"m 803 0 l 667 0 l 667 475 l 140 475 l 140 0 l 0 0 l 0 1013 l 140 1013 l 140 599 l 667 599 l 667 1013 l 803 1013 l 803 0 "},"ν":{"x_min":0,"x_max":675,"ha":761,"o":"m 675 738 l 404 0 l 272 0 l 0 738 l 133 738 l 340 147 l 541 738 l 675 738 "},"c":{"x_min":1,"x_max":701.390625,"ha":775,"o":"m 701 264 q 584 53 681 133 q 353 -26 487 -26 q 91 91 188 -26 q 1 370 1 201 q 92 645 1 537 q 353 761 190 761 q 572 688 479 761 q 690 493 666 615 l 556 493 q 487 606 545 562 q 356 650 428 650 q 186 563 246 650 q 134 372 134 487 q 188 179 134 258 q 359 88 250 88 q 492 136 437 88 q 566 264 548 185 l 701 264 "},"¶":{"x_min":0,"x_max":566.671875,"ha":678,"o":"m 21 892 l 52 892 l 98 761 l 145 892 l 176 892 l 178 741 l 157 741 l 157 867 l 108 741 l 88 741 l 40 871 l 40 741 l 21 741 l 21 892 m 308 854 l 308 731 q 252 691 308 691 q 227 691 240 691 q 207 696 213 695 l 207 712 l 253 706 q 288 733 288 706 l 288 763 q 244 741 279 741 q 193 797 193 741 q 261 860 193 860 q 287 860 273 860 q 308 854 302 855 m 288 842 l 263 843 q 213 796 213 843 q 248 756 213 756 q 288 796 288 756 l 288 842 m 566 988 l 502 988 l 502 -1 l 439 -1 l 439 988 l 317 988 l 317 -1 l 252 -1 l 252 602 q 81 653 155 602 q 0 805 0 711 q 101 989 0 918 q 309 1053 194 1053 l 566 1053 l 566 988 "},"β":{"x_min":0,"x_max":660,"ha":745,"o":"m 471 550 q 610 450 561 522 q 660 280 660 378 q 578 64 660 151 q 367 -22 497 -22 q 239 5 299 -22 q 126 82 178 32 l 126 -278 l 0 -278 l 0 593 q 54 903 0 801 q 318 1042 127 1042 q 519 964 436 1042 q 603 771 603 887 q 567 644 603 701 q 471 550 532 586 m 337 79 q 476 138 418 79 q 535 279 535 198 q 427 437 535 386 q 226 477 344 477 l 226 583 q 398 620 329 583 q 486 762 486 668 q 435 884 486 833 q 312 935 384 935 q 169 861 219 935 q 126 698 126 797 l 126 362 q 170 169 126 242 q 337 79 224 79 "},"Μ":{"x_min":0,"x_max":954,"ha":1068,"o":"m 954 0 l 819 0 l 819 868 l 537 0 l 405 0 l 128 865 l 128 0 l 0 0 l 0 1013 l 199 1013 l 472 158 l 758 1013 l 954 1013 l 954 0 "},"Ό":{"x_min":0.109375,"x_max":1120,"ha":1217,"o":"m 1120 505 q 994 132 1120 282 q 642 -29 861 -29 q 290 130 422 -29 q 167 505 167 280 q 294 883 167 730 q 650 1046 430 1046 q 999 882 868 1046 q 1120 505 1120 730 m 977 504 q 896 784 977 669 q 644 915 804 915 q 391 785 484 915 q 307 504 307 669 q 391 224 307 339 q 644 95 486 95 q 894 224 803 95 q 977 504 977 339 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 "},"Ή":{"x_min":0,"x_max":1158,"ha":1275,"o":"m 1158 0 l 1022 0 l 1022 475 l 496 475 l 496 0 l 356 0 l 356 1012 l 496 1012 l 496 599 l 1022 599 l 1022 1012 l 1158 1012 l 1158 0 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 "},"•":{"x_min":0,"x_max":663.890625,"ha":775,"o":"m 663 529 q 566 293 663 391 q 331 196 469 196 q 97 294 194 196 q 0 529 0 393 q 96 763 0 665 q 331 861 193 861 q 566 763 469 861 q 663 529 663 665 "},"¥":{"x_min":0.1875,"x_max":819.546875,"ha":886,"o":"m 563 561 l 697 561 l 696 487 l 520 487 l 482 416 l 482 380 l 697 380 l 695 308 l 482 308 l 482 0 l 342 0 l 342 308 l 125 308 l 125 380 l 342 380 l 342 417 l 303 487 l 125 487 l 125 561 l 258 561 l 0 1013 l 140 1013 l 411 533 l 679 1013 l 819 1013 l 563 561 "},"(":{"x_min":0,"x_max":318.0625,"ha":415,"o":"m 318 -290 l 230 -290 q 61 23 122 -142 q 0 365 0 190 q 62 712 0 540 q 230 1024 119 869 l 318 1024 q 175 705 219 853 q 125 360 125 542 q 176 22 125 187 q 318 -290 223 -127 "},"U":{"x_min":0,"x_max":796,"ha":904,"o":"m 796 393 q 681 93 796 212 q 386 -25 566 -25 q 101 95 208 -25 q 0 393 0 211 l 0 1013 l 138 1013 l 138 391 q 204 191 138 270 q 394 107 276 107 q 586 191 512 107 q 656 391 656 270 l 656 1013 l 796 1013 l 796 393 "},"γ":{"x_min":0.5,"x_max":744.953125,"ha":822,"o":"m 744 737 l 463 54 l 463 -278 l 338 -278 l 338 54 l 154 495 q 104 597 124 569 q 13 651 67 651 l 0 651 l 0 751 l 39 753 q 168 711 121 753 q 242 594 207 676 l 403 208 l 617 737 l 744 737 "},"α":{"x_min":0,"x_max":765.5625,"ha":809,"o":"m 765 -4 q 698 -14 726 -14 q 564 97 586 -14 q 466 7 525 40 q 337 -26 407 -26 q 88 98 186 -26 q 0 369 0 212 q 88 637 0 525 q 337 760 184 760 q 465 728 407 760 q 563 637 524 696 l 563 739 l 685 739 l 685 222 q 693 141 685 168 q 748 94 708 94 q 765 96 760 94 l 765 -4 m 584 371 q 531 562 584 485 q 360 653 470 653 q 192 566 254 653 q 135 379 135 489 q 186 181 135 261 q 358 84 247 84 q 528 176 465 84 q 584 371 584 260 "},"F":{"x_min":0,"x_max":683.328125,"ha":717,"o":"m 683 888 l 140 888 l 140 583 l 613 583 l 613 458 l 140 458 l 140 0 l 0 0 l 0 1013 l 683 1013 l 683 888 "},"­":{"x_min":0,"x_max":705.5625,"ha":803,"o":"m 705 334 l 0 334 l 0 410 l 705 410 l 705 334 "},":":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 "},"Χ":{"x_min":0,"x_max":854.171875,"ha":935,"o":"m 854 0 l 683 0 l 423 409 l 166 0 l 0 0 l 347 519 l 18 1013 l 186 1013 l 427 637 l 675 1013 l 836 1013 l 504 521 l 854 0 "},"*":{"x_min":116,"x_max":674,"ha":792,"o":"m 674 768 l 475 713 l 610 544 l 517 477 l 394 652 l 272 478 l 178 544 l 314 713 l 116 766 l 153 876 l 341 812 l 342 1013 l 446 1013 l 446 811 l 635 874 l 674 768 "},"†":{"x_min":0,"x_max":777,"ha":835,"o":"m 458 804 l 777 804 l 777 683 l 458 683 l 458 0 l 319 0 l 319 681 l 0 683 l 0 804 l 319 804 l 319 1015 l 458 1013 l 458 804 "},"°":{"x_min":0,"x_max":347,"ha":444,"o":"m 173 802 q 43 856 91 802 q 0 977 0 905 q 45 1101 0 1049 q 173 1153 90 1153 q 303 1098 255 1153 q 347 977 347 1049 q 303 856 347 905 q 173 802 256 802 m 173 884 q 238 910 214 884 q 262 973 262 937 q 239 1038 262 1012 q 173 1064 217 1064 q 108 1037 132 1064 q 85 973 85 1010 q 108 910 85 937 q 173 884 132 884 "},"V":{"x_min":0,"x_max":862.71875,"ha":940,"o":"m 862 1013 l 505 0 l 361 0 l 0 1013 l 143 1013 l 434 165 l 718 1012 l 862 1013 "},"Ξ":{"x_min":0,"x_max":734.71875,"ha":763,"o":"m 723 889 l 9 889 l 9 1013 l 723 1013 l 723 889 m 673 463 l 61 463 l 61 589 l 673 589 l 673 463 m 734 0 l 0 0 l 0 124 l 734 124 l 734 0 "}," ":{"x_min":0,"x_max":0,"ha":853},"Ϋ":{"x_min":0.328125,"x_max":819.515625,"ha":889,"o":"m 588 1046 l 460 1046 l 460 1189 l 588 1189 l 588 1046 m 360 1046 l 232 1046 l 232 1189 l 360 1189 l 360 1046 m 819 1012 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1012 l 140 1012 l 411 533 l 679 1012 l 819 1012 "},"0":{"x_min":73,"x_max":715,"ha":792,"o":"m 394 -29 q 153 129 242 -29 q 73 479 73 272 q 152 829 73 687 q 394 989 241 989 q 634 829 545 989 q 715 479 715 684 q 635 129 715 270 q 394 -29 546 -29 m 394 89 q 546 211 489 89 q 598 479 598 322 q 548 748 598 640 q 394 871 491 871 q 241 748 298 871 q 190 479 190 637 q 239 211 190 319 q 394 89 296 89 "},"”":{"x_min":0,"x_max":347,"ha":454,"o":"m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 m 347 851 q 310 737 347 784 q 208 669 273 690 l 208 734 q 267 787 250 741 q 280 873 280 821 l 208 873 l 208 1013 l 347 1013 l 347 851 "},"@":{"x_min":0,"x_max":1260,"ha":1357,"o":"m 1098 -45 q 877 -160 1001 -117 q 633 -203 752 -203 q 155 -29 327 -203 q 0 360 0 127 q 176 802 0 616 q 687 1008 372 1008 q 1123 854 969 1008 q 1260 517 1260 718 q 1155 216 1260 341 q 868 82 1044 82 q 772 106 801 82 q 737 202 737 135 q 647 113 700 144 q 527 82 594 82 q 367 147 420 82 q 314 312 314 212 q 401 565 314 452 q 639 690 498 690 q 810 588 760 690 l 849 668 l 938 668 q 877 441 900 532 q 833 226 833 268 q 853 182 833 198 q 902 167 873 167 q 1088 272 1012 167 q 1159 512 1159 372 q 1051 793 1159 681 q 687 925 925 925 q 248 747 415 925 q 97 361 97 586 q 226 26 97 159 q 627 -122 370 -122 q 856 -87 737 -122 q 1061 8 976 -53 l 1098 -45 m 786 488 q 738 580 777 545 q 643 615 700 615 q 483 517 548 615 q 425 322 425 430 q 457 203 425 250 q 552 156 490 156 q 722 273 665 156 q 786 488 738 309 "},"Ί":{"x_min":0,"x_max":499,"ha":613,"o":"m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 m 499 0 l 360 0 l 360 1012 l 499 1012 l 499 0 "},"i":{"x_min":14,"x_max":136,"ha":275,"o":"m 136 873 l 14 873 l 14 1013 l 136 1013 l 136 873 m 136 0 l 14 0 l 14 737 l 136 737 l 136 0 "},"Β":{"x_min":0,"x_max":778,"ha":877,"o":"m 580 545 q 724 468 671 534 q 778 310 778 402 q 673 83 778 170 q 432 0 575 0 l 0 0 l 0 1013 l 411 1013 q 629 957 541 1013 q 732 768 732 891 q 691 632 732 692 q 580 545 650 571 m 393 899 l 139 899 l 139 587 l 379 587 q 521 623 462 587 q 592 744 592 666 q 531 859 592 819 q 393 899 471 899 m 419 124 q 566 169 504 124 q 635 302 635 219 q 559 435 635 388 q 402 476 494 476 l 139 476 l 139 124 l 419 124 "},"υ":{"x_min":0,"x_max":617,"ha":725,"o":"m 617 352 q 540 94 617 199 q 308 -24 455 -24 q 76 94 161 -24 q 0 352 0 199 l 0 739 l 126 739 l 126 355 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 355 492 257 l 492 739 l 617 739 l 617 352 "},"]":{"x_min":0,"x_max":275,"ha":372,"o":"m 275 -281 l 0 -281 l 0 -187 l 151 -187 l 151 920 l 0 920 l 0 1013 l 275 1013 l 275 -281 "},"m":{"x_min":0,"x_max":1019,"ha":1128,"o":"m 1019 0 l 897 0 l 897 454 q 860 591 897 536 q 739 660 816 660 q 613 586 659 660 q 573 436 573 522 l 573 0 l 447 0 l 447 455 q 412 591 447 535 q 294 657 372 657 q 165 586 213 657 q 122 437 122 521 l 122 0 l 0 0 l 0 738 l 117 738 l 117 640 q 202 730 150 697 q 316 763 254 763 q 437 730 381 763 q 525 642 494 697 q 621 731 559 700 q 753 763 682 763 q 943 694 867 763 q 1019 512 1019 625 l 1019 0 "},"χ":{"x_min":8.328125,"x_max":780.5625,"ha":815,"o":"m 780 -278 q 715 -294 747 -294 q 616 -257 663 -294 q 548 -175 576 -227 l 379 133 l 143 -277 l 9 -277 l 313 254 l 163 522 q 127 586 131 580 q 36 640 91 640 q 8 637 27 640 l 8 752 l 52 757 q 162 719 113 757 q 236 627 200 690 l 383 372 l 594 737 l 726 737 l 448 250 l 625 -69 q 670 -153 647 -110 q 743 -188 695 -188 q 780 -184 759 -188 l 780 -278 "},"8":{"x_min":55,"x_max":736,"ha":792,"o":"m 571 527 q 694 424 652 491 q 736 280 736 358 q 648 71 736 158 q 395 -26 551 -26 q 142 69 238 -26 q 55 279 55 157 q 96 425 55 359 q 220 527 138 491 q 120 615 153 562 q 88 726 88 668 q 171 904 88 827 q 395 986 261 986 q 618 905 529 986 q 702 727 702 830 q 670 616 702 667 q 571 527 638 565 m 394 565 q 519 610 475 565 q 563 717 563 655 q 521 823 563 781 q 392 872 474 872 q 265 824 312 872 q 224 720 224 783 q 265 613 224 656 q 394 565 312 565 m 395 91 q 545 150 488 91 q 597 280 597 204 q 546 408 597 355 q 395 465 492 465 q 244 408 299 465 q 194 280 194 356 q 244 150 194 203 q 395 91 299 91 "},"ί":{"x_min":42,"x_max":326.71875,"ha":361,"o":"m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 737 l 167 737 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 102 239 101 q 284 112 257 104 l 284 3 m 326 1040 l 137 819 l 54 819 l 189 1040 l 326 1040 "},"Ζ":{"x_min":0,"x_max":779.171875,"ha":850,"o":"m 779 0 l 0 0 l 0 113 l 620 896 l 40 896 l 40 1013 l 779 1013 l 779 887 l 170 124 l 779 124 l 779 0 "},"R":{"x_min":0,"x_max":781.953125,"ha":907,"o":"m 781 0 l 623 0 q 587 242 590 52 q 407 433 585 433 l 138 433 l 138 0 l 0 0 l 0 1013 l 396 1013 q 636 946 539 1013 q 749 731 749 868 q 711 597 749 659 q 608 502 674 534 q 718 370 696 474 q 729 207 722 352 q 781 26 736 62 l 781 0 m 373 551 q 533 594 465 551 q 614 731 614 645 q 532 859 614 815 q 373 896 465 896 l 138 896 l 138 551 l 373 551 "},"o":{"x_min":0,"x_max":713,"ha":821,"o":"m 357 -25 q 94 91 194 -25 q 0 368 0 202 q 93 642 0 533 q 357 761 193 761 q 618 644 518 761 q 713 368 713 533 q 619 91 713 201 q 357 -25 521 -25 m 357 85 q 528 175 465 85 q 584 369 584 255 q 529 562 584 484 q 357 651 467 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 357 85 250 85 "},"5":{"x_min":54.171875,"x_max":738,"ha":792,"o":"m 738 314 q 626 60 738 153 q 382 -23 526 -23 q 155 47 248 -23 q 54 256 54 125 l 183 256 q 259 132 204 174 q 382 91 314 91 q 533 149 471 91 q 602 314 602 213 q 538 469 602 411 q 386 528 475 528 q 284 506 332 528 q 197 439 237 484 l 81 439 l 159 958 l 684 958 l 684 840 l 254 840 l 214 579 q 306 627 258 612 q 407 643 354 643 q 636 552 540 643 q 738 314 738 457 "},"7":{"x_min":58.71875,"x_max":730.953125,"ha":792,"o":"m 730 839 q 469 448 560 641 q 335 0 378 255 l 192 0 q 328 441 235 252 q 593 830 421 630 l 58 830 l 58 958 l 730 958 l 730 839 "},"K":{"x_min":0,"x_max":819.46875,"ha":906,"o":"m 819 0 l 649 0 l 294 509 l 139 355 l 139 0 l 0 0 l 0 1013 l 139 1013 l 139 526 l 626 1013 l 809 1013 l 395 600 l 819 0 "},",":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 -12 q 105 -132 142 -82 q 0 -205 68 -182 l 0 -138 q 57 -82 40 -124 q 70 0 70 -51 l 0 0 l 0 151 l 142 151 l 142 -12 "},"d":{"x_min":0,"x_max":683,"ha":796,"o":"m 683 0 l 564 0 l 564 93 q 456 6 516 38 q 327 -25 395 -25 q 87 100 181 -25 q 0 365 0 215 q 90 639 0 525 q 343 763 187 763 q 564 647 486 763 l 564 1013 l 683 1013 l 683 0 m 582 373 q 529 562 582 484 q 361 653 468 653 q 190 561 253 653 q 135 365 135 479 q 189 175 135 254 q 358 85 251 85 q 529 178 468 85 q 582 373 582 258 "},"¨":{"x_min":-109,"x_max":247,"ha":232,"o":"m 247 1046 l 119 1046 l 119 1189 l 247 1189 l 247 1046 m 19 1046 l -109 1046 l -109 1189 l 19 1189 l 19 1046 "},"E":{"x_min":0,"x_max":736.109375,"ha":789,"o":"m 736 0 l 0 0 l 0 1013 l 725 1013 l 725 889 l 139 889 l 139 585 l 677 585 l 677 467 l 139 467 l 139 125 l 736 125 l 736 0 "},"Y":{"x_min":0,"x_max":820,"ha":886,"o":"m 820 1013 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1013 l 140 1013 l 411 534 l 679 1012 l 820 1013 "},"\"":{"x_min":0,"x_max":299,"ha":396,"o":"m 299 606 l 203 606 l 203 988 l 299 988 l 299 606 m 96 606 l 0 606 l 0 988 l 96 988 l 96 606 "},"‹":{"x_min":17.984375,"x_max":773.609375,"ha":792,"o":"m 773 40 l 18 376 l 17 465 l 773 799 l 773 692 l 159 420 l 773 149 l 773 40 "},"„":{"x_min":0,"x_max":364,"ha":467,"o":"m 141 -12 q 104 -132 141 -82 q 0 -205 67 -182 l 0 -138 q 56 -82 40 -124 q 69 0 69 -51 l 0 0 l 0 151 l 141 151 l 141 -12 m 364 -12 q 327 -132 364 -82 q 222 -205 290 -182 l 222 -138 q 279 -82 262 -124 q 292 0 292 -51 l 222 0 l 222 151 l 364 151 l 364 -12 "},"δ":{"x_min":1,"x_max":710,"ha":810,"o":"m 710 360 q 616 87 710 196 q 356 -28 518 -28 q 99 82 197 -28 q 1 356 1 192 q 100 606 1 509 q 355 703 199 703 q 180 829 288 754 q 70 903 124 866 l 70 1012 l 643 1012 l 643 901 l 258 901 q 462 763 422 794 q 636 592 577 677 q 710 360 710 485 m 584 365 q 552 501 584 447 q 451 602 521 555 q 372 611 411 611 q 197 541 258 611 q 136 355 136 472 q 190 171 136 245 q 358 85 252 85 q 528 173 465 85 q 584 365 584 252 "},"έ":{"x_min":0,"x_max":634.71875,"ha":714,"o":"m 634 234 q 527 38 634 110 q 300 -25 433 -25 q 98 29 183 -25 q 0 204 0 93 q 37 313 0 265 q 128 390 67 352 q 56 459 82 419 q 26 555 26 505 q 114 712 26 654 q 295 763 191 763 q 499 700 416 763 q 589 515 589 631 l 478 515 q 419 618 464 580 q 307 657 374 657 q 207 630 253 657 q 151 547 151 598 q 238 445 151 469 q 389 434 280 434 l 389 331 l 349 331 q 206 315 255 331 q 125 210 125 287 q 183 107 125 145 q 302 76 233 76 q 436 117 379 76 q 509 234 493 159 l 634 234 m 520 1040 l 331 819 l 248 819 l 383 1040 l 520 1040 "},"ω":{"x_min":0,"x_max":922,"ha":1031,"o":"m 922 339 q 856 97 922 203 q 650 -26 780 -26 q 538 9 587 -26 q 461 103 489 44 q 387 12 436 46 q 277 -22 339 -22 q 69 97 147 -22 q 0 339 0 203 q 45 551 0 444 q 161 738 84 643 l 302 738 q 175 553 219 647 q 124 336 124 446 q 155 179 124 249 q 275 88 197 88 q 375 163 341 88 q 400 294 400 219 l 400 572 l 524 572 l 524 294 q 561 135 524 192 q 643 88 591 88 q 762 182 719 88 q 797 342 797 257 q 745 556 797 450 q 619 738 705 638 l 760 738 q 874 551 835 640 q 922 339 922 444 "},"´":{"x_min":0,"x_max":96,"ha":251,"o":"m 96 606 l 0 606 l 0 988 l 96 988 l 96 606 "},"±":{"x_min":11,"x_max":781,"ha":792,"o":"m 781 490 l 446 490 l 446 255 l 349 255 l 349 490 l 11 490 l 11 586 l 349 586 l 349 819 l 446 819 l 446 586 l 781 586 l 781 490 m 781 21 l 11 21 l 11 115 l 781 115 l 781 21 "},"|":{"x_min":343,"x_max":449,"ha":792,"o":"m 449 462 l 343 462 l 343 986 l 449 986 l 449 462 m 449 -242 l 343 -242 l 343 280 l 449 280 l 449 -242 "},"ϋ":{"x_min":0,"x_max":617,"ha":725,"o":"m 482 800 l 372 800 l 372 925 l 482 925 l 482 800 m 239 800 l 129 800 l 129 925 l 239 925 l 239 800 m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 "},"§":{"x_min":0,"x_max":593,"ha":690,"o":"m 593 425 q 554 312 593 369 q 467 233 516 254 q 537 83 537 172 q 459 -74 537 -12 q 288 -133 387 -133 q 115 -69 184 -133 q 47 96 47 -6 l 166 96 q 199 7 166 40 q 288 -26 232 -26 q 371 -5 332 -26 q 420 60 420 21 q 311 201 420 139 q 108 309 210 255 q 0 490 0 383 q 33 602 0 551 q 124 687 66 654 q 75 743 93 712 q 58 812 58 773 q 133 984 58 920 q 300 1043 201 1043 q 458 987 394 1043 q 529 814 529 925 l 411 814 q 370 908 404 877 q 289 939 336 939 q 213 911 246 939 q 180 841 180 883 q 286 720 180 779 q 484 612 480 615 q 593 425 593 534 m 467 409 q 355 544 467 473 q 196 630 228 612 q 146 587 162 609 q 124 525 124 558 q 239 387 124 462 q 398 298 369 315 q 448 345 429 316 q 467 409 467 375 "},"b":{"x_min":0,"x_max":685,"ha":783,"o":"m 685 372 q 597 99 685 213 q 347 -25 501 -25 q 219 5 277 -25 q 121 93 161 36 l 121 0 l 0 0 l 0 1013 l 121 1013 l 121 634 q 214 723 157 692 q 341 754 272 754 q 591 637 493 754 q 685 372 685 526 m 554 356 q 499 550 554 470 q 328 644 437 644 q 162 556 223 644 q 108 369 108 478 q 160 176 108 256 q 330 83 221 83 q 498 169 435 83 q 554 356 554 245 "},"q":{"x_min":0,"x_max":683,"ha":876,"o":"m 683 -278 l 564 -278 l 564 97 q 474 8 533 39 q 345 -23 415 -23 q 91 93 188 -23 q 0 364 0 203 q 87 635 0 522 q 337 760 184 760 q 466 727 408 760 q 564 637 523 695 l 564 737 l 683 737 l 683 -278 m 582 375 q 527 564 582 488 q 358 652 466 652 q 190 565 253 652 q 135 377 135 488 q 189 179 135 261 q 361 84 251 84 q 530 179 469 84 q 582 375 582 260 "},"Ω":{"x_min":-0.171875,"x_max":969.5625,"ha":1068,"o":"m 969 0 l 555 0 l 555 123 q 744 308 675 194 q 814 558 814 423 q 726 812 814 709 q 484 922 633 922 q 244 820 334 922 q 154 567 154 719 q 223 316 154 433 q 412 123 292 199 l 412 0 l 0 0 l 0 124 l 217 124 q 68 327 122 210 q 15 572 15 444 q 144 911 15 781 q 484 1041 274 1041 q 822 909 691 1041 q 953 569 953 777 q 899 326 953 443 q 750 124 846 210 l 969 124 l 969 0 "},"ύ":{"x_min":0,"x_max":617,"ha":725,"o":"m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 m 535 1040 l 346 819 l 262 819 l 397 1040 l 535 1040 "},"z":{"x_min":-0.015625,"x_max":613.890625,"ha":697,"o":"m 613 0 l 0 0 l 0 100 l 433 630 l 20 630 l 20 738 l 594 738 l 593 636 l 163 110 l 613 110 l 613 0 "},"™":{"x_min":0,"x_max":894,"ha":1000,"o":"m 389 951 l 229 951 l 229 503 l 160 503 l 160 951 l 0 951 l 0 1011 l 389 1011 l 389 951 m 894 503 l 827 503 l 827 939 l 685 503 l 620 503 l 481 937 l 481 503 l 417 503 l 417 1011 l 517 1011 l 653 580 l 796 1010 l 894 1011 l 894 503 "},"ή":{"x_min":0.78125,"x_max":697,"ha":810,"o":"m 697 -278 l 572 -278 l 572 454 q 540 587 572 536 q 425 650 501 650 q 271 579 337 650 q 206 420 206 509 l 206 0 l 81 0 l 81 489 q 73 588 81 562 q 0 644 56 644 l 0 741 q 68 755 38 755 q 158 721 124 755 q 200 630 193 687 q 297 726 234 692 q 434 761 359 761 q 620 692 544 761 q 697 516 697 624 l 697 -278 m 479 1040 l 290 819 l 207 819 l 341 1040 l 479 1040 "},"Θ":{"x_min":0,"x_max":960,"ha":1056,"o":"m 960 507 q 833 129 960 280 q 476 -32 698 -32 q 123 129 255 -32 q 0 507 0 280 q 123 883 0 732 q 476 1045 255 1045 q 832 883 696 1045 q 960 507 960 732 m 817 500 q 733 789 817 669 q 476 924 639 924 q 223 792 317 924 q 142 507 142 675 q 222 222 142 339 q 476 89 315 89 q 730 218 636 89 q 817 500 817 334 m 716 449 l 243 449 l 243 571 l 716 571 l 716 449 "},"®":{"x_min":-3,"x_max":1008,"ha":1106,"o":"m 503 532 q 614 562 566 532 q 672 658 672 598 q 614 747 672 716 q 503 772 569 772 l 338 772 l 338 532 l 503 532 m 502 -7 q 123 151 263 -7 q -3 501 -3 294 q 123 851 -3 706 q 502 1011 263 1011 q 881 851 739 1011 q 1008 501 1008 708 q 883 151 1008 292 q 502 -7 744 -7 m 502 60 q 830 197 709 60 q 940 501 940 322 q 831 805 940 681 q 502 944 709 944 q 174 805 296 944 q 65 501 65 680 q 173 197 65 320 q 502 60 294 60 m 788 146 l 678 146 q 653 316 655 183 q 527 449 652 449 l 338 449 l 338 146 l 241 146 l 241 854 l 518 854 q 688 808 621 854 q 766 658 766 755 q 739 563 766 607 q 668 497 713 519 q 751 331 747 472 q 788 164 756 190 l 788 146 "},"~":{"x_min":0,"x_max":833,"ha":931,"o":"m 833 958 q 778 753 833 831 q 594 665 716 665 q 402 761 502 665 q 240 857 302 857 q 131 795 166 857 q 104 665 104 745 l 0 665 q 54 867 0 789 q 237 958 116 958 q 429 861 331 958 q 594 765 527 765 q 704 827 670 765 q 729 958 729 874 l 833 958 "},"Ε":{"x_min":0,"x_max":736.21875,"ha":778,"o":"m 736 0 l 0 0 l 0 1013 l 725 1013 l 725 889 l 139 889 l 139 585 l 677 585 l 677 467 l 139 467 l 139 125 l 736 125 l 736 0 "},"³":{"x_min":0,"x_max":450,"ha":547,"o":"m 450 552 q 379 413 450 464 q 220 366 313 366 q 69 414 130 366 q 0 567 0 470 l 85 567 q 126 470 85 504 q 225 437 168 437 q 320 467 280 437 q 360 552 360 498 q 318 632 360 608 q 213 657 276 657 q 195 657 203 657 q 176 657 181 657 l 176 722 q 279 733 249 722 q 334 815 334 752 q 300 881 334 856 q 220 907 267 907 q 133 875 169 907 q 97 781 97 844 l 15 781 q 78 926 15 875 q 220 972 135 972 q 364 930 303 972 q 426 817 426 888 q 344 697 426 733 q 421 642 392 681 q 450 552 450 603 "},"[":{"x_min":0,"x_max":273.609375,"ha":371,"o":"m 273 -281 l 0 -281 l 0 1013 l 273 1013 l 273 920 l 124 920 l 124 -187 l 273 -187 l 273 -281 "},"L":{"x_min":0,"x_max":645.828125,"ha":696,"o":"m 645 0 l 0 0 l 0 1013 l 140 1013 l 140 126 l 645 126 l 645 0 "},"σ":{"x_min":0,"x_max":803.390625,"ha":894,"o":"m 803 628 l 633 628 q 713 368 713 512 q 618 93 713 204 q 357 -25 518 -25 q 94 91 194 -25 q 0 368 0 201 q 94 644 0 533 q 356 761 194 761 q 481 750 398 761 q 608 739 564 739 l 803 739 l 803 628 m 360 85 q 529 180 467 85 q 584 374 584 262 q 527 566 584 490 q 352 651 463 651 q 187 559 247 651 q 135 368 135 478 q 189 175 135 254 q 360 85 251 85 "},"ζ":{"x_min":0,"x_max":573,"ha":642,"o":"m 573 -40 q 553 -162 573 -97 q 510 -278 543 -193 l 400 -278 q 441 -187 428 -219 q 462 -90 462 -132 q 378 -14 462 -14 q 108 45 197 -14 q 0 290 0 117 q 108 631 0 462 q 353 901 194 767 l 55 901 l 55 1012 l 561 1012 l 561 924 q 261 669 382 831 q 128 301 128 489 q 243 117 128 149 q 458 98 350 108 q 573 -40 573 80 "},"θ":{"x_min":0,"x_max":674,"ha":778,"o":"m 674 496 q 601 160 674 304 q 336 -26 508 -26 q 73 153 165 -26 q 0 485 0 296 q 72 840 0 683 q 343 1045 166 1045 q 605 844 516 1045 q 674 496 674 692 m 546 579 q 498 798 546 691 q 336 935 437 935 q 178 798 237 935 q 126 579 137 701 l 546 579 m 546 475 l 126 475 q 170 233 126 348 q 338 80 230 80 q 504 233 447 80 q 546 475 546 346 "},"Ο":{"x_min":0,"x_max":958,"ha":1054,"o":"m 485 1042 q 834 883 703 1042 q 958 511 958 735 q 834 136 958 287 q 481 -26 701 -26 q 126 130 261 -26 q 0 504 0 279 q 127 880 0 729 q 485 1042 263 1042 m 480 98 q 731 225 638 98 q 815 504 815 340 q 733 783 815 670 q 480 913 640 913 q 226 785 321 913 q 142 504 142 671 q 226 224 142 339 q 480 98 319 98 "},"Γ":{"x_min":0,"x_max":705.28125,"ha":749,"o":"m 705 886 l 140 886 l 140 0 l 0 0 l 0 1012 l 705 1012 l 705 886 "}," ":{"x_min":0,"x_max":0,"ha":375},"%":{"x_min":-3,"x_max":1089,"ha":1186,"o":"m 845 0 q 663 76 731 0 q 602 244 602 145 q 661 412 602 344 q 845 489 728 489 q 1027 412 959 489 q 1089 244 1089 343 q 1029 76 1089 144 q 845 0 962 0 m 844 103 q 945 143 909 103 q 981 243 981 184 q 947 340 981 301 q 844 385 909 385 q 744 342 781 385 q 708 243 708 300 q 741 147 708 186 q 844 103 780 103 m 888 986 l 284 -25 l 199 -25 l 803 986 l 888 986 m 241 468 q 58 545 126 468 q -3 715 -3 615 q 56 881 -3 813 q 238 958 124 958 q 421 881 353 958 q 483 712 483 813 q 423 544 483 612 q 241 468 356 468 m 241 855 q 137 811 175 855 q 100 710 100 768 q 136 612 100 653 q 240 572 172 572 q 344 614 306 572 q 382 713 382 656 q 347 810 382 771 q 241 855 308 855 "},"P":{"x_min":0,"x_max":726,"ha":806,"o":"m 424 1013 q 640 931 555 1013 q 726 719 726 850 q 637 506 726 587 q 413 426 548 426 l 140 426 l 140 0 l 0 0 l 0 1013 l 424 1013 m 379 889 l 140 889 l 140 548 l 372 548 q 522 589 459 548 q 593 720 593 637 q 528 845 593 801 q 379 889 463 889 "},"Έ":{"x_min":0,"x_max":1078.21875,"ha":1118,"o":"m 1078 0 l 342 0 l 342 1013 l 1067 1013 l 1067 889 l 481 889 l 481 585 l 1019 585 l 1019 467 l 481 467 l 481 125 l 1078 125 l 1078 0 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 "},"Ώ":{"x_min":0.125,"x_max":1136.546875,"ha":1235,"o":"m 1136 0 l 722 0 l 722 123 q 911 309 842 194 q 981 558 981 423 q 893 813 981 710 q 651 923 800 923 q 411 821 501 923 q 321 568 321 720 q 390 316 321 433 q 579 123 459 200 l 579 0 l 166 0 l 166 124 l 384 124 q 235 327 289 210 q 182 572 182 444 q 311 912 182 782 q 651 1042 441 1042 q 989 910 858 1042 q 1120 569 1120 778 q 1066 326 1120 443 q 917 124 1013 210 l 1136 124 l 1136 0 m 277 1040 l 83 800 l 0 800 l 140 1041 l 277 1040 "},"_":{"x_min":0,"x_max":705.5625,"ha":803,"o":"m 705 -334 l 0 -334 l 0 -234 l 705 -234 l 705 -334 "},"Ϊ":{"x_min":-110,"x_max":246,"ha":275,"o":"m 246 1046 l 118 1046 l 118 1189 l 246 1189 l 246 1046 m 18 1046 l -110 1046 l -110 1189 l 18 1189 l 18 1046 m 136 0 l 0 0 l 0 1012 l 136 1012 l 136 0 "},"+":{"x_min":23,"x_max":768,"ha":792,"o":"m 768 372 l 444 372 l 444 0 l 347 0 l 347 372 l 23 372 l 23 468 l 347 468 l 347 840 l 444 840 l 444 468 l 768 468 l 768 372 "},"½":{"x_min":0,"x_max":1050,"ha":1149,"o":"m 1050 0 l 625 0 q 712 178 625 108 q 878 277 722 187 q 967 385 967 328 q 932 456 967 429 q 850 484 897 484 q 759 450 798 484 q 721 352 721 416 l 640 352 q 706 502 640 448 q 851 551 766 551 q 987 509 931 551 q 1050 385 1050 462 q 976 251 1050 301 q 829 179 902 215 q 717 68 740 133 l 1050 68 l 1050 0 m 834 985 l 215 -28 l 130 -28 l 750 984 l 834 985 m 224 422 l 142 422 l 142 811 l 0 811 l 0 867 q 104 889 62 867 q 164 973 157 916 l 224 973 l 224 422 "},"Ρ":{"x_min":0,"x_max":720,"ha":783,"o":"m 424 1013 q 637 933 554 1013 q 720 723 720 853 q 633 508 720 591 q 413 426 546 426 l 140 426 l 140 0 l 0 0 l 0 1013 l 424 1013 m 378 889 l 140 889 l 140 548 l 371 548 q 521 589 458 548 q 592 720 592 637 q 527 845 592 801 q 378 889 463 889 "},"'":{"x_min":0,"x_max":139,"ha":236,"o":"m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 "},"ª":{"x_min":0,"x_max":350,"ha":397,"o":"m 350 625 q 307 616 328 616 q 266 631 281 616 q 247 673 251 645 q 190 628 225 644 q 116 613 156 613 q 32 641 64 613 q 0 722 0 669 q 72 826 0 800 q 247 866 159 846 l 247 887 q 220 934 247 916 q 162 953 194 953 q 104 934 129 953 q 76 882 80 915 l 16 882 q 60 976 16 941 q 166 1011 104 1011 q 266 979 224 1011 q 308 891 308 948 l 308 706 q 311 679 308 688 q 331 670 315 670 l 350 672 l 350 625 m 247 757 l 247 811 q 136 790 175 798 q 64 726 64 773 q 83 682 64 697 q 132 667 103 667 q 207 690 174 667 q 247 757 247 718 "},"΅":{"x_min":0,"x_max":450,"ha":553,"o":"m 450 800 l 340 800 l 340 925 l 450 925 l 450 800 m 406 1040 l 212 800 l 129 800 l 269 1040 l 406 1040 m 110 800 l 0 800 l 0 925 l 110 925 l 110 800 "},"T":{"x_min":0,"x_max":777,"ha":835,"o":"m 777 894 l 458 894 l 458 0 l 319 0 l 319 894 l 0 894 l 0 1013 l 777 1013 l 777 894 "},"Φ":{"x_min":0,"x_max":915,"ha":997,"o":"m 527 0 l 389 0 l 389 122 q 110 231 220 122 q 0 509 0 340 q 110 785 0 677 q 389 893 220 893 l 389 1013 l 527 1013 l 527 893 q 804 786 693 893 q 915 509 915 679 q 805 231 915 341 q 527 122 696 122 l 527 0 m 527 226 q 712 310 641 226 q 779 507 779 389 q 712 705 779 627 q 527 787 641 787 l 527 226 m 389 226 l 389 787 q 205 698 275 775 q 136 505 136 620 q 206 308 136 391 q 389 226 276 226 "},"⁋":{"x_min":0,"x_max":0,"ha":694},"j":{"x_min":-77.78125,"x_max":167,"ha":349,"o":"m 167 871 l 42 871 l 42 1013 l 167 1013 l 167 871 m 167 -80 q 121 -231 167 -184 q -26 -278 76 -278 l -77 -278 l -77 -164 l -41 -164 q 26 -143 11 -164 q 42 -65 42 -122 l 42 737 l 167 737 l 167 -80 "},"Σ":{"x_min":0,"x_max":756.953125,"ha":819,"o":"m 756 0 l 0 0 l 0 107 l 395 523 l 22 904 l 22 1013 l 745 1013 l 745 889 l 209 889 l 566 523 l 187 125 l 756 125 l 756 0 "},"1":{"x_min":215.671875,"x_max":574,"ha":792,"o":"m 574 0 l 442 0 l 442 697 l 215 697 l 215 796 q 386 833 330 796 q 475 986 447 875 l 574 986 l 574 0 "},"›":{"x_min":18.0625,"x_max":774,"ha":792,"o":"m 774 376 l 18 40 l 18 149 l 631 421 l 18 692 l 18 799 l 774 465 l 774 376 "},"<":{"x_min":17.984375,"x_max":773.609375,"ha":792,"o":"m 773 40 l 18 376 l 17 465 l 773 799 l 773 692 l 159 420 l 773 149 l 773 40 "},"£":{"x_min":0,"x_max":704.484375,"ha":801,"o":"m 704 41 q 623 -10 664 5 q 543 -26 583 -26 q 359 15 501 -26 q 243 36 288 36 q 158 23 197 36 q 73 -21 119 10 l 6 76 q 125 195 90 150 q 175 331 175 262 q 147 443 175 383 l 0 443 l 0 512 l 108 512 q 43 734 43 623 q 120 929 43 854 q 358 1010 204 1010 q 579 936 487 1010 q 678 729 678 857 l 678 684 l 552 684 q 504 838 552 780 q 362 896 457 896 q 216 852 263 896 q 176 747 176 815 q 199 627 176 697 q 248 512 217 574 l 468 512 l 468 443 l 279 443 q 297 356 297 398 q 230 194 297 279 q 153 107 211 170 q 227 133 190 125 q 293 142 264 142 q 410 119 339 142 q 516 96 482 96 q 579 105 550 96 q 648 142 608 115 l 704 41 "},"t":{"x_min":0,"x_max":367,"ha":458,"o":"m 367 0 q 312 -5 339 -2 q 262 -8 284 -8 q 145 28 183 -8 q 108 143 108 64 l 108 638 l 0 638 l 0 738 l 108 738 l 108 944 l 232 944 l 232 738 l 367 738 l 367 638 l 232 638 l 232 185 q 248 121 232 140 q 307 102 264 102 q 345 104 330 102 q 367 107 360 107 l 367 0 "},"¬":{"x_min":0,"x_max":706,"ha":803,"o":"m 706 411 l 706 158 l 630 158 l 630 335 l 0 335 l 0 411 l 706 411 "},"λ":{"x_min":0,"x_max":750,"ha":803,"o":"m 750 -7 q 679 -15 716 -15 q 538 59 591 -15 q 466 214 512 97 l 336 551 l 126 0 l 0 0 l 270 705 q 223 837 247 770 q 116 899 190 899 q 90 898 100 899 l 90 1004 q 152 1011 125 1011 q 298 938 244 1011 q 373 783 326 901 l 605 192 q 649 115 629 136 q 716 95 669 95 l 736 95 q 750 97 745 97 l 750 -7 "},"W":{"x_min":0,"x_max":1263.890625,"ha":1351,"o":"m 1263 1013 l 995 0 l 859 0 l 627 837 l 405 0 l 265 0 l 0 1013 l 136 1013 l 342 202 l 556 1013 l 701 1013 l 921 207 l 1133 1012 l 1263 1013 "},">":{"x_min":18.0625,"x_max":774,"ha":792,"o":"m 774 376 l 18 40 l 18 149 l 631 421 l 18 692 l 18 799 l 774 465 l 774 376 "},"v":{"x_min":0,"x_max":675.15625,"ha":761,"o":"m 675 738 l 404 0 l 272 0 l 0 738 l 133 737 l 340 147 l 541 737 l 675 738 "},"τ":{"x_min":0.28125,"x_max":644.5,"ha":703,"o":"m 644 628 l 382 628 l 382 179 q 388 120 382 137 q 436 91 401 91 q 474 94 447 91 q 504 97 501 97 l 504 0 q 454 -9 482 -5 q 401 -14 426 -14 q 278 67 308 -14 q 260 233 260 118 l 260 628 l 0 628 l 0 739 l 644 739 l 644 628 "},"ξ":{"x_min":0,"x_max":624.9375,"ha":699,"o":"m 624 -37 q 608 -153 624 -96 q 563 -278 593 -211 l 454 -278 q 491 -183 486 -200 q 511 -83 511 -126 q 484 -23 511 -44 q 370 1 452 1 q 323 0 354 1 q 283 -1 293 -1 q 84 76 169 -1 q 0 266 0 154 q 56 431 0 358 q 197 538 108 498 q 94 613 134 562 q 54 730 54 665 q 77 823 54 780 q 143 901 101 867 l 27 901 l 27 1012 l 576 1012 l 576 901 l 380 901 q 244 863 303 901 q 178 745 178 820 q 312 600 178 636 q 532 582 380 582 l 532 479 q 276 455 361 479 q 118 281 118 410 q 165 173 118 217 q 274 120 208 133 q 494 101 384 110 q 624 -37 624 76 "},"&":{"x_min":-3,"x_max":894.25,"ha":992,"o":"m 894 0 l 725 0 l 624 123 q 471 0 553 40 q 306 -41 390 -41 q 168 -7 231 -41 q 62 92 105 26 q 14 187 31 139 q -3 276 -3 235 q 55 433 -3 358 q 248 581 114 508 q 170 689 196 640 q 137 817 137 751 q 214 985 137 922 q 384 1041 284 1041 q 548 988 483 1041 q 622 824 622 928 q 563 666 622 739 q 431 556 516 608 l 621 326 q 649 407 639 361 q 663 493 653 426 l 781 493 q 703 229 781 352 l 894 0 m 504 818 q 468 908 504 877 q 384 940 433 940 q 293 907 331 940 q 255 818 255 875 q 289 714 255 767 q 363 628 313 678 q 477 729 446 682 q 504 818 504 771 m 556 209 l 314 499 q 179 395 223 449 q 135 283 135 341 q 146 222 135 253 q 183 158 158 192 q 333 80 241 80 q 556 209 448 80 "},"Λ":{"x_min":0,"x_max":862.5,"ha":942,"o":"m 862 0 l 719 0 l 426 847 l 143 0 l 0 0 l 356 1013 l 501 1013 l 862 0 "},"I":{"x_min":41,"x_max":180,"ha":293,"o":"m 180 0 l 41 0 l 41 1013 l 180 1013 l 180 0 "},"G":{"x_min":0,"x_max":921,"ha":1011,"o":"m 921 0 l 832 0 l 801 136 q 655 15 741 58 q 470 -28 568 -28 q 126 133 259 -28 q 0 499 0 284 q 125 881 0 731 q 486 1043 259 1043 q 763 957 647 1043 q 905 709 890 864 l 772 709 q 668 866 747 807 q 486 926 589 926 q 228 795 322 926 q 142 507 142 677 q 228 224 142 342 q 483 94 323 94 q 712 195 625 94 q 796 435 796 291 l 477 435 l 477 549 l 921 549 l 921 0 "},"ΰ":{"x_min":0,"x_max":617,"ha":725,"o":"m 524 800 l 414 800 l 414 925 l 524 925 l 524 800 m 183 800 l 73 800 l 73 925 l 183 925 l 183 800 m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 m 489 1040 l 300 819 l 216 819 l 351 1040 l 489 1040 "},"`":{"x_min":0,"x_max":138.890625,"ha":236,"o":"m 138 699 l 0 699 l 0 861 q 36 974 0 929 q 138 1041 72 1020 l 138 977 q 82 931 95 969 q 69 839 69 893 l 138 839 l 138 699 "},"·":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 "},"Υ":{"x_min":0.328125,"x_max":819.515625,"ha":889,"o":"m 819 1013 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1013 l 140 1013 l 411 533 l 679 1013 l 819 1013 "},"r":{"x_min":0,"x_max":355.5625,"ha":432,"o":"m 355 621 l 343 621 q 179 569 236 621 q 122 411 122 518 l 122 0 l 0 0 l 0 737 l 117 737 l 117 604 q 204 719 146 686 q 355 753 262 753 l 355 621 "},"x":{"x_min":0,"x_max":675,"ha":764,"o":"m 675 0 l 525 0 l 331 286 l 144 0 l 0 0 l 256 379 l 12 738 l 157 737 l 336 473 l 516 738 l 661 738 l 412 380 l 675 0 "},"μ":{"x_min":0,"x_max":696.609375,"ha":747,"o":"m 696 -4 q 628 -14 657 -14 q 498 97 513 -14 q 422 8 470 41 q 313 -24 374 -24 q 207 3 258 -24 q 120 80 157 31 l 120 -278 l 0 -278 l 0 738 l 124 738 l 124 343 q 165 172 124 246 q 308 82 216 82 q 451 177 402 82 q 492 358 492 254 l 492 738 l 616 738 l 616 214 q 623 136 616 160 q 673 92 636 92 q 696 95 684 92 l 696 -4 "},"h":{"x_min":0,"x_max":615,"ha":724,"o":"m 615 472 l 615 0 l 490 0 l 490 454 q 456 590 490 535 q 338 654 416 654 q 186 588 251 654 q 122 436 122 522 l 122 0 l 0 0 l 0 1013 l 122 1013 l 122 633 q 218 727 149 694 q 362 760 287 760 q 552 676 484 760 q 615 472 615 600 "},".":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 "},"φ":{"x_min":-2,"x_max":878,"ha":974,"o":"m 496 -279 l 378 -279 l 378 -17 q 101 88 204 -17 q -2 367 -2 194 q 68 626 -2 510 q 283 758 151 758 l 283 646 q 167 537 209 626 q 133 373 133 462 q 192 177 133 254 q 378 93 259 93 l 378 758 q 445 764 426 763 q 476 765 464 765 q 765 659 653 765 q 878 377 878 553 q 771 96 878 209 q 496 -17 665 -17 l 496 -279 m 496 93 l 514 93 q 687 183 623 93 q 746 380 746 265 q 691 569 746 491 q 522 658 629 658 l 496 656 l 496 93 "},";":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 m 142 -12 q 105 -132 142 -82 q 0 -206 68 -182 l 0 -138 q 58 -82 43 -123 q 68 0 68 -56 l 0 0 l 0 151 l 142 151 l 142 -12 "},"f":{"x_min":0,"x_max":378,"ha":472,"o":"m 378 638 l 246 638 l 246 0 l 121 0 l 121 638 l 0 638 l 0 738 l 121 738 q 137 935 121 887 q 290 1028 171 1028 q 320 1027 305 1028 q 378 1021 334 1026 l 378 908 q 323 918 346 918 q 257 870 273 918 q 246 780 246 840 l 246 738 l 378 738 l 378 638 "},"“":{"x_min":1,"x_max":348.21875,"ha":454,"o":"m 140 670 l 1 670 l 1 830 q 37 943 1 897 q 140 1011 74 990 l 140 947 q 82 900 97 940 q 68 810 68 861 l 140 810 l 140 670 m 348 670 l 209 670 l 209 830 q 245 943 209 897 q 348 1011 282 990 l 348 947 q 290 900 305 940 q 276 810 276 861 l 348 810 l 348 670 "},"A":{"x_min":0.03125,"x_max":906.953125,"ha":1008,"o":"m 906 0 l 756 0 l 648 303 l 251 303 l 142 0 l 0 0 l 376 1013 l 529 1013 l 906 0 m 610 421 l 452 867 l 293 421 l 610 421 "},"6":{"x_min":53,"x_max":739,"ha":792,"o":"m 739 312 q 633 62 739 162 q 400 -31 534 -31 q 162 78 257 -31 q 53 439 53 206 q 178 859 53 712 q 441 986 284 986 q 643 912 559 986 q 732 713 732 833 l 601 713 q 544 830 594 786 q 426 875 494 875 q 268 793 331 875 q 193 517 193 697 q 301 597 240 570 q 427 624 362 624 q 643 540 552 624 q 739 312 739 451 m 603 298 q 540 461 603 400 q 404 516 484 516 q 268 461 323 516 q 207 300 207 401 q 269 137 207 198 q 405 83 325 83 q 541 137 486 83 q 603 298 603 197 "},"‘":{"x_min":1,"x_max":139.890625,"ha":236,"o":"m 139 670 l 1 670 l 1 830 q 37 943 1 897 q 139 1011 74 990 l 139 947 q 82 900 97 940 q 68 810 68 861 l 139 810 l 139 670 "},"ϊ":{"x_min":-70,"x_max":283,"ha":361,"o":"m 283 800 l 173 800 l 173 925 l 283 925 l 283 800 m 40 800 l -70 800 l -70 925 l 40 925 l 40 800 m 283 3 q 232 -10 257 -5 q 181 -15 206 -15 q 84 26 118 -15 q 41 200 41 79 l 41 737 l 166 737 l 167 215 q 171 141 167 157 q 225 101 182 101 q 247 103 238 101 q 283 112 256 104 l 283 3 "},"π":{"x_min":-0.21875,"x_max":773.21875,"ha":857,"o":"m 773 -7 l 707 -11 q 575 40 607 -11 q 552 174 552 77 l 552 226 l 552 626 l 222 626 l 222 0 l 97 0 l 97 626 l 0 626 l 0 737 l 773 737 l 773 626 l 676 626 l 676 171 q 695 103 676 117 q 773 90 714 90 l 773 -7 "},"ά":{"x_min":0,"x_max":765.5625,"ha":809,"o":"m 765 -4 q 698 -14 726 -14 q 564 97 586 -14 q 466 7 525 40 q 337 -26 407 -26 q 88 98 186 -26 q 0 369 0 212 q 88 637 0 525 q 337 760 184 760 q 465 727 407 760 q 563 637 524 695 l 563 738 l 685 738 l 685 222 q 693 141 685 168 q 748 94 708 94 q 765 95 760 94 l 765 -4 m 584 371 q 531 562 584 485 q 360 653 470 653 q 192 566 254 653 q 135 379 135 489 q 186 181 135 261 q 358 84 247 84 q 528 176 465 84 q 584 371 584 260 m 604 1040 l 415 819 l 332 819 l 466 1040 l 604 1040 "},"O":{"x_min":0,"x_max":958,"ha":1057,"o":"m 485 1041 q 834 882 702 1041 q 958 512 958 734 q 834 136 958 287 q 481 -26 702 -26 q 126 130 261 -26 q 0 504 0 279 q 127 880 0 728 q 485 1041 263 1041 m 480 98 q 731 225 638 98 q 815 504 815 340 q 733 783 815 669 q 480 912 640 912 q 226 784 321 912 q 142 504 142 670 q 226 224 142 339 q 480 98 319 98 "},"n":{"x_min":0,"x_max":615,"ha":724,"o":"m 615 463 l 615 0 l 490 0 l 490 454 q 453 592 490 537 q 331 656 410 656 q 178 585 240 656 q 117 421 117 514 l 117 0 l 0 0 l 0 738 l 117 738 l 117 630 q 218 728 150 693 q 359 764 286 764 q 552 675 484 764 q 615 463 615 593 "},"3":{"x_min":54,"x_max":737,"ha":792,"o":"m 737 284 q 635 55 737 141 q 399 -25 541 -25 q 156 52 248 -25 q 54 308 54 140 l 185 308 q 245 147 185 202 q 395 96 302 96 q 539 140 484 96 q 602 280 602 190 q 510 429 602 390 q 324 454 451 454 l 324 565 q 487 584 441 565 q 565 719 565 617 q 515 835 565 791 q 395 879 466 879 q 255 824 307 879 q 203 661 203 769 l 78 661 q 166 909 78 822 q 387 992 250 992 q 603 921 513 992 q 701 723 701 844 q 669 607 701 656 q 578 524 637 558 q 696 434 655 499 q 737 284 737 369 "},"9":{"x_min":53,"x_max":739,"ha":792,"o":"m 739 524 q 619 94 739 241 q 362 -32 516 -32 q 150 47 242 -32 q 59 244 59 126 l 191 244 q 246 129 191 176 q 373 82 301 82 q 526 161 466 82 q 597 440 597 255 q 363 334 501 334 q 130 432 216 334 q 53 650 53 521 q 134 880 53 786 q 383 986 226 986 q 659 841 566 986 q 739 524 739 719 m 388 449 q 535 514 480 449 q 585 658 585 573 q 535 805 585 744 q 388 873 480 873 q 242 809 294 873 q 191 658 191 745 q 239 514 191 572 q 388 449 292 449 "},"l":{"x_min":41,"x_max":166,"ha":279,"o":"m 166 0 l 41 0 l 41 1013 l 166 1013 l 166 0 "},"¤":{"x_min":40.09375,"x_max":728.796875,"ha":825,"o":"m 728 304 l 649 224 l 512 363 q 383 331 458 331 q 256 363 310 331 l 119 224 l 40 304 l 177 441 q 150 553 150 493 q 184 673 150 621 l 40 818 l 119 898 l 267 749 q 321 766 291 759 q 384 773 351 773 q 447 766 417 773 q 501 749 477 759 l 649 898 l 728 818 l 585 675 q 612 618 604 648 q 621 553 621 587 q 591 441 621 491 l 728 304 m 384 682 q 280 643 318 682 q 243 551 243 604 q 279 461 243 499 q 383 423 316 423 q 487 461 449 423 q 525 553 525 500 q 490 641 525 605 q 384 682 451 682 "},"κ":{"x_min":0,"x_max":632.328125,"ha":679,"o":"m 632 0 l 482 0 l 225 384 l 124 288 l 124 0 l 0 0 l 0 738 l 124 738 l 124 446 l 433 738 l 596 738 l 312 466 l 632 0 "},"4":{"x_min":48,"x_max":742.453125,"ha":792,"o":"m 742 243 l 602 243 l 602 0 l 476 0 l 476 243 l 48 243 l 48 368 l 476 958 l 602 958 l 602 354 l 742 354 l 742 243 m 476 354 l 476 792 l 162 354 l 476 354 "},"p":{"x_min":0,"x_max":685,"ha":786,"o":"m 685 364 q 598 96 685 205 q 350 -23 504 -23 q 121 89 205 -23 l 121 -278 l 0 -278 l 0 738 l 121 738 l 121 633 q 220 726 159 691 q 351 761 280 761 q 598 636 504 761 q 685 364 685 522 m 557 371 q 501 560 557 481 q 330 651 437 651 q 162 559 223 651 q 108 366 108 479 q 162 177 108 254 q 333 87 224 87 q 502 178 441 87 q 557 371 557 258 "},"‡":{"x_min":0,"x_max":777,"ha":835,"o":"m 458 238 l 458 0 l 319 0 l 319 238 l 0 238 l 0 360 l 319 360 l 319 681 l 0 683 l 0 804 l 319 804 l 319 1015 l 458 1013 l 458 804 l 777 804 l 777 683 l 458 683 l 458 360 l 777 360 l 777 238 l 458 238 "},"ψ":{"x_min":0,"x_max":808,"ha":907,"o":"m 465 -278 l 341 -278 l 341 -15 q 87 102 180 -15 q 0 378 0 210 l 0 739 l 133 739 l 133 379 q 182 195 133 275 q 341 98 242 98 l 341 922 l 465 922 l 465 98 q 623 195 563 98 q 675 382 675 278 l 675 742 l 808 742 l 808 381 q 720 104 808 213 q 466 -13 627 -13 l 465 -278 "},"η":{"x_min":0.78125,"x_max":697,"ha":810,"o":"m 697 -278 l 572 -278 l 572 454 q 540 587 572 536 q 425 650 501 650 q 271 579 337 650 q 206 420 206 509 l 206 0 l 81 0 l 81 489 q 73 588 81 562 q 0 644 56 644 l 0 741 q 68 755 38 755 q 158 720 124 755 q 200 630 193 686 q 297 726 234 692 q 434 761 359 761 q 620 692 544 761 q 697 516 697 624 l 697 -278 "}},"cssFontWeight":"normal","ascender":1189,"underlinePosition":-100,"cssFontStyle":"normal","boundingBox":{"yMin":-334,"xMin":-111,"yMax":1189,"xMax":1672},"resolution":1000,"original_font_information":{"postscript_name":"Helvetiker-Regular","version_string":"Version 1.00 2004 initial release","vendor_url":"http://www.magenta.gr/","full_font_name":"Helvetiker","font_family_name":"Helvetiker","copyright":"Copyright (c) Μagenta ltd, 2004","description":"","trademark":"","designer":"","designer_url":"","unique_font_identifier":"Μagenta ltd:Helvetiker:22-10-104","license_url":"http://www.ellak.gr/fonts/MgOpen/license.html","license_description":"Copyright (c) 2004 by MAGENTA Ltd. All Rights Reserved.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of the fonts accompanying this license (\"Fonts\") and associated documentation files (the \"Font Software\"), to reproduce and distribute the Font Software, including without limitation the rights to use, copy, merge, publish, distribute, and/or sell copies of the Font Software, and to permit persons to whom the Font Software is furnished to do so, subject to the following conditions: \r\n\r\nThe above copyright and this permission notice shall be included in all copies of one or more of the Font Software typefaces.\r\n\r\nThe Font Software may be modified, altered, or added to, and in particular the designs of glyphs or characters in the Fonts may be modified and additional glyphs or characters may be added to the Fonts, only if the fonts are renamed to names not containing the word \"MgOpen\", or if the modifications are accepted for inclusion in the Font Software itself by the each appointed Administrator.\r\n\r\nThis License becomes null and void to the extent applicable to Fonts or Font Software that has been modified and is distributed under the \"MgOpen\" name.\r\n\r\nThe Font Software may be sold as part of a larger software package but no copy of one or more of the Font Software typefaces may be sold by itself. \r\n\r\nTHE FONT SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL MAGENTA OR PERSONS OR BODIES IN CHARGE OF ADMINISTRATION AND MAINTENANCE OF THE FONT SOFTWARE BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM OTHER DEALINGS IN THE FONT SOFTWARE.","manufacturer_name":"Μagenta ltd","font_sub_family_name":"Regular"},"descender":-334,"familyName":"Helvetiker","lineHeight":1522,"underlineThickness":50}
----
public/fonts/Roboto-Regular.woff2
wOF2     =     t  =                       dd^`  T	<
|{
 6$ t I3%؋8&4Z|t 8D$uNEPEAk=x9Xz`IR#F+B`}RP|EZ\W[CQBmcm?FgQ3шpL2ٽ[̮!+@U^~ޣ D?jUcUl6{ mCD]htջQ8@PLc

+ZD2K:4{g:~  v  < H^R'8?;uyVW8="FÓ*	@EĴc= Iby8$a){ԶKiIW&Ӕ~}1wM{4!{FH5#Kt5wve; 'NJ	'(%;?DMCq,<=?f _VbA(37v+uYCb
w8AF3n-'U%2؟oٟl"^bj aoF!`
Aj'މ:Zu.[݂pGW:U%Ejq	:IC	SCsJe6Dқ<UM,
&hz} y|9
DᛯjnB$T¬׵?/Q=BC_f#:Bo@]T(vF+d" RRR!~AX>!`p¢,08 9Ό/茓
rQ Qpg\koC3Yyt'd9>#|3Ƹ?֌#$i
g5z֏秲S{3ɲSpS2бw6 Ӣf]﵋F]&^fM%A}؊)ZLUX.&qOq?$nV_[3hQ詎ְ$ڥcEv0CQ4a=jwn'&Vwz'
fxdjqv:ꡔVVF7:HZl*Тtj"O~ۿGJa1F~۷--J%MZ߱}:!%cV1&9עV5hUp}
ѾtS߼w?<=VEk-xƻ1xP@F'O!#LXdÖ{pƓ	&.XX
$4xǞhסSmq&G|O_ClNX\p@Ĉ/~q6A7^SsNjQ#-vV"qwq
a#hoa|'|k/}w0ܯ2"n<0BCPAzǥ
x>CEMTqXUX+SR٘xʀJ)X	2~8A/WѬdq9G
 !4m1I7?ۗν<	o8&0y8/JYc"#>3%ahv|8C%. }pha '|Ɨsи}DK*SY\S%P8'K[J2*f
"D ^ bt6220/:1F0cƁ+ܩIHDJC
Zn;&YxP?%GFN&M<<2db	,Yaéĉg\ʕ#[`
wTxD!PB`!(DDED%
Kh41b(RF45iEMm馛[< CO'g yFb$#|_h~KOdLLW[1Pec`R^rT2Sbt "O7)Q@yAQU)@)`j"[lq11vFVc4F IDfXa9O܉gfCԜ[#9 =371G~$v:H6T>@v"A!nٝfso;}|7
߻/ڊ<H(FІZ{&n2I-	-f[37D'"r?a3m -&J
Uj+jcHD-U<p#l&c:AVvf19g-V9]p%!F$Y0Y`0lTY"_}ܵ
 EHHQ)3{{"_aLb  :c<ˢ	eʹ|
,`}A 3䱪 \@nޤRj1)6jWB$T`~t1Ըd*2SzKw]lüea[=l2t̏k]9]LU)a?OU(>Ai#mÕ'ҥ@NϡՃP㐮ks7;g'~5zoZ2F)+Bbb,.HgsXl.إꠧ ;k1{P16C2E0-@b ٧BL÷d^<Pfdbp3󢑔ܣ/&<#tXTkD9Fίث
Vz倶(<Cl3_5JH6	>U)9NIac_XQO}h	~o~༰Vɕ[JށfK.rf0
^xy0Gռ	KFߛIf <ex2hI;iҰ_D^275 >(?
҅*G78BCXL8y	cA+ESs5Z!C
>!/bx3ڔi{nx[㉭!dS P@Y<˂U{֍Ug'YjbIЙ7rA2UZM%dvxȢ&Wp6պF|J
!:	Rhz oudQʫ#XXxBXa}+l^܊SH0Y	0	fTpV7O'1My$"B5SǛ0PVŜb]$WR
PkE	Lܰ9 E!CK3X;RqtH45Ik`wiLTo7E2%{yU~nVb}8^RNY+;3SٴF|T=JHEIBw	ˡPm;7jMIڐF_sM
U[t
'\y٨叶skHȡ^][!4p̬:"O[+5h %C*1b]|e{*ȹu.ٞHʁ:!/ya]
ܤkg1g=mCл0=SgMTHXV 9?D/[|!GϦ19@od_OW,
:pax^m@MKc+CD%(U+\i!7X
\r>}
Ҷv48?)
,yk
=V|0>sjgVUeȒReT\VHJ+bӯP37L&Yp<
ٮ7ݦ~L-z2=p+q23"s~pʩ
EV8?ެCAۧ=J8M8s+x*"(D(*:)"W}`;k|SUW253ttJ!5Cgu2R˖yD[ǵʷR8'Ul}ݬdPAڇt!':@eAFZI%ϙ}V4ITz_CQNͨT۷3'G˲]PV<>f[ˍ|: Qp	|Hnb^^شm	!4 ź*quk<BI=vK,<-v)y-&S^L⮙LzR<fR]%!V6u\4]
N}&'Y䅓Γ08ko^i_K5K\#)#seC\xL2joآ!IXc'm,*3(9ĮdGsТOt<u6$U(d轢{_'
~/`eKxwGe{?ޜB隑~
GnUkY[
:6xx|O< 녭RoĆNd 
p(!1-Jڲ{'3)MWpHBmg|SwF|qSi;[܆TNa%(˅Iy\:ڝYwEhlƥQVFiyU:RG(fQ!,E 9ۦO_lJ9?d#?JmSQCw~,J$iF..;벍Dm|dqs(MʘZWѥ)^׀
&uVEoZ5F
фS$xPE-~n*+\yd^C/:Wꋕ.Xv`fH$ǉPYrQ{hӐ&y<K"ޓ6Z;kQbyw.sjI
xWg$YW//W/x

Wӈ}$4QB½@@蛄tH53E5{^\Ã=J|Ҝ<JLj'7n/.~^$gw-Ǭ, <ESd/DabLޝ(=q opGU32qrꑌpFל]g[I,'zw؟pΞFtVt<?meE؟X%3V?\8B>&m5_-d7!Ӓ#ogZ(aBh(PLBy*t6gEgbtB+flaTpL0#-du	0sp%8dA*<'41/ހhFj!Ovs+1eҚ!-f7@6aIQ-dLBEץ'~x[
.FnVg62-Y6(;GLRq{OK:1|e,PUwǚFWƳ߃W]CjFc:'Tjx .Gs<u5B\coօTOm$ϳll3oWp_~DddYf*MG
կ0zbW`[ͫ4On37@W_yYk\#Z+qsJorӝȼX|EM>>Ϟֻ\ͦ?T$`@l$ p1G7_<M
(̘	>ˎ%չ% BN9ǁPqumO9G/۬of_z?u0v2K:K̬$ce^.FbgGNVxq/qiq^!b;=NJ+ 
e'dHbBt#[1YCw@z0>Bʟ%XLi \""''.*#Ƶ~씠=\I䋹sDU9ܗk3x\rSKٕ1O~~^l[6R)%JRS":
7

k
(t˸FTKTSD<+GLODhDBpO`xY@UiߐrD}=KoHY	 +,~&8z/k4>㺭51]),rj3=ǿ#dV<zot_Fn+L릟8!ݟݏݎ&SvnڑA|侦WAhRf-nw:1 tɱ۱5/S&[NTyUJ(x:sQo1"cED:3kLv׶I1Aȥf
p/z^Ee&A
v񜝯ʲ_
.W]"6@ԵD{	l vHs3
F-BBP:Y	ɰP9~~~cLiP!(}
?
ک 1r<8qrc>pLb		ȱh|,,=6=$5	a湩Rj玪KϭW--g=O>Zٕ06c-%ꠅb[# Se!/^bϝ9ih~wvo<LCu!N-raPV8yW@DF0٬?bbmԡM\}sW-r@6to]po2=4L,FÂ`dlxDECE]&)n/@X F} wF$jojǝc_	kUj*\Q?H^m-PʉES2""8NsK`nes(H-X~8|=/_tKAƀrH#@V`z(S1ZP']f2eyP`d\1n'ơ6ۮhΞkٽtS;K` ^gXdL`vIrMZc>d\?VK;ͺr	|?4[*KmxKw
<=\7`Xwbf.&wr{7OFns _?
)	-]o#t$2SjldJy˗rvV-ŏһe[owtOrm
]sc9%OV!ۢ[my|F|+L$/qqŻ.	%rwdKrn=SUknJ@2yڕ3ǚB<r}e,x94Y"i)p=^uIoʮCTQj=-YcQǿ+ .pqr#Qs
mNL p;T}LM>Ȟ~߰JjBrS/,-`%q_%[
Y|GM[-[y͏L훏OGc^_b4 xz
Xq(mˮY7e4=E^wT"{A^vZvKka}e=ZlY_
`	zR=U.XF;i5:e
t
A1fFFB:m(gwXYF?Mwp9$5My+6{&(KްfX氺q?vbA{5`e2Qs3I~_?AHoB_di7f$᧶O>!Rbor`rOU241}twS;{݊2eC	!ݍd`ht\%Ar<:ڿX6A2֋?=ܻGAm;ayrKť6a>ځAǸO1XgObu~(Y`(^NH=nYɭK2/vI"k-
Xui,q6PCX0 _>&J-F׺FSB3+nyT53;73\Y/!g斐(STTY9G
\))ȵɤՔ*:f2f #Dވ\,3n2N567MmM\zSrJ-z-fV9r27˅g繁X L^wk4ҫ*j oy~Jk""Lls۶EiϷ$lapS,I{5nGd8{4#:7Z^K]dV׶5J}<}RbP͏'|i]lh]noH	jKHA[̰9=ibkeX3:13%8؎PM5QQ=ܖ]Y/n|
0UOdeI?dCj-5Rm5~v(ld') ..53HpgF@ZP|"RK<RVRRVB
	%
[jhZT`6RD9L,Ϥ4	}202orEG(6Ԡ |!aa6EDN03my0kԼjTXUb#ՔN225RCg=:tIXY3	؝R7S~̇i-3pg>)tgǱqp%W[wz*$JiD0[[绐m@'hHhqz/dh3lBOEFS=Yڽ{=;h1mm=>(<<waT@7mͅǝPo[ؚ$$ۘ3.pSA	a
OGCYz~Ͽdekp_
#㡗ٙ&aʈ>IO?`)뮴p!JswcKvT7--c":Z8]7<Wɹl{%L͞$Gy߻yrбJ$~tPpеp	]}(|scT|KAE)o@GP/rlY+?^BVv	GD;o75wW}Nc4j74bff*D~RQ֣_^V.<{J$ܫn9>Nt1\u{:WCC:\{/޼,t%"Fz_3/M
ԧ(
q(K
̗
NED:vdFc'.mg&\t`%C">صSP/9J"dLЩBiDKl-OoEa޽8@Idҋ?oy5LMHaGDlZ= 6ks67Iy%pJy$F<exkJWr|{r`rAu'[lk=~:gQRxQKRn?ysnJ+	1"
`@|st<(B<p\,V#"`uKo5n[VkvAx˸FDxGFbYcZKXT *䯏&_x2}"x
YiϡkCNvuuhsZldr 2yh)B2!M,$F{|2{Ln7,'|x-n>_Mn`k )P{ᱧd].N ^

Y>q긢5dE(gɢ]\8{jaisarIgAgM'hxP`
e_/-V=8X77Tv9;UbBu@k jjx	Bל3z8&Aa$BPR'`Q,oaYJ+IA2
`ƺV0V4<V2!(1ZE7+-os/+VqFIO&ҾŦ{Lc		xMl
OCZ,QM&ǧqz0
eKtK
;#Ϣy}]m~PB~^zR=-3T&A'S|j;jkY:XX{CP~q(T\G92DqVY`󽩭mٰMMb¯{^ٺpe^p5`hVVnE c>[D;¸ψ;#XűW$4C
H&໼eZozrSZi`U-[P?t1,o4 !@dc ml[AA
-q.O)tLE ml `]LWƳ`^ȇ}H,:w_v[bև]hsQx<'ټI[<q^?X.7y]7٦M>mQ-9nII6F؇`'ֹIoKiD Ban\wo{rbJ诤P`yɰ~y%d3v\\=ՃO<8v7 	"]=#b Z$YtWAE$TXihb/5pR>weO_ڿGv3Do
=&'Z w;=UOUZ*KsrJ {>}i.C)J!1:E3 Z?&=,ŅD{^%DtK(2(`gih=|w
JaȝGCTʾqIòvFG7ٴEWIh$O>罖 7`.~ 5g^h_;~)A)ĥwlSj@#`lv[EwLΜ7cڰRjJ,zdp_([bދv6LӲVڢ.A#y%?`,'@:0uNBp(VLW￳.H yx&n	FE~}Y)7nӉGhZ'	cI)ae:tEƶ|Ff5xИ&qKQlVd(%rb@$V?TUaMݮGe%
az-W+M֌q"XaƿX@éKf>ެ4t:ێTͣg;v
Mx^[\f:o/KԥCU3jY5io~aVQ4 ԤbR<fxIɔ9S>D"x*yzETa| OI,]Ԁ0\6j"y)=XCi~2=%zڌ<:XSkZcrsD#0]y-5g݀z4Nظ1-za\ݨ՞}Qt4[ha2AFOdȋřa@Gwub`pƴX݃InKaXg92cQr,g&wjkȟn0B"AA#k0s/S
挷	rdNUexLenMpv_ä=;׭<7zxkxovwi}fB8"	%IZ*+id	ҵ
T!zB`"9d7Xr)g1ۄwM6ğm1ari}x~׊z2t[0z"<Ƴul< [  WO_շ:K>/q/U]-\G]!F_{0
>W28W+JJRf}1udXʢ`/r35@AhseHGm\nXhL}4dSZȡL V`%9",<i%³yJ \vQ%DRp`FWɹCRE0;YF@wќÑP^[kJ  YJ),۱6L$4fR$%W>eGN2tJ{i틭3e&/֊]:CH|g墶5D,hrV%͕Ӧ@*	229	:x#a3[G5[u v1#濑T֚XLB~[pS:<p?no#bݙcbqN{6D#FT|Hl,+Q@ďSMkI:A۠HCuCuH'bRV	^
CM#gn8V9ʓ¿uoկNTI3*dQa˓X=#ëi8CD |D1lQ3TIo82D
%rJkFbO#N|.VFqR_X;9׾U cƛTb],E?P;ѧ=BM&kF#eg"`9abePȣ\VMnrA@+uwe޺=q3:HH1<uo
I_Svkel
SP1,K-W=7Psx +9\
M2>YAG'1JLcrKm8Pi\v;ȝfoBs7]=G`udI@Idwgs*se-nZxcdiE)tfȤ\q()@By34גIaz[EYHTTVД+w`l0tA=wrֆM/CѓSH(рT-<m[IʲӴ"}E4eRB@H2sIdflcؒ
3;W}VtIzydwjh<޼,ۥ$D3Čіiډͳ~89|̥G }>ӆ5S >Myߙ=ۓ龼[?Е/B:\9ڠvYޜ6At2ûh>V%/lX_M@xng҅ی6U#׵3wOE}Z2L0;YVBXv+sAP (xw{2PWQW=`L^Ujݚ,IɜYL:o|p\·3yo@Bu7y1bviJ12n P>-u0;(BG=aqȊXlb{ΥMs!!*]Y]Vɰb3Q%,]u"_bȶȩؐh!PRYz')O8:	+9<nSDeXii=`o/<јRmɛI-}?.[NO5(ovRƶɘC=EXRBS_-YU U ma,kJ;x]]q)4?7cɍ2(ںe>-ɟ=Gwaa/a^.7vz89K_3/8M0̪siGf41z^l
MeOުu%ĩƝ+VaeA(lVj;t2+hKmy{%4O}']MvdY9wiej/xƂY}([G)ҚD(&}|`ʬf:.Ÿ>N(&Rí/c r@g,M}<KXCAV4Ișp34/Iz"'{ZX ](Mɹp"0@
QLp%رvZn#V=1p@+]YE}Dvi3P-z
і-.4!m=đben}0>C?i{
Rg;L;}\vgɱڵOVqA;'l#٦xWepg?B+yzm'`/ό{z) վr`XNT^Ӓc;HRS:e)qE:蕞8Xe3z0S4êe<Ɗ05FNHBAqme$do^'0Z`YK&#5Z,m<[-G=1?);Cd1{To=޼L1Z
sjOdت5h*i)U}	wg#՝Xd=o]<n^tbD4^].+;e2kRʴ4^ohO%G<%r_;:
	е(jd!\hYRjx+VKKkqKs"_<.Ё
}	hzL~o{4V(?Ge֗n8,\#噦,JǇv
l/"o"t-=g@Mm#4]qAi edR1F<D訉n?H{	gÄ<W>ԠfJ#SOb$A)g!* F( 	jZdYT8H?"x#qDɀ_[1^X$F	JDNbd0EkV!l(st;
t^9"yǕc8^q6g?~jNw,g09w`?3^JBKE5X?eAY*LӶ$ܵcPhe%(]
(#1CySEdH8ITVgyd4uZס9N c-nmsƮfۡVNSoQ9êYiFu. |B)6VsFnjh5 ");ԤĊMevjq&>Z}2:dq~/--U=:'zǉpk$ON RnHOz҉[/<Tom"TǥdLdmUWX;s;e%T_[Dl_;kuLJ:4KJmN%,8⬱%~j뤍Câ:cI
 m[=R\T]Zy̹\_ZU5mY嶈|d6fiVVsڏIdń b ?<o @fX"HXS+h3PK!{"/RԆu PIzvueN=M]jv@7_YӞ4yV$ZF9"G (!`&%
р+FQF3n&+i~ih\y).U"\,YU&\NF侞r$
A٪<JV$BE$LU,K"@tS6dd:G^Y$EJ#xyKe4$
,
rj{><5`6l6%ܤ3$|d/ѺxG\o_i궫Q'氃-lڊAIQ5%ϋI!崓A!p1䲏JtZCXdE#[VB
=aEXdcR	d1+s#]|QǘERSdŏ.
)   
----
platform/platformManager.ts
import { Platform, PlatformCapabilities as IPlatformCapabilities } from '../core/types';
import { Settings } from '../types/settings';
import { createLogger } from '../core/logger';
import { XRSessionMode } from '../types/xr';

const logger = createLogger('PlatformManager');

interface PlatformFeatures {
    webgl?: {
        isSupported: boolean;
        version: number;
    };
    xr?: {
        isSupported: boolean;
        isImmersiveSupported: boolean;
    };
}

export class PlatformManager {
    private static instance: PlatformManager | null = null;
    private initialized = false;
    private platform: Platform | null = null;
    private features: PlatformFeatures = {};
    private _settings: Settings;

    private constructor(settings: Settings) {
        this._settings = settings;
    }

    static getInstance(settings?: Settings): PlatformManager {
        if (!PlatformManager.instance && settings) {
            PlatformManager.instance = new PlatformManager(settings);
        }
        return PlatformManager.instance!;
    }

    async init(): Promise<void> {
        if (this.initialized) {
            return;
        }

        try {
            await this.detectPlatform();
            await this.detectFeatures();
            this.initialized = true;
            logger.info('Platform manager initialized');
        } catch (error) {
            logger.error('Failed to initialize platform manager:', error);
            throw error;
        }
    }

    private async detectPlatform(): Promise<void> {
        // Default to desktop
        this.platform = {
            name: 'desktop',
            version: '1.0.0',
            capabilities: {
                webgl: { isSupported: false, version: 0 },
                xr: { isSupported: false, isImmersiveSupported: false }
            }
        };

        // Detect platform type
        if (navigator.userAgent.includes('Quest')) {
            this.platform.name = 'quest';
        } else if (navigator.userAgent.includes('Mobile')) {
            this.platform.name = 'mobile';
        } else if (navigator.userAgent.includes('Firefox') || navigator.userAgent.includes('Chrome')) {
            this.platform.name = 'browser';
        }
    }

    private async detectFeatures(): Promise<void> {
        // Detect WebGL support
        const canvas = document.createElement('canvas');
        const gl = canvas.getContext('webgl2') || canvas.getContext('webgl');
        
        this.features.webgl = {
            isSupported: !!gl,
            version: gl?.getParameter(gl.VERSION) ? 2 : 1
        };

        // Detect XR support
        this.features.xr = {
            isSupported: false,
            isImmersiveSupported: false
        };

        if ('xr' in navigator) {
            this.features.xr.isSupported = true;
            this.features.xr.isImmersiveSupported = await this.checkXRSupport(this._settings.xr.mode as XRSessionMode);
        }

        logger.info('Platform capabilities detected:', this.getCapabilities());
    }

    getCapabilities(): IPlatformCapabilities {
        return {
            webgl: {
                isSupported: this.features.webgl?.isSupported || false,
                version: this.features.webgl?.version || 0
            },
            xr: {
                isSupported: this.features.xr?.isSupported || false,
                isImmersiveSupported: this.features.xr?.isImmersiveSupported || false
            }
        };
    }

    isDesktop(): boolean {
        return this.platform?.name === 'desktop';
    }

    isQuest(): boolean {
        return this.platform?.name === 'quest';
    }

    isBrowser(): boolean {
        return this.platform?.name === 'browser';
    }

    supportsXR(): boolean {
        return this.features.xr?.isSupported || false;
    }

    supportsWebGL(): boolean {
        return this.features.webgl?.isSupported || false;
    }

    private async checkXRSupport(mode: XRSessionMode): Promise<boolean> {
        if (!this.features.xr?.isSupported || !('xr' in navigator) || !navigator.xr) {
            return false;
        }

        try {
            return await navigator.xr.isSessionSupported(mode);
        } catch (error) {
            logger.warn('Failed to check XR support:', error);
            return false;
        }
    }

    async startXRSession(): Promise<XRSession | null> {
        if (!this.supportsXR() || !navigator.xr) {
            return null;
        }

        try {
            const session = await navigator.xr.requestSession(this._settings.xr.mode as XRSessionMode);
            session.addEventListener('end', () => {
                logger.info('XR session ended');
            });
            logger.info('XR session started');
            return session;
        } catch (error) {
            logger.error('Failed to start XR session:', error);
            return null;
        }
    }

    dispose(): void {
        this.initialized = false;
        PlatformManager.instance = null;
    }
}

export const platformManager = PlatformManager.getInstance();

----
core/logger.ts
import { Logger, LogLevel, LoggerOptions } from './types';
import { Settings } from '../types/settings';

export class LoggerImpl implements Logger {
    private static instance: LoggerImpl;
    private namespace: string;
    private level: LogLevel;
    private jsonFormatting: boolean;

    constructor(options: LoggerOptions = {}) {
        this.namespace = options.namespace || 'default';
        this.level = options.level || 'info';
        this.jsonFormatting = options.enableJsonFormatting || false;
    }

    private static getInstance(): LoggerImpl {
        if (!LoggerImpl.instance) {
            LoggerImpl.instance = new LoggerImpl();
        }
        return LoggerImpl.instance;
    }

    public static setSettings(settings: Settings): void {
        const instance = LoggerImpl.getInstance();
        if (settings?.system?.debug) {
            instance.setLevel(settings.system.debug.logLevel as LogLevel);
            instance.setJsonFormatting(settings.system.debug.logFullJson);
        }
    }

    private shouldLog(level: LogLevel): boolean {
        const levels: LogLevel[] = ['error', 'warn', 'info', 'debug', 'trace'];
        const currentLevelIndex = levels.indexOf(this.level);
        const targetLevelIndex = levels.indexOf(level);
        return targetLevelIndex <= currentLevelIndex;
    }

    private formatMessage(level: LogLevel, message: string): string {
        return `[${this.namespace}] [${level.toUpperCase()}] ${message}`;
    }

    private formatArgs(args: unknown[]): unknown[] {
        if (!this.jsonFormatting) return args;
        return args.map(arg => 
            typeof arg === 'object' ? JSON.stringify(arg, null, 2) : arg
        );
    }

    debug(message: string, ...args: unknown[]): void {
        if (this.shouldLog('debug')) {
            console.debug(this.formatMessage('debug', message), ...this.formatArgs(args));
        }
    }

    info(message: string, ...args: unknown[]): void {
        if (this.shouldLog('info')) {
            console.info(this.formatMessage('info', message), ...this.formatArgs(args));
        }
    }

    warn(message: string, ...args: unknown[]): void {
        if (this.shouldLog('warn')) {
            console.warn(this.formatMessage('warn', message), ...this.formatArgs(args));
        }
    }

    error(message: string, ...args: unknown[]): void {
        if (this.shouldLog('error')) {
            console.error(this.formatMessage('error', message), ...this.formatArgs(args));
        }
    }

    trace(message: string, ...args: unknown[]): void {
        if (this.shouldLog('trace')) {
            console.debug(this.formatMessage('trace', message), ...this.formatArgs(args));
        }
    }

    log(level: LogLevel, message: string, ...args: unknown[]): void {
        switch (level) {
            case 'error': this.error(message, ...args); break;
            case 'warn': this.warn(message, ...args); break;
            case 'info': this.info(message, ...args); break;
            case 'debug': this.debug(message, ...args); break;
            case 'trace': this.trace(message, ...args); break;
        }
    }

    setLevel(level: LogLevel): void {
        this.level = level;
    }

    getLevel(): LogLevel {
        return this.level;
    }

    setJsonFormatting(enabled: boolean): void {
        this.jsonFormatting = enabled;
    }
}

export function createLogger(options?: LoggerOptions | string): Logger {
    if (typeof options === 'string') {
        options = { namespace: options };
    }
    return new LoggerImpl(options);
}

// Global logger instance
export const logger = createLogger({ namespace: 'core' });

----
core/utils.ts
/**
 * Core utilities for the LogseqXR visualization system
 */

import { Vector3, Euler, Quaternion, Matrix4 } from 'three';
import { Logger, LogLevel } from './types';
import { THROTTLE_INTERVAL } from './constants';

export function createLogger(namespace: string): Logger {
  return {
    debug: (message: string, ...args: unknown[]): void => {
      console.debug(`[${namespace}] ${message}`, ...args);
    },
    info: (message: string, ...args: unknown[]): void => {
      console.info(`[${namespace}] ${message}`, ...args);
    },
    warn: (message: string, ...args: unknown[]): void => {
      console.warn(`[${namespace}] ${message}`, ...args);
    },
    error: (message: string, ...args: unknown[]): void => {
      console.error(`[${namespace}] ${message}`, ...args);
    },
    trace: (message: string, ...args: unknown[]): void => {
      console.debug(`[${namespace}] TRACE ${message}`, ...args);
    },
    log: (level: LogLevel, message: string, ...args: unknown[]): void => {
      switch (level) {
        case 'error': console.error(`[${namespace}] ${message}`, ...args); break;
        case 'warn': console.warn(`[${namespace}] ${message}`, ...args); break;
        case 'info': console.info(`[${namespace}] ${message}`, ...args); break;
        case 'debug': console.debug(`[${namespace}] ${message}`, ...args); break;
        case 'trace': console.debug(`[${namespace}] TRACE ${message}`, ...args); break;
      }
    },
    setLevel: (): void => {},
    getLevel: (): LogLevel => 'info',
    setJsonFormatting: (): void => {}
  };
}

// Case conversion utilities
export const camelToSnakeCase = (str: string): string => {
  return str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);
};

export const snakeToCamelCase = (str: string): string => {
  return str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());
};

export function convertObjectKeysToSnakeCase<T>(obj: T): T extends Array<any> ? Array<Record<string, unknown>> : Record<string, unknown> {
  if (obj === null || typeof obj !== 'object') {
    return obj as any;
  }
  
  if (Array.isArray(obj)) {
    return obj.map(item => convertObjectKeysToSnakeCase(item)) as any;
  }
  
  return Object.keys(obj as object).reduce((acc, key) => {
    const snakeKey = camelToSnakeCase(key);
    acc[snakeKey] = convertObjectKeysToSnakeCase((obj as any)[key]);
    return acc;
  }, {} as Record<string, unknown>) as any;
}

export function convertObjectKeysToCamelCase<T>(obj: T): T extends Array<any> ? Array<Record<string, unknown>> : Record<string, unknown> {
  if (obj === null || typeof obj !== 'object') {
    return obj as any;
  }
  
  if (Array.isArray(obj)) {
    return obj.map(item => convertObjectKeysToCamelCase(item)) as any;
  }
  
  return Object.keys(obj as object).reduce((acc, key) => {
    const camelKey = snakeToCamelCase(key);
    acc[camelKey] = convertObjectKeysToCamelCase((obj as any)[key]);
    return acc;
  }, {} as Record<string, unknown>) as any;
}

// Update throttler for performance optimization
export class UpdateThrottler {
  private lastUpdate: number = 0;
  private throttleInterval: number;

  constructor(throttleInterval: number = THROTTLE_INTERVAL) {
    this.throttleInterval = throttleInterval;
  }

  shouldUpdate(): boolean {
    const now = performance.now();
    if (now - this.lastUpdate >= this.throttleInterval) {
      this.lastUpdate = now;
      return true;
    }
    return false;
  }

  reset(): void {
    this.lastUpdate = 0;
  }
}

// Vector operations
export const vectorOps = {
  add: (a: Vector3, b: Vector3): Vector3 => {
    return new Vector3(a.x + b.x, a.y + b.y, a.z + b.z);
  },
  subtract: (a: Vector3, b: Vector3): Vector3 => {
    return new Vector3(a.x - b.x, a.y - b.y, a.z - b.z);
  },
  multiply: (v: Vector3, scalar: number): Vector3 => {
    return new Vector3(v.x * scalar, v.y * scalar, v.z * scalar);
  },
  divide: (v: Vector3, scalar: number): Vector3 => {
    return new Vector3(v.x / scalar, v.y / scalar, v.z / scalar);
  },
  length: (v: Vector3): number => 
    Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z),
  normalize: (v: Vector3): Vector3 => {
    const len = vectorOps.length(v);
    return len > 0 ? vectorOps.divide(v, len) : new Vector3(0, 0, 0);
  },
  distance: (a: Vector3, b: Vector3): number => 
    vectorOps.length(vectorOps.subtract(a, b)),
  fromArray: (arr: number[]): Vector3 => {
    return new Vector3(arr[0] || 0, arr[1] || 0, arr[2] || 0);
  }
};

// Scale utilities
export const scaleOps = {
  // Normalize a value between min and max
  normalize: (value: number, min: number, max: number): number => {
    return Math.min(max, Math.max(min, value));
  },

  // Map a value from one range to another
  mapRange: (value: number, inMin: number, inMax: number, outMin: number, outMax: number): number => {
    // First normalize to 0-1
    const normalized = (value - inMin) / (inMax - inMin);
    // Then map to output range
    return outMin + normalized * (outMax - outMin);
  },

  // Scale node size from server range to visualization range
  normalizeNodeSize: (size: number, serverMin: number = 20, serverMax: number = 30, visMin: number = 0.15, visMax: number = 0.4): number => {
    return scaleOps.mapRange(size, serverMin, serverMax, visMin, visMax);
  }
};

// Data validation utilities
export const validateGraphData = (data: Record<string, unknown>): boolean => {
  if (!data || typeof data !== 'object') return false;
  if (!Array.isArray(data.nodes) || !Array.isArray(data.edges)) return false;
  
  // Validate nodes
  for (const node of data.nodes) {
    if (!node.id) return false;
    // Allow position to be either array or Vector3
    if (node.position) {
      if (Array.isArray(node.position)) {
        if (node.position.length !== 3 || 
            typeof node.position[0] !== 'number' ||
            typeof node.position[1] !== 'number' ||
            typeof node.position[2] !== 'number') {
          return false;
        }
      } else if (typeof node.position === 'object') {
        if (typeof node.position.x !== 'number' ||
            typeof node.position.y !== 'number' ||
            typeof node.position.z !== 'number') {
          return false;
        }
      } else {
        return false;
      }
    }
  }
  
  // Validate edges
  for (const edge of data.edges) {
    if (!edge.source || !edge.target) return false;
  }
  
  return true;
};

// Binary data helpers
export const binaryToFloat32Array = (buffer: ArrayBuffer): Float32Array => {
  return new Float32Array(buffer);
};

export const float32ArrayToPositions = (array: Float32Array): Vector3[] => {
  const positions: Vector3[] = [];
  for (let i = 0; i < array.length; i += 3) {
    positions.push(new Vector3(array[i], array[i + 1], array[i + 2]));
  }
  return positions;
};

// Error handling utility
export class VisualizationError extends Error {
  constructor(message: string, public code: string) {
    super(message);
    this.name = 'VisualizationError';
  }
}

// Performance monitoring
export class PerformanceMonitor {
  private frames: number = 0;
  private lastTime: number = performance.now();
  private fps: number = 0;

  update(): void {
    this.frames++;
    const now = performance.now();
    const delta = now - this.lastTime;

    if (delta >= 1000) {
      this.fps = (this.frames * 1000) / delta;
      this.frames = 0;
      this.lastTime = now;
    }
  }

  getFPS(): number {
    return Math.round(this.fps);
  }
}

// Type definitions for utility functions
export type LogFunction = (message: string, ...args: unknown[]) => void;
export type ErrorCallback = (error: Error) => void;

// Constants
const DEFAULT_TIMEOUT = 5000;

// Logging utilities
export type DeepPartial<T> = {
    [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];
};

export function deepMerge<T extends Record<string, unknown>>(target: T, source: DeepPartial<T>): T {
    const output = { ...target };

    for (const key in source) {
        if (source.hasOwnProperty(key)) {
            const sourceValue = source[key];
            if (sourceValue && typeof sourceValue === 'object' && !Array.isArray(sourceValue)) {
                if (!(key in target)) {
                    Object.assign(output, { [key]: sourceValue });
                } else {
                    const targetValue = target[key] as Record<string, unknown>;
                    output[key] = deepMerge(targetValue, sourceValue as DeepPartial<typeof targetValue>) as T[typeof key];
                }
            } else {
                Object.assign(output, { [key]: sourceValue });
            }
        }
    }

    return output;
}

// Async utilities
export function delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
}

export async function withTimeout<T>(
    promise: Promise<T>,
    timeoutMs: number = DEFAULT_TIMEOUT
): Promise<T> {
    const timeoutPromise = new Promise<never>((_, reject) => {
        setTimeout(() => reject(new Error('Operation timed out')), timeoutMs);
    });
    return Promise.race([promise, timeoutPromise]);
}

export async function withRetry<T>(
    operation: () => Promise<T>,
    maxRetries: number = 3,
    delayMs: number = 1000
): Promise<T> {
    let lastError: Error | undefined;
    
    for (let attempt = 0; attempt < maxRetries; attempt++) {
        try {
            return await operation();
        } catch (error) {
            lastError = error instanceof Error ? error : new Error(String(error));
            if (attempt < maxRetries - 1) {
                await delay(delayMs * Math.pow(2, attempt));
            }
        }
    }
    
    throw lastError || new Error('Operation failed after retries');
}

// Type utilities
export type JsonValue = string | number | boolean | null | JsonObject | JsonArray;
export type JsonObject = { [key: string]: JsonValue };
export type JsonArray = JsonValue[];

export type EventCallback<T> = (data: T) => void;

// Event handling utilities
export function createEventEmitter<T>() {
    const listeners = new Set<EventCallback<T>>();
    
    return {
        on(callback: EventCallback<T>) {
            listeners.add(callback);
            return () => listeners.delete(callback);
        },
        emit(data: T) {
            listeners.forEach(listener => listener(data));
        },
        clear() {
            listeners.clear();
        }
    };
}

// Object utilities
export function isObject(item: unknown): item is Record<string, unknown> {
    return item !== null && typeof item === 'object' && !Array.isArray(item);
}

export function generateUUID(): string {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        const r = (Math.random() * 16) | 0;
        const v = c === 'x' ? r : (r & 0x3) | 0x8;
        return v.toString(16);
    });
}

export function createVector3FromObject(obj: { x: number; y: number; z: number }): Vector3 {
    return new Vector3(obj.x, obj.y, obj.z);
}

export function createEulerFromObject(obj: { x: number; y: number; z: number; order?: string }): Euler {
    return new Euler(obj.x, obj.y, obj.z, obj.order as "XYZ" | "YXZ" | "ZXY" | "ZYX" | "YZX" | "XZY" | undefined);
}

export function createQuaternionFromObject(obj: { x: number; y: number; z: number; w: number }): Quaternion {
    return new Quaternion(obj.x, obj.y, obj.z, obj.w);
}

export function createMatrix4FromArray(array: number[]): Matrix4 {
    return new Matrix4().fromArray(array);
}

export function sleep(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
}

export async function retry<T>(
    fn: () => Promise<T>,
    retries: number = 3,
    delay: number = 1000,
    onError?: (error: Error) => void
): Promise<T> {
    let lastError: Error;
    try {
        return await fn();
    } catch (error) {
        lastError = error instanceof Error ? error : new Error(String(error));
        if (retries === 0) {
            throw lastError;
        }
        if (onError) {
            onError(lastError);
        }
        await sleep(delay);
        return retry(fn, retries - 1, delay, onError);
    }
}

export function memoize<T extends (...args: any[]) => any>(
    fn: T,
    resolver?: (...args: Parameters<T>) => string
): T {
    const cache = new Map<string, ReturnType<T>>();

    return function memoized(this: unknown, ...args: Parameters<T>): ReturnType<T> {
        const key = resolver ? resolver(...args) : JSON.stringify(args);
        if (cache.has(key)) {
            return cache.get(key)!;
        }
        const result = fn.apply(this, args);
        cache.set(key, result);
        return result;
    } as T;
}

// Color utilities
export interface RGB {
    r: number;
    g: number;
    b: number;
}

export interface HSL {
    h: number;
    s: number;
    l: number;
}

export function rgbToHsl(rgb: RGB): HSL {
    const r = rgb.r / 255;
    const g = rgb.g / 255;
    const b = rgb.b / 255;

    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    let h = 0;
    let s = 0;
    const l = (max + min) / 2;

    if (max !== min) {
        const d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);

        switch (max) {
            case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / d + 2;
                break;
            case b:
                h = (r - g) / d + 4;
                break;
        }

        h /= 6;
    }

    return { h, s, l };
}

export function hslToRgb(hsl: HSL): RGB {
    let r = 0;
    let g = 0;
    let b = 0;

    if (hsl.s === 0) {
        r = g = b = hsl.l;
    } else {
        const hue2rgb = (p: number, q: number, t: number): number => {
            if (t < 0) t += 1;
            if (t > 1) t -= 1;
            if (t < 1 / 6) return p + (q - p) * 6 * t;
            if (t < 1 / 2) return q;
            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
            return p;
        };

        const q = hsl.l < 0.5 ? hsl.l * (1 + hsl.s) : hsl.l + hsl.s - hsl.l * hsl.s;
        const p = 2 * hsl.l - q;

        r = hue2rgb(p, q, hsl.h + 1 / 3);
        g = hue2rgb(p, q, hsl.h);
        b = hue2rgb(p, q, hsl.h - 1 / 3);
    }

    return {
        r: Math.round(r * 255),
        g: Math.round(g * 255),
        b: Math.round(b * 255)
    };
}

export function hexToRgb(hex: string): RGB | null {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result
        ? {
              r: parseInt(result[1], 16),
              g: parseInt(result[2], 16),
              b: parseInt(result[3], 16)
          }
        : null;
}

export function rgbToHex(rgb: RGB): string {
    const toHex = (n: number): string => {
        const hex = n.toString(16);
        return hex.length === 1 ? '0' + hex : hex;
    };

    return `#${toHex(rgb.r)}${toHex(rgb.g)}${toHex(rgb.b)}`;
}

// Environment utilities
export function getEnvironmentVariable(key: string): string | undefined {
    if (typeof process !== 'undefined' && process.env && process.env[key]) {
        return process.env[key];
    }
    return undefined;
}

export function isProduction(): boolean {
    return process.env.NODE_ENV === 'production';
}

export function isDevelopment(): boolean {
    return process.env.NODE_ENV === 'development';
}

export function isTest(): boolean {
    return process.env.NODE_ENV === 'test';
}

// String utilities
export function formatBytes(bytes: number, decimals = 2): string {
    if (bytes === 0) return '0 Bytes';
    
    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

    const i = Math.floor(Math.log(bytes) / Math.log(k));

    return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;
}

// DOM utilities
export function createElement<K extends keyof HTMLElementTagNameMap>(
    tagName: K,
    options?: ElementCreationOptions
): HTMLElementTagNameMap[K] {
    return document.createElement(tagName, options);
}

export function removeElement(element: Element): void {
    element.parentElement?.removeChild(element);
}

// URL utilities
export function isValidUrl(url: string): boolean {
    try {
        new URL(url);
        return true;
    } catch {
        return false;
    }
}

export function joinPaths(...paths: string[]): string {
    return paths
        .map(path => path.replace(/^\/+|\/+$/g, ''))
        .filter(Boolean)
        .join('/');
}

// Deep clone utility
export function deepClone<T>(obj: T): T {
    if (obj === null || typeof obj !== 'object') {
        return obj;
    }

    if (Array.isArray(obj)) {
        return obj.map(item => deepClone(item)) as unknown as T;
    }

    return Object.fromEntries(
        Object.entries(obj as Record<string, unknown>).map(([key, value]) => [
            key,
            deepClone(value)
        ])
    ) as T;
}

// Deep equal utility
export function deepEqual(a: unknown, b: unknown): boolean {
    if (a === b) return true;

    if (a === null || b === null) return false;
    if (typeof a !== 'object' || typeof b !== 'object') return false;

    const keysA = Object.keys(a as object);
    const keysB = Object.keys(b as object);

    if (keysA.length !== keysB.length) return false;

    for (const key of keysA) {
        if (!keysB.includes(key)) return false;
        if (!deepEqual((a as Record<string, unknown>)[key], (b as Record<string, unknown>)[key])) return false;
    }

    return true;
}

----
core/constants.ts
/**
 * Application constants
 */

// Environment detection
export const IS_PRODUCTION = ['www.visionflow.info', 'visionflow.info'].includes(window.location.hostname);
export const IS_DEVELOPMENT = !IS_PRODUCTION;

// API configuration
export const API_BASE = '';  // Empty string means use relative URLs

// API paths
export const API_PATHS = {
    SETTINGS: 'settings',
    WEBSOCKET: 'websocket',
    GRAPH: 'graph',
    FILES: 'files'
};

// API endpoints
export const API_ENDPOINTS = {
    GRAPH_DATA: '/api/graph/data',
    GRAPH_UPDATE: '/api/graph/update',
    GRAPH_PAGINATED: '/api/graph/data/paginated',
    SETTINGS_ROOT: '/api/settings',
    SETTINGS_UPDATE: '/api/settings/update',
    SETTINGS_CATEGORY: (category: string) => `/api/settings/${category}`,
    SETTINGS_ITEM: (category: string, setting: string) => `/api/settings/${category}/${setting}`,
    VISUALIZATION_SETTINGS: '/api/settings/visualization',
    WEBSOCKET_SETTINGS: '/api/settings/websocket',
    WEBSOCKET_CONTROL: '/api/websocket/control',
    FILES: '/api/files'
} as const;

export type ApiEndpoints = typeof API_ENDPOINTS[keyof typeof API_ENDPOINTS];

// Settings categories matching server's snake_case
export const SETTINGS_CATEGORIES = {
    // System settings
    NETWORK: 'system.network',
    WEBSOCKET: 'system.websocket',
    SECURITY: 'system.security',
    DEBUG: 'system.debug',
    
    // Visualization settings
    ANIMATIONS: 'visualization.animations',
    AR: 'visualization.ar',
    AUDIO: 'visualization.audio',
    BLOOM: 'visualization.bloom',
    EDGES: 'visualization.edges',
    HOLOGRAM: 'visualization.hologram',
    LABELS: 'visualization.labels',
    NODES: 'visualization.nodes',
    PHYSICS: 'visualization.physics',
    RENDERING: 'visualization.rendering',
    
    // Default settings
    DEFAULT: 'default'
};

// WebSocket configuration
export const WS_MESSAGE_QUEUE_SIZE = 1000;

// Binary protocol configuration
export const FLOATS_PER_NODE = 6;  // x, y, z, vx, vy, vz
export const VERSION_OFFSET = 0;    // No version header
export const BINARY_CHUNK_SIZE = 1000; // Number of nodes to process in one chunk
export const NODE_POSITION_SIZE = 24;  // 6 floats * 4 bytes (position + velocity)

// Performance configuration
export const THROTTLE_INTERVAL = 16; // ~60fps
export const EDGE_UPDATE_BATCH_INTERVAL = 16; // Batch edge updates at ~60fps

// Visualization constants
export const NODE_SIZE = 2.5;
export const NODE_SEGMENTS = 16;
export const EDGE_RADIUS = 0.25;
export const EDGE_SEGMENTS = 8;

// Font configuration
export const FONT_URL = '/fonts/Roboto-Regular.woff2';

// Colors
export const NODE_COLOR = 0x4CAF50;  // Material Design Green
export const NODE_HIGHLIGHT_COLOR = 0xff4444;  // Material Design Red
export const EDGE_COLOR = 0xE0E0E0;  // Material Design Grey 300
export const BACKGROUND_COLOR = 0x212121;  // Material Design Grey 900
export const LABEL_COLOR = 0xFFFFFF;  // White

// Debug configuration
export const DEBUG = {
    NETWORK_PANEL: {
        MAX_MESSAGES: 50,
        ENABLED: IS_DEVELOPMENT
    }
};

----
core/types.ts
import {
    Scene,
    Camera,
    WebGLRenderer,
    Object3D,
    Vector3,
    Color,
    PerspectiveCamera
} from 'three';
import * as THREE from 'three';

// Re-export Three.js types with our own names to avoid conflicts
export {
    Scene,
    Camera,
    WebGLRenderer,
    Object3D,
    Vector3,
    Color,
    PerspectiveCamera
};

// Core types for the application
export interface Node {
    id: string;
    label: string;
    position: Vector3;
    color?: Color;
    size?: number;
    group?: string;
    properties: Record<string, unknown>;
    data?: {
        position: { x: number; y: number; z: number };
        type?: string;
    };
}

export interface Edge {
    source: string;
    target: string;
    weight?: number;
    type?: string;
    properties: Record<string, unknown>;
}

export interface GraphData {
    nodes: Node[];
    edges: Edge[];
    metadata?: Record<string, unknown>;
}

// Hologram types
export interface HologramUniforms extends Record<string, THREE.IUniform<any>> {
    time: THREE.IUniform<number>;
    opacity: THREE.IUniform<number>;
    color: THREE.IUniform<THREE.Color>;
    glowIntensity: THREE.IUniform<number>;
}

export interface HologramShaderMaterial extends THREE.ShaderMaterial {
    uniforms: HologramUniforms;
    update(deltaTime: number): void;
    handleInteraction(intensity: number): void;
}

// Scene types
export interface SceneManager {
    scene: Scene;
    camera: PerspectiveCamera;
    renderer: WebGLRenderer;
    init(): void;
    update(deltaTime: number): void;
    resize(width: number, height: number): void;
    dispose(): void;
}

// Material types
export interface MaterialSettings {
    type: 'basic' | 'phong' | 'hologram';
    color?: THREE.Color;
    transparent?: boolean;
    opacity?: number;
    side?: THREE.Side;
    glowIntensity?: number;
}

// Platform types
export interface PlatformCapabilities {
    webgl: {
        isSupported: boolean;
        version: number;
    };
    xr: {
        isSupported: boolean;
        isImmersiveSupported: boolean;
    };
}

export interface Platform {
    name: string;
    version: string;
    capabilities: PlatformCapabilities;
}

// Transform function
export interface GraphDataTransformer {
    transform(data: GraphData): GraphData;
}

export function transformGraphData(data: GraphData, transformer: GraphDataTransformer): GraphData {
    return transformer.transform(data);
}

// Logger types
export type LogLevel = 'error' | 'warn' | 'info' | 'debug' | 'trace';

export interface LoggerOptions {
    namespace?: string;
    level?: LogLevel;
    enableJsonFormatting?: boolean;
}

export interface Logger {
    debug(message: string, ...args: unknown[]): void;
    info(message: string, ...args: unknown[]): void;
    warn(message: string, ...args: unknown[]): void;
    error(message: string, ...args: unknown[]): void;
    trace(message: string, ...args: unknown[]): void;
    log(level: LogLevel, message: string, ...args: unknown[]): void;
    setLevel(level: LogLevel): void;
    getLevel(): LogLevel;
    setJsonFormatting(enabled: boolean): void;
}

// Node types
export interface NodeData {
    id: string;
    label: string;
    position: Vector3;
    color?: Color;
    size?: number;
    type?: string;
    properties: Record<string, unknown>;
}

export interface NodeMesh extends THREE.Mesh {
    userData: {
        id: string;
        type?: string;
        properties?: Record<string, unknown>;
        rotationSpeed?: number;
    };
}

// Visualization settings
export interface NodeSettings {
    color: string;
    defaultSize: number;
    minSize: number;
    maxSize: number;
    sizeProperty?: string;
    colorProperty?: string;
    baseColor: string;
    baseSize: number;
    sizeRange: [number, number];
    enableMetadataShape: boolean;
    colorRangeAge: [string, string];
    colorRangeLinks: [string, string];
    metalness: number;
    roughness: number;
    opacity: number;
    enableMetadataVisualization: boolean;
    enableHologram: boolean;
    enableInstancing: boolean;
    quality: 'low' | 'medium' | 'high';
    material: {
        type: 'basic' | 'phong';
        transparent: boolean;
        opacity: number;
    };
}

export interface EdgeSettings {
    color: string;
    defaultWidth: number;
    minWidth: number;
    maxWidth: number;
    widthProperty?: string;
    colorProperty?: string;
    arrowSize: number;
    baseWidth: number;
    enableArrows: boolean;
    opacity: number;
    widthRange: [number, number];
}

export interface HologramSettings {
    color: string;
    opacity: number;
    glowIntensity: number;
    rotationSpeed: number;
    enabled: boolean;
    ringCount: number;
    ringColor: string;
    ringOpacity: number;
    ringSizes: [number, number, number];
    ringRotationSpeed: number;
    enableBuckminster: boolean;
    buckminsterScale: number;
    buckminsterOpacity: number;
    enableGeodesic: boolean;
    geodesicScale: number;
    geodesicOpacity: number;
    enableTriangleSphere: boolean;
    triangleSphereScale: number;
    triangleSphereOpacity: number;
    globalRotationSpeed: number;
}

export interface VisualizationSettings {
    nodes: NodeSettings;
    edges: EdgeSettings;
    hologram: HologramSettings;
    labels?: {
        enabled: boolean;
        size: number;
        color: string;
    };
    render?: {
        showGrid: boolean;
        backgroundColor: string;
    };
    controls?: {
        autoRotate: boolean;
        rotateSpeed: number;
        zoomSpeed: number;
        panSpeed: number;
    };
}

----
core/api.ts
import { API_BASE, API_ENDPOINTS } from './constants';

// Helper function to build API URLs
export function buildApiUrl(path: string): string {
    // Handle API paths
    const apiPaths = ['/api', '/api/settings'];
    for (const apiPath of apiPaths) {
        if (path.startsWith(apiPath)) {
            return `${API_BASE}${path}`;
        }
    }
    return `${API_BASE}/api/${path}`;
}

// Helper function to build settings URL
export function buildSettingsUrl(category: string): string {
    return `${API_ENDPOINTS.SETTINGS_ROOT}/${category}`;
}

// Helper function to build graph URL
export function buildGraphUrl(type: 'data' | 'update' | 'paginated'): string {
    switch (type) {
        case 'paginated':
            return API_ENDPOINTS.GRAPH_PAGINATED;
        case 'update':
            return API_ENDPOINTS.GRAPH_UPDATE;
        default:
            return API_ENDPOINTS.GRAPH_DATA;
    }
}

// Helper function to build files URL
export function buildFilesUrl(path: string): string {
    return `${API_ENDPOINTS.FILES}/${path}`;
}

// Helper function to build WebSocket URL
export function buildWsUrl(): string {
    const isProduction = ['www.visionflow.info', 'visionflow.info'].includes(window.location.hostname);
    const host = window.location.host;
    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    
    // Always use secure WebSocket in production
    if (isProduction) {
        return `wss://www.visionflow.info/wss`;
    }
    
    // In development, follow the page protocol (ws for http, wss for https)
    return `${protocol}//${host}/wss`;
}

// Helper function to build settings item URL
export function buildSettingsItemUrl(category: string, setting: string): string {
    return API_ENDPOINTS.SETTINGS_ITEM(category, setting);
}

// Helper function to build visualization settings URL
export function buildVisualizationSettingsUrl(): string {
    return API_ENDPOINTS.VISUALIZATION_SETTINGS;
}

// Helper function to build WebSocket control URL
export function buildWebSocketControlUrl(): string {
    return API_ENDPOINTS.WEBSOCKET_CONTROL;
}

// Helper function to build WebSocket settings URL
export function buildWebSocketSettingsUrl(): string {
    return API_ENDPOINTS.WEBSOCKET_SETTINGS;
}

----
core/meshTypes.ts
import * as THREE from 'three';

export interface NodeMetadata extends Record<string, unknown> {
    label?: string;
    type?: string;
}

export interface NodeData {
    id: string;
    position: THREE.Vector3;
    color?: THREE.Color;
    size?: number;
    metadata?: NodeMetadata;
    properties?: Record<string, unknown>;
}

export interface EdgeMetadata extends Record<string, unknown> {
    label?: string;
    type?: string;
}

export interface EdgeData {
    id: string;
    source: string;
    target: string;
    color?: THREE.Color;
    width?: number;
    metadata?: EdgeMetadata;
    properties?: Record<string, unknown>;
}

export interface NodeUserData {
    id: string;
    type: string;
    properties?: Record<string, unknown>;
    [key: string]: unknown;
}

export interface EdgeUserData {
    id: string;
    source: string;
    target: string;
    type: string;
    properties?: Record<string, unknown>;
    [key: string]: unknown;
}

// Define mesh types using Three.js base types
export interface NodeMesh extends THREE.Object3D {
    isMesh: true;
    geometry: THREE.BufferGeometry;
    material: THREE.Material;
    userData: NodeUserData;
}

export interface EdgeMesh extends THREE.Object3D {
    isLine: true;
    geometry: THREE.BufferGeometry;
    material: THREE.Material;
    userData: EdgeUserData;
}

// Type guard to check if an object is a NodeMesh
export function isNodeMesh(object: THREE.Object3D): object is NodeMesh {
    return object instanceof THREE.Mesh &&
           object.userData &&
           typeof object.userData === 'object' &&
           'id' in object.userData &&
           'type' in object.userData;
}

// Type guard to check if an object is an EdgeMesh
export function isEdgeMesh(object: THREE.Object3D): object is EdgeMesh {
    return object instanceof THREE.Line &&
           object.userData &&
           typeof object.userData === 'object' &&
           'id' in object.userData &&
           'source' in object.userData &&
           'target' in object.userData;
}

// Factory function to create a NodeMesh
export function createNodeMesh(
    geometry: THREE.BufferGeometry,
    material: THREE.Material,
    userData: NodeUserData
): NodeMesh {
    // Create mesh with double type assertion
    const mesh = new THREE.Mesh(geometry as any, material as any);
    mesh.userData = userData;
    // Use double type assertion for safer casting
    return mesh as unknown as NodeMesh;
}

// Factory function to create an EdgeMesh
export function createEdgeMesh(
    geometry: THREE.BufferGeometry,
    material: THREE.Material,
    userData: EdgeUserData
): EdgeMesh {
    // Create line with double type assertion
    const edge = new THREE.Line(geometry as any, material as any);
    edge.userData = userData;
    // Use double type assertion for safer casting
    return edge as unknown as EdgeMesh;
}

----
core/threeTypes.ts
import * as THREE from 'three';
import { OrbitControls as ThreeOrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';

// Re-export Three.js types
export type Scene = THREE.Scene;
export type Camera = THREE.Camera;
export type PerspectiveCamera = THREE.PerspectiveCamera;
export type Material = THREE.Material;
export type MeshBasicMaterial = THREE.MeshBasicMaterial;
export type MeshPhongMaterial = THREE.MeshPhongMaterial;
export type MeshStandardMaterial = THREE.MeshStandardMaterial;
export type Mesh = THREE.Mesh;
export type Group = THREE.Group;
export type Vector3 = THREE.Vector3;
export type Vector2 = THREE.Vector2;
export type Color = THREE.Color;
export type BufferGeometry = THREE.BufferGeometry;
export type Object3D = THREE.Object3D;
export type Line = THREE.Line;
export type LineBasicMaterial = THREE.LineBasicMaterial;
export type LineBasicMaterialParameters = THREE.LineBasicMaterialParameters;
export type GridHelper = THREE.GridHelper;
export type AmbientLight = THREE.AmbientLight;
export type DirectionalLight = THREE.DirectionalLight;
export type OrbitControls = ThreeOrbitControls;
export type BufferAttribute = THREE.BufferAttribute;
export type InterleavedBufferAttribute = THREE.InterleavedBufferAttribute;
export type WebGLRenderer = THREE.WebGLRenderer;
export type Clock = THREE.Clock;
export type Raycaster = THREE.Raycaster;
export type Intersection = THREE.Intersection;
export type InstancedMesh = THREE.InstancedMesh;
export type Box3 = THREE.Box3;
export type Sphere = THREE.Sphere;
export type EulerOrder = THREE.EulerOrder;
export type MaterialParameters = THREE.MaterialParameters;
export type MeshBasicMaterialParameters = THREE.MeshBasicMaterialParameters;
export type MeshPhongMaterialParameters = THREE.MeshPhongMaterialParameters;
export type MeshStandardMaterialParameters = THREE.MeshStandardMaterialParameters;
export type Side = THREE.Side;

// Export constants and classes
export const DoubleSide = THREE.DoubleSide;
export const Euler = THREE.Euler;
export const Quaternion = THREE.Quaternion;
export const Matrix4 = THREE.Matrix4;

// Factory functions with proper type handling
export function createLine(geometry: THREE.BufferGeometry, material: THREE.LineBasicMaterial): THREE.Line {
    // Workaround for Three.js 0.171.0 constructor type issues
    const line = new THREE.Line();
    (line as any).geometry = geometry;
    (line as any).material = material;
    return line;
}

export function createMeshBasicMaterial(params: THREE.MeshBasicMaterialParameters = {}): THREE.MeshBasicMaterial {
    // Workaround for Three.js 0.171.0 constructor type issues
    const material = new THREE.MeshBasicMaterial();
    return Object.assign(material, params);
}

export function createMeshPhongMaterial(params: THREE.MeshPhongMaterialParameters = {}): THREE.MeshPhongMaterial {
    // Workaround for Three.js 0.171.0 constructor type issues
    const material = new THREE.MeshPhongMaterial();
    return Object.assign(material, params);
}

export function createMeshStandardMaterial(params: THREE.MeshStandardMaterialParameters = {}): THREE.MeshStandardMaterial {
    // Workaround for Three.js 0.171.0 constructor type issues
    const material = new THREE.MeshStandardMaterial();
    return Object.assign(material, params);
}

export function createLineBasicMaterial(params: THREE.LineBasicMaterialParameters = {}): THREE.LineBasicMaterial {
    // Workaround for Three.js 0.171.0 constructor type issues
    const material = new THREE.LineBasicMaterial();
    return Object.assign(material, params);
}

export function createMesh(geometry: THREE.BufferGeometry, material: THREE.Material): THREE.Mesh {
    // Workaround for Three.js 0.171.0 constructor type issues
    const mesh = new THREE.Mesh();
    (mesh as any).geometry = geometry;
    (mesh as any).material = material;
    return mesh;
}

export function createBufferAttribute(array: Float32Array | number[], itemSize: number): THREE.BufferAttribute {
    return new THREE.BufferAttribute(array instanceof Float32Array ? array : new Float32Array(array), itemSize);
}

export function createVector3(x = 0, y = 0, z = 0): THREE.Vector3 {
    return new THREE.Vector3(x, y, z);
}

export function createVector2(x = 0, y = 0): THREE.Vector2 {
    return new THREE.Vector2(x, y);
}

----
core/graphTypes.ts
import { Vector3, Color } from 'three';

export interface GraphNode {
    id: string;
    label: string;
    position: Vector3;
    color?: Color;
    size?: number;
    group?: string;
    properties: Record<string, unknown>;
}

export interface GraphEdge {
    source: string;
    target: string;
    weight?: number;
    type?: string;
    properties: Record<string, unknown>;
}

export interface GraphData {
    nodes: GraphNode[];
    edges: GraphEdge[];
    metadata?: Record<string, unknown>;
}

export interface GraphDataTransformer {
    transform(data: GraphData): GraphData;
}

----
types/gestures.ts
export enum HandGestureType {
    None = 'none',
    Pinch = 'pinch',
    Grab = 'grab',
    Point = 'point',
    Wave = 'wave'
}

----
types/webxr.d.ts
/**
 * WebXR API type extensions
 */

declare module 'three' {
  export interface Object3DEventMap {
    connected: XRControllerEvent;
    disconnected: XRControllerEvent;
    selectstart: XRControllerEvent;
    selectend: XRControllerEvent;
    squeezestart: XRControllerEvent;
    squeezeend: XRControllerEvent;
    pinchstart: XRHandEvent;
    pinchend: XRHandEvent;
    pinch: XRHandEvent;
    grip: XRHandEvent;
    release: XRHandEvent;
  }

  export interface XRControllerEvent extends Event {
    type: 'connected' | 'disconnected' | 'selectstart' | 'selectend' | 'squeezestart' | 'squeezeend';
    target: Group;
    data?: XRInputSource;
  }

  export interface XRHandEvent extends Event {
    type: 'pinchstart' | 'pinchend' | 'pinch' | 'grip' | 'release';
    target: Group;
    hand: XRHand;
  }

  export interface XRSessionInit {
    optionalFeatures?: string[];
    requiredFeatures?: string[];
  }

  export interface XRReferenceSpace {
    getOffsetReferenceSpace(originOffset: XRRigidTransform): XRReferenceSpace;
  }

  export interface XRRigidTransform {
    position: { x: number; y: number; z: number };
    orientation: { x: number; y: number; z: number; w: number };
    matrix: Float32Array;
    inverse: XRRigidTransform;
  }

  export interface XRFrame {
    session: XRSession;
    getViewerPose(referenceSpace: XRReferenceSpace): XRViewerPose | null;
    getPose(space: XRSpace, baseSpace: XRSpace): XRPose | null;
  }

  export interface XRViewerPose {
    transform: XRRigidTransform;
    views: XRView[];
  }

  export interface XRView {
    eye: 'left' | 'right' | 'none';
    projectionMatrix: Float32Array;
    transform: XRRigidTransform;
    viewport: { x: number; y: number; width: number; height: number };
  }

  export interface XRInputSource {
    handedness: 'none' | 'left' | 'right';
    targetRayMode: 'gaze' | 'tracked-pointer' | 'screen';
    targetRaySpace: XRSpace;
    gripSpace?: XRSpace;
    gamepad?: Gamepad;
    profiles: string[];
    hand?: XRHand;
  }

  export interface XRPose {
    transform: XRRigidTransform;
    emulatedPosition: boolean;
    linearVelocity?: DOMPointReadOnly;
    angularVelocity?: DOMPointReadOnly;
  }

  export interface XRSpace {
    readonly type: string;
    readonly mode: XRSessionMode;
    readonly session: XRSession;
  }

  export type XRReferenceSpaceType = 'viewer' | 'local' | 'local-floor' | 'bounded-floor' | 'unbounded';
  export type XRSessionMode = 'inline' | 'immersive-vr' | 'immersive-ar';

  export interface XRHandJoint {
    readonly jointName: XRHandJointName;
    readonly jointSpace: XRJointSpace;
    readonly radius: number;
    readonly pose: XRJointPose | null;
  }

  export interface XRJointPose extends XRPose {
    readonly radius: number;
  }

  export type XRHandJointName =
    | 'wrist'
    | 'thumb-metacarpal'
    | 'thumb-phalanx-proximal'
    | 'thumb-phalanx-distal'
    | 'thumb-tip'
    | 'index-finger-metacarpal'
    | 'index-finger-phalanx-proximal'
    | 'index-finger-phalanx-intermediate'
    | 'index-finger-phalanx-distal'
    | 'index-finger-tip'
    | 'middle-finger-metacarpal'
    | 'middle-finger-phalanx-proximal'
    | 'middle-finger-phalanx-intermediate'
    | 'middle-finger-phalanx-distal'
    | 'middle-finger-tip'
    | 'ring-finger-metacarpal'
    | 'ring-finger-phalanx-proximal'
    | 'ring-finger-phalanx-intermediate'
    | 'ring-finger-phalanx-distal'
    | 'ring-finger-tip'
    | 'pinky-finger-metacarpal'
    | 'pinky-finger-phalanx-proximal'
    | 'pinky-finger-phalanx-intermediate'
    | 'pinky-finger-phalanx-distal'
    | 'pinky-finger-tip';

  export interface XRLightEstimate {
    primaryLightIntensity?: { value: number };
    primaryLightDirection?: { x: number; y: number; z: number };
  }
}

// Extend existing WebXR types
declare global {
  interface XRFrame {
    session: XRSession;
    getViewerPose(referenceSpace: XRReferenceSpace): XRViewerPose | null;
    getPose(space: XRSpace, baseSpace: XRSpace): XRPose | null;
    getHitTestResults(hitTestSource: XRHitTestSource): XRHitTestResult[];
    getLightEstimate?(): XRLightEstimate | null;
  }

  interface XRSession {
    requestReferenceSpace(type: XRReferenceSpaceType): Promise<XRReferenceSpace>;
    requestHitTestSource(options: XRHitTestOptionsInit): Promise<XRHitTestSource>;
    end(): Promise<void>;
    addEventListener(type: string, listener: EventListener): void;
    removeEventListener(type: string, listener: EventListener): void;
  }

  interface XRHitTestOptionsInit {
    space: XRSpace;
    offsetRay?: XRRay;
  }

  interface XRHitTestSource {
    cancel(): void;
  }

  interface XRHitTestResult {
    getPose(baseSpace: XRSpace): XRPose | null;
  }

  interface XRHand extends Map<XRHandJoint, XRJointSpace> {
    readonly size: number;
    get(joint: XRHandJoint): XRJointSpace | undefined;
  }

  interface XRJointSpace extends XRSpace {
    readonly jointName: XRHandJoint;
  }

  interface Navigator {
    xr?: {
      isSessionSupported(mode: string): Promise<boolean>;
      requestSession(mode: string, options?: XRSessionInit): Promise<XRSession>;
    };
  }
}

// Prevent conflicts with @types/webxr
declare module '@types/webxr' {
  export {};
}

export {};

----
types/three-ext.d.ts
declare module 'three/examples/jsm/controls/OrbitControls' {
  import { Camera, EventDispatcher, MOUSE, TOUCH, Vector3 } from 'three';

  export class OrbitControls extends EventDispatcher {
    constructor(object: Camera, domElement?: HTMLElement);

    object: Camera;
    domElement: HTMLElement | HTMLDocument;

    enabled: boolean;
    target: Vector3;

    minDistance: number;
    maxDistance: number;

    minZoom: number;
    maxZoom: number;

    minPolarAngle: number;
    maxPolarAngle: number;

    minAzimuthAngle: number;
    maxAzimuthAngle: number;

    enableDamping: boolean;
    dampingFactor: number;

    enableZoom: boolean;
    zoomSpeed: number;

    enableRotate: boolean;
    rotateSpeed: number;

    enablePan: boolean;
    panSpeed: number;
    screenSpacePanning: boolean;
    keyPanSpeed: number;

    autoRotate: boolean;
    autoRotateSpeed: number;

    enableKeys: boolean;

    keys: { LEFT: number; UP: number; RIGHT: number; BOTTOM: number };
    mouseButtons: { LEFT: MOUSE; MIDDLE: MOUSE; RIGHT: MOUSE };
    touches: { ONE: TOUCH; TWO: TOUCH };

    update(): boolean;
    dispose(): void;
  }
}

declare module 'three/examples/jsm/webxr/XRControllerModelFactory' {
  import { Group, _Texture } from 'three';

  export class XRControllerModelFactory {
    constructor();
    createControllerModel(controller: Group): Group;
  }
}

declare module 'three/examples/jsm/postprocessing/EffectComposer' {
  import { WebGLRenderer, WebGLRenderTarget } from 'three';

  export class Pass {
    enabled: boolean;
    needsSwap: boolean;
    clear: boolean;
    renderToScreen: boolean;

    setSize(width: number, height: number): void;
    render(renderer: WebGLRenderer, writeBuffer: WebGLRenderTarget, readBuffer: WebGLRenderTarget, deltaTime?: number, maskActive?: boolean): void;
  }

  export class EffectComposer {
    constructor(renderer: WebGLRenderer, renderTarget?: WebGLRenderTarget);
    
    renderTarget1: WebGLRenderTarget;
    renderTarget2: WebGLRenderTarget;
    writeBuffer: WebGLRenderTarget;
    readBuffer: WebGLRenderTarget;
    passes: Pass[];
    
    swapBuffers(): void;
    addPass(pass: Pass): void;
    insertPass(pass: Pass, __index: number): void;
    removePass(pass: Pass): void;
    render(deltaTime?: number): void;
    reset(renderTarget?: WebGLRenderTarget): void;
    setSize(width: number, height: number): void;
    dispose(): void;
  }
}

declare module 'three/examples/jsm/postprocessing/RenderPass' {
  import { Scene, Camera } from 'three';
  import { Pass } from 'three/examples/jsm/postprocessing/EffectComposer';

  export class RenderPass extends Pass {
    constructor(scene: Scene, camera: Camera);
    scene: Scene;
    camera: Camera;
  }
}

declare module 'three/examples/jsm/postprocessing/UnrealBloomPass' {
  import { Vector2 } from 'three';
  import { Pass } from 'three/examples/jsm/postprocessing/EffectComposer';

  export class UnrealBloomPass extends Pass {
    constructor(resolution: Vector2, strength?: number, radius?: number, threshold?: number);
    resolution: Vector2;
    strength: number;
    radius: number;
    threshold: number;
  }
}

import { Camera as ThreeCamera, PerspectiveCamera } from 'three';

declare module 'three' {
    export interface Camera extends ThreeCamera {
        type: 'Camera' | 'PerspectiveCamera' | 'OrthographicCamera';
    }

    export interface PerspectiveCamera extends Camera {
        type: 'PerspectiveCamera';
    }

    export interface Material {
        color?: THREE.Color;
    }

    export interface Mesh<
        TGeometry extends THREE.BufferGeometry = THREE.BufferGeometry,
        TMaterial extends THREE.Material | THREE.Material[] = THREE.Material | THREE.Material[]
    > extends THREE.Object3D {
        geometry: TGeometry;
        material: TMaterial;
    }
}

----
types/three.d.ts
// Type definitions for Three.js with WebXR and GPU support
declare module 'three' {
    // Core interfaces
    export interface Object3DEventMap {
        added: { type: 'added'; target: Object3D };
        removed: { type: 'removed'; target: Object3D };
        'matrix-update': { type: 'matrix-update'; target: Object3D };
    }

    export interface MaterialEventMap {
        dispose: { type: 'dispose'; target: Material };
        'shader-update': { type: 'shader-update'; target: Material };
    }

    // Base types
    export type Side = 'FrontSide' | 'BackSide' | 'DoubleSide';
    export type Blending = 'NoBlending' | 'NormalBlending' | 'AdditiveBlending' | 'SubtractiveBlending' | 'MultiplyBlending';
    export type DrawMode = 'TrianglesDrawMode' | 'TriangleStripDrawMode' | 'TriangleFanDrawMode';

    // Core classes with proper type definitions
    export class Object3D {
        readonly isObject3D: true;
        readonly uuid: string;
        name: string;
        type: string;
        parent: Object3D | null;
        children: Object3D[];
        up: Vector3;
        position: Vector3;
        rotation: Euler;
        quaternion: Quaternion;
        scale: Vector3;
        modelViewMatrix: Matrix4;
        normalMatrix: Matrix3;
        matrix: Matrix4;
        matrixWorld: Matrix4;
        matrixAutoUpdate: boolean;
        matrixWorldAutoUpdate: boolean;
        matrixWorldNeedsUpdate: boolean;
        layers: Layers;
        visible: boolean;
        castShadow: boolean;
        receiveShadow: boolean;
        frustumCulled: boolean;
        renderOrder: number;
        animations: AnimationClip[];
        userData: Record<string, unknown>;
        customDepthMaterial?: Material;
        customDistanceMaterial?: Material;

        add(...objects: Object3D[]): this;
        remove(...objects: Object3D[]): this;
        traverse(callback: (object: Object3D) => void): void;
        updateMatrix(): void;
        updateMatrixWorld(force?: boolean): void;
        lookAt(x: number | Vector3, y?: number, z?: number): void;
        rotateX(angle: number): this;
        rotateY(angle: number): this;
        rotateZ(angle: number): this;

        addEventListener<K extends keyof Object3DEventMap>(
            type: K,
            listener: (event: Object3DEventMap[K]) => void
        ): void;
        removeEventListener<K extends keyof Object3DEventMap>(
            type: K,
            listener: (event: Object3DEventMap[K]) => void
        ): void;
        dispatchEvent<K extends keyof Object3DEventMap>(event: Object3DEventMap[K]): void;
    }

    export class Material {
        transparent: boolean;
        opacity: number;
        depthWrite: boolean;
        depthTest: boolean;
        side: Side;
        color: Color;
        wireframe?: boolean;
        uniforms?: { [uniform: string]: { value: any } };
        defines?: { [key: string]: string };
        needsUpdate: boolean;

        dispose(): void;
        clone(): this;
        copy(source: Material): this;

        addEventListener<K extends keyof MaterialEventMap>(
            type: K,
            listener: (event: MaterialEventMap[K]) => void
        ): void;
        removeEventListener<K extends keyof MaterialEventMap>(
            type: K,
            listener: (event: MaterialEventMap[K]) => void
        ): void;
        dispatchEvent<K extends keyof MaterialEventMap>(event: MaterialEventMap[K]): void;
    }

    export class MeshBasicMaterial extends Material {
        color: Color;
        map: Texture | null;
        wireframe: boolean;
        wireframeLinewidth: number;
        fog: boolean;
        lights: boolean;
        isMeshBasicMaterial: true;
    }

    export class MeshPhongMaterial extends Material {
        color: Color;
        specular: Color;
        shininess: number;
        map: Texture | null;
        lightMap: Texture | null;
        lightMapIntensity: number;
        aoMap: Texture | null;
        aoMapIntensity: number;
        emissive: Color;
        emissiveIntensity: number;
        emissiveMap: Texture | null;
        bumpMap: Texture | null;
        bumpScale: number;
        normalMap: Texture | null;
        normalMapType: number;
        normalScale: Vector2;
        displacementMap: Texture | null;
        displacementScale: number;
        displacementBias: number;
        specularMap: Texture | null;
        alphaMap: Texture | null;
        envMap: Texture | null;
        combine: number;
        reflectivity: number;
        refractionRatio: number;
        wireframe: boolean;
        wireframeLinewidth: number;
        wireframeLinecap: string;
        wireframeLinejoin: string;
        fog: boolean;
        lights: boolean;
        isMeshPhongMaterial: true;
    }

    export class LineBasicMaterial extends Material {
        color: Color;
        linewidth: number;
        linecap: string;
        linejoin: string;
        isLineBasicMaterial: true;
    }

    export class ShaderMaterial extends Material {
        uniforms: { [uniform: string]: { value: any } };
        vertexShader: string;
        fragmentShader: string;
        linewidth: number;
        wireframe: boolean;
        wireframeLinewidth: number;
        lights: boolean;
        clipping: boolean;
        skinning: boolean;
        morphTargets: boolean;
        morphNormals: boolean;
        extensions: {
            derivatives: boolean;
            fragDepth: boolean;
            drawBuffers: boolean;
            shaderTextureLOD: boolean;
        };
        defaultAttributeValues: any;
        index0AttributeName: string | undefined;
        uniformsNeedUpdate: boolean;
        glslVersion: any;
        isShaderMaterial: true;
    }

    export class BufferGeometry {
        dispose(): void;
        rotateX(angle: number): this;
        rotateY(angle: number): this;
        rotateZ(angle: number): this;
        setAttribute(name: string, attribute: BufferAttribute): this;
        setIndex(index: BufferAttribute): this;
        computeBoundingBox(): void;
        computeBoundingSphere(): void;
    }

    export class Group extends Object3D {
        constructor();
        type: 'Group';
        isGroup: true;
    }

    export class Scene extends Object3D {
        constructor();
        type: 'Scene';
        fog: FogExp2 | null;
        background: Color | Texture | null;
        environment: Texture | null;
        isScene: true;
    }

    export class Mesh extends Object3D {
        constructor(geometry?: BufferGeometry, material?: Material);
        type: 'Mesh';
        geometry: BufferGeometry;
        material: Material;
        isMesh: true;
    }

    export class Camera extends Object3D {
        type: 'Camera';
        matrixWorldInverse: Matrix4;
        projectionMatrix: Matrix4;
        projectionMatrixInverse: Matrix4;
        isCamera: true;
        updateMatrixWorld(force?: boolean): void;
        lookAt(x: number | Vector3, y?: number, z?: number): void;
    }

    export class PerspectiveCamera extends Camera {
        constructor(fov?: number, aspect?: number, near?: number, far?: number);
        type: 'PerspectiveCamera';
        fov: number;
        aspect: number;
        near: number;
        far: number;
        isPerspectiveCamera: true;
        updateProjectionMatrix(): void;
    }

    export class Vector3 {
        constructor(x?: number, y?: number, z?: number);
        x: number;
        y: number;
        z: number;
        isVector3: true;
        
        set(x: number, y: number, z: number): this;
        setScalar(scalar: number): this;
        setX(x: number): this;
        setY(y: number): this;
        setZ(z: number): this;
        
        clone(): Vector3;
        copy(v: Vector3): this;
        add(v: Vector3): this;
        addScalar(s: number): this;
        addVectors(a: Vector3, b: Vector3): this;
        sub(v: Vector3): this;
        subScalar(s: number): this;
        subVectors(a: Vector3, b: Vector3): this;
        multiply(v: Vector3): this;
        multiplyScalar(scalar: number): this;
        multiplyVectors(a: Vector3, b: Vector3): this;
        divide(v: Vector3): this;
        divideScalar(scalar: number): this;
        min(v: Vector3): this;
        max(v: Vector3): this;
        clamp(min: Vector3, max: Vector3): this;
        length(): number;
        lengthSq(): number;
        manhattanLength(): number;
        normalize(): this;
        setLength(length: number): this;
        lerp(v: Vector3, alpha: number): this;
        lerpVectors(v1: Vector3, v2: Vector3, alpha: number): this;
        cross(v: Vector3): this;
        crossVectors(a: Vector3, b: Vector3): this;
        projectOnVector(v: Vector3): this;
        projectOnPlane(planeNormal: Vector3): this;
        reflect(normal: Vector3): this;
        angleTo(v: Vector3): number;
        distanceTo(v: Vector3): number;
        distanceToSquared(v: Vector3): number;
        manhattanDistanceTo(v: Vector3): number;
        setFromSpherical(s: Spherical): this;
        setFromSphericalCoords(radius: number, phi: number, theta: number): this;
        setFromCylindrical(c: Cylindrical): this;
        setFromCylindricalCoords(radius: number, theta: number, y: number): this;
        setFromMatrixPosition(m: Matrix4): this;
        setFromMatrixScale(m: Matrix4): this;
        setFromMatrixColumn(matrix: Matrix4, index: number): this;
        equals(v: Vector3): boolean;
        fromArray(array: number[], offset?: number): this;
        toArray(array?: number[], offset?: number): number[];
        fromBufferAttribute(attribute: BufferAttribute, index: number): this;
        random(): this;
    }

    export interface WebGLRendererParameters {
        canvas?: HTMLCanvasElement;
        context?: WebGLRenderingContext;
        precision?: string;
        alpha?: boolean;
        premultipliedAlpha?: boolean;
        antialias?: boolean;
        stencil?: boolean;
        preserveDrawingBuffer?: boolean;
        powerPreference?: string;
        failIfMajorPerformanceCaveat?: boolean;
        depth?: boolean;
        logarithmicDepthBuffer?: boolean;
    }

    export class WebGLRenderer {
        constructor(parameters?: WebGLRendererParameters);
        domElement: HTMLCanvasElement;
        capabilities: {
            isWebGL2: boolean;
            maxTextures: number;
            maxVertexTextures: number;
            maxTextureSize: number;
            maxCubemapSize: number;
            maxAttributes: number;
            maxVertexUniforms: number;
            maxVaryings: number;
            maxFragmentUniforms: number;
            vertexTextures: boolean;
            floatFragmentTextures: boolean;
            floatVertexTextures: boolean;
        };
        xr: WebXRManager;
        
        setSize(width: number, height: number, updateStyle?: boolean): void;
        setPixelRatio(value: number): void;
        setClearColor(color: Color | string | number, alpha?: number): void;
        render(scene: Scene, camera: Camera): void;
        setAnimationLoop(callback: XRFrameRequestCallback | null): void;
        dispose(): void;
    }

    export class WebXRManager {
        enabled: boolean;
        isPresenting: boolean;
        getController(index: number): Group;
        getControllerGrip(index: number): Group;
        setFramebufferScaleFactor(value: number): void;
        setReferenceSpaceType(value: XRReferenceSpaceType): void;
        getReferenceSpace(): XRReferenceSpace | null;
        getSession(): XRSession | null;
        setSession(value: XRSession): Promise<void>;
        getCamera(): Camera;
        updateCamera(camera: Camera): void;
    }

    export type XRFrameRequestCallback = (time: number, frame?: XRFrame) => void;
    export type ColorRepresentation = Color | string | number;

    // Constants
    export const DoubleSide: Side;
    export const FrontSide: Side;
    export const BackSide: Side;
    export const NoBlending: Blending;
    export const NormalBlending: Blending;
    export const AdditiveBlending: Blending;
    export const SubtractiveBlending: Blending;
    export const MultiplyBlending: Blending;
    export const TrianglesDrawMode: DrawMode;
    export const TriangleStripDrawMode: DrawMode;
    export const TriangleFanDrawMode: DrawMode;
}

// Prevent accidental use of ambient declarations
export {};

----
types/env.d.ts
/// <reference types="vite/client" />

interface ImportMetaEnv {
  readonly VITE_APP_TITLE: string;
  readonly DEV: boolean;
  readonly PROD: boolean;
  readonly MODE: string;
}

interface ImportMeta {
  readonly env: ImportMetaEnv;
}

----
types/xr.ts
import * as THREE from 'three';
import { Platform } from '../core/types';
import { Vector3 } from 'three';

// Core XR Types
export type XRSessionMode = 'immersive-ar' | 'immersive-vr' | 'inline';
export type XRHandedness = 'none' | 'left' | 'right';

export interface XRSystem {
    isSessionSupported(mode: XRSessionMode): Promise<boolean>;
    requestSession(mode: XRSessionMode, options?: XRSessionInit): Promise<XRSession>;
}

export interface XRHand extends THREE.Group {
    type: 'Group';
    joints: Map<string, XRJointSpace>;
    dispatchEvent<K extends keyof THREE.Object3DEventMap>(event: THREE.Object3DEventMap[K]): void;
}

export interface XRJointSpace extends THREE.Object3D<THREE.Object3DEventMap> {
    position: Vector3;
    quaternion: THREE.Quaternion;
    radius: number;
}

export interface CustomXRLightEstimate {
    primaryLightDirection?: { x: number; y: number; z: number };
    primaryLightIntensity: { value: number };
    sphericalHarmonicsCoefficients: Float32Array;
}

export interface XRSessionInit {
    optionalFeatures?: string[];
    requiredFeatures?: string[];
}

export interface XRSession {
    addEventListener(type: string, listener: EventListener): void;
    removeEventListener(type: string, listener: EventListener): void;
    requestReferenceSpace(type: XRReferenceSpaceType): Promise<XRReferenceSpace>;
    updateRenderState(renderState: XRRenderState): Promise<void>;
    requestAnimationFrame(callback: XRFrameRequestCallback): number;
    end(): Promise<void>;
}

export type XRReferenceSpaceType = 'local' | 'local-floor' | 'bounded-floor' | 'unbounded';

export interface XRRenderState {
    baseLayer?: XRWebGLLayer;
    depthFar?: number;
    depthNear?: number;
    inlineVerticalFieldOfView?: number;
}

export interface XRWebGLLayer {
    framebuffer: WebGLFramebuffer;
    framebufferWidth: number;
    framebufferHeight: number;
}

export type XRFrameRequestCallback = (time: number, frame: XRFrame) => void;

export interface XRFrame {
    session: XRSession;
    getViewerPose(referenceSpace: XRReferenceSpace): XRViewerPose | null;
    getLightEstimate?(): CustomXRLightEstimate | null;
}

export interface XRViewerPose {
    transform: XRRigidTransform;
    views: XRView[];
}

export interface XRRigidTransform {
    position: Vector3;
    orientation: THREE.Quaternion;
    matrix: THREE.Matrix4;
}

export interface XRView {
    eye: XREye;
    projectionMatrix: Float32Array;
    transform: XRRigidTransform;
}

export type XREye = 'left' | 'right' | 'none';

// Input and Interaction Types
export interface HapticActuator {
    pulse: (intensity: number, duration: number) => Promise<boolean>;
}

export interface WorldObject3D extends THREE.Object3D {
    position: THREE.Vector3;
    quaternion: THREE.Quaternion;
    scale: THREE.Vector3;
    matrix: THREE.Matrix4;
    matrixWorld: THREE.Matrix4;
    getWorldPosition(target: THREE.Vector3): THREE.Vector3;
}

export interface XRControllerState {
    position: THREE.Vector3;
    rotation: THREE.Quaternion;
    hapticActuator?: HapticActuator;
    platform: Platform;
}

export interface XRHandState {
    position: THREE.Vector3;
    joints: Map<string, XRJointSpace>;
    pinchStrength: number;
    gripStrength: number;
    platform: Platform;
}

export interface XRHandWithHaptics extends THREE.Group {
    hapticActuators?: HapticActuator[];
    hand: {
        joints: { [key: string]: WorldObject3D };
    };
    pinchStrength: number;
    gripStrength: number;
    userData: {
        hapticActuator?: HapticActuator;
        platform: Platform;
    };
}

export interface XRHandController {
    hapticActuators?: HapticActuator[];
    hand: {
        joints: { [key: string]: WorldObject3D };
    };
    pinchStrength: number;
}

// Input Configuration
export interface XRInputConfig {
    controllers: boolean;
    hands: boolean;
    haptics: boolean;
}

// Event Types
export interface XRControllerEvent {
    controller: XRSpace;
    inputSource: XRInputSource;
    hapticActuator?: HapticActuator;
}

export interface XRHandEvent {
    hand: XRHandWithHaptics;
    inputSource: XRInputSource;
}

export interface XRInteractionState {
    pinching: boolean;
    pinchStrength: number;
    gripping: boolean;
    gripStrength: number;
    position: THREE.Vector3;
    rotation: THREE.Quaternion;
}

// Platform-specific Types
export interface QuestHandTracking extends XRHandState {
    confidence: number;
    gestureId?: number;
}

export interface QuestControllerTracking extends XRControllerState {
    thumbstick: THREE.Vector2;
    trigger: number;
    grip: number;
}

----
types/three-examples.d.ts
import { Group, Camera, Scene, WebGLRenderer, Material, Vector3, Color, Object3D } from 'three';

declare module 'three/examples/jsm/webxr/XRControllerModelFactory' {
    export class XRControllerModelFactory {
        constructor();
        createControllerModel(controller: Group): Group;
    }
}

declare module 'three/examples/jsm/controls/OrbitControls' {
    export class OrbitControls {
        constructor(camera: Camera, domElement?: HTMLElement);
        enabled: boolean;
        target: Vector3;
        enableDamping: boolean;
        dampingFactor: number;
        autoRotate: boolean;
        rotateSpeed: number;
        zoomSpeed: number;
        panSpeed: number;
        update(): void;
        dispose(): void;
    }
}

declare module 'three/examples/jsm/postprocessing/EffectComposer' {
    export class EffectComposer {
        constructor(renderer: WebGLRenderer);
        addPass(pass: any): void;
        render(deltaTime?: number): void;
        setSize(width: number, height: number): void;
        dispose(): void;
    }
}

declare module 'three/examples/jsm/postprocessing/RenderPass' {
    export class RenderPass {
        constructor(scene: Scene, camera: Camera);
        enabled: boolean;
    }
}

declare module 'three/examples/jsm/postprocessing/UnrealBloomPass' {
    export class UnrealBloomPass {
        constructor(resolution: Vector3, strength: number, radius: number, threshold: number);
        enabled: boolean;
        strength: number;
        radius: number;
        threshold: number;
        dispose(): void;
    }
}

// Extend existing Three.js types
declare module 'three' {
    export interface Object3D {
        geometry?: any;
        material?: Material | Material[];
    }

    export interface XRHand extends Group {
        joints: Map<string, Object3D>;
    }
}

----
types/metadata.ts
export interface NodeMetadata {
    id: string;
    name: string;
    commitAge: number;        // Age in days
    hyperlinkCount: number;   // Number of hyperlinks
    importance: number;       // Normalized importance (0-1)
    position: {
        x: number;
        y: number;
        z: number;
    };
    properties?: Record<string, any>;
}

export interface HologramSettings {
    enabled: boolean;
    desktopQuality: 'low' | 'medium' | 'high';
    xrQuality: 'low' | 'medium';
    ringCount: number;
    ringSizes: number[];
    ringOpacity: number;
    ringColor: string;
    ringRotationSpeed: number;
    enableBuckminster: boolean;
    buckminsterScale: number;
    buckminsterOpacity: number;
    enableGeodesic: boolean;
    geodesicScale: number;
    geodesicOpacity: number;
    enableTriangleSphere: boolean;
    triangleSphereScale: number;
    triangleSphereOpacity: number;
    globalRotationSpeed: number;
    wireframeThickness: number;
}

export interface LabelSettings {
    textRenderingMode: 'sdf' | 'bitmap';
    textResolution: number;
    textPadding: number;
    textOutlineWidth: number;
    textOutlineColor: string;
    billboardMode: 'camera' | 'vertical';
    desktopFontSize: number;
    enableLabels: boolean;
    textColor: string;
}

// Alias for backward compatibility and clarity
export type Metadata = NodeMetadata;

----
types/settings.ts
// Core visualization settings
export interface VisualizationSettings {
    nodes: NodeSettings;
    edges: EdgeSettings;
    hologram: HologramSettings;
    labels: LabelSettings;
    animations: AnimationSettings;
    physics: PhysicsSettings;
    bloom: BloomSettings;
}

// XR-specific settings
export interface XRSettings {
    // Session settings
    mode: 'ar' | 'vr';
    roomScale: boolean;
    spaceType: 'local' | 'bounded' | 'unbounded';
    quality: 'low' | 'medium' | 'high';

    // Input and interaction
    input: 'none' | 'controllers' | 'hands';

    // Visual settings
    visuals: {
        handMeshEnabled: boolean;
        handMeshColor: string;
        handMeshOpacity: number;
        handPointSize: number;
        handRayEnabled: boolean;
        handRayColor: string;
        handRayWidth: number;
        gestureSsmoothing: number;
    };

    // Environment settings
    environment: {
        enableLightEstimation: boolean;
        enablePlaneDetection: boolean;
        enableSceneUnderstanding: boolean;
        planeColor: string;
        planeOpacity: number;
        showPlaneOverlay: boolean;
        snapToFloor: boolean;
    };

    // Passthrough settings
    passthrough: boolean;

    // Haptics settings
    haptics: boolean;
}

// System settings
export interface SystemSettings {
    network: NetworkSettings;
    websocket: WebSocketSettings;
    security: SecuritySettings;
    debug: DebugSettings;
}

// Component settings interfaces
export interface AnimationSettings {
    enableNodeAnimations: boolean;
    enableMotionBlur: boolean;
    motionBlurStrength: number;
    selectionWaveEnabled: boolean;
    pulseEnabled: boolean;
    pulseSpeed: number;
    pulseStrength: number;
    waveSpeed: number;
}

export interface BloomSettings {
    enabled: boolean;
    strength: number;
    radius: number;
    edgeBloomStrength: number;
    nodeBloomStrength: number;
    environmentBloomStrength: number;
}

export interface EdgeSettings {
    color: string;
    defaultWidth: number;
    minWidth: number;
    maxWidth: number;
    widthProperty?: string;
    colorProperty?: string;
    arrowSize: number;
    baseWidth: number;
    enableArrows: boolean;
    opacity: number;
    widthRange: [number, number];
}

export interface HologramSettings {
    color: string;
    opacity: number;
    glowIntensity: number;
    rotationSpeed: number;
    enabled: boolean;
    ringCount: number;
    ringColor: string;
    ringOpacity: number;
    ringSizes: [number, number, number];
    ringRotationSpeed: number;
    enableBuckminster: boolean;
    buckminsterScale: number;
    buckminsterOpacity: number;
    enableGeodesic: boolean;
    geodesicScale: number;
    geodesicOpacity: number;
    enableTriangleSphere: boolean;
    triangleSphereScale: number;
    triangleSphereOpacity: number;
    globalRotationSpeed: number;
}

export interface LabelSettings {
    enabled: boolean;
    size: number;
    color: string;
    enableLabels: boolean;
    desktopFontSize: number;
    textColor: string;
}

export interface NodeSettings {
    color: string;
    defaultSize: number;
    minSize: number;
    maxSize: number;
    sizeProperty?: string;
    colorProperty?: string;
    baseColor: string;
    baseSize: number;
    sizeRange: [number, number];
    enableMetadataShape: boolean;
    colorRangeAge: [string, string];
    colorRangeLinks: [string, string];
    metalness: number;
    roughness: number;
    opacity: number;
    enableMetadataVisualization: boolean;
    enableHologram: boolean;
    enableInstancing: boolean;
    quality: 'low' | 'medium' | 'high';
    material: {
        type: 'basic' | 'phong';
        transparent: boolean;
        opacity: number;
    };
}

export interface NodeMeshUserData {
    id: string;
    type?: string;
    properties?: Record<string, unknown>;
    rotationSpeed?: number;
    data?: any;
}

export interface PhysicsSettings {
    enabled: boolean;
    attractionStrength: number;
    repulsionStrength: number;
    springStrength: number;
    damping: number;
    iterations: number;
    maxVelocity: number;
    collisionRadius: number;
    enableBounds: boolean;
    boundsSize: number;
}

export interface RenderingSettings {
    ambientLightIntensity: number;
    directionalLightIntensity: number;
    environmentIntensity: number;
    backgroundColor: string;
    enableAmbientOcclusion: boolean;
    enableAntialiasing: boolean;
    enableShadows: boolean;
    showGrid: boolean;
}

export interface NetworkSettings {
    bindAddress: string;
    domain: string;
    port: number;
    enableHttp2: boolean;
    enableTls: boolean;
    minTlsVersion: string;
    maxRequestSize: number;
    enableRateLimiting: boolean;
    rateLimitRequests: number;
    rateLimitWindow: number;
    tunnelId: string;
}

export interface WebSocketSettings {
    url: string;
    reconnectAttempts: number;
    reconnectDelay: number;
    binaryChunkSize: number;
    compressionEnabled: boolean;
    compressionThreshold: number;
    maxConnections: number;
    maxMessageSize: number;
    updateRate: number;
}

export interface SecuritySettings {
    allowedOrigins: string[];
    auditLogPath: string;
    cookieHttponly: boolean;
    cookieSamesite: string;
    cookieSecure: boolean;
    csrfTokenTimeout: number;
    enableAuditLogging: boolean;
    enableRequestValidation: boolean;
    sessionTimeout: number;
}

export interface DebugSettings {
    enabled: boolean;
    enableDataDebug: boolean;
    enableWebsocketDebug: boolean;
    logBinaryHeaders: boolean;
    logFullJson: boolean;
    logLevel: 'error' | 'warn' | 'info' | 'debug' | 'trace';
}

// Main settings interface
export interface Settings {
    visualization: VisualizationSettings;
    xr: XRSettings;
    system: SystemSettings;
    render: RenderingSettings;
    controls: {
        autoRotate: boolean;
        rotateSpeed: number;
        zoomSpeed: number;
        panSpeed: number;
    };
}

export * from './settings/base';
export * from './settings/utils';

----
types/websocket.ts
// WebSocket types for graph synchronization

export enum ConnectionState {
    DISCONNECTED = 'DISCONNECTED',
    CONNECTING = 'CONNECTING',
    CONNECTED = 'CONNECTED',
    RECONNECTING = 'RECONNECTING'
}

export enum MessageType {
    PING = 'ping',                          // Connection health check
    PONG = 'pong'                           // Connection health response
}

// Connection health messages
export interface PingMessage {
    type: MessageType.PING;
    timestamp: number;
}

export interface PongMessage {
    type: MessageType.PONG;
    timestamp: number;
}

export type WebSocketMessage = PingMessage | PongMessage;

// WebSocket settings loaded via REST API
export interface WebSocketSettings {
    url: string;                  // WebSocket URL
    reconnectAttempts: number;     // Max reconnection attempts (default: 3)
    reconnectDelay: number;        // Delay between reconnects in ms (default: 5000)
    updateRate: number;            // Update rate in Hz
}

----
types/settings/utils.ts
import { Settings } from '../settings';
import { defaultSettings } from '../../state/defaultSettings';

// Type for top-level settings categories
export type SettingsCategory = keyof Settings;

// Type for all possible paths in settings
export type SettingsPath = string;

// Type guard to check if a string is a valid settings category
export function isSettingsCategory(key: string): key is SettingsCategory {
    return key in defaultSettings;
}

// Type guard to check if a path exists in settings
export function isValidSettingPath(path: string): boolean {
    if (!path) {
        return false;
    }

    try {
        const parts = path.split('.');
        if (parts.length === 0) {
            return false;
        }

        let current: any = defaultSettings;
        for (const part of parts) {
            if (!part || typeof part !== 'string' || !(part in current)) {
                return false;
            }
            current = current[part];
        }
        
        return true;
    } catch (_error: unknown) {
        return false;
    }
}

// Get value from settings using path
export function getSettingValue(settings: Settings, path: string): any {
    if (!settings || typeof settings !== 'object') {
        throw new Error('Invalid settings object');
    }
    if (!path) {
        throw new Error('Path cannot be empty');
    }
    
    try {
        return path.split('.').reduce((obj: any, key) => {
            if (obj === null || obj === undefined) {
                throw new Error(`Invalid path: ${path}`);
            }
            return obj[key];
        }, settings);
    } catch (_error: unknown) {
        const message = 'Unknown error';
        throw new Error(`Failed to get setting value at path ${path}: ${message}`);
    }
}

// Set value in settings using path
export function setSettingValue(settings: Settings, path: string, value: any): void {
    if (!settings || typeof settings !== 'object') {
        throw new Error('Invalid settings object');
    }
    if (!path) {
        throw new Error('Path cannot be empty');
    }
    
    try {
        const parts = path.split('.');
        const lastKey = parts.pop();
        if (!lastKey) {
            throw new Error('Invalid path format');
        }
        
        const target = parts.reduce((obj: any, key) => {
            if (!(key in obj)) {
                obj[key] = {};
            }
            return obj[key];
        }, settings);

        if (!target || typeof target !== 'object') {
            throw new Error(`Invalid path: ${path}`);
        }

        target[lastKey] = value;
    } catch (_error: unknown) {
        const message = 'Unknown error';
        throw new Error(`Failed to set setting value at path ${path}: ${message}`);
    }
}

// Get the parent category of a setting path
export function getSettingCategory(path: string): SettingsCategory | undefined {
    if (!path) {
        return undefined;
    }
    const category = path.split('.')[0];
    return isSettingsCategory(category) ? category : undefined;
}

// Get subcategory path (everything after the main category)
export function getSettingSubPath(path: string): string | undefined {
    if (!path) {
        return undefined;
    }
    const parts = path.split('.');
    return parts.length > 1 ? parts.slice(1).join('.') : undefined;
}

// Helper to check if a value is a nested settings object
export function isSettingsObject(value: any): boolean {
    return value !== null && typeof value === 'object' && !Array.isArray(value);
}

// Helper to get all paths in a settings object
export function getAllSettingPaths(
    obj: any,
    parentPath: string = '',
    paths: string[] = []
): string[] {
    if (!isSettingsObject(obj)) {
        return paths;
    }

    for (const key in obj) {
        const currentPath = parentPath ? `${parentPath}.${key}` : key;
        if (isSettingsObject(obj[key])) {
            getAllSettingPaths(obj[key], currentPath, paths);
        } else {
            paths.push(currentPath);
        }
    }
    return paths;
}

// Type helper for settings values
export type SettingValue = string | number | boolean | string[] | number[];

// Helper to get the appropriate input type for a setting
export function getSettingInputType(value: SettingValue): string {
    if (value === null || value === undefined) {
        return 'text';
    }
    if (typeof value === 'boolean') return 'checkbox';
    if (typeof value === 'number') return 'number';
    if (typeof value === 'string' && value.startsWith('#')) return 'color';
    if (Array.isArray(value)) return 'select';
    return 'text';
}

// Helper to format setting names for display
export function formatSettingName(setting: string): string {
    if (!setting) return '';
    return setting
        .split(/(?=[A-Z])|_/)
        .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
        .join(' ');
}

// Helper to get step value for number inputs
export function getStepValue(key: string): string {
    if (!key) return '1';
    return key.toLowerCase().match(/strength|opacity|intensity|threshold|scale/)
        ? '0.1'
        : '1';
}

----
types/settings/xr.ts
import { XRSessionMode } from '../xr';

export interface XRSettings {
    // Session Settings
    mode: XRSessionMode;
    roomScale: boolean;
    spaceType: XRReferenceSpaceType;
    
    // Hand Tracking
    enableHandTracking: boolean;
    handMeshEnabled: boolean;
    handMeshColor: string;
    handMeshOpacity: number;
    handPointSize: number;
    handRayEnabled: boolean;
    handRayColor: string;
    handRayWidth: number;
    gestureSsmoothing: number;
    
    // Interaction
    enableHaptics: boolean;
    hapticIntensity: number;
    dragThreshold: number;
    pinchThreshold: number;
    rotationThreshold: number;
    interactionRadius: number;
    
    // Scene Understanding
    enableLightEstimation: boolean;
    enablePlaneDetection: boolean;
    enableSceneUnderstanding: boolean;
    planeColor: string;
    planeOpacity: number;
    showPlaneOverlay: boolean;
    snapToFloor: boolean;
    
    // Passthrough
    enablePassthroughPortal: boolean;
    passthroughOpacity: number;
    passthroughBrightness: number;
    passthroughContrast: number;
    portalSize: number;
    portalEdgeColor: string;
    portalEdgeWidth: number;
    
    // Quality Settings
    quality: 'low' | 'medium' | 'high';
}

// Platform-specific XR settings
export interface QuestXRSettings extends XRSettings {
    enableHandMeshes: boolean;
    enableControllerModel: boolean;
    controllerProfile: string;
}

export interface WebXRSettings extends XRSettings {
    fallbackToInline: boolean;
    requireFeatures: string[];
    optionalFeatures: string[];
}

// Default XR settings
export const defaultXRSettings: XRSettings = {
    mode: 'immersive-ar',
    roomScale: true,
    spaceType: 'local-floor',
    
    enableHandTracking: true,
    handMeshEnabled: true,
    handMeshColor: '#ffffff',
    handMeshOpacity: 0.5,
    handPointSize: 5,
    handRayEnabled: true,
    handRayColor: '#00ff00',
    handRayWidth: 2,
    gestureSsmoothing: 0.5,
    
    enableHaptics: true,
    hapticIntensity: 0.5,
    dragThreshold: 0.02,
    pinchThreshold: 0.7,
    rotationThreshold: 0.1,
    interactionRadius: 0.5,
    
    enableLightEstimation: true,
    enablePlaneDetection: true,
    enableSceneUnderstanding: true,
    planeColor: '#808080',
    planeOpacity: 0.5,
    showPlaneOverlay: true,
    snapToFloor: true,
    
    enablePassthroughPortal: false,
    passthroughOpacity: 1,
    passthroughBrightness: 1,
    passthroughContrast: 1,
    portalSize: 2,
    portalEdgeColor: '#ffffff',
    portalEdgeWidth: 2,
    
    quality: 'medium'
};

----
types/settings/base.ts
// Base types for settings
export interface BaseSettings {
    visualization: {
        animations: {
            enableMotionBlur: boolean;
            enableNodeAnimations: boolean;
            motionBlurStrength: number;
            selectionWaveEnabled: boolean;
            pulseEnabled: boolean;
            rippleEnabled: boolean;
            edgeAnimationEnabled: boolean;
            flowParticlesEnabled: boolean;
        };
        bloom: {
            enabled: boolean;
            strength: number;
            radius: number;
            edgeBloomStrength: number;
            nodeBloomStrength: number;
            environmentBloomStrength: number;
        };
        edges: {
            arrowSize: number;
            baseWidth: number;
            color: string;
            enableArrows: boolean;
            opacity: number;
            widthRange: [number, number];
        };
        hologram: {
            ringCount: number;
            ringColor: string;
            ringOpacity: number;
            ringSizes: [number, number, number];
            ringRotationSpeed: number;
            enableBuckminster: boolean;
            buckminsterScale: number;
            buckminsterOpacity: number;
            enableGeodesic: boolean;
            geodesicScale: number;
            geodesicOpacity: number;
            enableTriangleSphere: boolean;
            triangleSphereScale: number;
            triangleSphereOpacity: number;
            globalRotationSpeed: number;
        };
        labels: {
            enableLabels: boolean;
            textColor: string;
            fontSize: number;
            fontFamily: string;
            strokeWidth: number;
            strokeColor: string;
            backgroundColor: string;
            backgroundOpacity: number;
            maxLength: number;
            minDistance: number;
            maxDistance: number;
        };
        nodes: {
            baseSize: number;
            sizeRange: [number, number];
            color: string;
            opacity: number;
            outlineWidth: number;
            outlineColor: string;
            enableGlow: boolean;
            glowStrength: number;
            glowColor: string;
            enablePulse: boolean;
            pulseSpeed: number;
            pulseStrength: number;
        };
        physics: {
            enabled: boolean;
            gravity: number;
            springLength: number;
            springStrength: number;
            damping: number;
            repulsion: number;
            timeStep: number;
            maxVelocity: number;
            minVelocity: number;
            maxIterations: number;
        };
    };
    xr: {
        mode: 'immersive-ar' | 'immersive-vr';
        roomScale: boolean;
        quality: 'low' | 'medium' | 'high';
        input: {
            handTracking: boolean;
            controllerModel: string;
            hapticFeedback: boolean;
            gestureThreshold: number;
            pinchThreshold: number;
            grabThreshold: number;
        };
        visuals: {
            shadowQuality: 'none' | 'low' | 'medium' | 'high';
            antiAliasing: boolean;
            foveatedRendering: boolean;
            foveationLevel: number;
            resolution: number;
        };
        environment: {
            skybox: boolean;
            skyboxColor: string;
            groundPlane: boolean;
            groundColor: string;
            fog: boolean;
            fogColor: string;
            fogDensity: number;
        };
        passthrough: {
            enabled: boolean;
            opacity: number;
            brightness: number;
            contrast: number;
            saturation: number;
            blendMode: 'alpha-blend' | 'additive' | 'multiply';
        };
    };
    system: {
        debug: {
            enabled: boolean;
            logLevel: 'error' | 'warn' | 'info' | 'debug' | 'trace';
            showStats: boolean;
            showFPS: boolean;
            showMemory: boolean;
            logFullJson: boolean;
        };
        network: {
            websocketUrl: string;
            reconnectInterval: number;
            maxReconnectAttempts: number;
            heartbeatInterval: number;
            compressionEnabled: boolean;
            batchUpdates: boolean;
            batchInterval: number;
        };
        security: {
            enableEncryption: boolean;
            encryptionAlgorithm: string;
            encryptionKeySize: number;
            enableAuthentication: boolean;
            authenticationMethod: string;
            tokenExpiration: number;
        };
    };
}

----
components/settings/FPSControl.tsx
import React from 'react';
import { Select, FormControl, InputLabel, MenuItem } from '@mui/material';
import { useSettings } from '../../state/settings';

const FPS_OPTIONS = [1, 30, 60, 90];

export const FPSControl: React.FC = () => {
  const { settings, updateSettings } = useSettings();

  const handleChange = async (event: any) => {
    const newRate = event.target.value;
    try {
      await updateSettings('websocket', {
        updateRate: newRate
      });
    } catch (error) {
      console.error('Failed to update FPS:', error);
    }
  };

  return (
    <FormControl fullWidth>
      <InputLabel id="fps-select-label">Frame Rate</InputLabel>
      <Select
        labelId="fps-select-label"
        id="fps-select"
        value={settings.websocket.updateRate}
        label="Frame Rate"
        onChange={handleChange}
      >
        {FPS_OPTIONS.map((fps) => (
          <MenuItem key={fps} value={fps}>
            {fps} FPS
          </MenuItem>
        ))}
      </Select>
    </FormControl>
  );
};

----
visualization/MetadataVisualizer.ts
import * as THREE from 'three';
import { createLogger } from '../core/utils';

const logger = createLogger('MetadataVisualizer');

export interface MetadataOptions {
    position?: THREE.Vector3;
    rotation?: THREE.Euler;
    scale?: THREE.Vector3;
    text?: string;
    fontSize?: number;
    color?: number;
    backgroundColor?: number;
    opacity?: number;
}

export interface MetadataProperties {
    title?: string;
    description?: string;
    tags?: string[];
    properties?: Record<string, string | number | boolean>;
}

export class MetadataVisualizer {
    private scene: THREE.Scene;
    private metadataObjects: Map<string, THREE.Group>;
    private canvas: HTMLCanvasElement;
    private context: CanvasRenderingContext2D;

    constructor(scene: THREE.Scene) {
        this.scene = scene;
        this.metadataObjects = new Map();

        this.canvas = document.createElement('canvas');
        const ctx = this.canvas.getContext('2d');
        if (!ctx) {
            throw new Error('Failed to get 2D context');
        }
        this.context = ctx;
    }

    createMetadata(id: string, properties: MetadataProperties, options: MetadataOptions = {}): THREE.Group {
        const group = new THREE.Group();

        // Create text texture
        const text = this.formatMetadata(properties);
        const texture = this.createTextTexture(text, options);

        // Create plane with text
        const geometry = new THREE.PlaneGeometry(1, 1);
        const material = new THREE.MeshBasicMaterial({
            map: texture,
            transparent: true,
            opacity: options.opacity ?? 1.0,
            side: THREE.DoubleSide
        });
        const mesh = new THREE.Mesh(geometry, material);

        if (options.position) {
            group.position.copy(options.position);
        }
        if (options.rotation) {
            group.rotation.copy(options.rotation);
        }
        if (options.scale) {
            group.scale.copy(options.scale);
        }

        group.add(mesh);
        this.metadataObjects.set(id, group);
        this.scene.add(group);

        return group;
    }

    updateMetadata(id: string, properties: Partial<MetadataProperties>, options: Partial<MetadataOptions> = {}): void {
        const group = this.metadataObjects.get(id);
        if (!group) {
            logger.warn(`Metadata object ${id} not found`);
            return;
        }

        const mesh = group.children[0] as THREE.Mesh<THREE.PlaneGeometry, THREE.MeshBasicMaterial>;
        if (!mesh) return;

        if (properties) {
            const text = this.formatMetadata(properties as MetadataProperties);
            const texture = this.createTextTexture(text, options);
            mesh.material.map = texture;
        }

        if (options.position) {
            group.position.copy(options.position);
        }
        if (options.rotation) {
            group.rotation.copy(options.rotation);
        }
        if (options.scale) {
            group.scale.copy(options.scale);
        }
        if (options.opacity !== undefined) {
            mesh.material.opacity = options.opacity;
        }
    }

    private formatMetadata(properties: MetadataProperties): string {
        const lines: string[] = [];

        if (properties.title) {
            lines.push(`Title: ${properties.title}`);
        }
        if (properties.description) {
            lines.push(`Description: ${properties.description}`);
        }
        if (properties.tags && properties.tags.length > 0) {
            lines.push(`Tags: ${properties.tags.join(', ')}`);
        }
        if (properties.properties) {
            Object.entries(properties.properties).forEach(([key, value]) => {
                lines.push(`${key}: ${value}`);
            });
        }

        return lines.join('\n');
    }

    private createTextTexture(text: string, options: Partial<MetadataOptions> = {}): THREE.CanvasTexture {
        const fontSize = options.fontSize || 24;
        const textColor = options.color ? `#${options.color.toString(16)}` : '#ffffff';
        const bgColor = options.backgroundColor ? `#${options.backgroundColor.toString(16)}` : '#000000';

        this.context.font = `${fontSize}px Arial`;
        const lines = text.split('\n');
        const lineHeight = fontSize * 1.2;
        const padding = fontSize * 0.5;

        // Measure text dimensions
        let maxWidth = 0;
        for (const line of lines) {
            const metrics = this.context.measureText(line);
            maxWidth = Math.max(maxWidth, metrics.width);
        }

        // Set canvas size
        this.canvas.width = maxWidth + padding * 2;
        this.canvas.height = lines.length * lineHeight + padding * 2;

        // Draw background
        this.context.fillStyle = bgColor;
        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);

        // Draw text
        this.context.font = `${fontSize}px Arial`;
        this.context.fillStyle = textColor;
        this.context.textBaseline = 'top';

        lines.forEach((line, i) => {
            this.context.fillText(line, padding, padding + i * lineHeight);
        });

        // Create texture
        const texture = new THREE.CanvasTexture(this.canvas);
        texture.needsUpdate = true;

        return texture;
    }

    removeMetadata(id: string): void {
        const group = this.metadataObjects.get(id);
        if (group) {
            const mesh = group.children[0] as THREE.Mesh<THREE.PlaneGeometry, THREE.MeshBasicMaterial>;
            if (mesh) {
                mesh.material.map?.dispose();
                mesh.material.dispose();
                mesh.geometry.dispose();
            }
            this.scene.remove(group);
            this.metadataObjects.delete(id);
        }
    }

    getMetadata(id: string): THREE.Group | undefined {
        return this.metadataObjects.get(id);
    }

    clear(): void {
        this.metadataObjects.forEach((_group, id) => {
            this.removeMetadata(id);
        });
    }

    dispose(): void {
        this.clear();
        this.canvas.remove();
    }
}

----
visualization/HologramManager.ts
import * as THREE from 'three';
import { HologramShaderMaterial, HologramShaderMaterialParameters } from '../rendering/materials/HologramShaderMaterial';
import { Settings, HologramSettings } from '../types/settings';

export class HologramManager {
    private readonly hologramGroup: THREE.Group;
    private readonly hologramSettings: HologramSettings;
    private readonly quality: string;
    private isXRMode: boolean = false;

    private readonly segments: { [key: string]: { ring: number; sphere: number } } = {
        low: { ring: 32, sphere: 16 },
        medium: { ring: 64, sphere: 32 },
        high: { ring: 128, sphere: 64 }
    };

    constructor(
        private readonly scene: THREE.Scene,
        settings: Settings
    ) {
        this.hologramSettings = settings.visualization.hologram;
        this.quality = settings.visualization.nodes.quality;
        this.hologramGroup = new THREE.Group();
        this.scene.add(this.hologramGroup);
        this.initializeGeometries();
        this.createHolographicStructures();
    }

    private initializeGeometries(): void {
        const quality = this.isXRMode ? 'high' : this.quality;
        const segmentCount = this.segments[quality as keyof typeof this.segments] || this.segments.medium;
        
        // Create base geometries
        const ringGeometry = new THREE.TorusGeometry(1, 0.02, segmentCount.ring, segmentCount.ring * 2);
        const sphereGeometry = new THREE.SphereGeometry(1, segmentCount.sphere, segmentCount.sphere);
        
        // Create hologram material
        const materialParams: HologramShaderMaterialParameters = {
            color: new THREE.Color(this.hologramSettings.color),
            opacity: this.hologramSettings.opacity,
            glowIntensity: this.hologramSettings.glowIntensity
        };
        const material = new HologramShaderMaterial(materialParams);
        
        // Add ring structures
        for (let i = 0; i < 3; i++) {
            const ring = new THREE.Mesh(ringGeometry, material.clone());
            ring.scale.setScalar(1.5 + i * 0.5);
            ring.rotation.x = Math.PI / 3 * i;
            this.hologramGroup.add(ring);
        }
        
        // Add sphere structure
        const sphere = new THREE.Mesh(sphereGeometry, material.clone());
        this.hologramGroup.add(sphere);
    }

    private createHolographicStructures(): void {
        // Clear existing structures
        while (this.hologramGroup.children.length > 0) {
            const child = this.hologramGroup.children[0];
            if (child instanceof THREE.Mesh) {
                child.geometry.dispose();
                if (child.material instanceof THREE.Material) {
                    child.material.dispose();
                }
            }
            this.hologramGroup.remove(child);
        }
        
        this.initializeGeometries();
    }

    public setXRMode(enabled: boolean): void {
        this.isXRMode = enabled;
        this.createHolographicStructures();
    }

    public update(deltaTime: number): void {
        this.hologramGroup.children.forEach(child => {
            if (child instanceof THREE.Mesh && child.material instanceof HologramShaderMaterial) {
                child.rotation.y += deltaTime * 0.1;
                child.material.update(deltaTime);
            }
        });
    }

    public handleHandInteraction(hand: THREE.XRHand): void {
        if (!this.isXRMode) return;

        const indexTip = hand.joints.get('index-finger-tip');
        if (!indexTip) return;

        const position = new THREE.Vector3();
        position.set(
            indexTip.position.x,
            indexTip.position.y,
            indexTip.position.z
        );
        position.applyMatrix4(indexTip.matrixWorld);

        this.hologramGroup.children.forEach(child => {
            if (child instanceof THREE.Mesh && child.material instanceof HologramShaderMaterial) {
                const distance = position.distanceTo(child.position);
                if (distance < 0.1) {
                    child.material.handleInteraction(1.0 - distance * 10); // Convert distance to intensity
                }
            }
        });
    }

    public updateSettings(settings: HologramSettings): void {
        Object.assign(this.hologramSettings, settings);
        this.createHolographicStructures();
    }

    public dispose(): void {
        this.hologramGroup.children.forEach(child => {
            if (child instanceof THREE.Mesh) {
                child.geometry.dispose();
                if (child.material instanceof THREE.Material) {
                    child.material.dispose();
                }
            }
        });
        this.scene.remove(this.hologramGroup);
    }
}

----
visualization/VisualizationController.ts
import * as THREE from 'three';
import { MetadataVisualizer } from './MetadataVisualizer';
import { HologramManager } from '../rendering/HologramManager';
import { NodeMetadata } from '../types/metadata';
import { XRHand } from '../types/xr';
import { Settings } from '../types/settings';
export class VisualizationController {
    private readonly scene: THREE.Scene;
    private readonly camera: THREE.PerspectiveCamera;
    private readonly renderer: THREE.WebGLRenderer;
    private readonly metadataVisualizer: MetadataVisualizer;
    private readonly hologramManager: HologramManager;
    private clock: THREE.Clock;
    private isXRSession: boolean = false;

    constructor(container: HTMLElement, settings: Settings) {
        // Initialize Three.js basics
        this.scene = new THREE.Scene();
        this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        this.renderer = new THREE.WebGLRenderer({
            antialias: true,
            alpha: true,
            logarithmicDepthBuffer: true
        });
        this.renderer.setPixelRatio(window.devicePixelRatio);
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        this.renderer.xr.enabled = true;
        container.appendChild(this.renderer.domElement);

        // Initialize managers
        this.metadataVisualizer = new MetadataVisualizer(this.scene);
        this.hologramManager = new HologramManager(this.scene, this.renderer, settings);
        this.clock = new THREE.Clock();

        // Set up XR session change handling
        this.renderer.xr.addEventListener('sessionstart', () => {
            this.isXRSession = true;
            this.hologramManager.setXRMode(true);
        });

        this.renderer.xr.addEventListener('sessionend', () => {
            this.isXRSession = false;
            this.hologramManager.setXRMode(false);
        });

        // Set up window resize handling
        window.addEventListener('resize', this.onWindowResize.bind(this));
    }

    private onWindowResize(): void {
        this.camera.aspect = window.innerWidth / window.innerHeight;
        this.camera.updateProjectionMatrix();
        this.renderer.setSize(window.innerWidth, window.innerHeight);
    }

    public updateNodes(nodes: NodeMetadata[]): void {
        // Clear existing nodes
        this.scene.children
            .filter(child => child.userData.isNode)
            .forEach(node => this.scene.remove(node));

        // Create new nodes
        nodes.forEach(metadata => {
            const nodeMesh = this.metadataVisualizer.createMetadata(
                metadata.id,
                {
                    title: metadata.name,
                    properties: metadata.properties || {
                        'Age': `${metadata.commitAge} days`,
                        'Links': metadata.hyperlinkCount,
                        'Importance': Math.round(metadata.importance * 100) + '%'
                    }
                },
                {
                    position: new THREE.Vector3(metadata.position.x, metadata.position.y, metadata.position.z),
                    color: 0xffffff,
                    opacity: 0.8
                }
            );
            nodeMesh.userData.isNode = true;
            nodeMesh.position.set(
                metadata.position.x,
                metadata.position.y,
                metadata.position.z
            );
            this.scene.add(nodeMesh);
        });
    }

    public updateHologramSettings(settings: Settings): void {
        this.hologramManager.updateSettings(settings);
    }

    public handleHandInput(hand: XRHand): void {
        if (this.isXRSession) {
            this.hologramManager.handleInteraction(hand.position);
        }
    }

    public animate(): void {
        const render = () => {
            const delta = this.clock.getDelta();
            
            // Update hologram animations
            this.hologramManager.update(delta);

            // Render scene
            this.renderer.render(this.scene, this.camera);
        };

        this.renderer.setAnimationLoop(render);
    }

    public dispose(): void {
        // Clean up event listeners
        window.removeEventListener('resize', this.onWindowResize.bind(this));

        // Dispose managers
        this.metadataVisualizer.dispose();
        this.hologramManager.dispose();

        // Stop animation loop
        this.renderer.setAnimationLoop(null);

        // Dispose Three.js resources
        this.renderer.dispose();
        this.scene.traverse((object) => {
            if (object instanceof THREE.Mesh) {
                object.geometry.dispose();
                if (Array.isArray(object.material)) {
                    object.material.forEach(material => material.dispose());
                } else {
                    object.material.dispose();
                }
            }
        });
    }
}

----
rendering/MetadataVisualizer.ts
import { 
    Matrix4, 
    Mesh, 
    PerspectiveCamera, 
    Scene, 
    Vector3, 
    MeshBasicMaterial,
    Quaternion,
    BufferGeometry
} from 'three';
import { GeometryFactory } from './factories/GeometryFactory';
import { MaterialFactory } from './factories/MaterialFactory';
import { NodeData, VisualizationSettings } from '../core/types';

export class MetadataVisualizer {
    private readonly camera: PerspectiveCamera;
    private readonly scene: Scene;
    private readonly geometryFactory: GeometryFactory;
    private nodes: Map<string, Mesh> = new Map();
    private nodeGeometry: BufferGeometry;
    private readonly materialFactory: MaterialFactory;

    constructor(camera: PerspectiveCamera, scene: Scene) {
        this.camera = camera;
        this.scene = scene;
        this.geometryFactory = GeometryFactory.getInstance();
        this.materialFactory = MaterialFactory.getInstance();
        this.nodeGeometry = this.geometryFactory.getNodeGeometry('medium');
    }

    public addNodeMetadata(node: NodeData): void {
        if (this.nodes.has(node.id)) {
            return;
        }

        const material = this.materialFactory.createNodeMaterial('basic', node.color);
        const mesh = new Mesh(this.nodeGeometry, material);
        
        mesh.position.copy(node.position);
        mesh.scale.setScalar(node.size || 1.0);
        
        // Make the metadata mesh always face the camera
        this.updateMetadataOrientation(mesh);
        
        this.nodes.set(node.id, mesh);
        this.scene.add(mesh);
    }

    public removeNodeMetadata(nodeId: string): void {
        const mesh = this.nodes.get(nodeId);
        if (mesh) {
            this.scene.remove(mesh);
            mesh.geometry.dispose();
            if (Array.isArray(mesh.material)) {
                mesh.material.forEach(m => m.dispose());
            } else {
                mesh.material.dispose();
            }
            this.nodes.delete(nodeId);
        }
    }

    public updateMetadataOrientation(mesh: Mesh): void {
        // Calculate direction from mesh to camera
        const direction = new Vector3()
            .subVectors(this.camera.position, mesh.position)
            .normalize();

        // Calculate up vector (world up)
        const up = new Vector3(0, 1, 0);

        // Calculate right vector
        const right = new Vector3()
            .crossVectors(up, direction)
            .normalize();

        // Recalculate up vector to ensure orthogonality
        up.crossVectors(direction, right).normalize();

        // Create rotation matrix
        const rotationMatrix = new Matrix4().makeBasis(right, up, direction);
        const quaternion = new Quaternion().setFromRotationMatrix(rotationMatrix);

        // Apply rotation
        mesh.quaternion.copy(quaternion);
    }

    public updateSettings(settings: VisualizationSettings): void {
        this.nodes.forEach((mesh) => {
            if (mesh.material instanceof MeshBasicMaterial) {
                mesh.material.opacity = settings.nodes.material?.opacity || 1;
                mesh.material.transparent = settings.nodes.material?.transparent || false;
                mesh.material.needsUpdate = true;
            }
        });
    }

    public dispose(): void {
        this.nodes.forEach(mesh => {
            this.scene.remove(mesh);
            if (Array.isArray(mesh.material)) {
                mesh.material.forEach(m => m.dispose());
            } else {
                mesh.material.dispose();
            }
        });
        this.nodes.clear();
        this.nodeGeometry.dispose();
    }
}

----
rendering/EdgeManager.js
import * as THREE from 'three';
import { Scene } from 'three';
import { Settings } from '../types/settings';
import { Edge } from '../core/types';

export class EdgeManager {
    private edges = new Map<string, THREE.Line>();
    private scene: Scene;
    private settings: Settings;

    constructor(scene: Scene, settings: Settings) {
        this.scene = scene;
        this.settings = settings;
    }

    addEdge(edge: Edge): void {
        const key = `${edge.source}-${edge.target}`;
        if (this.edges.has(key)) {
            return;
        }

        const positions = new Float32Array(6); // 2 points * 3 coordinates
        const geometry = new THREE.BufferGeometry();
        geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));

        const material = new THREE.LineBasicMaterial({
            color: this.settings.visualization.edges.color,
            transparent: true,
            opacity: 0.6
        });

        const line = new THREE.Line(geometry, material);
        this.edges.set(key, line);
        this.scene.add(line);
    }

    removeEdge(edge: Edge): void {
        const key = `${edge.source}-${edge.target}`;
        const line = this.edges.get(key);
        if (line) {
            this.scene.remove(line);
            if (line.geometry) {
                line.geometry.dispose();
            }
            if (line.material) {
                if (Array.isArray(line.material)) {
                    line.material.forEach(m => m.dispose());
                } else {
                    line.material.dispose();
                }
            }
            this.edges.delete(key);
        }
    }

    updateEdgePosition(edge: Edge, sourcePos: THREE.Vector3, targetPos: THREE.Vector3): void {
        const key = `${edge.source}-${edge.target}`;
        const line = this.edges.get(key);
        if (!line || !line.geometry) return;

        const positions = new Float32Array([
            sourcePos.x, sourcePos.y, sourcePos.z,
            targetPos.x, targetPos.y, targetPos.z
        ]);

        (line.geometry.getAttribute('position') as THREE.BufferAttribute).set(positions);
        line.geometry.getAttribute('position').needsUpdate = true;
        line.geometry.computeBoundingSphere();
    }

    handleSettingsUpdate(settings: Settings): void {
        this.settings = settings;
        this.edges.forEach(line => {
            if (line.material) {
                if (Array.isArray(line.material)) {
                    line.material.forEach(m => {
                        if (m instanceof THREE.LineBasicMaterial) {
                            m.color.set(settings.visualization.edges.color);
                        }
                    });
                } else if (line.material instanceof THREE.LineBasicMaterial) {
                    line.material.color.set(settings.visualization.edges.color);
                }
            }
        });
    }

    dispose(): void {
        this.edges.forEach(line => {
            this.scene.remove(line);
            if (line.geometry) {
                line.geometry.dispose();
            }
            if (line.material) {
                if (Array.isArray(line.material)) {
                    line.material.forEach(m => m.dispose());
                } else {
                    line.material.dispose();
                }
            }
        });
        this.edges.clear();
    }
}

----
rendering/textRenderer.ts
import type { Settings, LabelSettings } from '../types/settings';
import { settingsManager } from '../state/settings';
import { createLogger } from '../core/logger';
import * as THREE from 'three';

const logger = createLogger('TextRenderer');

interface LabelState {
    text: string;
    position: THREE.Vector3;
    visible: boolean;
    boundingBox?: THREE.Object3D;
}

export class TextRenderer {
    private labels: Map<string, THREE.Group>;
    private camera: THREE.Camera;
    private labelStates: Map<string, LabelState>;
    private unsubscribers: Array<() => void> = [];
    private projMatrix: THREE.Matrix4;
    private viewMatrix: THREE.Matrix4;
    private currentSettings: Settings;
    private settings: LabelSettings;
    private group: THREE.Group;

    constructor(camera: THREE.Camera) {
        this.camera = camera;
        this.labels = new Map();
        this.labelStates = new Map();
        this.projMatrix = new THREE.Matrix4();
        this.viewMatrix = new THREE.Matrix4();
        this.currentSettings = settingsManager.getCurrentSettings();
        this.settings = this.currentSettings.visualization.labels;
        this.group = new THREE.Group();
        this.setupSettingsSubscriptions();
    }

    private setupSettingsSubscriptions(): void {
        Object.keys(this.currentSettings.visualization.labels).forEach(setting => {
            const path = `visualization.labels.${setting}`;
            const unsubscribe = settingsManager.subscribe(path, (value) => {
                this.handleSettingChange(setting as keyof LabelSettings, value);
            });
            this.unsubscribers.push(unsubscribe);
        });
    }

    private handleSettingChange(setting: keyof LabelSettings, value: any): void {
        try {
            switch (setting) {
                case 'desktopFontSize':
                    this.updateFontSize(value as number);
                    break;
                case 'textColor':
                    this.updateTextColor(value as string);
                    break;
                case 'enableLabels':
                    this.updateLabelVisibility(value as boolean);
                    break;
                default:
                    // Other settings handled elsewhere
                    break;
            }
        } catch (error) {
            logger.error(`Error handling setting change for ${setting}:`, error);
        }
    }

    private updateFontSize(fontSize: number): void {
        if (!this.labels) return;
        
        this.labels.forEach((group) => {
            group.children.forEach((child) => {
                if (child instanceof THREE.Mesh && child.userData.text) {
                    const material = child.material as THREE.MeshBasicMaterial;
                    material.dispose();
                    
                    // Create new text geometry with updated font size
                    const geometry = this.createTextGeometry(child.userData.text, {
                        fontSize,
                        position: child.position.clone()
                    });
                    
                    // Replace old geometry
                    child.geometry.dispose();
                    child.geometry = geometry;
                }
            });
        });
    }

    private createTextGeometry(text: string, { fontSize, position }: { fontSize: number; position: THREE.Vector3 }): THREE.BufferGeometry {
        // Create a simple plane geometry as a placeholder
        // In a real implementation, this would create actual text geometry based on the font and text
        const width = fontSize * text.length * 0.5;
        const height = fontSize;
        
        // Create vertices for a simple plane
        const vertices = new Float32Array([
            -width/2 + position.x, -height/2 + position.y, position.z,  // bottom left
            width/2 + position.x, -height/2 + position.y, position.z,   // bottom right
            width/2 + position.x, height/2 + position.y, position.z,    // top right
            -width/2 + position.x, height/2 + position.y, position.z    // top left
        ]);

        // Create UVs
        const uvs = new Float32Array([
            0, 0,  // bottom left
            1, 0,  // bottom right
            1, 1,  // top right
            0, 1   // top left
        ]);

        // Create indices
        const indices = new Uint16Array([
            0, 1, 2,  // first triangle
            0, 2, 3   // second triangle
        ]);

        // Create normals (facing forward in this case)
        const normals = new Float32Array([
            0, 0, 1,
            0, 0, 1,
            0, 0, 1,
            0, 0, 1
        ]);

        const geometry = new THREE.BufferGeometry();
        geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));
        geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));
        geometry.setAttribute('uv', new THREE.BufferAttribute(uvs, 2));
        geometry.setIndex(new THREE.BufferAttribute(indices, 1));

        return geometry;
    }

    private updateTextColor(newColor: string): void {
        if (!this.labels) return;
        
        this.labels.forEach((group) => {
            group.children.forEach((child) => {
                if (child instanceof THREE.Mesh) {
                    const material = child.material as THREE.MeshBasicMaterial;
                    material.color.set(newColor);
                    material.dispose();
                    material.color.set(newColor);
                }
            });
        });
    }

    private updateLabelVisibility(visible: boolean): void {
        // Update visibility for all labels
        this.labels.forEach((labelGroup) => {
            labelGroup.visible = visible;
        });
    }

    public updateLabel(id: string, text: string, position: THREE.Vector3): void {
        try {
            let labelGroup = this.labels.get(id);
            if (!labelGroup) {
                labelGroup = new THREE.Group();
                this.labels.set(id, labelGroup);
                this.group.add(labelGroup);
            }

            const state: LabelState = {
                text,
                position: position.clone(),
                visible: true
            };
            this.labelStates.set(id, state);

            // Update style and position
            this.updateLabelStyle(labelGroup, state);
        } catch (error) {
            logger.error('Error updating label:', error);
        }
    }

    private updateLabelStyle(labelGroup: THREE.Group, state: LabelState): void {
        try {
            // Update position
            labelGroup.position.copy(state.position);

            // Update text content and style
            // Implementation depends on how you're rendering text
            // (e.g., using HTML elements, sprites, or geometry)

            // Update visibility
            labelGroup.visible = this.settings.enableLabels && state.visible;

            // Update bounding box for culling
            state.boundingBox = labelGroup;
        } catch (error) {
            logger.error('Error updating label style:', error);
        }
    }

    public removeLabel(id: string): void {
        try {
            const labelGroup = this.labels.get(id);
            if (labelGroup) {
                this.group.remove(labelGroup);
                // Clean up THREE.js objects
                this.clearLabels();
                this.labels.delete(id);
                this.labelStates.delete(id);
            }
        } catch (error) {
            logger.error('Error removing label:', error);
        }
    }

    private clearLabels(): void {
        if (!this.labels) return;
        
        this.labels.forEach((group) => {
            while (group.children.length > 0) {
                const child = group.children[0];
                group.remove(child);
                if (child instanceof THREE.Mesh) {
                    child.geometry.dispose();
                    if (child.material instanceof THREE.Material) {
                        child.material.dispose();
                    }
                }
            }
        });
    }

    public update(): void {
        try {
            // Update projection and view matrices
            this.camera.updateMatrixWorld();
            this.projMatrix.copy(this.camera.projectionMatrix);
            this.viewMatrix.copy(this.camera.matrixWorldInverse);

            // Update label positions and visibility
            this.labelStates.forEach((state, id) => {
                const labelGroup = this.labels.get(id);
                if (!labelGroup) return;

                // Update label position and style
                this.updateLabelStyle(labelGroup, state);
            });
        } catch (error) {
            logger.error('Error updating labels:', error);
        }
    }

    public dispose(): void {
        try {
            // Clean up THREE.js objects
            this.clearLabels();
            this.labels.clear();
            this.labelStates.clear();

            // Clean up subscribers
            this.unsubscribers.forEach(unsubscribe => unsubscribe());
            this.unsubscribers = [];

            // Clean up group
            if (this.group.parent) {
                this.group.parent.remove(this.group);
            }
        } catch (error) {
            logger.error('Error disposing TextRenderer:', error);
        }
    }

    public handleSettingsUpdate(settings: LabelSettings): void {
        this.settings = settings;
        this.updateLabelVisibility(settings.enableLabels);
        this.updateFontSize(settings.desktopFontSize);
        this.updateTextColor(settings.textColor);
    }

    public getGroup(): THREE.Group {
        return this.group;
    }
}

----
rendering/HologramManager.ts
import {
    Scene,
    Group,
    Mesh,
    Vector3,
    WebGLRenderer
} from 'three';
import { Settings } from '../types/settings';
import { GeometryFactory } from './factories/GeometryFactory';
import { MaterialFactory } from './factories/MaterialFactory';
import { HologramShaderMaterial } from './materials/HologramShaderMaterial';

export class HologramManager {
    private readonly group = new Group();
    private isXRMode = false;
    private readonly geometryFactory: GeometryFactory;
    private readonly materialFactory: MaterialFactory;

    constructor(
        private readonly scene: Scene,
        _renderer: WebGLRenderer,  // Used by subclasses
        private settings: Settings
    ) {
        this.geometryFactory = GeometryFactory.getInstance();
        this.materialFactory = MaterialFactory.getInstance();
        this.createHolograms();
        this.scene.add(this.group);
    }

    private createHologramMesh(type: string, quality: string = 'medium'): Mesh {
        const geometry = this.geometryFactory.getHologramGeometry(type as 'ring' | 'sphere' | 'icosahedron', quality as 'low' | 'medium' | 'high');
        const material = this.materialFactory.createHologramMaterial();
        return new Mesh(geometry, material);
    }

    private createHolograms() {
        while (this.group.children.length > 0) {
            const child = this.group.children[0];
            this.group.remove(child);
            if (child instanceof Mesh) {
                child.geometry.dispose();
                child.material.dispose();
            }
        }

        const quality = this.isXRMode ? 'high' : this.settings.xr.quality;
        for (let i = 0; i < this.settings.visualization.hologram.ringCount; i++) {
            const ring = this.createHologramMesh('ring', quality);
            const scale = this.settings.visualization.hologram.ringSizes[i] || 20;
            ring.scale.set(scale, scale, scale);
            ring.rotateX(Math.PI / 2 * i);
            ring.rotateY(Math.PI / 4 * i);
            ring.userData.rotationSpeed = this.settings.visualization.hologram.ringRotationSpeed * (i + 1);
            this.group.add(ring);
        }

        if (this.settings.visualization.hologram.enableBuckminster) {
            const mesh = this.createHologramMesh('buckminster', quality);
            const scale = this.settings.visualization.hologram.buckminsterScale;
            mesh.scale.set(scale, scale, scale);
            (mesh.material as HologramShaderMaterial).uniforms.opacity.value = this.settings.visualization.hologram.buckminsterOpacity;
            this.group.add(mesh);
        }

        if (this.settings.visualization.hologram.enableGeodesic) {
            const mesh = this.createHologramMesh('geodesic', quality);
            const scale = this.settings.visualization.hologram.geodesicScale;
            mesh.scale.set(scale, scale, scale);
            (mesh.material as HologramShaderMaterial).uniforms.opacity.value = this.settings.visualization.hologram.geodesicOpacity;
            this.group.add(mesh);
        }

        if (this.settings.visualization.hologram.enableTriangleSphere) {
            const mesh = this.createHologramMesh('triangleSphere', quality);
            const scale = this.settings.visualization.hologram.triangleSphereScale;
            mesh.scale.set(scale, scale, scale);
            (mesh.material as HologramShaderMaterial).uniforms.opacity.value = this.settings.visualization.hologram.triangleSphereOpacity;
            this.group.add(mesh);
        }
    }

    setXRMode(enabled: boolean) {
        this.isXRMode = enabled;
        this.group.traverse(child => {
            if (child instanceof Mesh && child.material instanceof HologramShaderMaterial) {
                child.material.defines = { USE_AR: '' };
                child.material.needsUpdate = true;
            }
        });
        this.createHolograms();
    }

    handleInteraction(position: Vector3) {
        this.group.traverse(child => {
            if (child instanceof Mesh && child.material instanceof HologramShaderMaterial) {
                const distance = position.distanceTo(child.position);
                if (distance < 0.5) {
                    child.material.uniforms.pulseIntensity.value = 0.4;
                    setTimeout(() => {
                        if (child.material instanceof HologramShaderMaterial) {
                            child.material.uniforms.pulseIntensity.value = 0.2;
                        }
                    }, 500);
                }
            }
        });
    }

    update(deltaTime: number) {
        this.group.traverse(child => {
            if (child instanceof Mesh) {
                child.rotateY((child.userData.rotationSpeed || this.settings.visualization.hologram.globalRotationSpeed) * deltaTime);
                if (child.material instanceof HologramShaderMaterial) {
                    child.material.uniforms.time.value += deltaTime;
                }
            }
        });
    }

    updateSettings(newSettings: Settings) {
        this.settings = newSettings;
        this.materialFactory.updateMaterial('hologram', this.settings);
        this.createHolograms();
    }

    getGroup() {
        return this.group;
    }

    dispose() {
        // Geometries and materials are managed by the factories
        this.scene.remove(this.group);
    }
}

----
rendering/EnhancedNodeManager.ts
import {
    Scene,
    InstancedMesh,
    Mesh,
    Object3D,
    BufferGeometry,
    Material,
    PerspectiveCamera
} from 'three';
import { NodeData, NodeMesh, VisualizationSettings } from '../core/types';
import { NodeMeshUserData } from '../types/settings';
import { MetadataVisualizer } from './MetadataVisualizer';
import { GeometryFactory } from './factories/GeometryFactory';
import { MaterialFactory } from './factories/MaterialFactory';
import { HologramShaderMaterial } from './materials/HologramShaderMaterial';

export class EnhancedNodeManager {
    private scene: Scene;
    private settings: VisualizationSettings;
    private nodes: Map<string, NodeMesh> = new Map();
    private nodeGeometry: BufferGeometry;
    private nodeMaterial: Material;
    private instancedMesh: InstancedMesh | null = null;
    private dummy = new Object3D();
    private geometryFactory: GeometryFactory;
    private materialFactory: MaterialFactory;
    private isInstanced: boolean = false;
    private isHologram: boolean = false;
    private hologramMaterial: HologramShaderMaterial | null = null;
    private metadataVisualizer: MetadataVisualizer;
    private camera: PerspectiveCamera;

    constructor(scene: Scene, settings: VisualizationSettings, camera: PerspectiveCamera) {
        this.scene = scene;
        this.settings = settings;
        this.camera = camera;

        this.geometryFactory = GeometryFactory.getInstance();
        this.materialFactory = MaterialFactory.getInstance();
        this.nodeGeometry = this.geometryFactory.getNodeGeometry('medium');
        
        const materialType = this.settings.nodes.material.type;
        this.nodeMaterial = this.materialFactory.createNodeMaterial(materialType);

        if (this.settings.hologram) {
            this.hologramMaterial = this.materialFactory.createHologramMaterial();
            this.isHologram = true;
        }

        // Initialize MetadataVisualizer
        this.metadataVisualizer = new MetadataVisualizer(this.camera, this.scene);
        
        if (this.isInstanced) {
            this.setupInstancedMesh();
        }
    }

    private setupInstancedMesh() {
        if (this.isInstanced && this.nodeGeometry && this.nodeMaterial) {
            this.instancedMesh = new InstancedMesh(
                this.nodeGeometry,
                this.nodeMaterial,
                1000
            );
            this.instancedMesh.count = 0;
            this.scene.add(this.instancedMesh);
        }
    }

    public updateNodePositions(nodes: NodeData[]): void {
        if (this.isInstanced && this.instancedMesh) {
            nodes.forEach((node, i) => {
                this.dummy.position.copy(node.position);
                this.dummy.scale.setScalar(node.size || this.settings.nodes.defaultSize);
                this.dummy.updateMatrix();
                this.instancedMesh?.setMatrixAt(i, this.dummy.matrix);
            });

            if (this.instancedMesh) {
                this.instancedMesh.instanceMatrix.needsUpdate = true;
            }
        } else {
            nodes.forEach(node => {
                const nodeMesh = this.nodes.get(node.id);
                if (nodeMesh) {
                    nodeMesh.position.copy(node.position);
                    nodeMesh.scale.setScalar(node.size || this.settings.nodes.defaultSize);
                }
            });
        }
    }

    public addNode(node: NodeData): void {
        if (this.nodes.has(node.id)) {
            return;
        }

        const materialType = this.settings.nodes.material.type;
        const material = this.materialFactory.createNodeMaterial(materialType, node.color);
        
        const mesh = new Mesh(this.nodeGeometry, material) as NodeMesh;
        mesh.position.copy(node.position);
        mesh.scale.setScalar(node.size || this.settings.nodes.defaultSize);
        
        mesh.userData = {
            id: node.id,
            type: 'node',
            properties: node.properties,
            data: node
        } as NodeMeshUserData;

        this.nodes.set(node.id, mesh);
        this.scene.add(mesh);

        // Add metadata if enabled
        if (this.settings.nodes.material.transparent) {
            this.metadataVisualizer.addNodeMetadata(node);
        }
    }

    public removeNode(nodeId: string): void {
        const node = this.nodes.get(nodeId);
        if (node) {
            if (node.material instanceof Array) {
                node.material.forEach(m => m.dispose());
            } else {
                node.material.dispose();
            }
            this.scene.remove(node);
            this.nodes.delete(nodeId);
        }
    }

    public updateNodeMaterial(nodeId: string, material: Material): void {
        const node = this.nodes.get(nodeId);
        if (node) {
            if (node.material instanceof Array) {
                node.material.forEach(m => m.dispose());
            } else {
                node.material.dispose();
            }
            node.material = material;
        }
    }

    public updateSettings(settings: VisualizationSettings): void {
        this.settings = settings;
        this.materialFactory.updateMaterial('node', settings);
        
        if (this.isHologram && this.hologramMaterial) {
            this.materialFactory.updateMaterial('hologram', settings);
        }
    }

    public dispose(): void {
        this.nodes.forEach(node => {
            if (node.material instanceof Array) {
                node.material.forEach(m => m.dispose());
            } else {
                node.material.dispose();
            }
            this.scene.remove(node);
        });
        this.nodes.clear();

        if (this.instancedMesh) {
            this.instancedMesh.dispose();
            this.scene.remove(this.instancedMesh);
            this.instancedMesh = null;
        }

        this.nodeGeometry.dispose();
        this.metadataVisualizer.dispose();
    }
}

----
rendering/scene.ts
import {
    Scene as ThreeScene,
    PerspectiveCamera,
    WebGLRenderer,
    AmbientLight,
    DirectionalLight,
    GridHelper,
    Color,
    Object3D,
    Vector3,
    Camera
} from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';
import { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';
import { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';
import { Settings } from '../types/settings';

export class SceneManager {
    private scene: ThreeScene;
    private camera: PerspectiveCamera;
    private renderer: WebGLRenderer;
    private composer: EffectComposer;
    private controls: OrbitControls;
    private renderCallbacks: Array<() => void> = [];
    private isDisposed = false;
    private grid: GridHelper | null = null;
    constructor(container: HTMLElement, settings: Settings) {
        this.scene = new ThreeScene();
        this.camera = new PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        this.renderer = new WebGLRenderer({ antialias: true });
        this.renderer.setPixelRatio(window.devicePixelRatio);
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        container.appendChild(this.renderer.domElement);

        this.composer = new EffectComposer(this.renderer);
        const renderPass = new RenderPass(this.scene, this.camera);
        this.composer.addPass(renderPass);

        const bloomPass = new UnrealBloomPass(
            new Vector3(window.innerWidth, window.innerHeight),
            1.5,
            0.4,
            0.85
        );
        this.composer.addPass(bloomPass);

        this.controls = new OrbitControls(this.camera, this.renderer.domElement);
        this.controls.enableDamping = true;
        this.controls.dampingFactor = 0.05;

        this.setupScene(settings);
        this.setupEventListeners();
        this.animate();
    }

    private setupScene(settings: Settings): void {
        // Set up camera
        this.camera.position.z = 5;
        this.camera.position.y = 2;
        this.camera.position.x = 2;
        this.camera.lookAt(0, 0, 0);

        // Add lights
        const ambientLight = new AmbientLight(0x404040);
        this.scene.add(ambientLight);

        const directionalLight = new DirectionalLight(0xffffff, 0.5);
        directionalLight.position.set(1, 1, 1);
        this.scene.add(directionalLight);

        // Add grid if enabled
        if (settings.render.showGrid) {
            this.grid = new GridHelper(10, 10);
            this.scene.add(this.grid);
        }

        // Set background color
        const backgroundColor = new Color(settings.render.backgroundColor);
        this.scene.background = backgroundColor;
        this.renderer.setClearColor(backgroundColor);
    }

    private setupEventListeners(): void {
        window.addEventListener('resize', this.onWindowResize.bind(this));
    }

    private removeEventListeners(): void {
        window.removeEventListener('resize', this.onWindowResize.bind(this));
    }

    private onWindowResize(): void {
        const width = window.innerWidth;
        const height = window.innerHeight;

        this.camera.aspect = width / height;
        this.camera.updateProjectionMatrix();

        this.renderer.setSize(width, height);
        this.composer.setSize(width, height);
    }

    public addRenderCallback(callback: () => void): void {
        this.renderCallbacks.push(callback);
    }

    public removeRenderCallback(callback: () => void): void {
        const index = this.renderCallbacks.indexOf(callback);
        if (index !== -1) {
            this.renderCallbacks.splice(index, 1);
        }
    }

    public addObject(object: Object3D): void {
        this.scene.add(object);
    }

    public removeObject(object: Object3D): void {
        this.scene.remove(object);
    }

    private animate = (): void => {
        if (this.isDisposed) return;

        requestAnimationFrame(this.animate);

        this.controls.update();

        // Execute render callbacks
        for (const callback of this.renderCallbacks) {
            callback();
        }

        this.composer.render();
    };

    public dispose(): void {
        this.isDisposed = true;
        this.removeEventListeners();

        // Dispose of Three.js objects
        this.scene.traverse((object: Object3D) => {
            if (object instanceof Object3D) {
                if (object.geometry) {
                    object.geometry.dispose();
                }
                if (object.material) {
                    if (Array.isArray(object.material)) {
                        object.material.forEach(material => material.dispose());
                    } else {
                        object.material.dispose();
                    }
                }
            }
        });

        this.renderer.dispose();
        this.composer.dispose();
    }

    public updateSettings(settings: Settings): void {
        // Update background color
        const backgroundColor = new Color(settings.render.backgroundColor);
        this.scene.background = backgroundColor;
        this.renderer.setClearColor(backgroundColor);

        // Update grid visibility
        if (settings.render.showGrid) {
            if (!this.grid) {
                this.grid = new GridHelper(10, 10);
                this.scene.add(this.grid);
            }
        } else if (this.grid) {
            this.scene.remove(this.grid);
            this.grid = null;
        }

        // Update controls
        this.controls.autoRotate = settings.controls.autoRotate;
        this.controls.rotateSpeed = settings.controls.rotateSpeed;
        this.controls.zoomSpeed = settings.controls.zoomSpeed;
        this.controls.panSpeed = settings.controls.panSpeed;
    }

    public getCamera(): Camera {
        return this.camera;
    }

    public getScene(): ThreeScene {
        return this.scene;
    }

    public getRenderer(): WebGLRenderer {
        return this.renderer;
    }
}

----
rendering/nodes.ts
import * as THREE from 'three';
import { Node } from '../core/types';
import { createLogger } from '../core/logger';
import { settingsManager } from '../state/settings';
import { Settings } from '../types/settings';
import { GeometryFactory } from './factories/GeometryFactory';
import { MaterialFactory } from './factories/MaterialFactory';
import { SettingsObserver } from '../state/SettingsObserver';

const logger = createLogger('NodeManager');

const FLOATS_PER_NODE = 6;  // x, y, z, vx, vy, vz

// Reusable vectors and matrices
const matrix = new THREE.Matrix4();
const quaternion = new THREE.Quaternion();
const position = new THREE.Vector3();
const scale = new THREE.Vector3(1, 1, 1);

interface NodeProperties {
    [key: string]: string | number | boolean;
}

interface NodeUserData {
    id: string;
    type: string;
    properties?: NodeProperties;
}

interface _NodeMesh extends THREE.Mesh {
    userData: NodeUserData;
}

export class NodeRenderer {
    public readonly material: THREE.MeshBasicMaterial;
    protected currentSettings: Settings;
    public mesh: THREE.Mesh;
    private readonly materialFactory: MaterialFactory;
    private readonly geometryFactory: GeometryFactory;
    private readonly settingsObserver: SettingsObserver;

    constructor() {
        this.currentSettings = settingsManager.getCurrentSettings();
        this.materialFactory = MaterialFactory.getInstance();
        this.geometryFactory = GeometryFactory.getInstance();
        this.settingsObserver = SettingsObserver.getInstance();

        this.material = this.materialFactory.createNodeMaterial('phong') as THREE.MeshBasicMaterial;
        this.mesh = new THREE.Mesh(
            this.geometryFactory.getNodeGeometry(this.currentSettings.xr.quality),
            this.material
        );

        this.setupSettingsSubscriptions();
    }

    public handleSettingChange(setting: keyof Settings['visualization']['nodes'], value: any): void {
        try {
            switch (setting) {
                case 'baseColor':
                case 'opacity':
                    this.materialFactory.updateMaterial('node-phong', this.currentSettings);
                    break;
                case 'baseSize':
                    this.mesh.scale.set(value, value, value);
                    break;
                default:
                    // Other settings handled elsewhere
                    break;
            }
        } catch (error) {
            logger.error(`Error applying node setting change for ${String(setting)}:`, error);
        }
    }

    public handlePhysicsSettingChange(setting: keyof Settings['visualization']['physics'], value: any): void {
        // Dummy implementation for now
        logger.debug(`Physics setting change: ${String(setting)} = ${value}`);
    }

    private setupSettingsSubscriptions(): void {
        this.settingsObserver.subscribe('NodeRenderer', (settings) => {
            this.currentSettings = settings;
            Object.keys(settings.visualization.nodes).forEach(setting => {
                this.handleSettingChange(
                    setting as keyof Settings['visualization']['nodes'],
                    settings.visualization.nodes[setting as keyof Settings['visualization']['nodes']]
                );
            });
            Object.keys(settings.visualization.physics).forEach(setting => {
                this.handlePhysicsSettingChange(
                    setting as keyof Settings['visualization']['physics'],
                    settings.visualization.physics[setting as keyof Settings['visualization']['physics']]
                );
            });
        });
    }
}

export class NodeManager {
    private static instance: NodeManager;
    private currentSettings: Settings;
    private nodeInstances: THREE.InstancedMesh;
    private edgeInstances: THREE.InstancedMesh;
    private nodeRenderer: NodeRenderer;
    private currentNodes: Node[] = [];
    private nodeIndices: Map<string, number> = new Map();
    private readonly materialFactory: MaterialFactory;
    private readonly geometryFactory: GeometryFactory;
    private readonly settingsObserver: SettingsObserver;

    private constructor() {
        this.currentSettings = settingsManager.getCurrentSettings();
        this.materialFactory = MaterialFactory.getInstance();
        this.geometryFactory = GeometryFactory.getInstance();
        this.settingsObserver = SettingsObserver.getInstance();
        this.nodeRenderer = new NodeRenderer();

        this.nodeInstances = new THREE.InstancedMesh(
            this.geometryFactory.getNodeGeometry(this.currentSettings.xr.quality),
            this.nodeRenderer.material,
            10000
        );

        this.edgeInstances = new THREE.InstancedMesh(
            this.geometryFactory.getHologramGeometry('ring', this.currentSettings.xr.quality),
            this.materialFactory.getMetadataMaterial(new THREE.Color(0xffffff)),
            30000
        );

        this.setupSettingsSubscriptions();
    }

    private setupSettingsSubscriptions(): void {
        this.settingsObserver.subscribe('NodeManager', (settings) => {
            this.currentSettings = settings;
            this.materialFactory.updateMaterial('metadata', settings);
        });
    }

    public static getInstance(): NodeManager {
        if (!NodeManager.instance) {
            NodeManager.instance = new NodeManager();
        }
        return NodeManager.instance;
    }

    public updatePositions(positions: Float32Array): void {
        if (!this.nodeInstances) return;

        const count = Math.min(positions.length / FLOATS_PER_NODE, this.nodeInstances.count);
        
        for (let i = 0; i < count; i++) {
            const baseIndex = i * FLOATS_PER_NODE;
            
            // Get position values
            const x = positions[baseIndex];
            const y = positions[baseIndex + 1];
            const z = positions[baseIndex + 2];
            
            // Skip invalid positions
            if (!Number.isFinite(x) || !Number.isFinite(y) || !Number.isFinite(z) ||
                Math.abs(x) > 1000 || Math.abs(y) > 1000 || Math.abs(z) > 1000) {
                logger.warn(`Skipping invalid position for node ${i}: (${x}, ${y}, ${z})`);
                continue;
            }
            
            // Update position
            position.set(x, y, z);
            
            // Set initial scale based on settings
            const baseSize = this.currentSettings.visualization.nodes.baseSize || 1;
            scale.set(baseSize, baseSize, baseSize);
            
            // Update instance matrix
            matrix.compose(position, quaternion, scale);
            this.nodeInstances.setMatrixAt(i, matrix);
        }
        
        this.nodeInstances.instanceMatrix.needsUpdate = true;
        
        // Force a render update
        if (this.currentSettings.visualization.animations.enableNodeAnimations) {
            requestAnimationFrame(() => {
                this.nodeInstances.instanceMatrix.needsUpdate = true;
            });
        }
    }

    public getAllNodeMeshes(): THREE.InstancedMesh[] {
        return [this.nodeInstances];
    }

    public getNodePosition(nodeId: string): THREE.Vector3 {
        const node = this.currentNodes.find(n => n.id === nodeId);
        if (!node) {
            throw new Error(`Node ${nodeId} not found`);
        }
        if (!node.data?.position) {
            throw new Error(`Node ${nodeId} has no position data`);
        }
        return new THREE.Vector3(
            node.data.position.x,
            node.data.position.y,
            node.data.position.z
        );
    }

    public updateNodePosition(nodeId: string, newPosition: THREE.Vector3): void {
        const index = this.nodeIndices.get(nodeId);
        if (index === undefined) {
            throw new Error(`Node ${nodeId} not found`);
        }

        const node = this.currentNodes[index];
        if (node && node.data) {
            node.data.position = {
                x: newPosition.x,
                y: newPosition.y,
                z: newPosition.z
            };

            matrix.compose(newPosition, quaternion, scale);
            this.nodeInstances.setMatrixAt(index, matrix);
            this.nodeInstances.instanceMatrix.needsUpdate = true;
        }
    }

    public getCurrentNodes(): Node[] {
        return [...this.currentNodes];
    }

    public updateNodes(nodes: Node[]): void {
        this.currentNodes = nodes;
        const positions = new Float32Array(nodes.length * FLOATS_PER_NODE);
        
        nodes.forEach((node, index) => {
            const baseIndex = index * FLOATS_PER_NODE;
            if (node.data?.position) {
                positions[baseIndex] = node.data.position.x;
                positions[baseIndex + 1] = node.data.position.y;
                positions[baseIndex + 2] = node.data.position.z;
            } else {
                positions[baseIndex] = 0;
                positions[baseIndex + 1] = 0;
                positions[baseIndex + 2] = 0;
                logger.warn(`Node ${node.id} has no position data`);
            }
            // Velocity components (if needed)
            positions[baseIndex + 3] = 0;
            positions[baseIndex + 4] = 0;
            positions[baseIndex + 5] = 0;
            
            this.nodeIndices.set(node.id, index);
        });
        
        this.updatePositions(positions);
    }

    public getNodesByProperty(propertyName: keyof NodeProperties, propertyValue: NodeProperties[keyof NodeProperties]): _NodeMesh[] {
        return this.nodeInstances.count > 0 ? this.nodeInstances.children.filter(node => node.userData.properties?.[propertyName] === propertyValue) as _NodeMesh[] : [];
    }

    public getNodesByType(type: _NodeMesh['userData']['type']): _NodeMesh[] {
        return this.nodeInstances.count > 0 ? this.nodeInstances.children.filter(node => node.userData.type === type) as _NodeMesh[] : [];
    }

    public dispose(): void {
        if (this.nodeInstances) {
            this.nodeInstances.geometry.dispose();
            (this.nodeInstances.material as THREE.Material).dispose();
        }
        if (this.edgeInstances) {
            this.edgeInstances.geometry.dispose();
            (this.edgeInstances.material as THREE.Material).dispose();
        }
    }
}

----
rendering/EdgeManager.ts
import * as THREE from 'three';
import { Scene } from 'three';
import { Settings } from '../types/settings';
import { Edge } from '../core/types';

export class EdgeManager {
    private edges = new Map<string, THREE.Line>();
    private scene: Scene;
    private settings: Settings;

    constructor(scene: Scene, settings: Settings) {
        this.scene = scene;
        this.settings = settings;
    }

    addEdge(edge: Edge): void {
        const key = `${edge.source}-${edge.target}`;
        if (this.edges.has(key)) {
            return;
        }

        const positions = new Float32Array(6); // 2 points * 3 coordinates
        const geometry = new THREE.BufferGeometry();
        geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));

        const material = new THREE.LineBasicMaterial({
            color: this.settings.visualization.edges.color,
            transparent: true,
            opacity: 0.6
        });

        const line = new THREE.Line(geometry, material);
        this.edges.set(key, line);
        this.scene.add(line);
    }

    removeEdge(edge: Edge): void {
        const key = `${edge.source}-${edge.target}`;
        const line = this.edges.get(key);
        if (line) {
            this.scene.remove(line);
            if (line.geometry) {
                line.geometry.dispose();
            }
            if (line.material) {
                if (Array.isArray(line.material)) {
                    line.material.forEach(m => m.dispose());
                } else {
                    line.material.dispose();
                }
            }
            this.edges.delete(key);
        }
    }

    updateEdgePosition(edge: Edge, sourcePos: THREE.Vector3, targetPos: THREE.Vector3): void {
        const key = `${edge.source}-${edge.target}`;
        const line = this.edges.get(key);
        if (!line || !line.geometry) return;

        const positions = new Float32Array([
            sourcePos.x, sourcePos.y, sourcePos.z,
            targetPos.x, targetPos.y, targetPos.z
        ]);

        (line.geometry.getAttribute('position') as THREE.BufferAttribute).set(positions);
        line.geometry.getAttribute('position').needsUpdate = true;
        line.geometry.computeBoundingSphere();
    }

    handleSettingsUpdate(settings: Settings): void {
        this.settings = settings;
        this.edges.forEach(line => {
            if (line.material) {
                if (Array.isArray(line.material)) {
                    line.material.forEach(m => {
                        if (m instanceof THREE.LineBasicMaterial) {
                            m.color.set(settings.visualization.edges.color);
                        }
                    });
                } else if (line.material instanceof THREE.LineBasicMaterial) {
                    line.material.color.set(settings.visualization.edges.color);
                }
            }
        });
    }

    dispose(): void {
        this.edges.forEach(line => {
            this.scene.remove(line);
            if (line.geometry) {
                line.geometry.dispose();
            }
            if (line.material) {
                if (Array.isArray(line.material)) {
                    line.material.forEach(m => m.dispose());
                } else {
                    line.material.dispose();
                }
            }
        });
        this.edges.clear();
    }
}

----
rendering/renderManager.ts
 
----
rendering/materials/HologramShaderMaterial.ts
import * as THREE from 'three';
import { HologramUniforms, HologramShaderMaterial as IHologramShaderMaterial } from '../../core/types';

export interface HologramShaderMaterialParameters {
    color?: THREE.Color;
    opacity?: number;
    glowIntensity?: number;
}

export class HologramShaderMaterial extends THREE.ShaderMaterial implements IHologramShaderMaterial {
    declare uniforms: HologramUniforms;

    constructor(parameters: HologramShaderMaterialParameters = {}) {
        super();
        
        this.uniforms = {
            time: { value: 0 },
            opacity: { value: parameters.opacity ?? 1.0 },
            color: { value: parameters.color ?? new THREE.Color() },
            glowIntensity: { value: parameters.glowIntensity ?? 0.5 }
        };

        this.vertexShader = `
            varying vec2 vUv;
            varying vec3 vPosition;
            void main() {
                vUv = uv;
                vPosition = position;
                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
            }
        `;

        this.fragmentShader = `
            uniform float time;
            uniform float opacity;
            uniform vec3 color;
            uniform float glowIntensity;
            varying vec2 vUv;
            varying vec3 vPosition;

            void main() {
                float glow = sin(time * 2.0) * 0.5 + 0.5;
                vec3 finalColor = color * (1.0 + glow * glowIntensity);
                gl_FragColor = vec4(finalColor, opacity);
            }
        `;

        this.transparent = true;
        this.side = THREE.DoubleSide;
        this.lights = true;
    }

    update(deltaTime: number): void {
        this.uniforms.time.value += deltaTime;
    }

    handleInteraction(intensity: number): void {
        this.uniforms.glowIntensity.value = intensity;
    }
}

----
rendering/factories/MaterialFactory.ts
import * as THREE from 'three';
import { MaterialSettings } from '../../core/types';
import { HologramShaderMaterial } from '../materials/HologramShaderMaterial';

export class MaterialFactory {
    private static instance: MaterialFactory;
    private materialCache: Map<string, THREE.Material>;

    private constructor() {
        this.materialCache = new Map();
    }

    public static getInstance(): MaterialFactory {
        if (!MaterialFactory.instance) {
            MaterialFactory.instance = new MaterialFactory();
        }
        return MaterialFactory.instance;
    }

    public createNodeMaterial(settingsOrType: MaterialSettings | string, color?: THREE.Color): THREE.Material {
        if (typeof settingsOrType === 'string') {
            const type = settingsOrType;
            const key = `node-${type}-${color?.getHexString() || 'default'}`;
            if (this.materialCache.has(key)) {
                return this.materialCache.get(key)!;
            }

            let material: THREE.Material;
            switch (type) {
                case 'basic':
                    material = new THREE.MeshBasicMaterial({ color });
                    break;
                case 'phong':
                    material = new THREE.MeshPhongMaterial({ color });
                    break;
                default:
                    material = new THREE.MeshBasicMaterial({ color });
            }

            this.materialCache.set(key, material);
            return material;
        } else {
            const settings = settingsOrType;
            const cacheKey = this.createCacheKey(settings);
            if (this.materialCache.has(cacheKey)) {
                return this.materialCache.get(cacheKey)!;
            }

            let material: THREE.Material;

            if (settings.type === 'phong') {
                material = new THREE.MeshPhongMaterial();
                if (settings.color) material.color = settings.color;
                if (settings.transparent !== undefined) material.transparent = settings.transparent;
                if (settings.opacity !== undefined) material.opacity = settings.opacity;
                if (settings.side !== undefined) material.side = settings.side;
            } else if (settings.type === 'hologram') {
                material = new HologramShaderMaterial({
                    color: settings.color,
                    opacity: settings.opacity,
                    glowIntensity: settings.glowIntensity
                });
            } else {
                material = new THREE.MeshBasicMaterial();
                if (settings.color) material.color = settings.color;
                if (settings.transparent !== undefined) material.transparent = settings.transparent;
                if (settings.opacity !== undefined) material.opacity = settings.opacity;
                if (settings.side !== undefined) material.side = settings.side;
            }

            this.materialCache.set(cacheKey, material);
            return material;
        }
    }

    public createHologramMaterial(): HologramShaderMaterial {
        return new HologramShaderMaterial();
    }

    public getMetadataMaterial(color: THREE.Color): THREE.Material {
        const key = `metadata-${color.getHexString()}`;
        if (this.materialCache.has(key)) {
            return this.materialCache.get(key)!;
        }

        const material = new THREE.MeshBasicMaterial({ color });
        this.materialCache.set(key, material);
        return material;
    }

    public updateMaterial(type: string, settings: any): void {
        const material = this.materialCache.get(`node-${type}`);
        if (material) {
            if ('color' in material) {
                (material as THREE.MeshBasicMaterial | THREE.MeshPhongMaterial).color.set(settings.color);
            }
            if ('transparent' in material) {
                material.transparent = settings.transparent;
                material.opacity = settings.opacity;
            }
        }
    }

    private createCacheKey(settings: MaterialSettings): string {
        return `${settings.type}_${settings.color?.getHexString()}_${settings.opacity}_${settings.transparent}_${settings.side}`;
    }

    public dispose(): void {
        this.materialCache.forEach(material => material.dispose());
        this.materialCache.clear();
    }
}

----
rendering/factories/GeometryFactory.ts
import {
    BufferGeometry,
    BoxGeometry,
    SphereGeometry,
    TorusGeometry,
    IcosahedronGeometry
} from 'three';

export class GeometryFactory {
    private static instance: GeometryFactory;
    private geometries: Map<string, BufferGeometry> = new Map();

    private constructor() {}

    public static getInstance(): GeometryFactory {
        if (!GeometryFactory.instance) {
            GeometryFactory.instance = new GeometryFactory();
        }
        return GeometryFactory.instance;
    }

    public getNodeGeometry(quality: 'low' | 'medium' | 'high'): BufferGeometry {
        const key = `node-${quality}`;
        if (this.geometries.has(key)) {
            return this.geometries.get(key)!;
        }

        let geometry: BufferGeometry;
        switch (quality) {
            case 'low':
                geometry = new BoxGeometry(1, 1, 1);
                break;
            case 'medium':
                geometry = new SphereGeometry(0.5, 16, 16);
                break;
            case 'high':
                geometry = new IcosahedronGeometry(0.5, 2);
                break;
            default:
                geometry = new BoxGeometry(1, 1, 1);
        }

        this.geometries.set(key, geometry);
        return geometry;
    }

    public getHologramGeometry(type: 'ring' | 'sphere' | 'icosahedron', quality: 'low' | 'medium' | 'high'): BufferGeometry {
        const key = `hologram-${type}-${quality}`;
        if (this.geometries.has(key)) {
            return this.geometries.get(key)!;
        }

        let geometry: BufferGeometry;
        switch (type) {
            case 'ring':
                geometry = new TorusGeometry(1, 0.02, 16, 100);
                break;
            case 'sphere':
                geometry = new SphereGeometry(1, quality === 'low' ? 16 : quality === 'medium' ? 32 : 64);
                break;
            case 'icosahedron':
                geometry = new IcosahedronGeometry(1, quality === 'low' ? 1 : quality === 'medium' ? 2 : 3);
                break;
            default:
                geometry = new TorusGeometry(1, 0.02, 16, 100);
        }

        this.geometries.set(key, geometry);
        return geometry;
    }

    public dispose(): void {
        this.geometries.forEach(geometry => geometry.dispose());
        this.geometries.clear();
    }
}

--END--

=== Docker Configuration ===


--- docker-compose.yml ---

x-name: logseq-xr

services:
  webxr:
    build: .
    image: logseq-xr-image:latest
    container_name: logseq-xr-webxr
    read_only: false
    networks:
      ragflow:
        aliases:
          - logseq-xr-webxr
          - webxr-client
    deploy:
      resources:
        limits:
          cpus: '16.0'
          memory: 64G
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['0']  # Explicitly use GPU 0
              capabilities: [gpu]
    ports:
      - "4000:4000"  # Map container nginx port 4000 to host port 4000
    environment:
      - RUST_LOG=info
      - RUST_BACKTRACE=1
      - BIND_ADDRESS=0.0.0.0
      - PORT=3001  # Explicitly set Rust backend to use port 3001
      - NGINX_PORT=4000  # Set nginx to use port 4000
      - NVIDIA_VISIBLE_DEVICES=${NVIDIA_GPU_UUID:-0}  # Use GPU UUID from launch script
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - NODE_ENV=production
    env_file:
      - .env
    volumes:
      - type: bind
        source: ./data
        target: /app/data
        volume:
          nocopy: true
      - type: bind
        source: ./client
        target: /app/client
        volume:
          nocopy: true
      - type: bind
        source: ./settings.toml
        target: /app/settings.toml
      - type: tmpfs
        target: /tmp
        tmpfs:
          size: 4G
    user: "${DOCKER_UID:-1000}:${DOCKER_GID:-1000}"  # Use host user's UID/GID or default to 1000
    restart: unless-stopped
    stop_grace_period: 30s
    init: true
    logging:
      driver: "json-file"
      options:
        max-size: "1g"
        max-file: "5"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:4000/api/graph/data || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared-tunnel
    networks:
      ragflow:
        aliases:
          - cloudflared
    volumes:
      - ./config.yml:/etc/cloudflared/config.yml:ro
    command: tunnel --loglevel info --config /etc/cloudflared/config.yml run
    restart: unless-stopped
    stop_grace_period: 10s
    init: true
    depends_on: []  # Remove dependency on webxr
    environment:
      - TUNNEL_TOKEN=$TUNNEL_TOKEN
      - TUNNEL_METRICS=0.0.0.0:2000
      - TUNNEL_DNS_UPSTREAM=https://1.1.1.1/dns-query,https://1.0.0.1/dns-query
      - TUNNEL_TRANSPORT_PROTOCOL=http2
      - TUNNEL_ORIGIN_SERVER=http://webxr-client:4000  # Point to nginx port
      - TUNNEL_WEBSOCKET_ENABLE=true
      - TUNNEL_WEBSOCKET_HEARTBEAT_INTERVAL=30s  # Match our heartbeat interval
      - TUNNEL_WEBSOCKET_TIMEOUT=3600s  # Match our max timeout
      - TUNNEL_RETRIES=5
      - TUNNEL_GRACE_PERIOD=30s
    env_file:
      - .env
networks:
  ragflow:
    external: true
    name: docker_ragflow  # RAGFlow's network name from docker network ls

--- Dockerfile ---

# Stage 1: Frontend Build
FROM node:20-slim AS frontend-builder

WORKDIR /app

# Install pnpm
RUN npm install -g pnpm@9.14.2

# Copy package files and configuration
COPY package.json pnpm-lock.yaml ./
COPY tsconfig.json tsconfig.node.json vite.config.ts ./
COPY client ./client

# Create required directories
RUN mkdir -p /app/data/public/dist

# Install dependencies and build
RUN pnpm install && \
    pnpm run build

# Stage 2: Rust Dependencies Cache
FROM nvidia/cuda:12.2.0-devel-ubuntu22.04 AS rust-deps-builder

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    libssl-dev \
    pkg-config \
    libegl1-mesa-dev \
    libasound2-dev \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Install Rust with better error handling
RUN curl --retry 5 --retry-delay 2 --retry-connrefused https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain 1.82.0
ENV PATH="/root/.cargo/bin:${PATH}"

# Configure cargo for better network resilience
RUN mkdir -p ~/.cargo && \
    echo '[net]' >> ~/.cargo/config && \
    echo 'retry = 5' >> ~/.cargo/config && \
    echo 'git-fetch-with-cli = true' >> ~/.cargo/config

WORKDIR /usr/src/app

# Copy Cargo files first for better layer caching
COPY Cargo.toml Cargo.lock ./

# Create dummy src directory and build dependencies
RUN mkdir src && \
    echo "fn main() {}" > src/main.rs && \
    cargo build --release && \
    rm -rf src target/release/deps/logseq_xr*

# Now copy the real source code and build
COPY src ./src

# Compile CUDA kernel to PTX
RUN nvcc -ptx src/utils/compute_forces.cu -o compute_forces.ptx && \
    mv compute_forces.ptx src/utils/compute_forces.ptx

# Build Rust application
RUN cargo build --release --jobs $(nproc) || \
    (sleep 2 && cargo build --release --jobs $(nproc)) || \
    (sleep 5 && cargo build --release --jobs 1)

# Stage 3: Python Dependencies
FROM python:3.10.12-slim AS python-builder

WORKDIR /app

# Create virtual environment and install dependencies
RUN python -m venv /app/venv
ENV PATH="/app/venv/bin:$PATH"

# Install Python packages
RUN pip install --upgrade pip==23.3.1 wheel==0.41.3 && \
    pip install \
    piper-phonemize==1.1.0 \
    piper-tts==1.2.0 \
    onnxruntime-gpu==1.16.3

# Stage 4: Final Runtime Image
FROM nvidia/cuda:12.2.0-devel-ubuntu22.04

ENV DEBIAN_FRONTEND=noninteractive \
    PYTHONUNBUFFERED=1 \
    PATH="/app/venv/bin:${PATH}" \
    NVIDIA_DRIVER_CAPABILITIES=all \
    RUST_LOG=info \
    RUST_BACKTRACE=0 \
    PORT=4000 \
    BIND_ADDRESS=0.0.0.0 \
    NODE_ENV=production \
    DOMAIN=localhost \
    STATIC_FILES_PATH=/app/data/public/dist

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    libssl3 \
    nginx \
    libegl1-mesa \
    libasound2 \
    python3.10-minimal \
    python3.10-venv \
    ca-certificates \
    mesa-utils \
    libgl1-mesa-dri \
    libgl1-mesa-glx \
    netcat-openbsd \
    gettext-base \
    net-tools \
    iproute2 \
    procps \
    lsof \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /usr/share/doc/* \
    && rm -rf /usr/share/man/*

# Create a non-root user for running the application
RUN groupadd -g 1000 webxr && \
    useradd -u 1000 -g webxr -d /app webxr

# Set up nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf.template
RUN envsubst '${DOMAIN}' < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf && \
    rm /etc/nginx/nginx.conf.template && \
    chown -R webxr:webxr /etc/nginx/nginx.conf && \
    chmod 644 /etc/nginx/nginx.conf

# Set up nginx directories and permissions
RUN mkdir -p /var/lib/nginx/client_temp \
             /var/lib/nginx/proxy_temp \
             /var/lib/nginx/fastcgi_temp \
             /var/lib/nginx/uwsgi_temp \
             /var/lib/nginx/scgi_temp \
             /var/log/nginx \
             /var/run/nginx \
             /var/cache/nginx && \
    chown -R webxr:webxr /var/lib/nginx \
                         /var/log/nginx \
                         /var/run/nginx \
                         /var/cache/nginx \
                         /etc/nginx && \
    chmod -R 755 /var/lib/nginx \
                 /var/log/nginx \
                 /var/run/nginx \
                 /var/cache/nginx \
                 /etc/nginx && \
    touch /var/log/nginx/error.log \
          /var/log/nginx/access.log \
          /var/run/nginx/nginx.pid && \
    chmod 666 /var/log/nginx/*.log \
              /var/run/nginx/nginx.pid

# Set up directory structure and permissions
WORKDIR /app

# Create required directories with proper permissions
RUN mkdir -p /app/data/markdown \
             /app/data/runtime \
             /app/src/utils \
             /app/data/piper \
             /app/data/metadata \
             /tmp/runtime && \
    # Create metadata.json with empty object
    echo '{}' > /app/data/markdown/metadata.json && \
    # Set base permissions
    chown -R webxr:webxr /app /tmp/runtime && \
    chmod -R 755 /app /tmp/runtime && \
    # Make data directories and files world-writable to handle different UIDs
    chmod 1777 /app/data/markdown \
              /app/data/piper \
              /app/data/metadata \
              /app/data/runtime && \
    chmod 666 /app/data/markdown/metadata.json

# Copy Python virtual environment
COPY --from=python-builder /app/venv /app/venv
RUN chown -R webxr:webxr /app/venv

# Copy built artifacts
COPY --from=rust-deps-builder /usr/src/app/target/release/webxr /app/
COPY settings.toml /app/
COPY --from=rust-deps-builder /usr/src/app/src/utils/compute_forces.ptx /app/compute_forces.ptx
COPY --from=frontend-builder /app/data/public/dist /app/data/public/dist

# Ensure public directory has correct permissions
RUN chown -R webxr:webxr /app/data/public && \
    chmod -R 755 /app/data/public

# Copy configuration and scripts
COPY src/generate_audio.py /app/src/
COPY scripts/start.sh /app/start.sh

# Set proper permissions for copied files
RUN chown -R webxr:webxr /app && \
    chmod 755 /app/start.sh && \
    chmod 644 /app/settings.toml && \
    chmod -R g+w /app

# Switch to non-root user
USER webxr

# Add security labels
LABEL org.opencontainers.image.source="https://github.com/yourusername/logseq-xr" \
      org.opencontainers.image.description="LogseqXR WebXR Graph Visualization" \
      org.opencontainers.image.licenses="MIT" \
      security.capabilities="cap_net_bind_service" \
      security.privileged="false" \
      security.allow-privilege-escalation="false"

# Expose port
EXPOSE 4000

# Start application
ENTRYPOINT ["/app/start.sh"]

--- nginx.conf ---

pid /var/run/nginx/nginx.pid;
error_log /var/log/nginx/error.log debug;

events {
    worker_connections 1024;
    multi_accept on;
    use epoll;
}

http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    charset utf-8;

    # Override TypeScript MIME type (will override video/mp2t from mime.types)
    types {
        application/typescript ts;
        application/javascript js;
    }

    # Logging
    log_format debug_format '$remote_addr - $remote_user [$time_local] '
                          '"$request" $status $body_bytes_sent '
                          '"$http_referer" "$http_user_agent" '
                          'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"'
                          ' ws_status="$upstream_http_upgrade"';  # Added WebSocket status logging

    access_log /var/log/nginx/access.log debug_format;

    # Optimization
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 120;  # Increased to match cloudflared keepAliveTimeout
    keepalive_requests 100;

    # Gzip settings
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # WebSocket configuration
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    # Upstream backend definition for the Rust server
    upstream backend {
        server webxr:3001 max_fails=3 fail_timeout=30s;  # Using Docker service name
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    # Main server configuration
    server {
        listen 4000 default_server;  # Listen on port 4000 for external connections
        server_name _;  # Accept any server name
        root /app/data/public/dist;  # Set root to static files directory

        # Security headers
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "same-origin" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline' 'unsafe-eval'; connect-src 'self' ws: wss: http: https: www.visionflow.info;" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Health check endpoint
        location /health {
            access_log off;
            add_header Content-Type application/json;
            return 200 '{"status":"healthy","timestamp":$time_iso8601}';
        }

        # Metrics endpoint
        location /metrics {
            access_log off;
            proxy_pass http://backend/metrics;
        }

        # WebSocket endpoints
        location /wss {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            
            # Cloudflare-specific headers
            proxy_set_header CF-Connecting-IP $http_cf_connecting_ip;
            proxy_set_header CF-Ray $http_cf_ray;
            proxy_set_header CF-Visitor $http_cf_visitor;
            proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
            
            # Increase timeouts for long-lived connections
            proxy_read_timeout 3600s;    # Match Cloudflare's websocket timeout
            proxy_send_timeout 3600s;    # Match Cloudflare's websocket timeout
            proxy_connect_timeout 75s;   # Increased for reliability
            
            # WebSocket optimizations
            proxy_buffering off;
            proxy_cache off;
            proxy_request_buffering off;
            
            # Logging
            access_log /var/log/nginx/websocket.log debug_format;
        }

        # Settings endpoints
        location /api/settings {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            
            # Cloudflare headers
            proxy_set_header CF-Connecting-IP $http_cf_connecting_ip;
            proxy_set_header CF-Ray $http_cf_ray;
            proxy_set_header CF-Visitor $http_cf_visitor;
            proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
            
            # Settings specific configuration
            proxy_read_timeout 30s;
            proxy_send_timeout 30s;
            proxy_connect_timeout 10s;
            proxy_buffering on;
            proxy_buffer_size 64k;
            proxy_buffers 4 128k;
            proxy_busy_buffers_size 128k;
            
            # Cache control
            add_header Cache-Control "no-store" always;
            expires -1;
            
            # CORS headers for settings API
            add_header 'Access-Control-Allow-Methods' 'GET, PUT, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type' always;
        }

        # General API endpoints
        location /api {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # API specific settings
            proxy_read_timeout 60s;
            proxy_send_timeout 60s;
            proxy_connect_timeout 60s;
            proxy_buffering on;       # Enable buffering for API responses
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;
        }

        # Graph endpoints
        location /graph {
            proxy_pass http://backend/graph;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 30s;  # Match HEARTBEAT_INTERVAL
            add_header Cache-Control "no-store" always;
        }

        # Static files
        location / {
            try_files $uri $uri/ /index.html =404;
            expires 1h;
            add_header Cache-Control "public, no-transform";
            error_page 404 = @backend;  # Fallback to backend if file not found
        }

        # Static files with proper MIME types
        location /assets/ {
            expires 7d;
            add_header Cache-Control "public, no-transform" always;
            try_files $uri =404;
            access_log off;
        }

        # Fallback location for static files
        location @backend {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        # Error handling
        proxy_intercept_errors on;
        error_page 502 503 504 /50x.html;
        error_page 497 https://$host$request_uri;  # Handle HTTP to HTTPS redirects

        # Custom error pages location (single definition)
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
            add_header Content-Type text/html;
            return 502 "<!DOCTYPE html><html><head><title>Tunnel Error</title></head><body><h1>Tunnel Connection Error</h1><p>Please try again in a few moments.</p></body></html>";
        }
    }
}

--- scripts/launch-docker.sh ---

#!/bin/bash

# Exit on error, but allow specific commands to fail
set -e

# Determine script location and project root
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$( cd "$SCRIPT_DIR/.." && pwd )"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
GRAY='\033[0;90m'
BOLD='\033[1m'
NC='\033[0m'

# Docker compose command with version check
if command -v docker-compose &> /dev/null; then
    DOCKER_COMPOSE="docker-compose"
else
    DOCKER_COMPOSE="docker compose"
fi

# Container names
WEBXR_CONTAINER="logseq-xr-webxr"
CLOUDFLARED_CONTAINER="cloudflared-tunnel"
WEBXR_SERVICE="webxr"
CLOUDFLARED_SERVICE="cloudflared"

# Function to log messages with timestamps and optional color
log() {
    local color="${2:-$NC}"
    echo -e "[$(date "+%Y-%m-%d %H:%M:%S")] ${color}$1${NC}"
}

# Function to log debug messages
debug() {
    if [ "${DEBUG:-0}" = "1" ]; then
        log "$1" "$GRAY"
    fi
}

# Function to log error messages
error() {
    log "ERROR: $1" "$RED"
}

# Function to log warning messages
warn() {
    log "WARNING: $1" "$YELLOW"
}

# Function to log success messages
success() {
    log "SUCCESS: $1" "$GREEN"
}

# Function to log info messages
info() {
    log "INFO: $1" "$BLUE"
}

# Function to check if container exists
container_exists() {
    local container_name="$1"
    docker ps -a -q -f name="^/${container_name}$" > /dev/null 2>&1
}

# Function to check if container is running
container_is_running() {
    local container_name="$1"
    docker ps -q -f name="^/${container_name}$" > /dev/null 2>&1
}

# Function to check and fix directory permissions
check_fix_permissions() {
    local data_dir="$PROJECT_ROOT/data"
    local current_user=$(id -u)
    local current_group=$(id -g)

    info "Checking directory permissions..."

    # Create directories if they don't exist
    for dir in "$data_dir/markdown" "$data_dir/piper" "$data_dir/metadata"; do
        if [ ! -d "$dir" ]; then
            info "Creating directory: $dir"
            mkdir -p "$dir" || {
                error "Failed to create directory: $dir"
                return 1
            }
        fi
    done

    # Check permissions and fix if needed
    for dir in "$data_dir/markdown" "$data_dir/piper" "$data_dir/metadata"; do
        local dir_perms=$(stat -c "%a" "$dir" 2>/dev/null)
        if [ "$dir_perms" != "777" ]; then
            warn "Fixing permissions for $dir"
            sudo chmod 777 "$dir" || {
                error "Failed to set permissions on $dir"
                error "Please run: sudo chmod -R 777 $dir"
                return 1
            }
        fi
    done

    # Initialize metadata.json if it doesn't exist
    local metadata_file="$data_dir/markdown/metadata.json"
    if [ ! -f "$metadata_file" ]; then
        info "Creating metadata.json"
        echo '{}' > "$metadata_file" || {
            error "Failed to create metadata.json"
            return 1
        }
    fi

    # Ensure metadata.json is writable
    chmod 666 "$metadata_file" || {
        error "Failed to set permissions on metadata.json"
        return 1
    }

    success "Directory permissions verified"
    return 0
}

# Function to setup environment
setup_env() {
    # Change to project root
    cd "$PROJECT_ROOT" || {
        error "Failed to change to project root directory"
        exit 1
    }

    # Check environment
    if [ ! -f .env ]; then
        warn ".env file not found in $PROJECT_ROOT"
    else
        debug "Loading .env file..."
        set -a
        source .env || warn "Error sourcing .env file"
        set +a
    fi

    # Check and fix permissions
    if ! check_fix_permissions; then
        error "Failed to verify/fix permissions"
        exit 1
    fi
}

# Function to wait for container to be ready
wait_for_container() {
    local container_name="$1"
    local max_attempts=30
    local attempt=1
    local delay=2
    
    info "Waiting for $container_name to be ready..."
    
    while [ $attempt -le $max_attempts ]; do
        # Check if container exists
        if ! container_exists "$container_name"; then
            error "Container $container_name does not exist"
            return 1
        fi
        
        # Check if container is running
        if ! container_is_running "$container_name"; then
            warn "Container $container_name is not running (attempt $attempt/$max_attempts)"
            sleep $delay
            ((attempt++))
            continue
        fi
        
        # Check health status
        local health
        health=$(docker inspect -f '{{if .State.Health}}{{.State.Health.Status}}{{else}}none{{end}}' "$container_name" 2>/dev/null)
        
        case "$health" in
            "healthy")
                if docker logs "$container_name" 2>&1 | grep -q "Frontend is healthy"; then
                    success "Container $container_name is ready"
                    return 0
                fi
                ;;
            "none")
                if docker logs "$container_name" 2>&1 | grep -q "Frontend is healthy"; then
                    success "Container $container_name is ready"
                    return 0
                fi
                ;;
        esac
        
        info "Attempt $attempt/$max_attempts: Waiting for container to be healthy..."
        sleep $delay
        ((attempt++))
    done
    
    error "Timed out waiting for $container_name to be ready"
    docker logs "$container_name" 2>&1 | tail -n 50
    return 1
}

# Function to start containers
start_containers() {
    info "Starting containers..."
    
    # Ensure we're using the correct UID/GID
    export DOCKER_UID=$(id -u)
    export DOCKER_GID=$(id -g)
    
    $DOCKER_COMPOSE up -d || {
        error "Failed to start containers"
        return 1
    }
    success "Containers started successfully"
}

# Function to stop containers
stop_containers() {
    info "Stopping and removing containers..."
    $DOCKER_COMPOSE down || true
}

# Function to rebuild containers
rebuild_container() {
    info "Rebuilding $WEBXR_CONTAINER..."
    
    # Stop and remove containers
    stop_containers

    # Build and start containers
    info "Starting $WEBXR_CONTAINER..."
    if ! $DOCKER_COMPOSE up -d --build; then
        error "Failed to start containers"
        return 1
    fi

    # Wait for container to be ready
    if ! wait_for_container "$WEBXR_CONTAINER"; then
        error "Container failed to become ready"
        return 1
    fi

    success "Successfully rebuilt and restarted $WEBXR_CONTAINER"
}

# Function to test backend endpoints
test_backend() {
    info "Testing backend endpoints..."

    # Test graph data endpoint
    local response=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:4000/api/graph/data")
    if [ "$response" = "200" ]; then
        success "Backend graph data endpoint successful (HTTP 200)"
    else
        error "Backend graph data endpoint failed (HTTP $response)"
        return 1
    fi

    # Test settings endpoint
    info "Testing /api/settings..."
    response=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:4000/api/settings")
    if [ "$response" = "200" ]; then
        success "Backend /api/settings successful (HTTP 200)"
    else
        error "Backend /api/settings failed (HTTP $response)"
    fi

    # Test Cloudflare tunnel
    test_cloudflare_tunnel
}

# Function to test Cloudflare tunnel
test_cloudflare_tunnel() {
    info "Testing Cloudflare tunnel..."
    
    # Wait for cloudflared container to start
    local max_attempts=30
    local attempt=1
    local delay=2
    
    info "Waiting for Cloudflare tunnel to be ready..."
    while [ $attempt -le $max_attempts ]; do
        info "Attempt $attempt/$max_attempts: Checking tunnel status..."
        
        # Check if container is running
        if ! docker ps -q -f name="^/$CLOUDFLARED_CONTAINER$" > /dev/null 2>&1; then
            warn "Cloudflared tunnel container is not running"
            sleep $delay
            ((attempt++))
            continue
        fi

        # Check if tunnel is registered
        if docker logs $CLOUDFLARED_CONTAINER 2>&1 | grep -q "Registered tunnel connection"; then
            success "Cloudflare tunnel is registered and ready"
            
            # Get tunnel hostname from config
            local tunnel_hostname=$(grep -o 'hostname: .*' config.yml | cut -d' ' -f2)
            if [ -n "$tunnel_hostname" ]; then
                success "Using tunnel hostname: $tunnel_hostname"
                
                # Test tunnel endpoint
                local response=$(curl -s -o /dev/null -w "%{http_code}" "https://$tunnel_hostname" || echo "000")
                if [ "$response" = "200" ]; then
                    success "Tunnel endpoint is accessible"
                    return 0
                else
                    error "Tunnel endpoint returned HTTP $response"
                    return 1
                fi
            else
                error "Could not find tunnel hostname in config.yml"
                return 1
            fi
        fi

        sleep $delay
        ((attempt++))
    done

    error "Could not establish Cloudflare tunnel after $max_attempts attempts"
    docker logs $CLOUDFLARED_CONTAINER | tail -n 50
    return 1
}

# Function to show endpoints
show_endpoints() {
    echo
    info "Services are running!"
    echo "HTTP:      http://localhost:4000"
    echo "WebSocket: wss://localhost:4000/wss"
    echo
    info "Available commands:"
    echo "logs:    $DOCKER_COMPOSE logs -f"
    echo "stop:    $DOCKER_COMPOSE down"
    echo "restart: $DOCKER_COMPOSE restart"
    echo
}

# Function to handle cleanup on exit
cleanup() {
    info "Cleaning up..."
    if [ "${DEBUG:-0}" = "1" ]; then
        $DOCKER_COMPOSE logs
    fi
}

# Set up trap for cleanup
trap cleanup EXIT

# Function to check if the container is healthy
check_container_health() {
    local container_name="$1"
    local max_attempts="$2"
    local attempt=1

    info "Waiting for $container_name to be ready..."
    info "Attempt $attempt/$max_attempts: Waiting for container to be healthy..."

    while [ $attempt -le $max_attempts ]; do
        if [ "$(docker inspect -f '{{.State.Health.Status}}' "$container_name" 2>/dev/null)" = "healthy" ]; then
            success "Container $container_name is ready"
            return 0
        fi
        
        ((attempt++))
        info "Attempt $attempt/$max_attempts: Waiting for container to be healthy..."
        sleep 2
    done

    error "Container $container_name failed to become healthy after $max_attempts attempts"
    return 1
}

# Note: The /api/settings endpoint is expected to return 500 errors
# This is intentional as server-side settings are temporarily disabled
# and all settings are managed client-side for development purposes.
# Do not attempt to fix these errors until server-side settings are re-enabled.

# Main function to handle script execution
main() {
    local command="${1:-start}"
    
    # Setup environment first
    setup_env
    
    case "$command" in
        "start")
            info "Starting containers..."
            start_containers
            if wait_for_container "$WEBXR_CONTAINER"; then
                show_endpoints
                info "Showing logs (Ctrl+C to exit)..."
                $DOCKER_COMPOSE logs -f
            fi
            ;;
        "stop")
            info "Stopping containers..."
            stop_containers
            ;;
        "restart")
            info "Restarting containers..."
            start_containers
            if wait_for_container "$WEBXR_CONTAINER"; then
                show_endpoints
            fi
            ;;
        "rebuild")
            if rebuild_container "$WEBXR_CONTAINER"; then
                show_endpoints
            fi
            ;;
        "test")
            if ! wait_for_container "$WEBXR_CONTAINER"; then
                exit 1
            fi
            test_backend
            ;;
        "rebuild-test")
            if ! rebuild_container "$WEBXR_CONTAINER"; then
                exit 1
            fi
            test_backend
            ;;
        "logs")
            info "Showing logs (Ctrl+C to exit)..."
            $DOCKER_COMPOSE logs -f
            ;;
        *)
            error "Unknown command: $command"
            echo "Usage: $0 [start|stop|restart|rebuild|test|rebuild-test|logs]"
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"

--- config.yml ---

tunnel: 9a59e21c-7e0d-4cac-8502-59bc66436e0f

ingress:
  - hostname: www.visionflow.info
    service: http://webxr-client:4000
    originRequest:
      noTLSVerify: true
      connectTimeout: 30s
      tcpKeepAlive: 30s
      keepAliveTimeout: 2m
      keepAliveConnections: 100
      httpHostHeader: www.visionflow.info
      # WebSocket settings
      enableWebsocket: true
      websocketCompression: true
      websocketKeepAliveTimeout: 60s
      websocketKeepAliveInterval: 30s
  - service: http_status:404

# Connection settings
protocol: quic
no-autoupdate: true

# Logging settings
loglevel: debug

--- scripts/start.sh ---

#!/bin/bash
set -euo pipefail

# Function to log messages with timestamps
log() {
    echo "[$(date "+%Y-%m-%d %H:%M:%S")] $1"
}

# Function to check if a port is available
check_port_available() {
    local port=$1
    local max_retries=10
    local wait=1

    log "Checking if port $port is available..."
    
    for ((i=1; i<=max_retries; i++)); do
        if timeout 1 bash -c "cat < /dev/null > /dev/tcp/0.0.0.0/$port" 2>/dev/null; then
            log "Port $port is available"
            return 0
        fi
        if [ $i -lt $max_retries ]; then
            log "Port $port not ready, attempt $i of $max_retries..."
            sleep $wait
        fi
    done

    log "Error: Port $port is not available after $max_retries attempts"
    return 1
}

# Function to check service health
check_service_health() {
    local port=$1
    local endpoint=${2:-"/"}
    local retries=30
    local wait=2

    log "Checking health for service on port $port..."
    
    while [ $retries -gt 0 ]; do
        if curl -s -f --max-time 5 "http://localhost:$port$endpoint" > /dev/null; then
            log "Service on port $port is healthy"
            return 0
        fi
        
        retries=$((retries-1))
        if [ $retries -eq 0 ]; then
            log "Error: Service health check failed on port $port"
            return 1
        fi
        log "Service not ready, retrying in $wait seconds... ($retries attempts left)"
        sleep $wait
    done

    return 1
}

# Function to check RAGFlow connectivity
check_ragflow() {
    log "Checking RAGFlow connectivity..."
    if curl -s -f --max-time 5 "http://ragflow-server/v1/" > /dev/null; then
        log "RAGFlow server is reachable"
        return 0
    else
        log "Warning: RAGFlow server not available - some features may be limited"
        return 1
    fi
}

# Function to verify production build
verify_build() {
    log "Verifying production build..."
    
    # Check build directory exists and is accessible
    if [ ! -d "/app/data/public/dist" ]; then
        log "Error: Production build directory not found"
        return 1
    fi
    
    # Check index.html exists and is readable
    if [ ! -r "/app/data/public/dist/index.html" ]; then
        log "Error: index.html not found or not readable"
        return 1
    fi
    
    log "Production build verified"
    return 0
}

# Function to verify settings file permissions
verify_settings_permissions() {
    log "Verifying settings.toml permissions..."
    
    # Check if settings.toml exists
    if [ ! -f "/app/settings.toml" ]; then
        log "Error: settings.toml not found"
        return 1
    fi
    
    # Check if file is readable
    if [ ! -r "/app/settings.toml" ]; then
        log "Error: settings.toml is not readable"
        return 1
    fi
    
    # Check if file is writable
    if [ ! -w "/app/settings.toml" ]; then
        log "Error: settings.toml is not writable"
        return 1
    fi
    
    log "settings.toml permissions verified"
    return 0
}

# Set up runtime environment
setup_runtime() {
    log "Setting up runtime environment..."

    # Set up XDG_RUNTIME_DIR
    export XDG_RUNTIME_DIR="/tmp/runtime"
    mkdir -p "$XDG_RUNTIME_DIR"
    chmod 700 "$XDG_RUNTIME_DIR"

    # Verify GPU is available
    if ! command -v nvidia-smi &> /dev/null; then
        log "Warning: nvidia-smi not found. GPU support may be limited."
    else
        # Check GPU is accessible
        if ! nvidia-smi &> /dev/null; then
            log "Warning: Cannot access NVIDIA GPU. Some features may be limited."
        fi
    fi

    log "Runtime environment configured successfully"
    return 0
}

# Function to cleanup processes
cleanup() {
    log "Cleaning up processes..."
    
    # Kill nginx gracefully if running
    if pgrep nginx > /dev/null; then
        log "Stopping nginx..."
        nginx -s quit
        sleep 2
        # Force kill if still running
        pkill -9 nginx || true
    fi
    
    # Kill Rust backend if running
    if [ -n "${RUST_PID:-}" ]; then
        log "Stopping Rust backend..."
        kill -TERM $RUST_PID 2>/dev/null || true
        sleep 2
        # Force kill if still running
        kill -9 $RUST_PID 2>/dev/null || true
    fi
    
    log "Cleanup complete"
}

# Main script execution starts here
main() {
    # Set up trap for cleanup
    trap cleanup EXIT INT TERM

    # Verify settings file permissions
    if ! verify_settings_permissions; then
        log "Failed to verify settings.toml permissions"
        exit 1
    fi

    # Set up runtime environment
    if ! setup_runtime; then
        log "Failed to set up runtime environment"
        exit 1
    fi

    # Check RAGFlow connectivity
    check_ragflow

    # Verify production build
    if ! verify_build; then
        log "Failed to verify production build"
        exit 1
    fi

    # Check if backend port is available
    # Start webxr binary with output logging
    log "Starting webxr..."
    /app/webxr > /tmp/webxr.log 2>&1 &
    RUST_PID=$!

    # Give webxr time to initialize
    sleep 5

    # Check if process is still running
    if ! kill -0 $RUST_PID 2>/dev/null; then
        log "Error: webxr process failed to start"
        cat /tmp/webxr.log
        exit 1
    fi

    # Give the backend time to start
    log "Waiting for backend to initialize..."
    sleep 10
    
    # Check if process is still running
    if ! kill -0 $RUST_PID 2>/dev/null; then
        log "Error: Backend process died during startup"
        cat /tmp/webxr.log
        exit 1
    fi
    log "Backend process is running"

    # Start nginx
    log "Starting nginx..."
    nginx -t || { log "nginx config test failed"; kill $RUST_PID; exit 1; }
    nginx || { log "Failed to start nginx"; kill $RUST_PID; exit 1; }
    log "nginx started successfully"

    # Check frontend health
    if ! check_service_health 4000 "/"; then
        log "Error: Frontend health check failed"
        cat /tmp/webxr.log
        kill $RUST_PID
        nginx -s quit
        exit 1
    fi
    log "Frontend is healthy"

    # Wait for webxr process
    wait $RUST_PID
}

# Execute main function
main


=== Docker Network Configuration ===


--- docker network inspect docker_ragflow ---

[
    {
        "Name": "docker_ragflow",
        "Id": "a7bc515a66f9014dfe7b39dc55eb933f4620c1536e5ff801fa5f92c8c36060b3",
        "Created": "2024-12-06T11:41:33.959442093Z",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": null,
            "Config": [
                {
                    "Subnet": "172.19.0.0/16",
                    "Gateway": "172.19.0.1"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {
            "050e83ac5ba86056c50aed0b600ff55fcd3bc36f967ee24f7e689ca7c0060c21": {
                "Name": "ragflow-minio",
                "EndpointID": "26463d0b47222668be4c44aff9f778c9829c4378f3ebd92a09e704757277abd0",
                "MacAddress": "02:42:ac:13:00:03",
                "IPv4Address": "172.19.0.3/16",
                "IPv6Address": ""
            },
            "13e854731b088029534bb105fde19b582d0fd401f8d4f1bd10e1326c8ad704d7": {
                "Name": "ragflow-es-01",
                "EndpointID": "35962a244d7b8e1cca54f4663b177e54fa10e299943aabba9796efc5dfdaa1b7",
                "MacAddress": "02:42:ac:13:00:05",
                "IPv4Address": "172.19.0.5/16",
                "IPv6Address": ""
            },
            "43c333886de1ef9ed3fd3a8d5ec2f17710a3f2c62aeffcd94e58f6d3d9157f8b": {
                "Name": "ragflow-server",
                "EndpointID": "eb13cbe145fe756d3d86d45af26558bbdf6d5375283f72e41cfaa97ff7307305",
                "MacAddress": "02:42:ac:13:00:06",
                "IPv4Address": "172.19.0.6/16",
                "IPv6Address": ""
            },
            "4b8b481d4b8d3bdf7be932788bb958a5bce06b903efc54daa68a3ef726e862e4": {
                "Name": "ragflow-mysql",
                "EndpointID": "53ef4a3bae59d487b5073e6f81f78466b06397146089360d2edec84408aebcc4",
                "MacAddress": "02:42:ac:13:00:02",
                "IPv4Address": "172.19.0.2/16",
                "IPv6Address": ""
            },
            "58544e030da235b95c482cb12a8354622ac033ce22d95d244cf4d5f597d7b442": {
                "Name": "ragflow-redis",
                "EndpointID": "05980d6ebe36a2b75f3972c5b5e52844504f417b7c033288558c6715731c0a90",
                "MacAddress": "02:42:ac:13:00:04",
                "IPv4Address": "172.19.0.4/16",
                "IPv6Address": ""
            },
            "67b04a6679b9a2faf8cba0432a1be13f5df4884373926c2b3001b58740b86412": {
                "Name": "logseq-xr-webxr",
                "EndpointID": "2134e75841157abd5fbbdd7de7d5add47e69a8c01a00eb3b75cd0f58eeacd513",
                "MacAddress": "02:42:ac:13:00:08",
                "IPv4Address": "172.19.0.8/16",
                "IPv6Address": ""
            },
            "deaaec44f185e9ab502f602bfc9ad41d8e46a55a892b498649b81a9a2daad1b3": {
                "Name": "cloudflared-tunnel",
                "EndpointID": "bf48ba0dd12983036745d9f7fa073a6ad43002db47e3ebcbb8938d3f6fa2f15b",
                "MacAddress": "02:42:ac:13:00:07",
                "IPv4Address": "172.19.0.7/16",
                "IPv6Address": ""
            }
        },
        "Options": {},
        "Labels": {
            "com.docker.compose.network": "ragflow",
            "com.docker.compose.project": "docker",
            "com.docker.compose.version": "2.29.7"
        }
    }
]
