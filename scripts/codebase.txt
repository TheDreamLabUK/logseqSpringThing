The following text represents a project with code. The structure of the text consists of sections beginning with ----, followed by a single line containing the file path and file name, and then a variable number of lines containing the file contents. The text representing the project ends when the symbols --END-- are encountered. Any further text beyond --END-- is meant to be interpreted as instructions using the aforementioned project as context.
----
config.rs
use serde::{Deserialize, Serialize};
use config::{ConfigBuilder, ConfigError, Environment, File};

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct Settings {
    pub default: DefaultSettings,
    pub network: NetworkSettings,
    pub security: SecuritySettings,
    pub rendering: RenderingSettings,
    pub ar: ARSettings,
    pub nodes: NodeSettings,
    pub edges: EdgeSettings,
    pub physics: PhysicsSettings,
    pub bloom: BloomSettings,
    pub labels: LabelSettings,
    pub websocket: WebSocketSettings,
    pub server_debug: DebugSettings,
    pub client_debug: DebugSettings,
    pub github: GitHubSettings,
    pub openai: OpenAISettings,
    pub perplexity: PerplexitySettings,
    pub ragflow: RagFlowSettings,
    pub animations: AnimationSettings,
    pub audio: AudioSettings,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct DefaultSettings {
    pub api_client_timeout: u64,
    pub enable_metrics: bool,
    pub enable_request_logging: bool,
    pub log_format: String,
    pub log_level: String,
    pub max_concurrent_requests: usize,
    pub max_payload_size: usize,
    pub max_retries: u32,
    pub metrics_port: u16,
    pub retry_delay: u64,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct NetworkSettings {
    pub bind_address: String,
    pub domain: String,
    pub enable_http2: bool,
    pub enable_rate_limiting: bool,
    pub enable_tls: bool,
    pub max_request_size: usize,
    pub min_tls_version: String,
    pub port: u16,
    pub rate_limit_requests: u32,
    pub rate_limit_window: u32,
    pub tunnel_id: String,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct SecuritySettings {
    pub allowed_origins: Vec<String>,
    pub audit_log_path: String,
    pub cookie_httponly: bool,
    pub cookie_samesite: String,
    pub cookie_secure: bool,
    pub csrf_token_timeout: u32,
    pub enable_audit_logging: bool,
    pub enable_request_validation: bool,
    pub session_timeout: u32,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct RenderingSettings {
    pub ambient_light_intensity: f32,
    pub background_color: String,
    pub directional_light_intensity: f32,
    pub enable_ambient_occlusion: bool,
    pub enable_antialiasing: bool,
    pub enable_shadows: bool,
    pub environment_intensity: f32,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct ARSettings {
    pub enable_hand_tracking: bool,
    pub enable_haptics: bool,
    pub enable_plane_detection: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct NodeSettings {
    pub base_color: String,
    pub base_size: f32,
    pub size_range: Vec<f32>,
    pub size_by_connections: bool,
    pub enable_instancing: bool,
    pub material_type: String,
    pub opacity: f32,
    pub roughness: f32,
    pub metalness: f32,
    pub clearcoat: f32,
    pub highlight_color: String,
    pub highlight_duration: u32,
    pub enable_hover_effect: bool,
    pub hover_scale: f32,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct EdgeSettings {
    pub base_width: f32,
    pub width_range: Vec<f32>,
    pub color: String,
    pub opacity: f32,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct PhysicsSettings {
    pub attraction_strength: f32,
    pub bounds_size: f32,
    pub collision_radius: f32,
    pub damping: f32,
    pub enable_bounds: bool,
    pub enabled: bool,
    pub iterations: u32,
    pub max_velocity: f32,
    pub repulsion_strength: f32,
    pub spring_strength: f32,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct BloomSettings {
    pub enabled: bool,
    pub node_bloom_strength: f32,
    pub edge_bloom_strength: f32,
    pub environment_bloom_strength: f32,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct LabelSettings {
    pub enable_labels: bool,
    pub text_color: String,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct WebSocketSettings {
    pub binary_chunk_size: usize,
    pub compression_enabled: bool,
    pub compression_threshold: usize,
    pub heartbeat_interval: u64,
    pub heartbeat_timeout: u64,
    pub max_connections: usize,
    pub max_message_size: usize,
    pub reconnect_attempts: u32,
    pub reconnect_delay: u64,
    pub update_rate: u32,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct DebugSettings {
    pub enable_data_debug: bool,
    pub enable_websocket_debug: bool,
    pub enabled: bool,
    pub log_binary_headers: bool,
    pub log_full_json: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct GitHubSettings {
    pub base_path: String,
    pub owner: String,
    pub rate_limit: bool,
    pub repo: String,
    pub token: String,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct OpenAISettings {
    pub api_key: String,
    pub base_url: String,
    pub model: String,
    pub rate_limit: u32,
    pub timeout: u64,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct PerplexitySettings {
    pub api_key: String,
    pub api_url: String,
    pub frequency_penalty: f32,
    pub max_tokens: u32,
    pub model: String,
    pub prompt: String,
    pub rate_limit: u32,
    pub temperature: f32,
    pub timeout: u64,
    pub top_p: f32,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct RagFlowSettings {
    pub api_key: String,
    pub base_url: String,
    pub max_retries: u32,
    pub timeout: u64,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct AnimationSettings {
    #[serde(default)]
    pub enable_node_animations: bool,
    #[serde(default)]
    pub selection_wave_enabled: bool,
    #[serde(default)]
    pub pulse_enabled: bool,
    #[serde(default)]
    pub ripple_enabled: bool,
    #[serde(default)]
    pub edge_animation_enabled: bool,
    #[serde(default)]
    pub flow_particles_enabled: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct AudioSettings {
    #[serde(default)]
    pub enable_spatial_audio: bool,
    #[serde(default)]
    pub enable_interaction_sounds: bool,
    #[serde(default)]
    pub enable_ambient_sounds: bool,
}

impl Settings {
    pub fn new() -> Result<Self, ConfigError> {
        let builder = ConfigBuilder::<config::builder::DefaultState>::default();
        let config = builder
            .add_source(File::with_name("settings.toml"))
            .add_source(
                Environment::default()
                    .separator("_")
                    .try_parsing(true)
            )
            .build()?;

        let mut settings: Settings = config.try_deserialize()?;
        
        if let Ok(token) = std::env::var("GITHUB_TOKEN") {
            settings.github.token = token;
        }
        if let Ok(owner) = std::env::var("GITHUB_OWNER") {
            settings.github.owner = owner;
        }
        if let Ok(repo) = std::env::var("GITHUB_REPO") {
            settings.github.repo = repo;
        }
        if let Ok(path) = std::env::var("GITHUB_PATH") {
            settings.github.base_path = path;
        }

        Ok(settings)
    }

    pub fn from_env() -> Result<Self, ConfigError> {
        let builder = ConfigBuilder::<config::builder::DefaultState>::default();
        let config = builder
            .add_source(
                Environment::default()
                    .separator("_")
                    .try_parsing(true)
            )
            .build()?;

        let mut settings: Settings = config.try_deserialize()?;
        
        if let Ok(token) = std::env::var("GITHUB_TOKEN") {
            settings.github.token = token;
        }
        if let Ok(owner) = std::env::var("GITHUB_OWNER") {
            settings.github.owner = owner;
        }
        if let Ok(repo) = std::env::var("GITHUB_REPO") {
            settings.github.repo = repo;
        }
        if let Ok(path) = std::env::var("GITHUB_PATH") {
            settings.github.base_path = path;
        }

        Ok(settings)
    }
}

----
main.rs
#[macro_use]
extern crate log;

#[macro_use]
extern crate webxr;

use webxr::{
    AppState, Settings, GraphData,
    init_debug_settings,
    file_handler, graph_handler, perplexity_handler, ragflow_handler, visualization_handler,
    RealGitHubService, FileService, PerplexityService, RAGFlowService, RAGFlowError,
    GraphService, RealGitHubPRService, ws_handler, GPUCompute
};

use actix_web::{web, App, HttpServer, middleware, HttpResponse};
use actix_files::Files;
use std::sync::Arc;
use tokio::sync::RwLock;
use std::collections::HashMap;
use std::error::Error;
use cudarc::driver::DriverError;
use tokio::time::{interval, Duration};
use dotenvy::dotenv;

#[derive(Debug)]
pub struct AppError(Box<dyn Error + Send + Sync>);

impl From<Box<dyn Error + Send + Sync>> for AppError {
    fn from(err: Box<dyn Error + Send + Sync>) -> Self {
        AppError(err)
    }
}

impl From<RAGFlowError> for AppError {
    fn from(err: RAGFlowError) -> Self {
        AppError(Box::new(err))
    }
}

impl From<AppError> for std::io::Error {
    fn from(err: AppError) -> Self {
        if let Some(io_err) = err.0.downcast_ref::<std::io::Error>() {
            std::io::Error::new(io_err.kind(), io_err.to_string())
        } else if let Some(driver_err) = err.0.downcast_ref::<DriverError>() {
            std::io::Error::new(std::io::ErrorKind::Other, driver_err.to_string())
        } else {
            std::io::Error::new(std::io::ErrorKind::Other, err.0.to_string())
        }
    }
}

fn to_io_error(e: impl std::fmt::Display) -> Box<dyn Error + Send + Sync> {
    Box::new(std::io::Error::new(std::io::ErrorKind::Other, e.to_string()))
}

async fn initialize_cached_graph_data(app_state: &web::Data<AppState>) -> Result<(), Box<dyn Error + Send + Sync>> {
    let metadata_map = FileService::load_or_create_metadata()
        .map_err(|e| {
            log_error!("Failed to load metadata: {}", e);
            to_io_error(e)
        })?;

    log_data!("Loaded metadata with {} entries", metadata_map.len());
    
    {
        let mut app_metadata = app_state.metadata.write().await;
        *app_metadata = metadata_map.clone();
    }

    log_data!("Building graph from metadata...");
    let graph_data = GraphService::build_graph_from_metadata(&metadata_map).await
        .map_err(|e| {
            log_error!("Failed to build graph from metadata: {}", e);
            to_io_error(e)
        })?;

    {
        let mut graph = app_state.graph_service.graph_data.write().await;
        *graph = graph_data.clone();
        graph.metadata = metadata_map;
        
        log_data!("Graph initialized with {} nodes and {} edges", 
            graph.nodes.len(), 
            graph.edges.len()
        );
    }

    Ok(())
}

async fn update_graph_periodically(app_state: web::Data<AppState>) {
    let mut interval = interval(Duration::from_secs(43200));

    loop {
        interval.tick().await;
        
        let mut metadata_map = match FileService::load_or_create_metadata() {
            Ok(map) => map,
            Err(e) => {
                log_error!("Failed to load metadata: {}", e);
                continue;
            }
        };

        let settings = app_state.settings.clone();
        match FileService::fetch_and_process_files(&*app_state.github_service, settings, &mut metadata_map).await {
            Ok(processed_files) => {
                if !processed_files.is_empty() {
                    log_data!("Found {} updated files, updating graph", processed_files.len());

                    {
                        let mut app_metadata = app_state.metadata.write().await;
                        *app_metadata = metadata_map.clone();
                    }

                    let mut graph = app_state.graph_service.graph_data.write().await;
                    let old_positions: HashMap<String, (f32, f32, f32)> = graph.nodes.iter()
                        .map(|node| (node.id.clone(), (node.x(), node.y(), node.z())))
                        .collect();
                    
                    graph.metadata = metadata_map.clone();

                    if let Ok(mut new_graph) = GraphService::build_graph_from_metadata(&metadata_map).await {
                        for node in &mut new_graph.nodes {
                            if let Some(&(x, y, z)) = old_positions.get(&node.id) {
                                node.set_x(x);
                                node.set_y(y);
                                node.set_z(z);
                            }
                        }
                        *graph = new_graph.clone();
                    }
                }
            },
            Err(e) => log_error!("Failed to check for updates: {}", e)
        }
    }
}

async fn health_check() -> HttpResponse {
    HttpResponse::Ok().finish()
}

#[actix_web::main]
async fn main() -> std::io::Result<()> {
    dotenv().ok();

    // Load settings first to get the log level
    let settings = match Settings::new() {
        Ok(s) => Arc::new(RwLock::new(s)),
        Err(e) => {
            eprintln!("Failed to load settings: {:?}", e);
            return Err(std::io::Error::new(std::io::ErrorKind::Other, format!("Failed to initialize settings: {:?}", e)));
        }
    };

    // Initialize debug settings
    let (debug_enabled, websocket_debug, data_debug) = {
        let settings_read = settings.read().await;
        (
            settings_read.server_debug.enabled,
            settings_read.server_debug.enable_websocket_debug,
            settings_read.server_debug.enable_data_debug,
        )
    };

    // Set default log level
    std::env::set_var("RUST_LOG", "info");
    
    env_logger::init();
    
    // Initialize our debug logging system
    init_debug_settings(debug_enabled, websocket_debug, data_debug);

    log_data!("Initializing services...");
    
    let settings_read = settings.read().await;
    let github_service = {
        Arc::new(RealGitHubService::new(
            settings_read.github.token.clone(),
            settings_read.github.owner.clone(),
            settings_read.github.repo.clone(),
            settings_read.github.base_path.clone(),
            settings.clone(),
        ).map_err(|e| std::io::Error::new(std::io::ErrorKind::Other, e.to_string()))?)
    };

    let github_pr_service = {
        Arc::new(RealGitHubPRService::new(
            settings_read.github.token.clone(),
            settings_read.github.owner.clone(),
            settings_read.github.repo.clone(),
            settings_read.github.base_path.clone(),
        ).map_err(|e| std::io::Error::new(std::io::ErrorKind::Other, e.to_string()))?)
    };

    let perplexity_service = Arc::new(PerplexityService::new(settings.clone())
        .map_err(|e| std::io::Error::new(std::io::ErrorKind::Other, e.to_string()))?);
    
    let ragflow_service = Arc::new(RAGFlowService::new(settings.clone()).await
        .map_err(AppError::from)?);

    log_data!("Creating RAGFlow conversation...");
    let ragflow_conversation_id = ragflow_service.create_conversation("default_user".to_string()).await
        .map_err(AppError::from)?;

    log_data!("Initializing GPU compute...");
    let gpu_compute = match GPUCompute::new(&GraphData::default()).await {
       Ok(gpu) => {
            log_data!("GPU initialization successful");
            Some(gpu)
        },
        Err(e) => {
            log_warn!("Failed to initialize GPU: {}. Falling back to CPU computations.", e);
            None
        }
    };

    let app_state = web::Data::new(AppState::new(
        settings.clone(),
        github_service,
        perplexity_service,
        ragflow_service,
        gpu_compute,
        ragflow_conversation_id,
        github_pr_service,
    ));

    log_data!("Initializing graph with cached data...");
    if let Err(e) = initialize_cached_graph_data(&app_state).await {
        log_error!("Failed to initialize graph from cache: {}", e);
        return Err(std::io::Error::new(std::io::ErrorKind::Other, format!("Failed to initialize graph: {}", e)));
    }

    let update_state = app_state.clone();
    let update_handle = tokio::spawn(async move {
        update_graph_periodically(update_state).await;
    });

    let bind_address = "0.0.0.0:3000";
    log_data!("Starting HTTP server on {}", bind_address);

    let server = HttpServer::new(move || {
        App::new()
            .app_data(app_state.clone())
            .wrap(middleware::Logger::default())
            .route("/health", web::get().to(health_check))
            .service(
                web::resource("/wss")
                    .route(web::get().to(ws_handler))
            )
            .service(
                web::scope("/api/files")
                    .route("/fetch", web::get().to(file_handler::fetch_and_process_files))
            )
            .service(
                web::scope("/api/graph")
                    .route("/data", web::get().to(graph_handler::get_graph_data))
            )
            .service(
                web::scope("/api/chat")
                    .route("/init", web::post().to(ragflow_handler::init_chat))
                    .route("/message", web::post().to(ragflow_handler::send_message))
                    .route("/history", web::get().to(ragflow_handler::get_chat_history))
            )
            .service(
                web::scope("/api/visualization")
                    .configure(visualization_handler::config)  // Use the config function to register both GET and PUT
            )
            .service(
                web::scope("/api/perplexity")
                    .service(perplexity_handler::handle_perplexity)
            )
            .service(
                Files::new("/", "/app/data/public/dist").index_file("index.html")
            )
    })
    .bind(bind_address)?
    .run();

    // Run both servers and handle shutdown
    tokio::select! {
        _ = server => {
            log_data!("HTTP server stopped");
        }
        _ = update_handle => {
            log_data!("Update task stopped");
        }
    }

    Ok(())
}

----
app_state.rs
use std::sync::Arc;
use tokio::sync::RwLock;

use crate::config::Settings;
use crate::models::metadata::MetadataStore;
use crate::services::graph_service::GraphService;
use crate::services::file_service::RealGitHubService;
use crate::services::github_service::RealGitHubPRService;
use crate::services::perplexity_service::PerplexityService;
use crate::services::ragflow_service::RAGFlowService;
use crate::utils::gpu_compute::GPUCompute;

#[derive(Clone)]
pub struct AppState {
    pub graph_service: GraphService,
    pub gpu_compute: Option<Arc<RwLock<GPUCompute>>>,
    pub settings: Arc<RwLock<Settings>>,
    pub metadata: Arc<RwLock<MetadataStore>>,
    pub github_service: Arc<RealGitHubService>,
    pub perplexity_service: Arc<PerplexityService>,
    pub ragflow_service: Arc<RAGFlowService>,
    pub ragflow_conversation_id: String,
    pub github_pr_service: Arc<RealGitHubPRService>,
}

impl AppState {
    pub fn new(
        settings: Arc<RwLock<Settings>>,
        github_service: Arc<RealGitHubService>,
        perplexity_service: Arc<PerplexityService>,
        ragflow_service: Arc<RAGFlowService>,
        gpu_compute: Option<Arc<RwLock<GPUCompute>>>,
        ragflow_conversation_id: String,
        github_pr_service: Arc<RealGitHubPRService>,
    ) -> Self {
        Self {
            graph_service: GraphService::new(),
            gpu_compute,
            settings,
            metadata: Arc::new(RwLock::new(MetadataStore::new())),
            github_service,
            perplexity_service,
            ragflow_service,
            ragflow_conversation_id,
            github_pr_service,
        }
    }
}

----
generate_audio.py
import sys
import io
import wave
import numpy as np
from piper import PiperVoice

def generate_audio_stream(text):
    try:
        voice = PiperVoice.load("/app/piper/en_GB-alan-medium.onnx")
        audio = voice.synthesize(text)
        
        # Convert audio to WAV format
        with io.BytesIO() as wav_io:
            with wave.open(wav_io, 'wb') as wav_file:
                wav_file.setnchannels(1)  # mono
                wav_file.setsampwidth(2)  # 16-bit
                wav_file.setframerate(voice.config.sample_rate)
                wav_file.writeframes(audio.tobytes())
            
            wav_data = wav_io.getvalue()
        
        # Verify WAV header
        if wav_data[:4] != b'RIFF' or wav_data[8:12] != b'WAVE':
            raise ValueError("Invalid WAV header")
        
        # Write WAV data to stdout
        sys.stdout.buffer.write(wav_data)
        sys.stdout.buffer.flush()
    except Exception as e:
        print(f"Error generating audio: {str(e)}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    input_text = sys.stdin.read().strip()
    if input_text:
        generate_audio_stream(input_text)
    else:
        print("No input received", file=sys.stderr)
        sys.exit(1)

----
lib.rs
#![recursion_limit = "256"]

#[macro_use]
extern crate log;

// Re-export macros at crate root
#[macro_use]
pub mod utils;

// Re-export debug settings
pub use utils::debug_logging::init_debug_settings;

// Module declarations
pub mod app_state;
pub mod config;
pub mod handlers;
pub mod models;
pub mod services;

// Public re-exports
pub use app_state::AppState;
pub use config::Settings;
pub use models::position_update::PositionUpdate;
pub use models::metadata::MetadataStore;
pub use models::simulation_params::SimulationParams;
pub use models::graph::GraphData;
pub use services::graph_service::GraphService;
pub use services::file_service::{RealGitHubService, FileService};
pub use services::perplexity_service::PerplexityService;
pub use services::ragflow_service::{RAGFlowService, RAGFlowError};
pub use services::github_service::RealGitHubPRService;
pub use utils::gpu_compute::GPUCompute;
pub use utils::socket_flow_handler::{SocketFlowServer, ws_handler};

// Re-export handlers
pub use handlers::file_handler;
pub use handlers::graph_handler;
pub use handlers::perplexity_handler;
pub use handlers::ragflow_handler;
pub use handlers::visualization_handler;

----
generate_welcome_audio.py
import sys
from piper import PiperVoice

def generate_welcome_audio():
    voice = PiperVoice.load("/app/piper/en_GB-alan-medium.onnx")
    text = "Welcome to the WebXR Graph Visualization. Your virtual environment is now ready."
    audio = voice.synthesize(text)
    sys.stdout.buffer.write(audio)

if __name__ == "__main__":
    generate_welcome_audio()
----
utils/compute_forces.cu
// Node data structure matching Rust's NodeData
struct NodeData {
    float position[3];    // 12 bytes
    float velocity[3];    // 12 bytes
    unsigned char mass;   // 1 byte
    unsigned char flags;  // 1 byte
    unsigned char padding[2]; // 2 bytes padding
};

extern "C" __global__ void compute_forces(
    NodeData* nodes,
    int num_nodes,
    float spring_strength,
    float repulsion,
    float damping
) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx >= num_nodes) return;

    // Load node data
    NodeData node_i = nodes[idx];
    float3 pos_i = make_float3(
        node_i.position[0],
        node_i.position[1],
        node_i.position[2]
    );
    float mass_i = (float)node_i.mass;
    float3 force = make_float3(0.0f, 0.0f, 0.0f);

    __shared__ float3 shared_positions[256];
    __shared__ float shared_masses[256];

    // Process nodes in tiles to maximize shared memory usage
    for (int tile = 0; tile < (num_nodes + blockDim.x - 1) / blockDim.x; tile++) {
        int shared_idx = tile * blockDim.x + threadIdx.x;
        
        // Load tile into shared memory
        if (shared_idx < num_nodes) {
            NodeData shared_node = nodes[shared_idx];
            shared_positions[threadIdx.x] = make_float3(
                shared_node.position[0],
                shared_node.position[1],
                shared_node.position[2]
            );
            shared_masses[threadIdx.x] = (float)shared_node.mass;
        }
        __syncthreads();

        // Compute forces between current node and all nodes in tile
        #pragma unroll 8
        for (int j = 0; j < blockDim.x && tile * blockDim.x + j < num_nodes; j++) {
            if (tile * blockDim.x + j == idx) continue;

            // Skip nodes with inactive flag
            if ((nodes[tile * blockDim.x + j].flags & 0x1) == 0) continue;

            float3 pos_j = shared_positions[j];
            float mass_j = shared_masses[j];
            
            // Calculate displacement vector
            float3 diff = make_float3(
                pos_i.x - pos_j.x,
                pos_i.y - pos_j.y,
                pos_i.z - pos_j.z
            );

            // Calculate force magnitude with minimum distance clamp
            float dist = fmaxf(sqrtf(diff.x * diff.x + diff.y * diff.y + diff.z * diff.z), 0.0001f);
            float force_mag = repulsion * mass_i * mass_j / (dist * dist);

            // Add spring force if nodes are connected (check flags)
            if ((node_i.flags & 0x2) && (nodes[tile * blockDim.x + j].flags & 0x2)) {
                float spring_force = spring_strength * (dist - 1.0f); // Natural length = 1.0
                force_mag += spring_force;
            }

            // Accumulate force
            force.x += force_mag * diff.x / dist;
            force.y += force_mag * diff.y / dist;
            force.z += force_mag * diff.z / dist;
        }
        __syncthreads();
    }

    // Load current velocity
    float3 vel = make_float3(
        node_i.velocity[0],
        node_i.velocity[1],
        node_i.velocity[2]
    );

    // Update velocity with damping
    vel.x = (vel.x + force.x) * damping;
    vel.y = (vel.y + force.y) * damping;
    vel.z = (vel.z + force.z) * damping;

    // Update position
    pos_i.x += vel.x;
    pos_i.y += vel.y;
    pos_i.z += vel.z;

    // Store updated position and velocity
    nodes[idx].position[0] = pos_i.x;
    nodes[idx].position[1] = pos_i.y;
    nodes[idx].position[2] = pos_i.z;
    nodes[idx].velocity[0] = vel.x;
    nodes[idx].velocity[1] = vel.y;
    nodes[idx].velocity[2] = vel.z;

    // Flags and mass remain unchanged
}

----
utils/audio_processor.rs
use serde_json::Value;
use base64::{Engine as _, engine::general_purpose::STANDARD as BASE64};
use std::sync::Arc;
use tokio::sync::RwLock;
use crate::config::Settings;
use crate::{log_error, log_warn, log_data};

pub struct AudioProcessor {
    settings: Arc<RwLock<Settings>>,
}

impl AudioProcessor {
    pub fn new(settings: Arc<RwLock<Settings>>) -> Self {
        Self { settings }
    }

    pub async fn process_json_response(&self, response_data: &[u8]) -> Result<(String, Vec<u8>), String> {
        let _settings = self.settings.read().await;
        
        // Parse the JSON response
        let json_response: Value = serde_json::from_slice(response_data)
            .map_err(|e| format!("Failed to parse JSON response: {}", e))?;
        
        // Log the entire JSON response if data debug is enabled
        log_data!("Received JSON response: {}", 
            serde_json::to_string_pretty(&json_response).unwrap_or_else(|_| "Unable to prettify JSON".to_string())
        );
        
        // Check if the response contains an error message
        if let Some(error_msg) = json_response["error"].as_str() {
            log_error!("Error in JSON response: {}", error_msg);
            return Err(format!("Error in JSON response: {}", error_msg));
        }

        // Extract the text answer with better error handling
        let answer = json_response["data"]["answer"]
            .as_str()
            .or_else(|| json_response["answer"].as_str())
            .ok_or_else(|| {
                log_error!("Text answer not found in JSON response");
                "Text answer not found in JSON response".to_string()
            })?
            .to_string();

        // Try to extract the audio data from different possible locations with detailed logging
        let audio_data = if let Some(audio) = json_response["data"]["audio"].as_str() {
            log_data!("Found audio data in data.audio");
            BASE64.decode(audio).map_err(|e| format!("Failed to decode base64 audio data from data.audio: {}", e))?
        } else if let Some(audio) = json_response["audio"].as_str() {
            log_data!("Found audio data in root.audio");
            BASE64.decode(audio).map_err(|e| format!("Failed to decode base64 audio data from root.audio: {}", e))?
        } else {
            // Log available paths in the JSON for debugging
            log_warn!("Audio data not found in JSON response. Available paths:");
            if let Some(obj) = json_response.as_object() {
                for (key, value) in obj {
                    log_warn!("- {}: {}", key, match value {
                        Value::Null => "null",
                        Value::Bool(_) => "boolean",
                        Value::Number(_) => "number",
                        Value::String(_) => "string",
                        Value::Array(_) => "array",
                        Value::Object(_) => "object",
                    });
                }
            }
            return Err("Audio data not found in JSON response".to_string());
        };
        
        log_data!("Successfully processed audio data: {} bytes", audio_data.len());
        
        // Validate WAV header
        if audio_data.len() >= 44 {
            log_data!("WAV header: {:?}", &audio_data[..44]);
            
            if &audio_data[..4] != b"RIFF" || &audio_data[8..12] != b"WAVE" {
                log_error!("Invalid WAV header detected");
                return Err("Invalid WAV header".to_string());
            }
            
            // Extract and log WAV format information
            let channels = u16::from_le_bytes([audio_data[22], audio_data[23]]);
            let sample_rate = u32::from_le_bytes([audio_data[24], audio_data[25], audio_data[26], audio_data[27]]);
            let bits_per_sample = u16::from_le_bytes([audio_data[34], audio_data[35]]);
            
            log_data!("WAV format: {} channels, {} Hz, {} bits per sample", 
                channels, sample_rate, bits_per_sample);
        } else {
            log_error!("Audio data too short to contain WAV header: {} bytes", audio_data.len());
            return Err("Audio data too short".to_string());
        }
        
        Ok((answer, audio_data))
    }

    pub async fn validate_wav_header(&self, audio_data: &[u8]) -> Result<(), String> {
        if audio_data.len() < 44 {
            return Err("Audio data too short for WAV header".to_string());
        }

        if &audio_data[..4] != b"RIFF" {
            return Err("Missing RIFF header".to_string());
        }

        if &audio_data[8..12] != b"WAVE" {
            return Err("Missing WAVE format".to_string());
        }

        let channels = u16::from_le_bytes([audio_data[22], audio_data[23]]);
        let sample_rate = u32::from_le_bytes([audio_data[24], audio_data[25], audio_data[26], audio_data[27]]);
        let bits_per_sample = u16::from_le_bytes([audio_data[34], audio_data[35]]);

        log_data!("Validated WAV format: {} channels, {} Hz, {} bits per sample",
            channels, sample_rate, bits_per_sample);

        Ok(())
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use serde_json::json;
    use tokio::runtime::Runtime;

    fn create_test_settings() -> Arc<RwLock<Settings>> {
        let settings = Settings {
            debug_mode: false,
            debug: crate::config::DebugSettings {
                enable_websocket_debug: false,
                enable_data_debug: false,
                log_binary_headers: false,
                log_full_json: false,
            },
            // Add other required fields with default values
            ..Default::default()
        };
        Arc::new(RwLock::new(settings))
    }

    #[test]
    fn test_process_json_response_valid() {
        let rt = Runtime::new().unwrap();
        let settings = create_test_settings();
        let processor = AudioProcessor::new(settings);

        let test_wav = vec![
            b'R', b'I', b'F', b'F', // ChunkID
            0x24, 0x00, 0x00, 0x00, // ChunkSize
            b'W', b'A', b'V', b'E', // Format
            b'f', b'm', b't', b' ', // Subchunk1ID
            0x10, 0x00, 0x00, 0x00, // Subchunk1Size
            0x01, 0x00,             // AudioFormat (PCM)
            0x01, 0x00,             // NumChannels (Mono)
            0x44, 0xAC, 0x00, 0x00, // SampleRate (44100)
            0x88, 0x58, 0x01, 0x00, // ByteRate
            0x02, 0x00,             // BlockAlign
            0x10, 0x00,             // BitsPerSample (16)
            b'd', b'a', b't', b'a', // Subchunk2ID
            0x00, 0x00, 0x00, 0x00  // Subchunk2Size
        ];

        let json_data = json!({
            "data": {
                "answer": "Test answer",
                "audio": BASE64.encode(test_wav)
            }
        });

        let result = rt.block_on(processor.process_json_response(
            serde_json::to_vec(&json_data).unwrap().as_slice()
        ));

        assert!(result.is_ok());
        let (answer, audio) = result.unwrap();
        assert_eq!(answer, "Test answer");
        assert_eq!(&audio[..4], b"RIFF");
    }

    #[test]
    fn test_process_json_response_invalid_wav() {
        let rt = Runtime::new().unwrap();
        let settings = create_test_settings();
        let processor = AudioProcessor::new(settings);

        let invalid_wav = vec![0x00; 44]; // Invalid WAV header
        let json_data = json!({
            "data": {
                "answer": "Test answer",
                "audio": BASE64.encode(invalid_wav)
            }
        });

        let result = rt.block_on(processor.process_json_response(
            serde_json::to_vec(&json_data).unwrap().as_slice()
        ));

        assert!(result.is_err());
    }
}

----
utils/force_calculation.wgsl
// Node structure exactly matching Rust NodeData memory layout (28 bytes total)
struct Node {
    position: vec3<f32>,  // 12 bytes - matches THREE.Vector3
    velocity: vec3<f32>,  // 12 bytes - matches THREE.Vector3
    mass: u32,            // 1 byte - quantized mass
    flags: u32,           // 1 byte - node state flags
    padding: vec2<u32>,   // 2 bytes - alignment padding
}

// Edge structure matching Rust GPUEdge layout
struct Edge {
    source: u32,      // 4 bytes
    target_idx: u32,  // 4 bytes (renamed from 'target' as it's a reserved keyword)
    weight: f32,      // 4 bytes
}

struct NodesBuffer {
    nodes: array<Node>,
}

struct EdgesBuffer {
    edges: array<Edge>,
}

// Matches Rust SimulationParams exactly
struct SimulationParams {
    iterations: u32,           // Range: 1-500
    spring_strength: f32,      // Range: 0.001-1.0
    repulsion_strength: f32,   // Range: 1.0-10000.0
    attraction_strength: f32,  // Range: 0.001-1.0
    damping: f32,             // Range: 0.5-0.95
    is_initial_layout: u32,   // bool converted to u32
    time_step: f32,           // Range: 0.1-1.0
    padding: u32,             // Explicit padding for alignment
}

@group(0) @binding(0) var<storage, read_write> nodes_buffer: NodesBuffer;
@group(0) @binding(1) var<storage, read> edges_buffer: EdgesBuffer;
@group(0) @binding(2) var<uniform> params: SimulationParams;

// Physics constants - aligned with settings.toml
const WORKGROUP_SIZE: u32 = 256;
const MAX_FORCE: f32 = 100.0;          // Increased for stronger forces
const MIN_DISTANCE: f32 = 5.0;         // Increased minimum distance
const CENTER_RADIUS: f32 = 250.0;      // Matches target_radius from settings
const MAX_VELOCITY: f32 = 20.0;        // Increased for faster movement
const NATURAL_LENGTH: f32 = 120.0;     // Matches natural_length from settings
const BOUNDARY_LIMIT: f32 = 600.0;     // Matches boundary_limit from settings

// Validation functions
fn is_valid_float(x: f32) -> bool {
    return x == x && abs(x) < 1e10;  // Check for NaN and infinity
}

fn is_valid_float3(v: vec3<f32>) -> bool {
    return is_valid_float(v.x) && is_valid_float(v.y) && is_valid_float(v.z);
}

fn clamp_force(force: vec3<f32>) -> vec3<f32> {
    let magnitude = length(force);
    if (magnitude > MAX_FORCE) {
        return (force / magnitude) * MAX_FORCE;
    }
    return force;
}

// Convert quantized mass (0-255 in lower byte) to float (0.0-2.0)
fn decode_mass(mass_packed: u32) -> f32 {
    return f32(mass_packed & 0xFFu) / 127.5;
}

// Get node position as vec3
fn get_position(node: Node) -> vec3<f32> {
    return node.position;
}

// Get node velocity as vec3
fn get_velocity(node: Node) -> vec3<f32> {
    return node.velocity;
}

// Calculate spring force between connected nodes
fn calculate_spring_force(pos1: vec3<f32>, pos2: vec3<f32>, mass1: f32, mass2: f32, weight: f32) -> vec3<f32> {
    let displacement = pos2 - pos1;
    let distance = length(displacement);
    
    if (distance < MIN_DISTANCE) {
        return normalize(displacement) * MAX_FORCE;
    }
    
    // Combined spring and attraction forces with weight scaling
    let spring_force = params.spring_strength * weight * (distance - NATURAL_LENGTH);
    let attraction_force = params.attraction_strength * weight * distance;
    
    let total_force = normalize(displacement) * (spring_force + attraction_force);
    return clamp_force(total_force);
}

// Calculate repulsion force between nodes
fn calculate_repulsion_force(pos1: vec3<f32>, pos2: vec3<f32>, mass1: f32, mass2: f32) -> vec3<f32> {
    let displacement = pos2 - pos1;
    let distance_sq = dot(displacement, displacement);
    
    if (distance_sq < MIN_DISTANCE * MIN_DISTANCE) {
        return normalize(displacement) * -MAX_FORCE;
    }
    
    // Coulomb-like repulsion scaled by masses and adjusted for graph size
    let force_magnitude = -params.repulsion_strength * mass1 * mass2 / max(distance_sq, 0.1);
    let force = normalize(displacement) * min(abs(force_magnitude), MAX_FORCE) * sign(force_magnitude);
    return clamp_force(force);
}

// Calculate center gravity force
fn calculate_center_force(position: vec3<f32>) -> vec3<f32> {
    let to_center = -position;
    let distance = length(to_center);
    
    if (distance > CENTER_RADIUS) {
        // Stronger centering force during initial layout
        let center_strength = select(0.1, 0.2, params.is_initial_layout == 1u);
        let force = normalize(to_center) * center_strength * (distance - CENTER_RADIUS);
        return clamp_force(force);
    }
    return vec3<f32>(0.0);
}

@compute @workgroup_size(WORKGROUP_SIZE)
fn compute_main(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let node_id = global_id.x;
    let n_nodes = arrayLength(&nodes_buffer.nodes);

    if (node_id >= n_nodes) {
        return;
    }

    var node = nodes_buffer.nodes[node_id];
    
    // Validate input node data
    if (!is_valid_float3(get_position(node)) || !is_valid_float3(get_velocity(node))) {
        // Reset invalid node to origin
        node.position = vec3<f32>(0.0);
        node.velocity = vec3<f32>(0.0);
        nodes_buffer.nodes[node_id] = node;
        return;
    }

    var total_force = vec3<f32>(0.0);
    let node_mass = decode_mass(node.mass);
    let node_pos = get_position(node);

    // Calculate forces from edges (bi-directional)
    let n_edges = arrayLength(&edges_buffer.edges);
    for (var i = 0u; i < n_edges; i = i + 1u) {
        let edge = edges_buffer.edges[i];
        if (edge.source == node_id || edge.target_idx == node_id) {
            let other_id = select(edge.source, edge.target_idx, edge.source == node_id);
            let other_node = nodes_buffer.nodes[other_id];
            
            // Validate other node
            if (!is_valid_float3(get_position(other_node))) {
                continue;
            }
            
            let other_mass = decode_mass(other_node.mass);
            let other_pos = get_position(other_node);
            
            // Accumulate spring force
            let spring_force = calculate_spring_force(
                node_pos,
                other_pos,
                node_mass,
                other_mass,
                edge.weight
            );
            total_force += spring_force;
        }
    }

    // Calculate repulsion forces with all other nodes
    for (var i = 0u; i < n_nodes; i = i + 1u) {
        if (i != node_id) {
            let other_node = nodes_buffer.nodes[i];
            
            // Validate other node
            if (!is_valid_float3(get_position(other_node))) {
                continue;
            }
            
            let other_mass = decode_mass(other_node.mass);
            let other_pos = get_position(other_node);
            
            let repulsion_force = calculate_repulsion_force(
                node_pos,
                other_pos,
                node_mass,
                other_mass
            );
            total_force += repulsion_force;
        }
    }

    // Add center gravity force
    let center_force = calculate_center_force(node_pos);
    total_force += center_force;

    // Scale forces based on layout phase
    let force_scale = select(1.0, 2.0, params.is_initial_layout == 1u);
    total_force *= force_scale;
    total_force = clamp_force(total_force);

    // Update velocity with damping
    var velocity = get_velocity(node);
    velocity = (velocity + total_force * params.time_step) * params.damping;

    // Apply velocity limits
    let speed = length(velocity);
    if (speed > MAX_VELOCITY) {
        velocity = (velocity / speed) * MAX_VELOCITY;
    }

    // Update position
    let new_pos = node_pos + velocity * params.time_step;

    // Apply position bounds
    let bounded_pos = clamp(
        new_pos,
        vec3<f32>(-BOUNDARY_LIMIT),
        vec3<f32>(BOUNDARY_LIMIT)
    );

    // Validate final values
    if (!is_valid_float3(bounded_pos) || !is_valid_float3(velocity)) {
        // Reset to origin if invalid
        node.position = vec3<f32>(0.0);
        node.velocity = vec3<f32>(0.0);
    } else {
        // Update node with new values
        node.position = bounded_pos;
        node.velocity = velocity;
    }

    nodes_buffer.nodes[node_id] = node;
}

----
utils/update_positions.wgsl
struct PositionUpdate {
    position: vec3<f32>,  // 12 bytes (x, y, z)
    velocity: vec3<f32>,  // 12 bytes (vx, vy, vz)
}

@group(0) @binding(0) var<storage, read_write> position_updates: array<PositionUpdate>;

// Constants
const MAX_VELOCITY: f32 = 100.0;
const MAX_POSITION: f32 = 1000.0;  // Maximum distance from origin

// Utility functions
fn is_valid_float(x: f32) -> bool {
    return x == x && abs(x) < 1e10;  // Check for NaN and infinity
}

fn is_valid_float3(v: vec3<f32>) -> bool {
    return is_valid_float(v.x) && is_valid_float(v.y) && is_valid_float(v.z);
}

fn clamp_position(pos: vec3<f32>) -> vec3<f32> {
    return clamp(pos, vec3<f32>(-MAX_POSITION), vec3<f32>(MAX_POSITION));
}

fn clamp_velocity(vel: vec3<f32>) -> vec3<f32> {
    let speed = length(vel);
    if (speed > MAX_VELOCITY) {
        return (vel / speed) * MAX_VELOCITY;
    }
    return vel;
}

@compute @workgroup_size(256)
fn update_positions(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let node_id = global_id.x;
    let n_nodes = arrayLength(&position_updates);

    if (node_id >= n_nodes) { return; }

    var update = position_updates[node_id];
    
    // Validate and clamp position
    if (!is_valid_float3(update.position)) {
        update.position = vec3<f32>(0.0);
    } else {
        update.position = clamp_position(update.position);
    }
    
    // Validate and clamp velocity
    if (!is_valid_float3(update.velocity)) {
        update.velocity = vec3<f32>(0.0);
    } else {
        update.velocity = clamp_velocity(update.velocity);
    }
    
    position_updates[node_id] = update;
}

----
utils/socket_flow_messages.rs
use serde::{Deserialize, Serialize};
use bytemuck::{Pod, Zeroable};
use std::collections::HashMap;
use cudarc::driver::{DeviceRepr, ValidAsZeroBits};
use serde_json::Value;

#[repr(C)]
#[derive(Debug, Clone, Copy, Pod, Zeroable, Serialize, Deserialize)]
pub struct NodeData {
    pub position: [f32; 3],  // 12 bytes - matches THREE.Vector3
    pub velocity: [f32; 3],  // 12 bytes - matches THREE.Vector3
    pub mass: u8,            // 1 byte - quantized mass
    pub flags: u8,           // 1 byte - node state flags
    pub padding: [u8; 2],    // 2 bytes - alignment padding
}

// Implement DeviceRepr for NodeData
unsafe impl DeviceRepr for NodeData {}

// Implement ValidAsZeroBits for NodeData
unsafe impl ValidAsZeroBits for NodeData {}

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "camelCase")]
pub struct Node {
    // Core data
    pub id: String,
    pub label: String,
    pub data: NodeData,

    // Metadata
    #[serde(skip_serializing_if = "HashMap::is_empty")]
    pub metadata: HashMap<String, String>,
    #[serde(skip)]
    pub file_size: u64,

    // Rendering properties
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub node_type: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub size: Option<f32>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub color: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub weight: Option<f32>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub user_data: Option<HashMap<String, String>>,
}

impl Node {
    pub fn new(id: String) -> Self {
        Self {
            id: id.clone(),
            label: id,
            data: NodeData {
                position: [0.0; 3],
                velocity: [0.0; 3],
                mass: 127, // Default mass
                flags: 0,
                padding: [0; 2],
            },
            metadata: HashMap::new(),
            file_size: 0,
            node_type: None,
            size: None,
            color: None,
            weight: None,
            group: None,
            user_data: None,
        }
    }

    pub fn update_mass(&mut self) {
        if self.file_size == 0 {
            self.data.mass = 127; // Default mass
            return;
        }
        
        // Scale file size logarithmically to 0-255 range
        let log_size = (self.file_size as f64).log2();
        let max_log = (1024.0 * 1024.0 * 1024.0_f64).log2(); // 1GB
        let normalized = (log_size / max_log).min(1.0);
        self.data.mass = (normalized * 255.0) as u8;
    }

    pub fn update_from_gpu_node(&mut self, gpu_node: &NodeData) {
        self.data = *gpu_node;
    }

    // Convenience getters/setters for x, y, z coordinates
    pub fn x(&self) -> f32 { self.data.position[0] }
    pub fn y(&self) -> f32 { self.data.position[1] }
    pub fn z(&self) -> f32 { self.data.position[2] }
    pub fn vx(&self) -> f32 { self.data.velocity[0] }
    pub fn vy(&self) -> f32 { self.data.velocity[1] }
    pub fn vz(&self) -> f32 { self.data.velocity[2] }
    
    pub fn set_x(&mut self, val: f32) { self.data.position[0] = val; }
    pub fn set_y(&mut self, val: f32) { self.data.position[1] = val; }
    pub fn set_z(&mut self, val: f32) { self.data.position[2] = val; }
    pub fn set_vx(&mut self, val: f32) { self.data.velocity[0] = val; }
    pub fn set_vy(&mut self, val: f32) { self.data.velocity[1] = val; }
    pub fn set_vz(&mut self, val: f32) { self.data.velocity[2] = val; }
}

#[derive(Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct BinaryNodeData {
    pub node_id: String,
    pub data: NodeData,
}

impl BinaryNodeData {
    pub fn from_node_data(node_id: &str, data: &NodeData) -> Self {
        Self {
            node_id: node_id.to_string(),
            data: *data,
        }
    }
}

#[derive(Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct UpdatePositionsMessage {
    pub nodes: Vec<BinaryNodeData>,
}

// Settings message types
#[derive(Debug, Serialize, Deserialize)]
pub struct SettingsUpdate {
    pub settings: Value,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct UpdateSettings {
    pub settings: Value,
}

#[derive(Debug, Serialize, Deserialize)]
#[serde(tag = "type", content = "data")]
pub enum Message {
    #[serde(rename = "updatePositions")]
    UpdatePositions(UpdatePositionsMessage),
    #[serde(rename = "initialData")]
    InitialData { graph: GraphData },
    #[serde(rename = "binaryPositionUpdate")]
    BinaryPositionUpdate { nodes: Vec<BinaryNodeData> },
    #[serde(rename = "simulationModeSet")]
    SimulationModeSet { mode: String },
    #[serde(rename = "settingsUpdated")]
    SettingsUpdated(SettingsUpdate),
    #[serde(rename = "updateSettings")]
    UpdateSettings(UpdateSettings),
    #[serde(rename = "requestInitialData")]
    RequestInitialData,
    #[serde(rename = "enableBinaryUpdates")]
    EnableBinaryUpdates,
    #[serde(rename = "setSimulationMode")]
    SetSimulationMode { mode: String },
    #[serde(rename = "ping")]
    Ping,
    #[serde(rename = "pong")]
    Pong,
}

// Forward declarations to avoid circular dependencies
use crate::models::graph::GraphData;

----
utils/socket_flow_constants.rs
// Node and graph constants
pub const NODE_SIZE: f32 = 1.0;
pub const EDGE_WIDTH: f32 = 0.1;
pub const MIN_DISTANCE: f32 = 2.0;
pub const MAX_DISTANCE: f32 = 10.0;

// WebSocket constants
pub const HEARTBEAT_INTERVAL: u64 = 5; // seconds
pub const CLIENT_TIMEOUT: u64 = 10; // seconds
pub const MAX_MESSAGE_SIZE: usize = 100 * 1024 * 1024; // 100MB
pub const BINARY_CHUNK_SIZE: usize = 64 * 1024; // 64KB

// Update rate constants
pub const POSITION_UPDATE_RATE: u32 = 5; // Hz (matching client's MAX_UPDATES_PER_SECOND)
pub const METADATA_UPDATE_RATE: u32 = 1; // Hz

// Binary message constants
pub const NODE_POSITION_SIZE: usize = 24; // 6 f32s (x,y,z,vx,vy,vz) * 4 bytes
pub const BINARY_HEADER_SIZE: usize = 4; // 1 f32 for header

// Compression constants
pub const COMPRESSION_THRESHOLD: usize = 1024; // 1KB
pub const ENABLE_COMPRESSION: bool = true;

----
utils/mod.rs
pub mod audio_processor;
pub mod debug_logging;
pub mod gpu_compute;
pub mod socket_flow_constants;
pub mod socket_flow_handler;
pub mod socket_flow_messages;

----
utils/socket_flow_handler.rs
use actix::{Actor, StreamHandler, ActorContext, AsyncContext, WrapFuture, Handler, Message as ActixMessage};
use actix_web::{web, Error, HttpRequest, HttpResponse};
use actix_web_actors::ws;
use log::{error, warn, debug, info};
use std::sync::Arc;
use std::time::{Duration, Instant};
use std::fs;
use toml;

use crate::app_state::AppState;
use crate::utils::socket_flow_messages::{
    BinaryNodeData,
    Message,
    SettingsUpdate,
    UpdateSettings,
};

const HEARTBEAT_INTERVAL: Duration = Duration::from_secs(5);
const CLIENT_TIMEOUT: Duration = Duration::from_secs(10);

#[derive(ActixMessage)]
#[rtype(result = "()")]
struct SendMessage(String);

pub struct SocketFlowServer {
    app_state: Arc<AppState>,
    last_heartbeat: Instant,
}

impl Actor for SocketFlowServer {
    type Context = ws::WebsocketContext<Self>;

    fn started(&mut self, ctx: &mut Self::Context) {
        debug!("WebSocket actor started");
        self.heartbeat(ctx);
    }
}

impl Handler<SendMessage> for SocketFlowServer {
    type Result = ();

    fn handle(&mut self, msg: SendMessage, ctx: &mut Self::Context) {
        ctx.text(msg.0);
    }
}

impl StreamHandler<Result<ws::Message, ws::ProtocolError>> for SocketFlowServer {
    fn handle(&mut self, msg: Result<ws::Message, ws::ProtocolError>, ctx: &mut Self::Context) {
        match msg {
            Ok(ws::Message::Ping(msg)) => {
                self.last_heartbeat = Instant::now();
                ctx.pong(&msg);
            }
            Ok(ws::Message::Pong(_)) => {
                self.last_heartbeat = Instant::now();
            }
            Ok(ws::Message::Text(text)) => {
                debug!("Received text message: {}", text);
                match serde_json::from_str::<Message>(&text) {
                    Ok(message) => self.handle_message(message, ctx),
                    Err(e) => error!("Failed to parse message: {}", e),
                }
            }
            Ok(ws::Message::Binary(_)) => {
                warn!("Unexpected binary message");
            }
            Ok(ws::Message::Close(reason)) => {
                debug!("WebSocket closing with reason: {:?}", reason);
                ctx.close(reason);
                ctx.stop();
            }
            _ => (),
        }
    }
}

impl SocketFlowServer {
    pub fn new(app_state: Arc<AppState>) -> Self {
        Self {
            app_state,
            last_heartbeat: Instant::now(),
        }
    }

    fn heartbeat(&self, ctx: &mut ws::WebsocketContext<Self>) {
        ctx.run_interval(HEARTBEAT_INTERVAL, |act, ctx| {
            if Instant::now().duration_since(act.last_heartbeat) > CLIENT_TIMEOUT {
                warn!("Client heartbeat timeout");
                ctx.stop();
                return;
            }
            ctx.ping(b"");
        });
    }

    fn write_settings_to_file(settings: &serde_json::Value) -> Result<(), String> {
        // Try to read current settings file
        let settings_content = match fs::read_to_string("settings.toml") {
            Ok(content) => content,
            Err(e) => {
                warn!("Could not read settings.toml: {}", e);
                return Ok(());  // Continue with in-memory settings
            }
        };

        // Try to parse current settings
        let mut current_settings: toml::Value = match toml::from_str(&settings_content) {
            Ok(settings) => settings,
            Err(e) => {
                warn!("Could not parse settings.toml: {}", e);
                return Ok(());  // Continue with in-memory settings
            }
        };

        // Update visualization-related sections
        if let Some(current_table) = current_settings.as_table_mut() {
            if let Some(new_settings) = settings.as_object() {
                let sections = [
                    "rendering", "nodes", "edges", "labels", 
                    "bloom", "ar", "physics", "animations", "audio"
                ];

                for section in sections.iter() {
                    if let Some(new_section) = new_settings.get(*section) {
                        if let Ok(converted) = toml::Value::try_from(new_section.clone()) {
                            current_table.insert(section.to_string(), converted);
                        }
                    }
                }
            }
        }

        // Try to write back to file, but don't fail if we can't
        match toml::to_string_pretty(&current_settings)
            .map_err(|e| format!("Failed to serialize settings: {}", e))
            .and_then(|content| fs::write("settings.toml", content)
                .map_err(|e| format!("Failed to write settings.toml: {}", e))) 
        {
            Ok(_) => {
                debug!("Successfully wrote settings to file");
                Ok(())
            },
            Err(e) => {
                warn!("Could not write to settings.toml ({}), continuing with in-memory settings", e);
                Ok(())  // Continue with in-memory settings
            }
        }
    }

    fn handle_message(&mut self, message: Message, ctx: &mut ws::WebsocketContext<Self>) {
        match message {
            Message::RequestInitialData => {
                debug!("Handling RequestInitialData message");
                let app_state = self.app_state.clone();
                let addr = ctx.address();
                ctx.spawn(
                    async move {
                        let graph = app_state.graph_service.graph_data.read().await;
                        info!("Sending initial graph data: {} nodes, {} edges", 
                            graph.nodes.len(), 
                            graph.edges.len()
                        );
                        
                        let initial_data = Message::InitialData { 
                            graph: (*graph).clone() 
                        };
                        if let Ok(message) = serde_json::to_string(&initial_data) {
                            addr.do_send(SendMessage(message));
                        }
                    }
                    .into_actor(self)
                );
            }
            Message::UpdatePositions(update_msg) => {
                debug!("Handling UpdatePositions message with {} nodes", update_msg.nodes.len());
                let app_state = self.app_state.clone();
                ctx.spawn(
                    async move {
                        let mut graph = app_state.graph_service.graph_data.write().await;
                        for node_update in update_msg.nodes {
                            if let Some(node) = graph.nodes.iter_mut().find(|n| n.id == node_update.node_id) {
                                node.data = node_update.data;
                            }
                        }
                    }
                    .into_actor(self)
                );
            }
            Message::EnableBinaryUpdates => {
                debug!("Handling EnableBinaryUpdates message");
                let app_state = self.app_state.clone();
                let addr = ctx.address();
                ctx.spawn(
                    async move {
                        let graph = app_state.graph_service.graph_data.read().await;
                        let binary_nodes: Vec<BinaryNodeData> = graph.nodes.iter()
                            .map(|node| BinaryNodeData::from_node_data(&node.id, &node.data))
                            .collect();
                        
                        let binary_update = Message::BinaryPositionUpdate {
                            nodes: binary_nodes
                        };
                        if let Ok(message) = serde_json::to_string(&binary_update) {
                            addr.do_send(SendMessage(message));
                        }
                    }
                    .into_actor(self)
                );
            }
            Message::SetSimulationMode { mode } => {
                debug!("Setting simulation mode to: {}", mode);
                if let Ok(message) = serde_json::to_string(&Message::SimulationModeSet { mode }) {
                    ctx.text(message);
                }
            }
            Message::UpdateSettings(UpdateSettings { settings }) => {
                debug!("Updating settings");
                // Try to write to file but continue even if it fails
                let _ = Self::write_settings_to_file(&settings);
                
                // Always broadcast settings update to all clients
                let settings_update = Message::SettingsUpdated(SettingsUpdate { settings });
                if let Ok(message) = serde_json::to_string(&settings_update) {
                    ctx.text(message);
                }
            }
            Message::Ping => {
                debug!("Handling Ping message");
                if let Ok(message) = serde_json::to_string(&Message::Pong) {
                    ctx.text(message);
                }
            }
            _ => {
                warn!("Unhandled message type");
            }
        }
    }
}

pub async fn ws_handler(
    req: HttpRequest,
    stream: web::Payload,
    app_state: web::Data<AppState>,
) -> Result<HttpResponse, Error> {
    info!("New WebSocket connection request");
    let socket_server = SocketFlowServer::new(Arc::new(app_state.as_ref().clone()));
    ws::start(socket_server, &req, stream)
}

----
utils/gpu_compute.rs
use cudarc::driver::{CudaDevice, CudaFunction, CudaSlice, LaunchConfig, LaunchAsync};
use cudarc::nvrtc::Ptx;
use std::io::Error;
use std::sync::Arc;
use log::debug;
use crate::models::graph::GraphData;
use crate::utils::socket_flow_messages::NodeData;
use crate::models::simulation_params::SimulationParams;
use tokio::sync::RwLock;

const BLOCK_SIZE: u32 = 256;
const MAX_NODES: u32 = 1_000_000;
const NODE_SIZE: u32 = 28; // 24 bytes for position/velocity + 4 bytes for mass/flags/padding
const SHARED_MEM_SIZE: u32 = BLOCK_SIZE * NODE_SIZE;

pub struct GPUCompute {
    device: Arc<CudaDevice>,
    force_kernel: CudaFunction,
    node_data: CudaSlice<NodeData>,
    num_nodes: u32,
    simulation_params: SimulationParams,
}

impl GPUCompute {
    pub async fn new(graph: &GraphData) -> Result<Arc<RwLock<Self>>, Error> {
        let num_nodes = graph.nodes.len() as u32;
        if num_nodes > MAX_NODES {
            return Err(Error::new(
                std::io::ErrorKind::Other,
                format!("Node count exceeds limit: {}", MAX_NODES),
            ));
        }

        debug!("Initializing CUDA device");
        let device = Arc::new(CudaDevice::new(0)
            .map_err(|e| Error::new(std::io::ErrorKind::Other, e.to_string()))?);

        debug!("Loading force computation kernel");
        let ptx = Ptx::from_file("/app/compute_forces.ptx");
            
        device.load_ptx(ptx, "compute_forces", &["compute_forces"])
            .map_err(|e| Error::new(std::io::ErrorKind::Other, e.to_string()))?;
            
        let force_kernel = device.get_func("compute_forces", "compute_forces")
            .ok_or_else(|| Error::new(std::io::ErrorKind::Other, "Function compute_forces not found"))?;

        debug!("Allocating device memory for {} nodes", num_nodes);
        let node_data = device.alloc_zeros::<NodeData>(num_nodes as usize)
            .map_err(|e| Error::new(std::io::ErrorKind::Other, e.to_string()))?;

        debug!("Creating GPU compute instance");
        let mut instance = Self {
            device: Arc::clone(&device),
            force_kernel,
            node_data,
            num_nodes,
            simulation_params: SimulationParams::default(),
        };

        debug!("Copying initial graph data to device memory");
        instance.update_graph_data(graph)?;

        Ok(Arc::new(RwLock::new(instance)))
    }

    pub fn update_graph_data(&mut self, graph: &GraphData) -> Result<(), Error> {
        debug!("Updating graph data for {} nodes", graph.nodes.len());

        // Extract NodeData from graph nodes
        let node_data: Vec<NodeData> = graph.nodes.iter()
            .map(|node| node.data)
            .collect();

        // Copy data to GPU
        self.device.htod_sync_copy_into(&node_data, &mut self.node_data)
            .map_err(|e| Error::new(std::io::ErrorKind::Other, e.to_string()))?;

        self.num_nodes = graph.nodes.len() as u32;
        Ok(())
    }

    pub fn update_simulation_params(&mut self, params: &SimulationParams) -> Result<(), Error> {
        debug!("Updating simulation parameters: {:?}", params);
        self.simulation_params = params.clone();
        Ok(())
    }

    pub fn step(&mut self) -> Result<(), Error> {
        let blocks = (self.num_nodes + BLOCK_SIZE - 1) / BLOCK_SIZE;
        let cfg = LaunchConfig {
            grid_dim: (blocks, 1, 1),
            block_dim: (BLOCK_SIZE, 1, 1),
            shared_mem_bytes: SHARED_MEM_SIZE,
        };

        let params = &self.simulation_params;
        unsafe {
            self.force_kernel.clone().launch(cfg, (
                &mut self.node_data,
                self.num_nodes as i32,
                params.spring_strength,
                params.repulsion,
                params.damping,
            )).map_err(|e| std::io::Error::new(std::io::ErrorKind::Other, e.to_string()))?;
        }
        Ok(())
    }

    pub fn get_node_data(&self) -> Result<Vec<NodeData>, Error> {
        let mut node_data = vec![NodeData {
            position: [0.0; 3],
            velocity: [0.0; 3],
            mass: 0,
            flags: 0,
            padding: [0; 2],
        }; self.num_nodes as usize];

        self.device.dtoh_sync_copy_into(&self.node_data, &mut node_data)
            .map_err(|e| Error::new(std::io::ErrorKind::Other, e.to_string()))?;

        Ok(node_data)
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::models::graph::GraphData;

    #[tokio::test]
    async fn test_gpu_compute_initialization() {
        let graph = GraphData::default();
        let gpu_compute = GPUCompute::new(&graph).await;
        assert!(gpu_compute.is_ok());
    }

    #[tokio::test]
    async fn test_node_data_transfer() {
        let mut graph = GraphData::default();
        // Add test nodes...
        let gpu_compute = GPUCompute::new(&graph).await.unwrap();
        let gpu_compute = Arc::try_unwrap(gpu_compute).unwrap().into_inner();
        let node_data = gpu_compute.get_node_data().unwrap();
        assert_eq!(node_data.len(), graph.nodes.len());
    }
}

----
utils/compute_forces.ptx
//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-34097967
// Cuda compilation tools, release 12.4, V12.4.131
// Based on NVVM 7.0.1
//

.version 8.4
.target sm_86
.address_size 64

	// .globl	compute_forces
// _ZZ14compute_forcesE16shared_positions has been demoted
// _ZZ14compute_forcesE13shared_masses has been demoted

.visible .entry compute_forces(
	.param .u64 compute_forces_param_0,
	.param .u64 compute_forces_param_1,
	.param .u64 compute_forces_param_2,
	.param .u32 compute_forces_param_3,
	.param .f32 compute_forces_param_4,
	.param .f32 compute_forces_param_5,
	.param .f32 compute_forces_param_6
)
{
	.reg .pred 	%p<31>;
	.reg .b16 	%rs<3>;
	.reg .f32 	%f<528>;
	.reg .b32 	%r<106>;
	.reg .b64 	%rd<20>;
	// demoted variable
	.shared .align 4 .b8 _ZZ14compute_forcesE16shared_positions[3072];
	// demoted variable
	.shared .align 4 .b8 _ZZ14compute_forcesE13shared_masses[1024];

	ld.param.u64 	%rd6, [compute_forces_param_0];
	ld.param.u64 	%rd7, [compute_forces_param_2];
	ld.param.u32 	%r26, [compute_forces_param_3];
	cvta.to.global.u64 	%rd1, %rd7;
	cvta.to.global.u64 	%rd2, %rd6;
	mov.u32 	%r27, %ntid.x;
	mov.u32 	%r28, %ctaid.x;
	mov.u32 	%r1, %tid.x;
	mad.lo.s32 	%r2, %r28, %r27, %r1;
	setp.ge.s32 	%p1, %r2, %r26;
	@%p1 bra 	$L__BB0_47;

	mul.lo.s32 	%r29, %r2, 3;
	mul.wide.s32 	%rd8, %r29, 4;
	add.s64 	%rd4, %rd2, %rd8;
	ld.global.f32 	%f1, [%rd4];
	ld.global.f32 	%f2, [%rd4+4];
	ld.global.f32 	%f3, [%rd4+8];
	setp.lt.s32 	%p2, %r26, 1;
	mov.f32 	%f474, 0f00000000;
	mov.f32 	%f475, %f474;
	mov.f32 	%f476, %f474;
	@%p2 bra 	$L__BB0_46;

	ld.param.f32 	%f467, [compute_forces_param_5];
	cvt.s64.s32 	%rd9, %r2;
	add.s64 	%rd10, %rd1, %rd9;
	ld.global.u8 	%rs1, [%rd10];
	cvt.rn.f32.u16 	%f118, %rs1;
	mov.u32 	%r31, _ZZ14compute_forcesE16shared_positions;
	mad.lo.s32 	%r3, %r1, 12, %r31;
	shl.b32 	%r32, %r1, 2;
	mov.u32 	%r33, _ZZ14compute_forcesE13shared_masses;
	add.s32 	%r4, %r33, %r32;
	mul.f32 	%f4, %f118, %f467;
	add.s32 	%r34, %r26, 255;
	shr.s32 	%r35, %r34, 31;
	shr.u32 	%r36, %r35, 24;
	add.s32 	%r37, %r34, %r36;
	shr.s32 	%r5, %r37, 8;
	mov.f32 	%f476, 0f00000000;
	mov.u32 	%r100, 0;
	mov.f32 	%f475, %f476;
	mov.f32 	%f474, %f476;

$L__BB0_3:
	shl.b32 	%r7, %r100, 8;
	sub.s32 	%r38, %r7, %r26;
	add.s32 	%r10, %r7, %r1;
	setp.ge.s32 	%p3, %r10, %r26;
	@%p3 bra 	$L__BB0_5;

	mul.lo.s32 	%r39, %r10, 3;
	mul.wide.s32 	%rd11, %r39, 4;
	add.s64 	%rd12, %rd2, %rd11;
	ld.global.f32 	%f119, [%rd12];
	ld.global.f32 	%f120, [%rd12+4];
	ld.global.f32 	%f121, [%rd12+8];
	st.shared.f32 	[%r3], %f119;
	st.shared.f32 	[%r3+4], %f120;
	st.shared.f32 	[%r3+8], %f121;
	cvt.s64.s32 	%rd13, %r10;
	add.s64 	%rd14, %rd1, %rd13;
	ld.global.u8 	%rs2, [%rd14];
	cvt.rn.f32.u16 	%f122, %rs2;
	st.shared.f32 	[%r4], %f122;

$L__BB0_5:
	shl.b32 	%r78, %r100, 8;
	bar.sync 	0;
	setp.ge.s32 	%p4, %r78, %r26;
	@%p4 bra 	$L__BB0_45;

	max.u32 	%r85, %r38, -256;
	shl.b32 	%r84, %r100, 8;
	sub.s32 	%r83, %r84, %r26;
	max.u32 	%r82, %r83, -256;
	neg.s32 	%r81, %r82;
	shl.b32 	%r104, %r100, 8;
	and.b32  	%r11, %r81, 7;
	setp.gt.u32 	%p5, %r82, -8;
	mov.u32 	%r105, 0;
	@%p5 bra 	$L__BB0_25;

	shl.b32 	%r89, %r100, 8;
	sub.s32 	%r88, %r89, %r26;
	max.u32 	%r87, %r88, -256;
	neg.s32 	%r86, %r87;
	shl.b32 	%r104, %r100, 8;
	sub.s32 	%r103, %r86, %r11;
	mov.u32 	%r105, 0;

$L__BB0_8:
	.pragma "nounroll";
	mad.lo.s32 	%r16, %r105, 12, %r31;
	shl.b32 	%r43, %r105, 2;
	add.s32 	%r17, %r33, %r43;
	setp.eq.s32 	%p6, %r104, %r2;
	@%p6 bra 	$L__BB0_10;

	ld.shared.f32 	%f124, [%r16];
	sub.f32 	%f125, %f1, %f124;
	ld.shared.f32 	%f126, [%r16+4];
	sub.f32 	%f127, %f2, %f126;
	ld.shared.f32 	%f128, [%r16+8];
	sub.f32 	%f129, %f3, %f128;
	mul.f32 	%f130, %f127, %f127;
	fma.rn.f32 	%f131, %f125, %f125, %f130;
	fma.rn.f32 	%f132, %f129, %f129, %f131;
	sqrt.rn.f32 	%f133, %f132;
	mov.f32 	%f134, 0f38D1B717;
	max.f32 	%f135, %f133, %f134;
	ld.shared.f32 	%f136, [%r17];
	mul.f32 	%f137, %f4, %f136;
	mul.f32 	%f138, %f135, %f135;
	div.rn.f32 	%f139, %f137, %f138;
	mul.f32 	%f140, %f125, %f139;
	div.rn.f32 	%f141, %f140, %f135;
	add.f32 	%f474, %f474, %f141;
	mul.f32 	%f142, %f127, %f139;
	div.rn.f32 	%f143, %f142, %f135;
	add.f32 	%f475, %f475, %f143;
	mul.f32 	%f144, %f129, %f139;
	div.rn.f32 	%f145, %f144, %f135;
	add.f32 	%f476, %f476, %f145;

$L__BB0_10:
	shl.b32 	%r75, %r100, 8;
	add.s32 	%r45, %r105, %r75;
	add.s32 	%r46, %r45, 1;
	setp.eq.s32 	%p7, %r46, %r2;
	@%p7 bra 	$L__BB0_12;

	ld.shared.f32 	%f146, [%r16+12];
	sub.f32 	%f147, %f1, %f146;
	ld.shared.f32 	%f148, [%r16+16];
	sub.f32 	%f149, %f2, %f148;
	ld.shared.f32 	%f150, [%r16+20];
	sub.f32 	%f151, %f3, %f150;
	mul.f32 	%f152, %f149, %f149;
	fma.rn.f32 	%f153, %f147, %f147, %f152;
	fma.rn.f32 	%f154, %f151, %f151, %f153;
	sqrt.rn.f32 	%f155, %f154;
	mov.f32 	%f156, 0f38D1B717;
	max.f32 	%f157, %f155, %f156;
	ld.shared.f32 	%f158, [%r17+4];
	mul.f32 	%f159, %f4, %f158;
	mul.f32 	%f160, %f157, %f157;
	div.rn.f32 	%f161, %f159, %f160;
	mul.f32 	%f162, %f147, %f161;
	div.rn.f32 	%f163, %f162, %f157;
	add.f32 	%f474, %f474, %f163;
	mul.f32 	%f164, %f149, %f161;
	div.rn.f32 	%f165, %f164, %f157;
	add.f32 	%f475, %f475, %f165;
	mul.f32 	%f166, %f151, %f161;
	div.rn.f32 	%f167, %f166, %f157;
	add.f32 	%f476, %f476, %f167;

$L__BB0_12:
	add.s32 	%r48, %r45, 2;
	setp.eq.s32 	%p8, %r48, %r2;
	@%p8 bra 	$L__BB0_14;

	ld.shared.f32 	%f168, [%r16+24];
	sub.f32 	%f169, %f1, %f168;
	ld.shared.f32 	%f170, [%r16+28];
	sub.f32 	%f171, %f2, %f170;
	ld.shared.f32 	%f172, [%r16+32];
	sub.f32 	%f173, %f3, %f172;
	mul.f32 	%f174, %f171, %f171;
	fma.rn.f32 	%f175, %f169, %f169, %f174;
	fma.rn.f32 	%f176, %f173, %f173, %f175;
	sqrt.rn.f32 	%f177, %f176;
	mov.f32 	%f178, 0f38D1B717;
	max.f32 	%f179, %f177, %f178;
	ld.shared.f32 	%f180, [%r17+8];
	mul.f32 	%f181, %f4, %f180;
	mul.f32 	%f182, %f179, %f179;
	div.rn.f32 	%f183, %f181, %f182;
	mul.f32 	%f184, %f169, %f183;
	div.rn.f32 	%f185, %f184, %f179;
	add.f32 	%f474, %f474, %f185;
	mul.f32 	%f186, %f171, %f183;
	div.rn.f32 	%f187, %f186, %f179;
	add.f32 	%f475, %f475, %f187;
	mul.f32 	%f188, %f173, %f183;
	div.rn.f32 	%f189, %f188, %f179;
	add.f32 	%f476, %f476, %f189;

$L__BB0_14:
	add.s32 	%r50, %r45, 3;
	setp.eq.s32 	%p9, %r50, %r2;
	@%p9 bra 	$L__BB0_16;

	ld.shared.f32 	%f190, [%r16+36];
	sub.f32 	%f191, %f1, %f190;
	ld.shared.f32 	%f192, [%r16+40];
	sub.f32 	%f193, %f2, %f192;
	ld.shared.f32 	%f194, [%r16+44];
	sub.f32 	%f195, %f3, %f194;
	mul.f32 	%f196, %f193, %f193;
	fma.rn.f32 	%f197, %f191, %f191, %f196;
	fma.rn.f32 	%f198, %f195, %f195, %f197;
	sqrt.rn.f32 	%f199, %f198;
	mov.f32 	%f200, 0f38D1B717;
	max.f32 	%f201, %f199, %f200;
	ld.shared.f32 	%f202, [%r17+12];
	mul.f32 	%f203, %f4, %f202;
	mul.f32 	%f204, %f201, %f201;
	div.rn.f32 	%f205, %f203, %f204;
	mul.f32 	%f206, %f191, %f205;
	div.rn.f32 	%f207, %f206, %f201;
	add.f32 	%f474, %f474, %f207;
	mul.f32 	%f208, %f193, %f205;
	div.rn.f32 	%f209, %f208, %f201;
	add.f32 	%f475, %f475, %f209;
	mul.f32 	%f210, %f195, %f205;
	div.rn.f32 	%f211, %f210, %f201;
	add.f32 	%f476, %f476, %f211;

$L__BB0_16:
	add.s32 	%r52, %r45, 4;
	setp.eq.s32 	%p10, %r52, %r2;
	@%p10 bra 	$L__BB0_18;

	ld.shared.f32 	%f212, [%r16+48];
	sub.f32 	%f213, %f1, %f212;
	ld.shared.f32 	%f214, [%r16+52];
	sub.f32 	%f215, %f2, %f214;
	ld.shared.f32 	%f216, [%r16+56];
	sub.f32 	%f217, %f3, %f216;
	mul.f32 	%f218, %f215, %f215;
	fma.rn.f32 	%f219, %f213, %f213, %f218;
	fma.rn.f32 	%f220, %f217, %f217, %f219;
	sqrt.rn.f32 	%f221, %f220;
	mov.f32 	%f222, 0f38D1B717;
	max.f32 	%f223, %f221, %f222;
	ld.shared.f32 	%f224, [%r17+16];
	mul.f32 	%f225, %f4, %f224;
	mul.f32 	%f226, %f223, %f223;
	div.rn.f32 	%f227, %f225, %f226;
	mul.f32 	%f228, %f213, %f227;
	div.rn.f32 	%f229, %f228, %f223;
	add.f32 	%f474, %f474, %f229;
	mul.f32 	%f230, %f215, %f227;
	div.rn.f32 	%f231, %f230, %f223;
	add.f32 	%f475, %f475, %f231;
	mul.f32 	%f232, %f217, %f227;
	div.rn.f32 	%f233, %f232, %f223;
	add.f32 	%f476, %f476, %f233;

$L__BB0_18:
	add.s32 	%r54, %r45, 5;
	setp.eq.s32 	%p11, %r54, %r2;
	@%p11 bra 	$L__BB0_20;

	ld.shared.f32 	%f234, [%r16+60];
	sub.f32 	%f235, %f1, %f234;
	ld.shared.f32 	%f236, [%r16+64];
	sub.f32 	%f237, %f2, %f236;
	ld.shared.f32 	%f238, [%r16+68];
	sub.f32 	%f239, %f3, %f238;
	mul.f32 	%f240, %f237, %f237;
	fma.rn.f32 	%f241, %f235, %f235, %f240;
	fma.rn.f32 	%f242, %f239, %f239, %f241;
	sqrt.rn.f32 	%f243, %f242;
	mov.f32 	%f244, 0f38D1B717;
	max.f32 	%f245, %f243, %f244;
	ld.shared.f32 	%f246, [%r17+20];
	mul.f32 	%f247, %f4, %f246;
	mul.f32 	%f248, %f245, %f245;
	div.rn.f32 	%f249, %f247, %f248;
	mul.f32 	%f250, %f235, %f249;
	div.rn.f32 	%f251, %f250, %f245;
	add.f32 	%f474, %f474, %f251;
	mul.f32 	%f252, %f237, %f249;
	div.rn.f32 	%f253, %f252, %f245;
	add.f32 	%f475, %f475, %f253;
	mul.f32 	%f254, %f239, %f249;
	div.rn.f32 	%f255, %f254, %f245;
	add.f32 	%f476, %f476, %f255;

$L__BB0_20:
	add.s32 	%r56, %r45, 6;
	setp.eq.s32 	%p12, %r56, %r2;
	@%p12 bra 	$L__BB0_22;

	ld.shared.f32 	%f256, [%r16+72];
	sub.f32 	%f257, %f1, %f256;
	ld.shared.f32 	%f258, [%r16+76];
	sub.f32 	%f259, %f2, %f258;
	ld.shared.f32 	%f260, [%r16+80];
	sub.f32 	%f261, %f3, %f260;
	mul.f32 	%f262, %f259, %f259;
	fma.rn.f32 	%f263, %f257, %f257, %f262;
	fma.rn.f32 	%f264, %f261, %f261, %f263;
	sqrt.rn.f32 	%f265, %f264;
	mov.f32 	%f266, 0f38D1B717;
	max.f32 	%f267, %f265, %f266;
	ld.shared.f32 	%f268, [%r17+24];
	mul.f32 	%f269, %f4, %f268;
	mul.f32 	%f270, %f267, %f267;
	div.rn.f32 	%f271, %f269, %f270;
	mul.f32 	%f272, %f257, %f271;
	div.rn.f32 	%f273, %f272, %f267;
	add.f32 	%f474, %f474, %f273;
	mul.f32 	%f274, %f259, %f271;
	div.rn.f32 	%f275, %f274, %f267;
	add.f32 	%f475, %f475, %f275;
	mul.f32 	%f276, %f261, %f271;
	div.rn.f32 	%f277, %f276, %f267;
	add.f32 	%f476, %f476, %f277;

$L__BB0_22:
	add.s32 	%r58, %r45, 7;
	setp.eq.s32 	%p13, %r58, %r2;
	@%p13 bra 	$L__BB0_24;

	ld.shared.f32 	%f278, [%r16+84];
	sub.f32 	%f279, %f1, %f278;
	ld.shared.f32 	%f280, [%r16+88];
	sub.f32 	%f281, %f2, %f280;
	ld.shared.f32 	%f282, [%r16+92];
	sub.f32 	%f283, %f3, %f282;
	mul.f32 	%f284, %f281, %f281;
	fma.rn.f32 	%f285, %f279, %f279, %f284;
	fma.rn.f32 	%f286, %f283, %f283, %f285;
	sqrt.rn.f32 	%f287, %f286;
	mov.f32 	%f288, 0f38D1B717;
	max.f32 	%f289, %f287, %f288;
	ld.shared.f32 	%f290, [%r17+28];
	mul.f32 	%f291, %f4, %f290;
	mul.f32 	%f292, %f289, %f289;
	div.rn.f32 	%f293, %f291, %f292;
	mul.f32 	%f294, %f279, %f293;
	div.rn.f32 	%f295, %f294, %f289;
	add.f32 	%f474, %f474, %f295;
	mul.f32 	%f296, %f281, %f293;
	div.rn.f32 	%f297, %f296, %f289;
	add.f32 	%f475, %f475, %f297;
	mul.f32 	%f298, %f283, %f293;
	div.rn.f32 	%f299, %f298, %f289;
	add.f32 	%f476, %f476, %f299;

$L__BB0_24:
	shl.b32 	%r74, %r100, 8;
	add.s32 	%r105, %r105, 8;
	add.s32 	%r104, %r105, %r74;
	add.s32 	%r103, %r103, -8;
	setp.ne.s32 	%p14, %r103, 0;
	@%p14 bra 	$L__BB0_8;

$L__BB0_25:
	setp.eq.s32 	%p15, %r11, 0;
	@%p15 bra 	$L__BB0_45;

	setp.eq.s32 	%p16, %r104, %r2;
	mad.lo.s32 	%r23, %r105, 12, %r31;
	shl.b32 	%r60, %r105, 2;
	add.s32 	%r24, %r33, %r60;
	@%p16 bra 	$L__BB0_28;

	ld.shared.f32 	%f300, [%r23];
	sub.f32 	%f301, %f1, %f300;
	ld.shared.f32 	%f302, [%r23+4];
	sub.f32 	%f303, %f2, %f302;
	ld.shared.f32 	%f304, [%r23+8];
	sub.f32 	%f305, %f3, %f304;
	mul.f32 	%f306, %f303, %f303;
	fma.rn.f32 	%f307, %f301, %f301, %f306;
	fma.rn.f32 	%f308, %f305, %f305, %f307;
	sqrt.rn.f32 	%f309, %f308;
	mov.f32 	%f310, 0f38D1B717;
	max.f32 	%f311, %f309, %f310;
	ld.shared.f32 	%f312, [%r24];
	mul.f32 	%f313, %f4, %f312;
	mul.f32 	%f314, %f311, %f311;
	div.rn.f32 	%f315, %f313, %f314;
	mul.f32 	%f316, %f301, %f315;
	div.rn.f32 	%f317, %f316, %f311;
	add.f32 	%f474, %f474, %f317;
	mul.f32 	%f318, %f303, %f315;
	div.rn.f32 	%f319, %f318, %f311;
	add.f32 	%f475, %f475, %f319;
	mul.f32 	%f320, %f305, %f315;
	div.rn.f32 	%f321, %f320, %f311;
	add.f32 	%f476, %f476, %f321;

$L__BB0_28:
	setp.eq.s32 	%p17, %r11, 1;
	@%p17 bra 	$L__BB0_45;

	shl.b32 	%r76, %r100, 8;
	add.s32 	%r62, %r105, %r76;
	add.s32 	%r63, %r62, 1;
	setp.eq.s32 	%p18, %r63, %r2;
	@%p18 bra 	$L__BB0_31;

	ld.shared.f32 	%f322, [%r23+12];
	sub.f32 	%f323, %f1, %f322;
	ld.shared.f32 	%f324, [%r23+16];
	sub.f32 	%f325, %f2, %f324;
	ld.shared.f32 	%f326, [%r23+20];
	sub.f32 	%f327, %f3, %f326;
	mul.f32 	%f328, %f325, %f325;
	fma.rn.f32 	%f329, %f323, %f323, %f328;
	fma.rn.f32 	%f330, %f327, %f327, %f329;
	sqrt.rn.f32 	%f331, %f330;
	mov.f32 	%f332, 0f38D1B717;
	max.f32 	%f333, %f331, %f332;
	ld.shared.f32 	%f334, [%r24+4];
	mul.f32 	%f335, %f4, %f334;
	mul.f32 	%f336, %f333, %f333;
	div.rn.f32 	%f337, %f335, %f336;
	mul.f32 	%f338, %f323, %f337;
	div.rn.f32 	%f339, %f338, %f333;
	add.f32 	%f474, %f474, %f339;
	mul.f32 	%f340, %f325, %f337;
	div.rn.f32 	%f341, %f340, %f333;
	add.f32 	%f475, %f475, %f341;
	mul.f32 	%f342, %f327, %f337;
	div.rn.f32 	%f343, %f342, %f333;
	add.f32 	%f476, %f476, %f343;

$L__BB0_31:
	setp.eq.s32 	%p19, %r11, 2;
	@%p19 bra 	$L__BB0_45;

	shl.b32 	%r91, %r100, 8;
	add.s32 	%r90, %r105, %r91;
	add.s32 	%r65, %r90, 2;
	setp.eq.s32 	%p20, %r65, %r2;
	@%p20 bra 	$L__BB0_34;

	ld.shared.f32 	%f344, [%r23+24];
	sub.f32 	%f345, %f1, %f344;
	ld.shared.f32 	%f346, [%r23+28];
	sub.f32 	%f347, %f2, %f346;
	ld.shared.f32 	%f348, [%r23+32];
	sub.f32 	%f349, %f3, %f348;
	mul.f32 	%f350, %f347, %f347;
	fma.rn.f32 	%f351, %f345, %f345, %f350;
	fma.rn.f32 	%f352, %f349, %f349, %f351;
	sqrt.rn.f32 	%f353, %f352;
	mov.f32 	%f354, 0f38D1B717;
	max.f32 	%f355, %f353, %f354;
	ld.shared.f32 	%f356, [%r24+8];
	mul.f32 	%f357, %f4, %f356;
	mul.f32 	%f358, %f355, %f355;
	div.rn.f32 	%f359, %f357, %f358;
	mul.f32 	%f360, %f345, %f359;
	div.rn.f32 	%f361, %f360, %f355;
	add.f32 	%f474, %f474, %f361;
	mul.f32 	%f362, %f347, %f359;
	div.rn.f32 	%f363, %f362, %f355;
	add.f32 	%f475, %f475, %f363;
	mul.f32 	%f364, %f349, %f359;
	div.rn.f32 	%f365, %f364, %f355;
	add.f32 	%f476, %f476, %f365;

$L__BB0_34:
	setp.eq.s32 	%p21, %r11, 3;
	@%p21 bra 	$L__BB0_45;

	shl.b32 	%r93, %r100, 8;
	add.s32 	%r92, %r105, %r93;
	add.s32 	%r67, %r92, 3;
	setp.eq.s32 	%p22, %r67, %r2;
	@%p22 bra 	$L__BB0_37;

	ld.shared.f32 	%f366, [%r23+36];
	sub.f32 	%f367, %f1, %f366;
	ld.shared.f32 	%f368, [%r23+40];
	sub.f32 	%f369, %f2, %f368;
	ld.shared.f32 	%f370, [%r23+44];
	sub.f32 	%f371, %f3, %f370;
	mul.f32 	%f372, %f369, %f369;
	fma.rn.f32 	%f373, %f367, %f367, %f372;
	fma.rn.f32 	%f374, %f371, %f371, %f373;
	sqrt.rn.f32 	%f375, %f374;
	mov.f32 	%f376, 0f38D1B717;
	max.f32 	%f377, %f375, %f376;
	ld.shared.f32 	%f378, [%r24+12];
	mul.f32 	%f379, %f4, %f378;
	mul.f32 	%f380, %f377, %f377;
	div.rn.f32 	%f381, %f379, %f380;
	mul.f32 	%f382, %f367, %f381;
	div.rn.f32 	%f383, %f382, %f377;
	add.f32 	%f474, %f474, %f383;
	mul.f32 	%f384, %f369, %f381;
	div.rn.f32 	%f385, %f384, %f377;
	add.f32 	%f475, %f475, %f385;
	mul.f32 	%f386, %f371, %f381;
	div.rn.f32 	%f387, %f386, %f377;
	add.f32 	%f476, %f476, %f387;

$L__BB0_37:
	setp.eq.s32 	%p23, %r11, 4;
	@%p23 bra 	$L__BB0_45;

	shl.b32 	%r95, %r100, 8;
	add.s32 	%r94, %r105, %r95;
	add.s32 	%r69, %r94, 4;
	setp.eq.s32 	%p24, %r69, %r2;
	@%p24 bra 	$L__BB0_40;

	ld.shared.f32 	%f388, [%r23+48];
	sub.f32 	%f389, %f1, %f388;
	ld.shared.f32 	%f390, [%r23+52];
	sub.f32 	%f391, %f2, %f390;
	ld.shared.f32 	%f392, [%r23+56];
	sub.f32 	%f393, %f3, %f392;
	mul.f32 	%f394, %f391, %f391;
	fma.rn.f32 	%f395, %f389, %f389, %f394;
	fma.rn.f32 	%f396, %f393, %f393, %f395;
	sqrt.rn.f32 	%f397, %f396;
	mov.f32 	%f398, 0f38D1B717;
	max.f32 	%f399, %f397, %f398;
	ld.shared.f32 	%f400, [%r24+16];
	mul.f32 	%f401, %f4, %f400;
	mul.f32 	%f402, %f399, %f399;
	div.rn.f32 	%f403, %f401, %f402;
	mul.f32 	%f404, %f389, %f403;
	div.rn.f32 	%f405, %f404, %f399;
	add.f32 	%f474, %f474, %f405;
	mul.f32 	%f406, %f391, %f403;
	div.rn.f32 	%f407, %f406, %f399;
	add.f32 	%f475, %f475, %f407;
	mul.f32 	%f408, %f393, %f403;
	div.rn.f32 	%f409, %f408, %f399;
	add.f32 	%f476, %f476, %f409;

$L__BB0_40:
	setp.eq.s32 	%p25, %r11, 5;
	@%p25 bra 	$L__BB0_45;

	shl.b32 	%r97, %r100, 8;
	add.s32 	%r96, %r105, %r97;
	add.s32 	%r71, %r96, 5;
	setp.eq.s32 	%p26, %r71, %r2;
	@%p26 bra 	$L__BB0_43;

	ld.shared.f32 	%f410, [%r23+60];
	sub.f32 	%f411, %f1, %f410;
	ld.shared.f32 	%f412, [%r23+64];
	sub.f32 	%f413, %f2, %f412;
	ld.shared.f32 	%f414, [%r23+68];
	sub.f32 	%f415, %f3, %f414;
	mul.f32 	%f416, %f413, %f413;
	fma.rn.f32 	%f417, %f411, %f411, %f416;
	fma.rn.f32 	%f418, %f415, %f415, %f417;
	sqrt.rn.f32 	%f419, %f418;
	mov.f32 	%f420, 0f38D1B717;
	max.f32 	%f421, %f419, %f420;
	ld.shared.f32 	%f422, [%r24+20];
	mul.f32 	%f423, %f4, %f422;
	mul.f32 	%f424, %f421, %f421;
	div.rn.f32 	%f425, %f423, %f424;
	mul.f32 	%f426, %f411, %f425;
	div.rn.f32 	%f427, %f426, %f421;
	add.f32 	%f474, %f474, %f427;
	mul.f32 	%f428, %f413, %f425;
	div.rn.f32 	%f429, %f428, %f421;
	add.f32 	%f475, %f475, %f429;
	mul.f32 	%f430, %f415, %f425;
	div.rn.f32 	%f431, %f430, %f421;
	add.f32 	%f476, %f476, %f431;

$L__BB0_43:
	shl.b32 	%r99, %r100, 8;
	add.s32 	%r98, %r105, %r99;
	add.s32 	%r73, %r98, 6;
	setp.eq.s32 	%p27, %r73, %r2;
	setp.eq.s32 	%p28, %r11, 6;
	or.pred  	%p29, %p28, %p27;
	@%p29 bra 	$L__BB0_45;

	ld.shared.f32 	%f432, [%r23+72];
	sub.f32 	%f433, %f1, %f432;
	ld.shared.f32 	%f434, [%r23+76];
	sub.f32 	%f435, %f2, %f434;
	ld.shared.f32 	%f436, [%r23+80];
	sub.f32 	%f437, %f3, %f436;
	mul.f32 	%f438, %f435, %f435;
	fma.rn.f32 	%f439, %f433, %f433, %f438;
	fma.rn.f32 	%f440, %f437, %f437, %f439;
	sqrt.rn.f32 	%f441, %f440;
	mov.f32 	%f442, 0f38D1B717;
	max.f32 	%f443, %f441, %f442;
	ld.shared.f32 	%f444, [%r24+24];
	mul.f32 	%f445, %f4, %f444;
	mul.f32 	%f446, %f443, %f443;
	div.rn.f32 	%f447, %f445, %f446;
	mul.f32 	%f448, %f433, %f447;
	div.rn.f32 	%f449, %f448, %f443;
	add.f32 	%f474, %f474, %f449;
	mul.f32 	%f450, %f435, %f447;
	div.rn.f32 	%f451, %f450, %f443;
	add.f32 	%f475, %f475, %f451;
	mul.f32 	%f452, %f437, %f447;
	div.rn.f32 	%f453, %f452, %f443;
	add.f32 	%f476, %f476, %f453;

$L__BB0_45:
	bar.sync 	0;
	add.s32 	%r100, %r100, 1;
	setp.lt.s32 	%p30, %r100, %r5;
	@%p30 bra 	$L__BB0_3;

$L__BB0_46:
	ld.param.f32 	%f466, [compute_forces_param_6];
	mul.lo.s32 	%r77, %r2, 3;
	cvt.s64.s32 	%rd19, %r77;
	ld.param.u64 	%rd18, [compute_forces_param_1];
	cvta.to.global.u64 	%rd15, %rd18;
	shl.b64 	%rd16, %rd19, 2;
	add.s64 	%rd17, %rd15, %rd16;
	ld.global.f32 	%f454, [%rd17];
	add.f32 	%f455, %f474, %f454;
	mul.f32 	%f456, %f455, %f466;
	ld.global.f32 	%f457, [%rd17+4];
	add.f32 	%f458, %f475, %f457;
	mul.f32 	%f459, %f458, %f466;
	ld.global.f32 	%f460, [%rd17+8];
	add.f32 	%f461, %f476, %f460;
	mul.f32 	%f462, %f461, %f466;
	add.f32 	%f463, %f1, %f456;
	add.f32 	%f464, %f2, %f459;
	add.f32 	%f465, %f3, %f462;
	st.global.f32 	[%rd4], %f463;
	st.global.f32 	[%rd4+4], %f464;
	st.global.f32 	[%rd4+8], %f465;
	st.global.f32 	[%rd17], %f456;
	st.global.f32 	[%rd17+4], %f459;
	st.global.f32 	[%rd17+8], %f462;

$L__BB0_47:
	ret;

}


----
utils/debug_logging.rs
use serde_json::Value;
use std::sync::atomic::{AtomicBool, Ordering};
use log::debug;

// Global debug state
pub static DEBUG_MODE: AtomicBool = AtomicBool::new(false);
pub static WEBSOCKET_DEBUG: AtomicBool = AtomicBool::new(false);
pub static DATA_DEBUG: AtomicBool = AtomicBool::new(false);

// Initialize debug settings
pub fn init_debug_settings(debug_mode: bool, websocket_debug: bool, data_debug: bool) {
    DEBUG_MODE.store(debug_mode, Ordering::SeqCst);
    WEBSOCKET_DEBUG.store(websocket_debug, Ordering::SeqCst);
    DATA_DEBUG.store(data_debug, Ordering::SeqCst);
}

// Data types for debug logging
#[derive(Debug)]
pub enum WsDebugData<'a> {
    Binary {
        data: &'a [u8],
        is_initial: bool,
        node_count: usize,
    },
    Json(Value),
    Text(String),
}

impl<'a> std::fmt::Display for WsDebugData<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            WsDebugData::Binary { data, is_initial, node_count } => {
                write!(f, "Binary message: {} bytes, initial: {}, nodes: {}", 
                    data.len(), is_initial, node_count)
            },
            WsDebugData::Json(value) => {
                write!(f, "JSON message: {}", value)
            },
            WsDebugData::Text(text) => {
                write!(f, "Text message: {}", text)
            }
        }
    }
}

// Logging macros with different levels
#[macro_export]
macro_rules! log_error {
    ($($arg:tt)*) => {{
        use log::error;
        error!($($arg)*);
    }}
}

#[macro_export]
macro_rules! log_warn {
    ($($arg:tt)*) => {{
        use log::warn;
        if $crate::utils::debug_logging::DEBUG_MODE.load(std::sync::atomic::Ordering::SeqCst) {
            warn!($($arg)*);
        }
    }}
}

#[macro_export]
macro_rules! log_websocket {
    ($($arg:tt)*) => {{
        use log::debug;
        if $crate::utils::debug_logging::WEBSOCKET_DEBUG.load(std::sync::atomic::Ordering::SeqCst) {
            debug!("[WS] {}", format!($($arg)*));
        }
    }}
}

#[macro_export]
macro_rules! log_data {
    ($($arg:tt)*) => {{
        use log::debug;
        if $crate::utils::debug_logging::DATA_DEBUG.load(std::sync::atomic::Ordering::SeqCst) {
            debug!("[DATA] {}", format!($($arg)*));
        }
    }}
}

// Helper functions for common debug scenarios
pub fn log_ws_message(data: WsDebugData) {
    if WEBSOCKET_DEBUG.load(Ordering::SeqCst) {
        match data {
            WsDebugData::Binary { data, is_initial, node_count } => {
                debug!("[WS] Binary message: {} bytes, initial: {}, nodes: {}", 
                    data.len(), is_initial, node_count);
            },
            WsDebugData::Json(value) => {
                debug!("[WS] JSON message: {}", value);
            },
            WsDebugData::Text(text) => {
                debug!("[WS] Text message: {}", text);
            }
        }
    }
}

pub fn log_data_operation(operation: &str, details: &str) {
    if DATA_DEBUG.load(Ordering::SeqCst) {
        debug!("[DATA] {} - {}", operation, details);
    }
}

// Test that debug settings are working
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_debug_settings() {
        init_debug_settings(true, true, false);
        assert!(DEBUG_MODE.load(Ordering::SeqCst));
        assert!(WEBSOCKET_DEBUG.load(Ordering::SeqCst));
        assert!(!DATA_DEBUG.load(Ordering::SeqCst));
    }
}

----
utils/tests/socket_flow_tests.rs
use std::sync::Arc;
use tokio::sync::RwLock;
use crate::utils::socket_flow_messages::{Node, NodeData};
use crate::models::edge::Edge;
use crate::config::Settings;
use crate::models::graph::GraphData;
use crate::utils::socket_flow_messages::{ServerMessage, ClientMessage, BinaryNodeData, UpdatePositionsMessage};
use crate::AppState;

#[tokio::test]
async fn test_binary_node_data_conversion() {
    // Create test node data
    let node_data = NodeData {
        position: [1.0, 2.0, 3.0],
        velocity: [0.1, 0.2, 0.3],
        mass: 127,
        flags: 0,
        padding: [0; 2],
    };

    // Create test node
    let node = Node {
        id: "test_node".to_string(),
        label: "Test Node".to_string(),
        data: node_data,
        metadata: Default::default(),
        file_size: 0,
        node_type: None,
        size: None,
        color: None,
        weight: None,
        group: None,
        user_data: None,
    };

    // Convert to BinaryNodeData
    let binary_data = BinaryNodeData::from_node_data(&node.id, &node.data);

    // Verify conversion
    assert_eq!(binary_data.node_id, "test_node");
    assert_eq!(binary_data.data.position, [1.0, 2.0, 3.0]);
    assert_eq!(binary_data.data.velocity, [0.1, 0.2, 0.3]);
    assert_eq!(binary_data.data.mass, 127);
}

#[tokio::test]
async fn test_update_positions_message() {
    // Create test nodes
    let node1_data = NodeData {
        position: [1.0, 2.0, 3.0],
        velocity: [0.1, 0.2, 0.3],
        mass: 127,
        flags: 0,
        padding: [0; 2],
    };

    let node2_data = NodeData {
        position: [4.0, 5.0, 6.0],
        velocity: [0.4, 0.5, 0.6],
        mass: 127,
        flags: 0,
        padding: [0; 2],
    };

    let nodes = vec![
        Node {
            id: "node1".to_string(),
            label: "Node 1".to_string(),
            data: node1_data,
            metadata: Default::default(),
            file_size: 0,
            node_type: None,
            size: None,
            color: None,
            weight: None,
            group: None,
            user_data: None,
        },
        Node {
            id: "node2".to_string(),
            label: "Node 2".to_string(),
            data: node2_data,
            metadata: Default::default(),
            file_size: 0,
            node_type: None,
            size: None,
            color: None,
            weight: None,
            group: None,
            user_data: None,
        },
    ];

    // Create update message
    let binary_nodes: Vec<BinaryNodeData> = nodes.iter()
        .map(|node| BinaryNodeData::from_node_data(&node.id, &node.data))
        .collect();

    let update_msg = UpdatePositionsMessage {
        nodes: binary_nodes,
    };

    // Verify message
    assert_eq!(update_msg.nodes.len(), 2);
    assert_eq!(update_msg.nodes[0].node_id, "node1");
    assert_eq!(update_msg.nodes[0].data.position, [1.0, 2.0, 3.0]);
    assert_eq!(update_msg.nodes[1].node_id, "node2");
    assert_eq!(update_msg.nodes[1].data.position, [4.0, 5.0, 6.0]);
}

----
models/position_update.rs
use serde::{Deserialize, Serialize};
use crate::utils::socket_flow_messages::NodeData;

#[derive(Debug, Serialize, Deserialize)]
pub struct PositionUpdate {
    pub node_id: String,
    pub data: NodeData,
}

impl PositionUpdate {
    pub fn new(node_id: String, data: NodeData) -> Self {
        Self { node_id, data }
    }
}

----
models/graph.rs
use crate::utils::socket_flow_messages::Node;
use super::edge::Edge;
use super::metadata::MetadataStore;
use serde::{Deserialize, Serialize};

/// Represents the graph data structure containing nodes, edges, and metadata.
/// All fields use camelCase serialization for client compatibility.
#[derive(Default, Serialize, Deserialize, Clone, Debug)]
#[serde(rename_all = "camelCase")]
pub struct GraphData {
    /// List of nodes in the graph.
    pub nodes: Vec<Node>,
    /// List of edges connecting the nodes.
    pub edges: Vec<Edge>,
    /// Metadata associated with the graph, using camelCase keys.
    pub metadata: MetadataStore,
}

impl GraphData {
    pub fn new() -> Self {
        Self {
            nodes: Vec::new(),
            edges: Vec::new(),
            metadata: MetadataStore::new(),
        }
    }
}

----
models/node.rs
// Node and NodeData have been moved to utils/socket_flow_messages.rs
// This file is kept as a placeholder to maintain module structure
// but its contents have been consolidated as part of the Vector3 standardization

----
models/mod.rs
// models/mod.rs
pub mod graph;
pub mod node;
pub mod edge;
pub mod metadata;
pub mod simulation_params;
pub mod position_update;  // Add position_update module

----
models/metadata.rs
use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

/// Stores metadata about a processed file.
/// All fields use camelCase serialization for client compatibility.
#[derive(Debug, Clone, Serialize, Deserialize, Default)]
#[serde(rename_all = "camelCase")]
pub struct Metadata {
    #[serde(default)]
    pub file_name: String,
    #[serde(default)]
    pub file_size: usize,
    #[serde(default)]
    pub node_size: f64,
    #[serde(default)]
    pub hyperlink_count: usize,
    #[serde(default)]
    pub sha1: String,
    #[serde(default = "Utc::now")]
    pub last_modified: DateTime<Utc>,
    #[serde(default)]
    pub perplexity_link: String,
    #[serde(default)]
    pub last_perplexity_process: Option<DateTime<Utc>>,
    #[serde(default)]
    pub topic_counts: HashMap<String, usize>,
}

/// Type alias for metadata storage with camelCase keys
pub type MetadataStore = HashMap<String, Metadata>;

// Implement helper methods directly on HashMap<String, Metadata>
pub trait MetadataOps {
    fn validate_files(&self, markdown_dir: &str) -> bool;
}

impl MetadataOps for MetadataStore {
    fn validate_files(&self, markdown_dir: &str) -> bool {
        if self.is_empty() {
            return false;
        }

        // Check if the markdown files referenced in metadata actually exist
        for filename in self.keys() {
            let file_path = format!("{}/{}", markdown_dir, filename);
            if !std::path::Path::new(&file_path).exists() {
                return false;
            }
        }
        
        true
    }
}

----
models/edge.rs
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

/// Edge structure representing connections between nodes
#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "camelCase")]
pub struct Edge {
    pub source: String,
    pub target: String,
    pub weight: f32,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub edge_type: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub metadata: Option<HashMap<String, String>>,
}

impl Edge {
    pub fn new(source: String, target: String, weight: f32) -> Self {
        Self {
            source,
            target,
            weight,
            edge_type: None,
            metadata: None,
        }
    }
}

----
models/simulation_params.rs
use serde::{Deserialize, Serialize};
use bytemuck::{Pod, Zeroable};

#[derive(Debug, Clone, Copy, Serialize, Deserialize, PartialEq)]
#[serde(rename_all = "camelCase")]
pub enum SimulationMode {
    Remote,  // GPU-accelerated remote computation
    GPU,     // Local GPU computation
    Local,   // CPU-based computation
}

impl Default for SimulationMode {
    fn default() -> Self {
        SimulationMode::Remote
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize, PartialEq)]
#[serde(rename_all = "camelCase")]
pub enum SimulationPhase {
    Initial,    // Heavy computation for initial layout
    Dynamic,    // Lighter computation for dynamic updates
    Finalize,   // Final positioning and cleanup
}

impl Default for SimulationPhase {
    fn default() -> Self {
        SimulationPhase::Initial
    }
}

// GPU-compatible simulation parameters
#[repr(C)]
#[derive(Default, Clone, Copy, Pod, Zeroable, Debug)]
pub struct GPUSimulationParams {
    pub iterations: u32,
    pub spring_length: f32,
    pub spring_strength: f32,
    pub repulsion: f32,
    pub attraction: f32,
    pub damping: f32,
    pub time_step: f32,
    pub padding: u32,  // For alignment
}

#[derive(Default, Serialize, Deserialize, Clone, Debug)]
#[serde(rename_all = "camelCase")]
pub struct SimulationParams {
    pub iterations: u32,           // Range: 1-500, Default: varies by phase
    pub spring_length: f32,        // Range: 10-500, Default: 100
    pub spring_strength: f32,      // Range: 0.1-10, Default: 0.5
    pub repulsion: f32,           // Range: 1-1000, Default: 100
    pub attraction: f32,          // Range: 0.1-10, Default: 1.0
    pub damping: f32,             // Range: 0-1, Default: 0.5
    pub time_step: f32,           // Range: 0.01-1, Default: 0.2 (5fps)
    pub phase: SimulationPhase,   // Current simulation phase
    pub mode: SimulationMode,     // Computation mode
}

impl SimulationParams {
    pub fn new() -> Self {
        Self {
            iterations: 100,
            spring_length: 100.0,
            spring_strength: 0.5,
            repulsion: 100.0,
            attraction: 1.0,
            damping: 0.5,
            time_step: 0.2,        // Updated to 5fps
            phase: SimulationPhase::Initial,
            mode: SimulationMode::Remote,
        }
    }

    pub fn with_phase(phase: SimulationPhase) -> Self {
        match phase {
            SimulationPhase::Initial => Self {
                iterations: 300,           // Reduced from 500
                spring_length: 100.0,
                spring_strength: 0.5,      // Reduced from 1.0
                repulsion: 100.0,          // Reduced from 200.0
                attraction: 1.0,           // Reduced from 2.0
                damping: 0.95,            // Increased from 0.9
                time_step: 0.2,           // Updated to 5fps
                phase,
                mode: SimulationMode::Remote,
            },
            SimulationPhase::Dynamic => Self {
                iterations: 50,
                spring_length: 100.0,
                spring_strength: 0.5,
                repulsion: 100.0,
                attraction: 1.0,
                damping: 0.5,
                time_step: 0.2,           // Updated to 5fps
                phase,
                mode: SimulationMode::Remote,
            },
            SimulationPhase::Finalize => Self {
                iterations: 200,
                spring_length: 100.0,
                spring_strength: 0.1,
                repulsion: 50.0,
                attraction: 0.5,
                damping: 0.95,
                time_step: 0.2,           // Updated to 5fps
                phase,
                mode: SimulationMode::Remote,
            },
        }
    }

    // Convert to GPU-compatible parameters
    pub fn to_gpu_params(&self) -> GPUSimulationParams {
        GPUSimulationParams {
            iterations: self.iterations,
            spring_length: self.spring_length,
            spring_strength: self.spring_strength,
            repulsion: self.repulsion,
            attraction: self.attraction,
            damping: self.damping,
            time_step: self.time_step,
            padding: 0,
        }
    }
}

----
handlers/file_handler.rs
use actix_web::{web, Error as ActixError, HttpResponse};
use serde_json::json;
use log::{info, debug, error};

use crate::AppState;
use crate::services::file_service::{FileService, MARKDOWN_DIR};
use crate::services::graph_service::GraphService;

pub async fn fetch_and_process_files(state: web::Data<AppState>) -> HttpResponse {
    info!("Initiating optimized file fetch and processing");

    // Load or create metadata
    let mut metadata_store = match FileService::load_or_create_metadata() {
        Ok(store) => store,
        Err(e) => {
            error!("Failed to load or create metadata: {}", e);
            return HttpResponse::InternalServerError().json(json!({
                "status": "error",
                "message": format!("Failed to initialize metadata: {}", e)
            }));
        }
    };
    
    // Process files with optimized approach
    match FileService::fetch_and_process_files(&*state.github_service, state.settings.clone(), &mut metadata_store).await {
        Ok(processed_files) => {
            let file_names: Vec<String> = processed_files.iter()
                .map(|pf| pf.file_name.clone())
                .collect();

            info!("Successfully processed {} public markdown files", processed_files.len());

            // Update metadata store
            {
                let mut metadata = state.metadata.write().await;
                for processed_file in &processed_files {
                    metadata_store.insert(processed_file.file_name.clone(), processed_file.metadata.clone());
                    debug!("Updated metadata for: {}", processed_file.file_name);
                }
                *metadata = metadata_store.clone();
            }

            // Save the updated metadata
            if let Err(e) = FileService::save_metadata(&metadata_store) {
                error!("Failed to save metadata: {}", e);
                return HttpResponse::InternalServerError().json(json!({
                    "status": "error",
                    "message": format!("Failed to save metadata: {}", e)
                }));
            }

            // Update graph with processed files
            match GraphService::build_graph(&state).await {
                Ok(graph_data) => {
                    let mut graph = state.graph_service.graph_data.write().await;
                    *graph = graph_data.clone();
                    info!("Graph data structure updated successfully");

                    // Send binary position update to clients
                    if let Some(gpu) = &state.gpu_compute {
                        if let Ok(_nodes) = gpu.read().await.get_node_data() {
                            // Note: Socket-flow server will handle broadcasting
                            debug!("GPU node positions updated successfully");
                        } else {
                            error!("Failed to get node positions from GPU");
                        }
                    }

                    HttpResponse::Ok().json(json!({
                        "status": "success",
                        "processed_files": file_names
                    }))
                },
                Err(e) => {
                    error!("Failed to build graph data: {}", e);
                    HttpResponse::InternalServerError().json(json!({
                        "status": "error",
                        "message": format!("Failed to build graph data: {}", e)
                    }))
                }
            }
        },
        Err(e) => {
            error!("Error processing files: {}", e);
            HttpResponse::InternalServerError().json(json!({
                "status": "error",
                "message": format!("Error processing files: {}", e)
            }))
        }
    }
}

pub async fn get_file_content(_state: web::Data<AppState>, file_name: web::Path<String>) -> HttpResponse {
    // Read file directly from disk
    let file_path = format!("{}/{}", MARKDOWN_DIR, file_name);
    match std::fs::read_to_string(&file_path) {
        Ok(content) => HttpResponse::Ok().body(content),
        Err(e) => {
            error!("Failed to read file {}: {}", file_name, e);
            HttpResponse::NotFound().json(json!({
                "status": "error",
                "message": format!("File not found or unreadable: {}", file_name)
            }))
        }
    }
}

pub async fn refresh_graph(state: web::Data<AppState>) -> HttpResponse {
    info!("Manually triggering graph refresh");

    // Load metadata from file
    let metadata_store = match FileService::load_or_create_metadata() {
        Ok(store) => store,
        Err(e) => {
            error!("Failed to load metadata: {}", e);
            return HttpResponse::InternalServerError().json(json!({
                "status": "error",
                "message": format!("Failed to load metadata: {}", e)
            }));
        }
    };

    // Build graph directly from metadata
    match GraphService::build_graph_from_metadata(&metadata_store).await {
        Ok(graph_data) => {
            let mut graph = state.graph_service.graph_data.write().await;
            *graph = graph_data.clone();
            info!("Graph data structure refreshed successfully");

            // Send binary position update to clients
            if let Some(gpu) = &state.gpu_compute {
                if let Ok(_nodes) = gpu.read().await.get_node_data() {
                    // Note: Socket-flow server will handle broadcasting
                    debug!("GPU node positions updated successfully");
                } else {
                    error!("Failed to get node positions from GPU");
                }
            }

            HttpResponse::Ok().json(json!({
                "status": "success",
                "message": "Graph refreshed successfully"
            }))
        },
        Err(e) => {
            error!("Failed to refresh graph data: {}", e);
            HttpResponse::InternalServerError().json(json!({
                "status": "error",
                "message": format!("Failed to refresh graph data: {}", e)
            }))
        }
    }
}

pub async fn update_graph(state: web::Data<AppState>) -> Result<HttpResponse, ActixError> {
    // Load metadata from file
    let metadata_store = match FileService::load_or_create_metadata() {
        Ok(store) => store,
        Err(e) => {
            error!("Failed to load metadata: {}", e);
            return Ok(HttpResponse::InternalServerError().json(json!({
                "status": "error",
                "message": format!("Failed to load metadata: {}", e)
            })));
        }
    };

    // Build graph directly from metadata
    match GraphService::build_graph_from_metadata(&metadata_store).await {
        Ok(graph) => {
            // Update graph data
            *state.graph_service.graph_data.write().await = graph.clone();
            
            // Send binary position update to clients
            if let Some(gpu) = &state.gpu_compute {
                if let Ok(_nodes) = gpu.read().await.get_node_data() {
                    // Note: Socket-flow server will handle broadcasting
                    debug!("GPU node positions updated successfully");
                } else {
                    error!("Failed to get node positions from GPU");
                }
            }
            
            Ok(HttpResponse::Ok().json(json!({
                "status": "success",
                "message": "Graph updated successfully"
            })))
        },
        Err(e) => {
            error!("Failed to build graph: {}", e);
            Ok(HttpResponse::InternalServerError().json(json!({
                "status": "error",
                "message": format!("Failed to build graph: {}", e)
            })))
        }
    }
}

----
handlers/mod.rs
pub mod file_handler;
pub mod graph_handler;
pub mod perplexity_handler;
pub mod ragflow_handler;
pub mod visualization_handler;

----
handlers/visualization_handler.rs
use crate::config::Settings;
use actix_web::{web, HttpResponse};
use std::sync::Arc;
use tokio::sync::RwLock;
use serde_json::Value;
use std::fs;
use std::path::PathBuf;
use toml;

// GET /api/visualization/settings
pub async fn get_visualization_settings(
    settings: web::Data<Arc<RwLock<Settings>>>,
) -> HttpResponse {
    let settings_guard = settings.read().await;
    
    // Break down JSON construction into parts
    let node_settings = serde_json::json!({
        "nodeSize": settings_guard.nodes.base_size,
        "nodeColor": settings_guard.nodes.base_color,
        "nodeOpacity": settings_guard.nodes.opacity,
        "metalness": settings_guard.nodes.metalness,
        "roughness": settings_guard.nodes.roughness,
        "clearcoat": settings_guard.nodes.clearcoat,
        "enableInstancing": settings_guard.nodes.enable_instancing,
        "materialType": settings_guard.nodes.material_type,
        "sizeRange": settings_guard.nodes.size_range,
        "sizeByConnections": settings_guard.nodes.size_by_connections,
        "highlightColor": settings_guard.nodes.highlight_color,
        "highlightDuration": settings_guard.nodes.highlight_duration,
        "enableHoverEffect": settings_guard.nodes.enable_hover_effect
    });

    let edge_settings = serde_json::json!({
        "edgeWidth": settings_guard.edges.base_width,
        "edgeColor": settings_guard.edges.color,
        "edgeOpacity": settings_guard.edges.opacity,
        "edgeWidthRange": settings_guard.edges.width_range
    });

    let physics_settings = serde_json::json!({
        "physicsEnabled": settings_guard.physics.enabled,
        "attractionStrength": settings_guard.physics.attraction_strength,
        "repulsionStrength": settings_guard.physics.repulsion_strength,
        "springStrength": settings_guard.physics.spring_strength,
        "damping": settings_guard.physics.damping,
        "maxVelocity": settings_guard.physics.max_velocity,
        "collisionRadius": settings_guard.physics.collision_radius,
        "boundsSize": settings_guard.physics.bounds_size,
        "enableBounds": settings_guard.physics.enable_bounds,
        "iterations": settings_guard.physics.iterations
    });

    let rendering_settings = serde_json::json!({
        "ambientLightIntensity": settings_guard.rendering.ambient_light_intensity,
        "directionalLightIntensity": settings_guard.rendering.directional_light_intensity,
        "environmentIntensity": settings_guard.rendering.environment_intensity,
        "enableAmbientOcclusion": settings_guard.rendering.enable_ambient_occlusion,
        "enableAntialiasing": settings_guard.rendering.enable_antialiasing,
        "enableShadows": settings_guard.rendering.enable_shadows,
        "backgroundColor": settings_guard.rendering.background_color
    });

    let bloom_settings = serde_json::json!({
        "bloomEnabled": settings_guard.bloom.enabled,
        "nodeBloomStrength": settings_guard.bloom.node_bloom_strength,
        "edgeBloomStrength": settings_guard.bloom.edge_bloom_strength,
        "environmentBloomStrength": settings_guard.bloom.environment_bloom_strength
    });

    let animation_settings = serde_json::json!({
        "enableNodeAnimations": settings_guard.animations.enable_node_animations,
        "selectionWaveEnabled": settings_guard.animations.selection_wave_enabled,
        "pulseEnabled": settings_guard.animations.pulse_enabled,
        "rippleEnabled": settings_guard.animations.ripple_enabled,
        "edgeAnimationEnabled": settings_guard.animations.edge_animation_enabled,
        "flowParticlesEnabled": settings_guard.animations.flow_particles_enabled
    });

    let label_settings = serde_json::json!({
        "enableLabels": settings_guard.labels.enable_labels,
        "textColor": settings_guard.labels.text_color
    });

    let ar_settings = serde_json::json!({
        "enablePlaneDetection": settings_guard.ar.enable_plane_detection,
        "enableHandTracking": settings_guard.ar.enable_hand_tracking,
        "enableHaptics": settings_guard.ar.enable_haptics
    });

    // Combine all settings
    let mut settings_map = serde_json::Map::new();
    if let Some(obj) = node_settings.as_object() {
        settings_map.extend(obj.clone());
    }
    if let Some(obj) = edge_settings.as_object() {
        settings_map.extend(obj.clone());
    }
    if let Some(obj) = physics_settings.as_object() {
        settings_map.extend(obj.clone());
    }
    if let Some(obj) = rendering_settings.as_object() {
        settings_map.extend(obj.clone());
    }
    if let Some(obj) = bloom_settings.as_object() {
        settings_map.extend(obj.clone());
    }
    if let Some(obj) = animation_settings.as_object() {
        settings_map.extend(obj.clone());
    }
    if let Some(obj) = label_settings.as_object() {
        settings_map.extend(obj.clone());
    }
    if let Some(obj) = ar_settings.as_object() {
        settings_map.extend(obj.clone());
    }

    HttpResponse::Ok().json(serde_json::Value::Object(settings_map))
}

// PUT /api/visualization/settings
pub async fn update_visualization_settings(
    settings: web::Data<Arc<RwLock<Settings>>>,
    new_settings: web::Json<serde_json::Value>,
) -> HttpResponse {
    // Clone the settings Data before borrowing
    let settings_clone = settings.clone();
    let mut settings_guard = settings.write().await;
    
    if let Some(obj) = new_settings.as_object() {
        // Update node settings
        if let Some(size) = obj.get("nodeSize").and_then(|v| v.as_f64()) {
            settings_guard.nodes.base_size = size as f32;
        }
        if let Some(color) = obj.get("nodeColor").and_then(|v| v.as_str()) {
            settings_guard.nodes.base_color = color.to_string();
        }
        if let Some(opacity) = obj.get("nodeOpacity").and_then(|v| v.as_f64()) {
            settings_guard.nodes.opacity = opacity as f32;
        }
        if let Some(metalness) = obj.get("metalness").and_then(|v| v.as_f64()) {
            settings_guard.nodes.metalness = metalness as f32;
        }
        if let Some(roughness) = obj.get("roughness").and_then(|v| v.as_f64()) {
            settings_guard.nodes.roughness = roughness as f32;
        }
        if let Some(clearcoat) = obj.get("clearcoat").and_then(|v| v.as_f64()) {
            settings_guard.nodes.clearcoat = clearcoat as f32;
        }
        if let Some(enable_instancing) = obj.get("enableInstancing").and_then(|v| v.as_bool()) {
            settings_guard.nodes.enable_instancing = enable_instancing;
        }
        if let Some(material_type) = obj.get("materialType").and_then(|v| v.as_str()) {
            settings_guard.nodes.material_type = material_type.to_string();
        }
        if let Some(size_range) = obj.get("sizeRange").and_then(|v| v.as_array()) {
            settings_guard.nodes.size_range = size_range.iter()
                .filter_map(|x| x.as_f64())
                .map(|x| x as f32)
                .collect();
        }
        if let Some(size_by_connections) = obj.get("sizeByConnections").and_then(|v| v.as_bool()) {
            settings_guard.nodes.size_by_connections = size_by_connections;
        }
        if let Some(highlight_color) = obj.get("highlightColor").and_then(|v| v.as_str()) {
            settings_guard.nodes.highlight_color = highlight_color.to_string();
        }
        if let Some(highlight_duration) = obj.get("highlightDuration").and_then(|v| v.as_f64()) {
            settings_guard.nodes.highlight_duration = highlight_duration as u32;
        }
        if let Some(enable_hover_effect) = obj.get("enableHoverEffect").and_then(|v| v.as_bool()) {
            settings_guard.nodes.enable_hover_effect = enable_hover_effect;
        }

        // Update edge settings
        if let Some(base_width) = obj.get("edgeWidth").and_then(|v| v.as_f64()) {
            settings_guard.edges.base_width = base_width as f32;
        }
        if let Some(color) = obj.get("edgeColor").and_then(|v| v.as_str()) {
            settings_guard.edges.color = color.to_string();
        }
        if let Some(opacity) = obj.get("edgeOpacity").and_then(|v| v.as_f64()) {
            settings_guard.edges.opacity = opacity as f32;
        }
        if let Some(width_range) = obj.get("edgeWidthRange").and_then(|v| v.as_array()) {
            settings_guard.edges.width_range = width_range.iter()
                .filter_map(|x| x.as_f64())
                .map(|x| x as f32)
                .collect();
        }

        // Update physics settings
        if let Some(enabled) = obj.get("physicsEnabled").and_then(|v| v.as_bool()) {
            settings_guard.physics.enabled = enabled;
        }
        if let Some(attraction_strength) = obj.get("attractionStrength").and_then(|v| v.as_f64()) {
            settings_guard.physics.attraction_strength = attraction_strength as f32;
        }
        if let Some(repulsion_strength) = obj.get("repulsionStrength").and_then(|v| v.as_f64()) {
            settings_guard.physics.repulsion_strength = repulsion_strength as f32;
        }
        if let Some(spring_strength) = obj.get("springStrength").and_then(|v| v.as_f64()) {
            settings_guard.physics.spring_strength = spring_strength as f32;
        }
        if let Some(damping) = obj.get("damping").and_then(|v| v.as_f64()) {
            settings_guard.physics.damping = damping as f32;
        }
        if let Some(max_velocity) = obj.get("maxVelocity").and_then(|v| v.as_f64()) {
            settings_guard.physics.max_velocity = max_velocity as f32;
        }
        if let Some(collision_radius) = obj.get("collisionRadius").and_then(|v| v.as_f64()) {
            settings_guard.physics.collision_radius = collision_radius as f32;
        }
        if let Some(bounds_size) = obj.get("boundsSize").and_then(|v| v.as_f64()) {
            settings_guard.physics.bounds_size = bounds_size as f32;
        }
        if let Some(enable_bounds) = obj.get("enableBounds").and_then(|v| v.as_bool()) {
            settings_guard.physics.enable_bounds = enable_bounds;
        }
        if let Some(iterations) = obj.get("iterations").and_then(|v| v.as_f64()) {
            settings_guard.physics.iterations = iterations as u32;
        }

        // Update rendering settings
        if let Some(ambient_light_intensity) = obj.get("ambientLightIntensity").and_then(|v| v.as_f64()) {
            settings_guard.rendering.ambient_light_intensity = ambient_light_intensity as f32;
        }
        if let Some(directional_light_intensity) = obj.get("directionalLightIntensity").and_then(|v| v.as_f64()) {
            settings_guard.rendering.directional_light_intensity = directional_light_intensity as f32;
        }
        if let Some(environment_intensity) = obj.get("environmentIntensity").and_then(|v| v.as_f64()) {
            settings_guard.rendering.environment_intensity = environment_intensity as f32;
        }
        if let Some(enable_ambient_occlusion) = obj.get("enableAmbientOcclusion").and_then(|v| v.as_bool()) {
            settings_guard.rendering.enable_ambient_occlusion = enable_ambient_occlusion;
        }
        if let Some(enable_antialiasing) = obj.get("enableAntialiasing").and_then(|v| v.as_bool()) {
            settings_guard.rendering.enable_antialiasing = enable_antialiasing;
        }
        if let Some(enable_shadows) = obj.get("enableShadows").and_then(|v| v.as_bool()) {
            settings_guard.rendering.enable_shadows = enable_shadows;
        }
        if let Some(background_color) = obj.get("backgroundColor").and_then(|v| v.as_str()) {
            settings_guard.rendering.background_color = background_color.to_string();
        }

        // Update bloom settings
        if let Some(enabled) = obj.get("bloomEnabled").and_then(|v| v.as_bool()) {
            settings_guard.bloom.enabled = enabled;
        }
        if let Some(node_bloom_strength) = obj.get("nodeBloomStrength").and_then(|v| v.as_f64()) {
            settings_guard.bloom.node_bloom_strength = node_bloom_strength as f32;
        }
        if let Some(edge_bloom_strength) = obj.get("edgeBloomStrength").and_then(|v| v.as_f64()) {
            settings_guard.bloom.edge_bloom_strength = edge_bloom_strength as f32;
        }
        if let Some(environment_bloom_strength) = obj.get("environmentBloomStrength").and_then(|v| v.as_f64()) {
            settings_guard.bloom.environment_bloom_strength = environment_bloom_strength as f32;
        }

        // Update animation settings
        if let Some(enable_node_animations) = obj.get("enableNodeAnimations").and_then(|v| v.as_bool()) {
            settings_guard.animations.enable_node_animations = enable_node_animations;
        }
        if let Some(selection_wave_enabled) = obj.get("selectionWaveEnabled").and_then(|v| v.as_bool()) {
            settings_guard.animations.selection_wave_enabled = selection_wave_enabled;
        }
        if let Some(pulse_enabled) = obj.get("pulseEnabled").and_then(|v| v.as_bool()) {
            settings_guard.animations.pulse_enabled = pulse_enabled;
        }
        if let Some(ripple_enabled) = obj.get("rippleEnabled").and_then(|v| v.as_bool()) {
            settings_guard.animations.ripple_enabled = ripple_enabled;
        }
        if let Some(edge_animation_enabled) = obj.get("edgeAnimationEnabled").and_then(|v| v.as_bool()) {
            settings_guard.animations.edge_animation_enabled = edge_animation_enabled;
        }
        if let Some(flow_particles_enabled) = obj.get("flowParticlesEnabled").and_then(|v| v.as_bool()) {
            settings_guard.animations.flow_particles_enabled = flow_particles_enabled;
        }

        // Update label settings
        if let Some(enable_labels) = obj.get("enableLabels").and_then(|v| v.as_bool()) {
            settings_guard.labels.enable_labels = enable_labels;
        }
        if let Some(text_color) = obj.get("textColor").and_then(|v| v.as_str()) {
            settings_guard.labels.text_color = text_color.to_string();
        }

        // Update AR settings
        if let Some(enable_plane_detection) = obj.get("enablePlaneDetection").and_then(|v| v.as_bool()) {
            settings_guard.ar.enable_plane_detection = enable_plane_detection;
        }
        if let Some(enable_hand_tracking) = obj.get("enableHandTracking").and_then(|v| v.as_bool()) {
            settings_guard.ar.enable_hand_tracking = enable_hand_tracking;
        }
        if let Some(enable_haptics) = obj.get("enableHaptics").and_then(|v| v.as_bool()) {
            settings_guard.ar.enable_haptics = enable_haptics;
        }

        // Save settings to file
        if let Err(e) = save_settings_to_file(&settings_guard) {
            eprintln!("Failed to save settings to file: {}", e);
            return HttpResponse::InternalServerError().json(serde_json::json!({
                "error": "Failed to save settings to file"
            }));
        }

        // Drop the write guard before returning the current settings
        drop(settings_guard);
        
        // Return the current settings using the cloned Data
        get_visualization_settings(settings_clone).await
    } else {
        HttpResponse::BadRequest().json(serde_json::json!({
            "error": "Invalid settings format"
        }))
    }
}

fn update_settings(settings: &mut Settings, new_settings: Value) {
    if let Some(obj) = new_settings.as_object() {
        for (section, values) in obj {
            match section.as_str() {
                "rendering" => if let Some(v) = values.as_object() {
                    update_section(&mut settings.rendering, v);
                },
                "nodes" => if let Some(v) = values.as_object() {
                    update_section(&mut settings.nodes, v);
                },
                "edges" => if let Some(v) = values.as_object() {
                    update_section(&mut settings.edges, v);
                },
                "labels" => if let Some(v) = values.as_object() {
                    update_section(&mut settings.labels, v);
                },
                "bloom" => if let Some(v) = values.as_object() {
                    update_section(&mut settings.bloom, v);
                },
                "ar" => if let Some(v) = values.as_object() {
                    update_section(&mut settings.ar, v);
                },
                "physics" => if let Some(v) = values.as_object() {
                    update_section(&mut settings.physics, v);
                },
                "animations" => if let Some(v) = values.as_object() {
                    update_section(&mut settings.animations, v);
                },
                "audio" => if let Some(v) = values.as_object() {
                    update_section(&mut settings.audio, v);
                },
                _ => {}
            }
        }
    }
}

fn update_section<T: serde::de::DeserializeOwned + serde::Serialize>(
    section: &mut T,
    values: &serde_json::Map<String, Value>
) {
    // Create a reference to section to avoid moving it
    let current = serde_json::to_value(&*section).unwrap_or(Value::Null);
    if let Value::Object(mut current_map) = current {
        // Update only provided values
        for (key, value) in values {
            current_map.insert(key.clone(), value.clone());
        }
        // Convert back to the original type
        if let Ok(updated) = serde_json::from_value(Value::Object(current_map)) {
            *section = updated;
        }
    }
}

fn save_settings_to_file(settings: &Settings) -> std::io::Result<()> {
    // Convert settings to TOML
    let toml_string = toml::to_string_pretty(&settings)
        .map_err(|e| std::io::Error::new(std::io::ErrorKind::Other, e))?;
    
    // Get the absolute path to settings.toml
    let settings_path = PathBuf::from(std::env::current_dir()?)
        .join("settings.toml");
    
    // Write to settings.toml with absolute path
    fs::write(&settings_path, toml_string)?;
    
    log::info!("Settings saved to: {:?}", settings_path);
    
    Ok(())
}

// Register the handlers with the Actix web app
pub fn config(cfg: &mut web::ServiceConfig) {
    cfg.route("/visualization/settings", web::get().to(get_visualization_settings))
       .route("/visualization/settings", web::put().to(update_visualization_settings));
}

----
handlers/graph_handler.rs
use actix_web::{web, HttpResponse, Responder};
use crate::AppState;
use serde::Serialize;
use log::{info, debug};
use std::collections::HashMap;
use crate::models::metadata::Metadata;
use crate::utils::socket_flow_messages::Node;

/// Struct to serialize GraphData for HTTP responses.
#[derive(Serialize)]
#[serde(rename_all = "camelCase")]
pub struct GraphResponse {
    /// List of nodes in the graph.
    pub nodes: Vec<Node>,
    /// List of edges connecting the nodes.
    pub edges: Vec<crate::models::edge::Edge>,
    /// Additional metadata about the graph.
    pub metadata: HashMap<String, Metadata>,
}

/// Handler to retrieve the current graph data.
///
/// This function performs the following steps:
/// 1. Reads the shared graph data from the application state.
/// 2. Serializes the graph data into JSON format.
/// 3. Returns the serialized graph data as an HTTP response.
///
/// # Arguments
///
/// * `state` - Shared application state.
///
/// # Returns
///
/// An HTTP response containing the graph data or an error.
pub async fn get_graph_data(state: web::Data<AppState>) -> impl Responder {
    info!("Received request for graph data");

    // Step 1: Acquire read access to the shared graph data.
    let graph = state.graph_service.graph_data.read().await;

    debug!("Preparing graph response with {} nodes and {} edges",
        graph.nodes.len(),
        graph.edges.len()
    );

    // Step 2: Prepare the response struct.
    let response = GraphResponse {
        nodes: graph.nodes.clone(),
        edges: graph.edges.clone(),
        metadata: graph.metadata.clone(),
    };

    // Step 3: Respond with the serialized graph data.
    HttpResponse::Ok().json(response)
}

----
handlers/ragflow_handler.rs
use actix_web::{web, HttpResponse, Error, ResponseError};
use crate::AppState;
use serde::{Serialize, Deserialize};
use log::{info, error};
use actix_web::web::Bytes;
use std::sync::Arc;
use futures::StreamExt;
use crate::services::ragflow_service::RAGFlowError;

#[derive(Serialize, Deserialize)]
pub struct MessageRequest {
    pub conversation_id: String,
    pub messages: Vec<Message>,
    pub quote: Option<bool>,
    pub doc_ids: Option<Vec<String>>,
    pub stream: Option<bool>,
}

#[derive(Serialize, Deserialize)]
pub struct Message {
    pub role: String,
    pub content: String,
}

#[derive(Serialize, Deserialize)]
pub struct InitChatRequest {
    pub user_id: String,
}

/// Response structure for initiating a chat.
#[derive(Serialize)]
pub struct InitChatResponse {
    pub success: bool,
    pub conversation_id: String,
    pub message: Option<String>,
}

// Implement ResponseError for RAGFlowError
impl ResponseError for RAGFlowError {
    fn error_response(&self) -> HttpResponse {
        HttpResponse::InternalServerError().json(serde_json::json!({
            "error": self.to_string()
        }))
    }
}

/// Handler for sending a message to the RAGFlow service.
pub async fn send_message(state: web::Data<AppState>, msg: web::Json<MessageRequest>) -> Result<HttpResponse, Error> {
    let message_content = msg.messages.last().unwrap().content.clone();
    let quote = msg.quote.unwrap_or(false);
    let doc_ids = msg.doc_ids.clone();
    let stream = msg.stream.unwrap_or(false);
    let conversation_id = msg.conversation_id.clone();

    info!("Sending message to RAGFlow: {}", message_content);
    info!("Quote: {}, Stream: {}, Doc IDs: {:?}", quote, stream, doc_ids);

    // Clone the Arc<RAGFlowService>
    let ragflow_service = Arc::clone(&state.ragflow_service);

    // Call the async send_message function
    match ragflow_service.send_message(conversation_id, message_content, quote, doc_ids, stream).await {
        Ok(response_stream) => {
            let mapped_stream = response_stream.map(|result| {
                result.map(|answer| {
                    let response = serde_json::json!({
                        "type": "ragflowResponse",
                        "data": {
                            "answer": answer
                        }
                    });
                    Bytes::from(serde_json::to_string(&response).unwrap())
                })
                .map_err(|e| actix_web::error::ErrorInternalServerError(e))
            });
            Ok(HttpResponse::Ok().streaming(mapped_stream))
        },
        Err(e) => {
            error!("Error sending message: {}", e);
            Ok(HttpResponse::InternalServerError().json(serde_json::json!({
                "error": format!("Failed to send message: {}", e)
            })))
        }
    }
}

/// Handler for initiating a new chat conversation.
pub async fn init_chat(state: web::Data<AppState>, req: web::Json<InitChatRequest>) -> HttpResponse {
    let user_id = &req.user_id;

    info!("Initializing chat for user: {}", user_id);

    match state.ragflow_service.create_conversation(user_id.clone()).await {
        Ok(conversation_id) => HttpResponse::Ok().json(InitChatResponse {
            success: true,
            conversation_id,
            message: None,
        }),
        Err(e) => {
            error!("Error initiating chat: {}", e);
            HttpResponse::InternalServerError().json(InitChatResponse {
                success: false,
                conversation_id: "".to_string(),
                message: Some(format!("Failed to initialize chat: {}", e)),
            })
        }
    }
}

/// Handler for retrieving chat history.
pub async fn get_chat_history(_state: web::Data<AppState>, path: web::Path<String>) -> HttpResponse {
    let conversation_id = path.into_inner();
    info!("Retrieving chat history for conversation: {}", conversation_id);

    // Note: We've removed the get_chat_history method from RAGFlowService
    // You may want to implement this functionality if needed
    HttpResponse::NotImplemented().json(serde_json::json!({
        "message": "Chat history retrieval is not implemented"
    }))
}

----
handlers/perplexity_handler.rs
use crate::AppState;
use actix_web::{post, web, HttpResponse, Responder};
use serde::{Deserialize, Serialize};
use log::{error, info};

#[derive(Debug, Deserialize)]
pub struct PerplexityRequest {
    pub query: String,
    pub conversation_id: Option<String>,
}

#[derive(Debug, Serialize)]
pub struct PerplexityResponse {
    pub answer: String,
    pub conversation_id: String,
}

#[post("")]
pub async fn handle_perplexity(
    request: web::Json<PerplexityRequest>,
    state: web::Data<AppState>,
) -> impl Responder {
    info!("Received perplexity request: {:?}", request);

    let perplexity_service = &state.perplexity_service;
    let conversation_id = request.conversation_id.clone().unwrap_or_else(|| "default".to_string());

    match perplexity_service.query(&request.query, &conversation_id).await {
        Ok(answer) => {
            let response = PerplexityResponse {
                answer,
                conversation_id,
            };
            HttpResponse::Ok().json(response)
        }
        Err(e) => {
            error!("Error processing perplexity request: {}", e);
            HttpResponse::InternalServerError().json(format!("Error: {}", e))
        }
    }
}

----
services/perplexity_service.rs
use crate::config::Settings;
use crate::models::metadata::Metadata;
use crate::services::file_service::ProcessedFile;
use chrono::Utc;
use log::{error, info};
use reqwest::Client;
use serde::{Deserialize, Serialize};
use std::error::Error as StdError;
use std::fs;
use std::path::Path;
use std::sync::Arc;
use tokio::sync::RwLock;
use std::collections::HashMap;

const MARKDOWN_DIR: &str = "data/markdown";

#[derive(Debug, Serialize, Deserialize)]
struct PerplexityResponse {
    content: String,
    link: String,
}

#[derive(Debug, Serialize)]
struct QueryRequest {
    query: String,
    conversation_id: String,
}

pub struct PerplexityService {
    client: Client,
    settings: Arc<RwLock<Settings>>,
}

impl PerplexityService {
    pub fn new(settings: Arc<RwLock<Settings>>) -> Result<Self, Box<dyn StdError + Send + Sync>> {
        let client = Client::builder()
            .timeout(std::time::Duration::from_secs(30))
            .build()?;

        Ok(Self { client, settings })
    }

    pub async fn query(&self, query: &str, conversation_id: &str) -> Result<String, Box<dyn StdError + Send + Sync>> {
        let settings = self.settings.read().await;
        let api_url = format!("{}/query", settings.network.domain);
        info!("Sending query to Perplexity API: {}", api_url);

        let request = QueryRequest {
            query: query.to_string(),
            conversation_id: conversation_id.to_string(),
        };

        let response = self.client
            .post(&api_url)
            .json(&request)
            .send()
            .await?;

        let status = response.status();
        if !status.is_success() {
            let error_text = response.text().await?;
            error!("Perplexity API error: Status: {}, Error: {}", status, error_text);
            return Err(format!("Perplexity API error: {}", error_text).into());
        }

        let perplexity_response: PerplexityResponse = response.json().await?;
        Ok(perplexity_response.content)
    }

    pub async fn process_file(&self, file_name: &str) -> Result<ProcessedFile, Box<dyn StdError + Send + Sync>> {
        let file_path = format!("{}/{}", MARKDOWN_DIR, file_name);
        if !Path::new(&file_path).exists() {
            return Err(format!("File not found: {}", file_name).into());
        }

        let content = fs::read_to_string(&file_path)?;
        let settings = self.settings.read().await;
        
        let api_url = format!("{}/process", settings.network.domain);
        info!("Sending request to Perplexity API: {}", api_url);

        let response = self.client
            .post(&api_url)
            .json(&content)
            .send()
            .await?;

        let status = response.status();
        if !status.is_success() {
            let error_text = response.text().await?;
            error!("Perplexity API error: Status: {}, Error: {}", status, error_text);
            return Err(format!("Perplexity API error: {}", error_text).into());
        }

        let perplexity_response: PerplexityResponse = response.json().await?;
        
        // Create metadata for processed file
        let metadata = Metadata {
            file_name: file_name.to_string(),
            file_size: perplexity_response.content.len(),
            node_size: 10.0, // Default size
            hyperlink_count: 0,
            sha1: String::new(),
            last_modified: Utc::now(),
            perplexity_link: perplexity_response.link,
            last_perplexity_process: Some(Utc::now()),
            topic_counts: HashMap::new(),
        };

        Ok(ProcessedFile {
            file_name: file_name.to_string(),
            content: perplexity_response.content,
            is_public: true,
            metadata,
        })
    }
}

----
services/file_service.rs
use crate::models::metadata::{Metadata, MetadataStore, MetadataOps};
use crate::models::graph::GraphData;
use crate::config::Settings;
use serde::{Deserialize, Serialize};
use reqwest::Client;
use async_trait::async_trait;
use log::{info, debug, error};
use regex::Regex;
use std::collections::{HashMap, HashSet};
use std::fs;
use std::path::Path;
use chrono::{Utc, DateTime};
use std::sync::Arc;
use tokio::sync::RwLock;
use std::error::Error as StdError;
use std::time::Duration;
use tokio::time::sleep;
use actix_web::web;

// Constants
const METADATA_PATH: &str = "data/markdown/metadata.json";
pub const MARKDOWN_DIR: &str = "data/markdown";
const GITHUB_API_DELAY: Duration = Duration::from_millis(100); // Rate limiting delay
const MIN_NODE_SIZE: f64 = 5.0;
const MAX_NODE_SIZE: f64 = 50.0;

#[derive(Serialize, Deserialize, Clone)]
pub struct GithubFile {
    pub name: String,
    pub path: String,
    pub sha: String,
    pub size: usize,
    pub url: String,
    pub download_url: String,
}

#[derive(Serialize, Deserialize, Clone, Eq, PartialEq, Hash)]
pub struct GithubFileMetadata {
    pub name: String,
    pub sha: String,
    pub download_url: String,
    pub etag: Option<String>,
    #[serde(with = "chrono::serde::ts_seconds_option")]
    pub last_checked: Option<DateTime<Utc>>,
    #[serde(with = "chrono::serde::ts_seconds_option")]
    pub last_modified: Option<DateTime<Utc>>,
}

#[derive(Serialize, Deserialize, Clone)]
pub struct ProcessedFile {
    pub file_name: String,
    pub content: String,
    pub is_public: bool,
    pub metadata: Metadata,
}

// Structure to hold reference information
#[derive(Default)]
struct ReferenceInfo {
    direct_mentions: usize,
}

#[async_trait]
pub trait GitHubService: Send + Sync {
    async fn fetch_file_metadata(&self) -> Result<Vec<GithubFileMetadata>, Box<dyn StdError + Send + Sync>>;
    async fn get_download_url(&self, file_name: &str) -> Result<Option<String>, Box<dyn StdError + Send + Sync>>;
    async fn fetch_file_content(&self, download_url: &str) -> Result<String, Box<dyn StdError + Send + Sync>>;
    async fn get_file_last_modified(&self, file_path: &str) -> Result<DateTime<Utc>, Box<dyn StdError + Send + Sync>>;
}

pub struct RealGitHubService {
    client: Client,
    token: String,
    owner: String,
    repo: String,
    base_path: String,
    settings: Arc<RwLock<Settings>>,
}

impl RealGitHubService {
    pub fn new(
        token: String,
        owner: String,
        repo: String,
        base_path: String,
        settings: Arc<RwLock<Settings>>,
    ) -> Result<Self, Box<dyn StdError + Send + Sync>> {
        let client = Client::builder()
            .user_agent("rust-github-api")
            .timeout(Duration::from_secs(30))
            .build()?;

        // Trim any leading/trailing slashes from base_path
        let base_path = base_path.trim_matches('/').to_string();

        debug!("Initializing GitHub service with base_path: {}", base_path);

        Ok(Self {
            client,
            token,
            owner,
            repo,
            base_path,
            settings,
        })
    }
}

#[async_trait]
impl GitHubService for RealGitHubService {
    async fn fetch_file_metadata(&self) -> Result<Vec<GithubFileMetadata>, Box<dyn StdError + Send + Sync>> {
        let url = if self.base_path.is_empty() {
            format!(
                "https://api.github.com/repos/{}/{}/contents",
                self.owner, self.repo
            )
        } else {
            format!(
                "https://api.github.com/repos/{}/{}/contents/{}",
                self.owner, self.repo, self.base_path
            )
        };
        
        debug!("Fetching GitHub metadata from URL: {}", url);

        // Set headers exactly as in the working curl command
        let response = self.client.get(&url)
            .header("Authorization", format!("Bearer {}", self.token))
            .header("Accept", "application/vnd.github+json")
            .send()
            .await?;

        // Get status and headers for debugging
        let status = response.status();
        let headers = response.headers().clone();
        
        debug!("GitHub API response status: {}", status);
        debug!("GitHub API response headers: {:?}", headers);

        // Get response body
        let body = response.text().await?;
        
        // Log the first 1000 characters of the response for debugging
        debug!("GitHub API response preview: {}", &body[..body.len().min(1000)]);

        // Check for error response
        if !status.is_success() {
            let error_msg = match serde_json::from_str::<serde_json::Value>(&body) {
                Ok(error_json) => {
                    let msg = error_json["message"].as_str().unwrap_or("Unknown error");
                    format!("GitHub API error: {} - {}", status, msg)
                },
                Err(_) => format!("GitHub API error: {} - {}", status, body)
            };
            error!("{}", error_msg);
            return Err(error_msg.into());
        }

        // Parse response as array
        let contents: Vec<serde_json::Value> = match serde_json::from_str(&body) {
            Ok(parsed) => parsed,
            Err(e) => {
                error!("Failed to parse GitHub API response: {}", e);
                error!("Response body: {}", body);
                return Err(Box::new(e));
            }
        };

        let settings = self.settings.read().await;
        let debug_enabled = settings.server_debug.enabled;
        
        let mut markdown_files = Vec::new();
        
        for item in contents {
            if item["type"].as_str().unwrap_or("") == "file" && 
               item["name"].as_str().unwrap_or("").ends_with(".md") {
                let name = item["name"].as_str().unwrap_or("").to_string();
                
                // In debug mode, only process Debug Test Page.md and debug linked node.md
                if debug_enabled && !name.contains("Debug Test Page") && !name.contains("debug linked node") {
                    continue;
                }
                
                debug!("Processing markdown file: {}", name);
                
                let last_modified = match self.get_file_last_modified(&format!("{}/{}", self.base_path, name)).await {
                    Ok(time) => Some(time),
                    Err(e) => {
                        error!("Failed to get last modified time for {}: {}", name, e);
                        None
                    }
                };
                
                markdown_files.push(GithubFileMetadata {
                    name,
                    sha: item["sha"].as_str().unwrap_or("").to_string(),
                    download_url: item["download_url"].as_str().unwrap_or("").to_string(),
                    etag: None,
                    last_checked: Some(Utc::now()),
                    last_modified,
                });
            }
        }

        if debug_enabled {
            info!("Debug mode: Processing only debug test files");
        }

        debug!("Found {} markdown files", markdown_files.len());
        Ok(markdown_files)
    }

    async fn get_download_url(&self, file_name: &str) -> Result<Option<String>, Box<dyn StdError + Send + Sync>> {
        let url = if self.base_path.is_empty() {
            format!("https://api.github.com/repos/{}/{}/contents/{}", 
                self.owner, self.repo, file_name)
        } else {
            format!("https://api.github.com/repos/{}/{}/contents/{}/{}", 
                self.owner, self.repo, self.base_path, file_name)
        };

        let response = self.client.get(&url)
            .header("Authorization", format!("Bearer {}", self.token))
            .header("Accept", "application/vnd.github+json")
            .send()
            .await?;

        if response.status().is_success() {
            let file: GithubFile = response.json().await?;
            Ok(Some(file.download_url))
        } else {
            Ok(None)
        }
    }

    async fn fetch_file_content(&self, download_url: &str) -> Result<String, Box<dyn StdError + Send + Sync>> {
        let response = self.client.get(download_url)
            .header("Authorization", format!("Bearer {}", self.token))
            .header("Accept", "application/vnd.github+json")
            .send()
            .await?;

        let status = response.status();
        if !status.is_success() {
            let error_text = response.text().await?;
            error!("Failed to fetch file content. Status: {}, Error: {}", status, error_text);
            return Err(format!("Failed to fetch file content: {}", error_text).into());
        }

        let content = response.text().await?;
        Ok(content)
    }

    async fn get_file_last_modified(&self, file_path: &str) -> Result<DateTime<Utc>, Box<dyn StdError + Send + Sync>> {
        let url = format!(
            "https://api.github.com/repos/{}/{}/commits",
            self.owner, self.repo
        );

        let response = self.client.get(&url)
            .header("Authorization", format!("Bearer {}", self.token))
            .header("Accept", "application/vnd.github+json")
            .query(&[("path", file_path), ("per_page", "1")])
            .send()
            .await?;

        let status = response.status();
        if !status.is_success() {
            let error_text = response.text().await?;
            error!("Failed to get last modified time. Status: {}, Error: {}", status, error_text);
            return Ok(Utc::now()); // Fallback to current time
        }

        let commits: Vec<serde_json::Value> = response.json().await?;
        
        if let Some(last_commit) = commits.first() {
            if let Some(commit) = last_commit["commit"]["committer"]["date"].as_str() {
                if let Ok(date) = DateTime::parse_from_rfc3339(commit) {
                    return Ok(date.with_timezone(&Utc));
                }
            }
        }
        
        Ok(Utc::now())
    }
}

pub struct FileService;

impl FileService {
    /// Process uploaded file and return graph data
    pub async fn process_file_upload(&self, payload: web::Bytes) -> Result<GraphData, Box<dyn StdError + Send + Sync>> {
        let content = String::from_utf8(payload.to_vec())?;
        let metadata = Self::load_or_create_metadata()?;
        let mut graph_data = GraphData::new();
        
        // Create a temporary file to process
        let temp_filename = format!("temp_{}.md", Utc::now().timestamp());
        let temp_path = format!("{}/{}", MARKDOWN_DIR, temp_filename);
        fs::write(&temp_path, &content)?;

        // Extract references and create metadata
        let valid_nodes: Vec<String> = metadata.keys()
            .map(|name| name.trim_end_matches(".md").to_string())
            .collect();

        let references = Self::extract_references(&content, &valid_nodes);
        let topic_counts = Self::convert_references_to_topic_counts(references);

        // Create metadata for the uploaded file
        let file_size = content.len();
        let node_size = Self::calculate_node_size(file_size);
        let file_metadata = Metadata {
            file_name: temp_filename.clone(),
            file_size,
            node_size,
            hyperlink_count: Self::count_hyperlinks(&content),
            sha1: Self::calculate_sha1(&content),
            last_modified: Utc::now(),
            perplexity_link: String::new(),
            last_perplexity_process: None,
            topic_counts,
        };

        // Update graph data
        graph_data.metadata.insert(temp_filename.clone(), file_metadata);

        // Clean up temporary file
        if let Err(e) = fs::remove_file(&temp_path) {
            error!("Failed to remove temporary file: {}", e);
        }

        Ok(graph_data)
    }

    /// List available files
    pub async fn list_files(&self) -> Result<Vec<String>, Box<dyn StdError + Send + Sync>> {
        let metadata = Self::load_or_create_metadata()?;
        Ok(metadata.keys().cloned().collect())
    }

    /// Load a specific file and return graph data
    pub async fn load_file(&self, filename: &str) -> Result<GraphData, Box<dyn StdError + Send + Sync>> {
        let file_path = format!("{}/{}", MARKDOWN_DIR, filename);
        if !Path::new(&file_path).exists() {
            return Err(format!("File not found: {}", filename).into());
        }

        let content = fs::read_to_string(&file_path)?;
        let metadata = Self::load_or_create_metadata()?;
        let mut graph_data = GraphData::new();

        // Extract references and update metadata
        let valid_nodes: Vec<String> = metadata.keys()
            .map(|name| name.trim_end_matches(".md").to_string())
            .collect();

        let references = Self::extract_references(&content, &valid_nodes);
        let topic_counts = Self::convert_references_to_topic_counts(references);

        // Update or create metadata for the file
        let file_size = content.len();
        let node_size = Self::calculate_node_size(file_size);
        let file_metadata = Metadata {
            file_name: filename.to_string(),
            file_size,
            node_size,
            hyperlink_count: Self::count_hyperlinks(&content),
            sha1: Self::calculate_sha1(&content),
            last_modified: Utc::now(),
            perplexity_link: String::new(),
            last_perplexity_process: None,
            topic_counts,
        };

        // Update graph data
        graph_data.metadata.insert(filename.to_string(), file_metadata);
        
        Ok(graph_data)
    }

    /// Load metadata from file or create new if not exists
    pub fn load_or_create_metadata() -> Result<MetadataStore, Box<dyn StdError + Send + Sync>> {
        if Path::new(METADATA_PATH).exists() {
            let content = fs::read_to_string(METADATA_PATH)?;
            if !content.trim().is_empty() {
                return Ok(serde_json::from_str(&content)?);
            }
        }
        Ok(MetadataStore::new())
    }

    /// Calculate node size based on file size
    fn calculate_node_size(file_size: usize) -> f64 {
        // Use logarithmic scaling for node size
        let size = if file_size == 0 {
            MIN_NODE_SIZE
        } else {
            let log_size = (file_size as f64).ln();
            let min_log = 0f64;
            let max_log = (100_000f64).ln(); // Assuming 100KB as max expected size
            
            let normalized = (log_size - min_log) / (max_log - min_log);
            MIN_NODE_SIZE + normalized * (MAX_NODE_SIZE - MIN_NODE_SIZE)
        };
        
        size.max(MIN_NODE_SIZE).min(MAX_NODE_SIZE)
}

    /// Extract references to other files based on their names (case insensitive)
    fn extract_references(content: &str, valid_nodes: &[String]) -> HashMap<String, ReferenceInfo> {
        let mut references = HashMap::new();
        let content_lower = content.to_lowercase();
        
        for node_name in valid_nodes {
            let mut ref_info = ReferenceInfo::default();
            let node_name_lower = node_name.to_lowercase();
            
            // Create a regex pattern with word boundaries
            let pattern = format!(r"\b{}\b", regex::escape(&node_name_lower));
            if let Ok(re) = Regex::new(&pattern) {
                // Count case-insensitive matches of the filename
                let count = re.find_iter(&content_lower).count();
                
                // If we found any references, add them to the map
                if count > 0 {
                    debug!("Found {} references to {} in content", count, node_name);
                    ref_info.direct_mentions = count;
                    references.insert(format!("{}.md", node_name), ref_info);
                }
            }
        }
        
        references
    }

    fn convert_references_to_topic_counts(references: HashMap<String, ReferenceInfo>) -> HashMap<String, usize> {
        references.into_iter()
            .map(|(name, info)| {
                debug!("Converting reference for {} with {} mentions", name, info.direct_mentions);
                (name, info.direct_mentions)
            })
            .collect()
    }

    /// Initialize the local markdown directory and metadata structure.
    pub async fn initialize_local_storage(
        github_service: &dyn GitHubService,
        _settings: Arc<RwLock<Settings>>,
    ) -> Result<(), Box<dyn StdError + Send + Sync>> {
        info!("Checking local storage status");
        
        // Ensure required directories exist
        Self::ensure_directories()?;

        // Check if we already have a valid local setup
        if Self::has_valid_local_setup() {
            info!("Valid local setup found, skipping initialization");
            return Ok(());
        }

        info!("Initializing local storage with files from GitHub");

        // Step 1: Get all markdown files from GitHub
        let github_files = github_service.fetch_file_metadata().await?;
        info!("Found {} markdown files in GitHub", github_files.len());

        let mut file_sizes = HashMap::new();
        let mut file_contents = HashMap::new();
        let mut file_metadata = HashMap::new();
        let mut metadata_store = MetadataStore::new();
        
        // Step 2: First pass - collect all files and their contents
        for file_meta in github_files {
            match github_service.fetch_file_content(&file_meta.download_url).await {
                Ok(content) => {
                    // Check if file starts with "public:: true"
                    let first_line = content.lines().next().unwrap_or("").trim();
                    if first_line != "public:: true" {
                        debug!("Skipping non-public file: {}", file_meta.name);
                        continue;
                    }

                    let node_name = file_meta.name.trim_end_matches(".md").to_string();
                    file_sizes.insert(node_name.clone(), content.len());
                    file_contents.insert(node_name, content);
                    file_metadata.insert(file_meta.name.clone(), file_meta);
                }
                Err(e) => {
                    error!("Failed to fetch content for {}: {}", file_meta.name, e);
                }
            }
            sleep(GITHUB_API_DELAY).await;
        }

        // Get list of valid node names (filenames without .md)
        let valid_nodes: Vec<String> = file_contents.keys().cloned().collect();

        // Step 3: Second pass - extract references and create metadata
        for (node_name, content) in &file_contents {
            let file_name = format!("{}.md", node_name);
            let file_path = format!("{}/{}", MARKDOWN_DIR, file_name);
            
            // Calculate SHA1 of content
            let local_sha1 = Self::calculate_sha1(content);
            
            // Save file content
            fs::write(&file_path, content)?;

            // Extract references
            let references = Self::extract_references(content, &valid_nodes);
            let topic_counts = Self::convert_references_to_topic_counts(references);

            // Get GitHub metadata
            let github_meta = file_metadata.get(&file_name).unwrap();
            let last_modified = github_meta.last_modified.unwrap_or_else(|| Utc::now());

            // Calculate node size
            let file_size = *file_sizes.get(node_name).unwrap();
            let node_size = Self::calculate_node_size(file_size);

            // Create metadata entry
            let metadata = Metadata {
                file_name: file_name.clone(),
                file_size,
                node_size,
                hyperlink_count: Self::count_hyperlinks(content),
                sha1: local_sha1,
                last_modified,
                perplexity_link: String::new(),
                last_perplexity_process: None,
                topic_counts,
            };

            metadata_store.insert(file_name, metadata);
        }

        // Step 4: Save metadata
        info!("Saving metadata for {} public files", metadata_store.len());
        Self::save_metadata(&metadata_store)?;

        info!("Initialization complete. Processed {} public files", metadata_store.len());

        Ok(())
    }

    /// Check if we have a valid local setup
    fn has_valid_local_setup() -> bool {
        if let Ok(metadata_content) = fs::read_to_string(METADATA_PATH) {
            if metadata_content.trim().is_empty() {
                return false;
            }
            
            if let Ok(metadata) = serde_json::from_str::<MetadataStore>(&metadata_content) {
                return metadata.validate_files(MARKDOWN_DIR);
            }
        }
        false
    }

    /// Ensures all required directories exist
    fn ensure_directories() -> Result<(), Box<dyn StdError + Send + Sync>> {
        fs::create_dir_all(MARKDOWN_DIR)?;
        Ok(())
    }

    /// Handles incremental updates after initial setup
    pub async fn fetch_and_process_files(
        github_service: &dyn GitHubService,
        _settings: Arc<RwLock<Settings>>,
        metadata_store: &mut MetadataStore,
    ) -> Result<Vec<ProcessedFile>, Box<dyn StdError + Send + Sync>> {
        // Ensure directories exist before any operations
        Self::ensure_directories()?;

        // Get metadata for markdown files in target directory
        let github_files_metadata = github_service.fetch_file_metadata().await?;
        debug!("Fetched metadata for {} markdown files", github_files_metadata.len());

        let mut processed_files = Vec::new();

        // Save current metadata
        Self::save_metadata(metadata_store)?;

        // Clean up local files that no longer exist in GitHub
        let github_files: HashSet<_> = github_files_metadata.iter()
            .map(|meta| meta.name.clone())
            .collect();

        let local_files: HashSet<_> = metadata_store.keys().cloned().collect();
        let removed_files: Vec<_> = local_files.difference(&github_files).collect();

        for file_name in removed_files {
            let file_path = format!("{}/{}", MARKDOWN_DIR, file_name);
            if let Err(e) = fs::remove_file(&file_path) {
                error!("Failed to remove file {}: {}", file_path, e);
            }
            metadata_store.remove(file_name);
        }

        // Get list of valid node names (filenames without .md)
        let valid_nodes: Vec<String> = github_files_metadata.iter()
            .map(|f| f.name.trim_end_matches(".md").to_string())
            .collect();

        // Process files that need updating
        let files_to_process: Vec<_> = github_files_metadata.into_iter()
            .filter(|file_meta| {
                let local_meta = metadata_store.get(&file_meta.name);
                local_meta.map_or(true, |meta| meta.sha1 != file_meta.sha)
            })
            .collect();

        // Process each file
        for file_meta in files_to_process {
            match github_service.fetch_file_content(&file_meta.download_url).await {
                Ok(content) => {
                    let first_line = content.lines().next().unwrap_or("").trim();
                    if first_line != "public:: true" {
                        debug!("Skipping non-public file: {}", file_meta.name);
                        continue;
                    }

                    let file_path = format!("{}/{}", MARKDOWN_DIR, file_meta.name);
                    fs::write(&file_path, &content)?;

                    // Extract references
                    let references = Self::extract_references(&content, &valid_nodes);
                    let topic_counts = Self::convert_references_to_topic_counts(references);

                    // Calculate node size
                    let file_size = content.len();
                    let node_size = Self::calculate_node_size(file_size);

                    let new_metadata = Metadata {
                        file_name: file_meta.name.clone(),
                        file_size,
                        node_size,
                        hyperlink_count: Self::count_hyperlinks(&content),
                        sha1: Self::calculate_sha1(&content),
                        last_modified: file_meta.last_modified.unwrap_or_else(|| Utc::now()),
                        perplexity_link: String::new(),
                        last_perplexity_process: None,
                        topic_counts,
                    };

                    metadata_store.insert(file_meta.name.clone(), new_metadata.clone());
                    processed_files.push(ProcessedFile {
                        file_name: file_meta.name,
                        content,
                        is_public: true,
                        metadata: new_metadata,
                    });
                }
                Err(e) => {
                    error!("Failed to fetch content: {}", e);
                }
            }
            sleep(GITHUB_API_DELAY).await;
        }

        // Save updated metadata
        Self::save_metadata(metadata_store)?;

        Ok(processed_files)
    }

    /// Save metadata to file
    pub fn save_metadata(metadata: &MetadataStore) -> Result<(), Box<dyn StdError + Send + Sync>> {
        let json = serde_json::to_string_pretty(metadata)?;
        fs::write(METADATA_PATH, json)?;
        Ok(())
    }

    /// Calculate SHA1 hash of content
    fn calculate_sha1(content: &str) -> String {
        use sha1::{Sha1, Digest};
        let mut hasher = Sha1::new();
        hasher.update(content.as_bytes());
        format!("{:x}", hasher.finalize())
    }

    /// Count hyperlinks in content
    fn count_hyperlinks(content: &str) -> usize {
        let re = Regex::new(r"\[([^\]]+)\]\(([^)]+)\)").unwrap();
        re.find_iter(content).count()
    }
}

----
services/graph_service.rs
use std::sync::Arc;
use tokio::sync::RwLock;
use std::collections::{HashMap, HashSet};
use actix_web::web;
use log::{info, warn};
use rand::Rng;

use crate::models::graph::GraphData;
use crate::utils::socket_flow_messages::Node;
use crate::models::edge::Edge;
use crate::models::metadata::MetadataStore;
use crate::app_state::AppState;
use crate::utils::gpu_compute::GPUCompute;
use crate::models::simulation_params::SimulationParams;

#[derive(Clone)]
pub struct GraphService {
    pub graph_data: Arc<RwLock<GraphData>>,
}

impl GraphService {
    pub fn new() -> Self {
        Self {
            graph_data: Arc::new(RwLock::new(GraphData::default())),
        }
    }

    pub async fn build_graph_from_metadata(metadata: &MetadataStore) -> Result<GraphData, Box<dyn std::error::Error + Send + Sync>> {
        let mut graph = GraphData::new();
        let mut edge_map = HashMap::new();

        // First pass: Create nodes from files in metadata
        let mut valid_nodes = HashSet::new();
        for file_name in metadata.keys() {
            let node_id = file_name.trim_end_matches(".md").to_string();
            valid_nodes.insert(node_id);
        }

        // Create nodes for all valid node IDs
        for node_id in &valid_nodes {
            let mut node = Node::new(node_id.clone());
            
            // Get metadata for this node
            if let Some(metadata) = metadata.get(&format!("{}.md", node_id)) {
                node.size = Some(metadata.node_size as f32);
                node.file_size = metadata.file_size as u64;
                node.label = node_id.clone(); // Set label to node ID (filename without .md)
                
                // Add metadata fields to node's metadata map
                node.metadata.insert("fileSize".to_string(), metadata.file_size.to_string());
                node.metadata.insert("hyperlinkCount".to_string(), metadata.hyperlink_count.to_string());
                node.metadata.insert("lastModified".to_string(), metadata.last_modified.to_string());
            }
            
            graph.nodes.push(node);
        }

        // Store metadata in graph
        graph.metadata = metadata.clone();

        // Second pass: Create edges from topic counts
        for (source_file, metadata) in metadata.iter() {
            let source_id = source_file.trim_end_matches(".md").to_string();
            
            for (target_file, count) in &metadata.topic_counts {
                let target_id = target_file.trim_end_matches(".md").to_string();
                
                // Only create edge if both nodes exist and they're different
                if source_id != target_id && valid_nodes.contains(&target_id) {
                    let edge_key = if source_id < target_id {
                        (source_id.clone(), target_id.clone())
                    } else {
                        (target_id.clone(), source_id.clone())
                    };

                    edge_map.entry(edge_key)
                        .and_modify(|weight| *weight += *count as f32)
                        .or_insert(*count as f32);
                }
            }
        }

        // Convert edge map to edges
        graph.edges = edge_map.into_iter()
            .map(|((source, target), weight)| {
                Edge::new(source, target, weight)
            })
            .collect();

        // Initialize random positions
        Self::initialize_random_positions(&mut graph);

        info!("Built graph with {} nodes and {} edges", graph.nodes.len(), graph.edges.len());
        Ok(graph)
    }

    pub async fn build_graph(state: &web::Data<AppState>) -> Result<GraphData, Box<dyn std::error::Error + Send + Sync>> {
        let current_graph = state.graph_service.graph_data.read().await;
        let mut graph = GraphData::new();

        // Copy metadata from current graph
        graph.metadata = current_graph.metadata.clone();

        let mut edge_map = HashMap::new();

        // Create nodes from metadata entries
        let mut valid_nodes = HashSet::new();
        for file_name in graph.metadata.keys() {
            let node_id = file_name.trim_end_matches(".md").to_string();
            valid_nodes.insert(node_id);
        }

        // Create nodes for all valid node IDs
        for node_id in &valid_nodes {
            let mut node = Node::new(node_id.clone());
            
            // Get metadata for this node
            if let Some(metadata) = graph.metadata.get(&format!("{}.md", node_id)) {
                node.size = Some(metadata.node_size as f32);
                node.file_size = metadata.file_size as u64;
                node.label = node_id.clone(); // Set label to node ID (filename without .md)
                
                // Add metadata fields to node's metadata map
                node.metadata.insert("fileSize".to_string(), metadata.file_size.to_string());
                node.metadata.insert("hyperlinkCount".to_string(), metadata.hyperlink_count.to_string());
                node.metadata.insert("lastModified".to_string(), metadata.last_modified.to_string());
            }
            
            graph.nodes.push(node);
        }

        // Create edges from metadata topic counts
        for (source_file, metadata) in graph.metadata.iter() {
            let source_id = source_file.trim_end_matches(".md").to_string();
            
            // Process outbound links from this file to other topics
            for (target_file, count) in &metadata.topic_counts {
                let target_id = target_file.trim_end_matches(".md").to_string();
                
                // Only create edge if both nodes exist and they're different
                if source_id != target_id && valid_nodes.contains(&target_id) {
                    let edge_key = if source_id < target_id {
                        (source_id.clone(), target_id.clone())
                    } else {
                        (target_id.clone(), source_id.clone())
                    };

                    // Sum the weights for bi-directional references
                    edge_map.entry(edge_key)
                        .and_modify(|w| *w += *count as f32)
                        .or_insert(*count as f32);
                }
            }
        }

        // Convert edge map to edges
        graph.edges = edge_map.into_iter()
            .map(|((source, target), weight)| {
                Edge::new(source, target, weight)
            })
            .collect();

        // Initialize random positions for all nodes
        Self::initialize_random_positions(&mut graph);

        info!("Built graph with {} nodes and {} edges", graph.nodes.len(), graph.edges.len());
        Ok(graph)
    }

    fn initialize_random_positions(graph: &mut GraphData) {
        let mut rng = rand::thread_rng();
        let initial_radius = 30.0;
        
        for node in &mut graph.nodes {
            let theta = rng.gen_range(0.0..std::f32::consts::PI * 2.0);
            let phi = rng.gen_range(0.0..std::f32::consts::PI);
            let r = rng.gen_range(0.0..initial_radius);
            
            node.set_x(r * theta.cos() * phi.sin());
            node.set_y(r * theta.sin() * phi.sin());
            node.set_z(r * phi.cos());
            node.set_vx(0.0);
            node.set_vy(0.0);
            node.set_vz(0.0);
        }
    }

    pub async fn calculate_layout(
        gpu_compute: &Option<Arc<RwLock<GPUCompute>>>,
        graph: &mut GraphData,
        params: &SimulationParams,
    ) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
        match gpu_compute {
            Some(gpu) => {
                info!("Using GPU for layout calculation");
                let mut gpu_compute = gpu.write().await;
                
                // Only initialize positions for new graphs
                if graph.nodes.iter().all(|n| n.x() == 0.0 && n.y() == 0.0 && n.z() == 0.0) {
                    Self::initialize_random_positions(graph);
                }
                
                gpu_compute.update_graph_data(graph)?;
                gpu_compute.update_simulation_params(params)?;
                
                // Run iterations with more frequent updates
                for _ in 0..params.iterations {
                    gpu_compute.step()?;
                    
                    // Update positions every iteration for smoother motion
                    let updated_nodes = gpu_compute.get_node_data()?;
                    for (i, node) in graph.nodes.iter_mut().enumerate() {
                        node.update_from_gpu_node(&updated_nodes[i]);
                    }
                }
                Ok(())
            },
            None => {
                warn!("GPU not available. Falling back to CPU-based layout calculation.");
                Self::calculate_layout_cpu(graph, params.iterations, params.spring_strength, params.damping);
                Ok(())
            }
        }
    }

    fn calculate_layout_cpu(graph: &mut GraphData, iterations: u32, spring_strength: f32, damping: f32) {
        let repulsion_strength = spring_strength * 10000.0;
        
        for _ in 0..iterations {
            // Calculate forces between nodes
            let mut forces = vec![(0.0, 0.0, 0.0); graph.nodes.len()];
            
            // Calculate repulsion forces
            for i in 0..graph.nodes.len() {
                for j in i+1..graph.nodes.len() {
                    let dx = graph.nodes[j].x() - graph.nodes[i].x();
                    let dy = graph.nodes[j].y() - graph.nodes[i].y();
                    let dz = graph.nodes[j].z() - graph.nodes[i].z();
                    
                    let distance = (dx * dx + dy * dy + dz * dz).sqrt();
                    if distance > 0.0 {
                        let force = repulsion_strength / (distance * distance);
                        
                        let fx = dx * force / distance;
                        let fy = dy * force / distance;
                        let fz = dz * force / distance;
                        
                        forces[i].0 -= fx;
                        forces[i].1 -= fy;
                        forces[i].2 -= fz;
                        
                        forces[j].0 += fx;
                        forces[j].1 += fy;
                        forces[j].2 += fz;
                    }
                }
            }

            // Calculate spring forces along edges
            for edge in &graph.edges {
                // Find indices of source and target nodes
                let source_idx = graph.nodes.iter().position(|n| n.id == edge.source);
                let target_idx = graph.nodes.iter().position(|n| n.id == edge.target);
                
                if let (Some(si), Some(ti)) = (source_idx, target_idx) {
                    let source = &graph.nodes[si];
                    let target = &graph.nodes[ti];
                    
                    let dx = target.x() - source.x();
                    let dy = target.y() - source.y();
                    let dz = target.z() - source.z();
                    
                    let distance = (dx * dx + dy * dy + dz * dz).sqrt();
                    if distance > 0.0 {
                        // Scale force by edge weight
                        let force = spring_strength * (distance - 30.0) * edge.weight;
                        
                        let fx = dx * force / distance;
                        let fy = dy * force / distance;
                        let fz = dz * force / distance;
                        
                        forces[si].0 += fx;
                        forces[si].1 += fy;
                        forces[si].2 += fz;
                        
                        forces[ti].0 -= fx;
                        forces[ti].1 -= fy;
                        forces[ti].2 -= fz;
                    }
                }
            }
            
            // Apply forces and update positions
            for (i, node) in graph.nodes.iter_mut().enumerate() {
                let vx = node.vx() + forces[i].0;
                let vy = node.vy() + forces[i].1;
                let vz = node.vz() + forces[i].2;
                
                let x = node.x() + vx;
                let y = node.y() + vy;
                let z = node.z() + vz;
                
                node.set_vx(vx * damping);
                node.set_vy(vy * damping);
                node.set_vz(vz * damping);
                
                node.set_x(x);
                node.set_y(y);
                node.set_z(z);
            }
        }
    }
}

----
services/mod.rs
pub mod file_service;
pub mod github_service;
pub mod graph_service;
pub mod perplexity_service;
pub mod ragflow_service;
pub mod speech_service;

----
services/speech_service.rs
use tokio::sync::{mpsc, Mutex, RwLock};
use tokio_tungstenite::{connect_async, WebSocketStream, MaybeTlsStream};
use tungstenite::protocol::Message;
use tungstenite::http::Request;
use serde_json::json;
use std::sync::Arc;
use tokio::task;
use crate::config::Settings;
use log::{info, error, debug};
use futures::{SinkExt, StreamExt};
use std::error::Error;
use std::fmt;
use tokio::net::TcpStream;
use url::Url;
use std::process::{Command, Stdio};
use std::io::Write;
use base64::Engine as _;
use base64::engine::general_purpose::STANDARD as BASE64;

#[derive(Debug)]
pub enum SpeechError {
    WebSocketError(tungstenite::Error),
    ConnectionError(String),
    SendError(mpsc::error::SendError<SpeechCommand>),
    SerializationError(serde_json::Error),
    ProcessError(std::io::Error),
    Base64Error(base64::DecodeError),
    BroadcastError(String),
    TTSError(String),
}

impl fmt::Display for SpeechError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            SpeechError::WebSocketError(e) => write!(f, "WebSocket error: {}", e),
            SpeechError::ConnectionError(msg) => write!(f, "Connection error: {}", msg),
            SpeechError::SendError(e) => write!(f, "Send error: {}", e),
            SpeechError::SerializationError(e) => write!(f, "Serialization error: {}", e),
            SpeechError::ProcessError(e) => write!(f, "Process error: {}", e),
            SpeechError::Base64Error(e) => write!(f, "Base64 error: {}", e),
            SpeechError::BroadcastError(msg) => write!(f, "Broadcast error: {}", msg),
            SpeechError::TTSError(msg) => write!(f, "TTS error: {}", msg),
        }
    }
}

impl Error for SpeechError {}

impl From<tungstenite::Error> for SpeechError {
    fn from(err: tungstenite::Error) -> Self {
        SpeechError::WebSocketError(err)
    }
}

impl From<mpsc::error::SendError<SpeechCommand>> for SpeechError {
    fn from(err: mpsc::error::SendError<SpeechCommand>) -> Self {
        SpeechError::SendError(err)
    }
}

impl From<serde_json::Error> for SpeechError {
    fn from(err: serde_json::Error) -> Self {
        SpeechError::SerializationError(err)
    }
}

impl From<std::io::Error> for SpeechError {
    fn from(err: std::io::Error) -> Self {
        SpeechError::ProcessError(err)
    }
}

impl From<base64::DecodeError> for SpeechError {
    fn from(err: base64::DecodeError) -> Self {
        SpeechError::Base64Error(err)
    }
}

#[derive(Debug, Clone)]
pub enum TTSProvider {
    OpenAI,
    Sonata,
}

#[derive(Debug)]
enum SpeechCommand {
    Initialize,
    SendMessage(String),
    Close,
    SetTTSProvider(TTSProvider),
}

pub struct SpeechService {
    sender: Arc<Mutex<mpsc::Sender<SpeechCommand>>>,
    settings: Arc<RwLock<Settings>>,
    tts_provider: Arc<RwLock<TTSProvider>>,
}

impl SpeechService {
    pub fn new(settings: Arc<RwLock<Settings>>) -> Self {
        let (tx, rx) = mpsc::channel(100);
        let sender = Arc::new(Mutex::new(tx));

        let service = SpeechService {
            sender,
            settings,
            tts_provider: Arc::new(RwLock::new(TTSProvider::Sonata)),
        };

        service.start(rx);
        service
    }

    fn start(&self, mut receiver: mpsc::Receiver<SpeechCommand>) {
        let settings = Arc::clone(&self.settings);
        let tts_provider = Arc::clone(&self.tts_provider);

        task::spawn(async move {
            let mut ws_stream: Option<WebSocketStream<MaybeTlsStream<TcpStream>>> = None;

            while let Some(command) = receiver.recv().await {
                match command {
                    SpeechCommand::Initialize => {
                        let current_provider = tts_provider.read().await;
                        if let TTSProvider::OpenAI = *current_provider {
                            let settings = settings.read().await;
                            
                            let url = format!(
                                "wss://api.openai.com/v1/realtime?model=gpt-4o-realtime-preview-2024-10-01"
                            );
                            let url = match Url::parse(&url) {
                                Ok(url) => url,
                                Err(e) => {
                                    error!("Failed to parse OpenAI URL: {}", e);
                                    continue;
                                }
                            };
                            
                            let request = match Request::builder()
                                .uri(url.as_str())
                                .header("Authorization", format!("Bearer {}", settings.openai.api_key))
                                .header("OpenAI-Beta", "realtime=v1")
                                .header("Content-Type", "application/json")
                                .header("User-Agent", "WebXR Graph")
                                .header("Sec-WebSocket-Version", "13")
                                .header("Sec-WebSocket-Key", tungstenite::handshake::client::generate_key())
                                .header("Connection", "Upgrade")
                                .header("Upgrade", "websocket")
                                .body(()) {
                                    Ok(req) => req,
                                    Err(e) => {
                                        error!("Failed to build request: {}", e);
                                        continue;
                                    }
                                };

                            match connect_async(request).await {
                                Ok((mut stream, _)) => {
                                    info!("Connected to OpenAI Realtime API");
                                    
                                    let init_event = json!({
                                        "type": "response.create",
                                        "response": {
                                            "modalities": ["text", "audio"],
                                            "instructions": "You are a helpful AI assistant. Respond naturally and conversationally."
                                        }
                                    });
                                    
                                    if let Err(e) = stream.send(Message::Text(init_event.to_string())).await {
                                        error!("Failed to send initial response.create event: {}", e);
                                        continue;
                                    }
                                    
                                    ws_stream = Some(stream);
                                },
                                Err(e) => error!("Failed to connect to OpenAI Realtime API: {}", e),
                            }
                        }
                    },
                    SpeechCommand::SendMessage(msg) => {
                        let current_provider = tts_provider.read().await;
                        match *current_provider {
                            TTSProvider::OpenAI => {
                                if let Some(stream) = &mut ws_stream {
                                    let msg_event = json!({
                                        "type": "conversation.item.create",
                                        "item": {
                                            "type": "message",
                                            "role": "user",
                                            "content": [{
                                                "type": "input_text",
                                                "text": msg
                                            }]
                                        }
                                    });

                                    if let Err(e) = stream.send(Message::Text(msg_event.to_string())).await {
                                        error!("Failed to send message to OpenAI: {}", e);
                                        continue;
                                    }

                                    let response_event = json!({
                                        "type": "response.create"
                                    });
                                    
                                    if let Err(e) = stream.send(Message::Text(response_event.to_string())).await {
                                        error!("Failed to request response from OpenAI: {}", e);
                                        continue;
                                    }
                                    
                                    while let Some(message) = stream.next().await {
                                        match message {
                                            Ok(Message::Text(text)) => {
                                                let event = match serde_json::from_str::<serde_json::Value>(&text) {
                                                    Ok(event) => event,
                                                    Err(e) => {
                                                        error!("Failed to parse server event: {}", e);
                                                        continue;
                                                    }
                                                };
                                                
                                                match event["type"].as_str() {
                                                    Some("conversation.item.created") => {
                                                        if let Some(content) = event["item"]["content"].as_array() {
                                                            for item in content {
                                                                if item["type"] == "audio" {
                                                                    if let Some(audio_data) = item["audio"].as_str() {
                                                                        match BASE64.decode(audio_data) {
                                                                            Ok(audio_bytes) => {
                                                                                // Note: Audio data will be handled by socket-flow server
                                                                                debug!("Received audio data of size: {}", audio_bytes.len());
                                                                            },
                                                                            Err(e) => error!("Failed to decode audio data: {}", e),
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    Some("error") => {
                                                        error!("OpenAI Realtime API error: {:?}", event);
                                                        break;
                                                    },
                                                    Some("response.completed") => break,
                                                    _ => {}
                                                }
                                            },
                                            Ok(Message::Close(_)) => break,
                                            Err(e) => {
                                                error!("Error receiving from OpenAI: {}", e);
                                                break;
                                            },
                                            _ => {}
                                        }
                                    }
                                } else {
                                    error!("OpenAI WebSocket not initialized");
                                }
                            },
                            TTSProvider::Sonata => {
                                let mut child = match Command::new("python3")
                                    .arg("src/generate_audio.py")
                                    .stdin(Stdio::piped())
                                    .stdout(Stdio::piped())
                                    .spawn() {
                                        Ok(child) => child,
                                        Err(e) => {
                                            error!("Failed to spawn Python process: {}", e);
                                            continue;
                                        }
                                    };

                                if let Some(mut stdin) = child.stdin.take() {
                                    if let Err(e) = stdin.write_all(msg.as_bytes()) {
                                        error!("Failed to write to stdin: {}", e);
                                        continue;
                                    }
                                    drop(stdin);
                                }

                                match child.wait_with_output() {
                                    Ok(output) => {
                                        if output.status.success() {
                                            // Note: Audio data will be handled by socket-flow server
                                            debug!("Generated audio data of size: {}", output.stdout.len());
                                        } else {
                                            error!("Sonata TTS failed: {}", String::from_utf8_lossy(&output.stderr));
                                        }
                                    },
                                    Err(e) => error!("Failed to get child process output: {}", e),
                                }
                            }
                        }
                    },
                    SpeechCommand::Close => {
                        if let Some(mut stream) = ws_stream.take() {
                            if let Err(e) = stream.send(Message::Close(None)).await {
                                error!("Failed to send close frame: {}", e);
                            }
                        }
                        break;
                    },
                    SpeechCommand::SetTTSProvider(new_provider) => {
                        let mut provider = tts_provider.write().await;
                        *provider = new_provider;
                        info!("TTS provider set to: {:?}", *provider);
                    }
                }
            }
        });
    }

    pub async fn initialize(&self) -> Result<(), Box<dyn Error>> {
        let command = SpeechCommand::Initialize;
        self.sender.lock().await.send(command).await.map_err(|e| Box::new(SpeechError::from(e)))?;
        Ok(())
    }

    pub async fn send_message(&self, message: String) -> Result<(), Box<dyn Error>> {
        let command = SpeechCommand::SendMessage(message);
        self.sender.lock().await.send(command).await.map_err(|e| Box::new(SpeechError::from(e)))?;
        Ok(())
    }

    pub async fn close(&self) -> Result<(), Box<dyn Error>> {
        let command = SpeechCommand::Close;
        self.sender.lock().await.send(command).await.map_err(|e| Box::new(SpeechError::from(e)))?;
        Ok(())
    }

    pub async fn set_tts_provider(&self, use_openai: bool) -> Result<(), Box<dyn Error>> {
        let provider = if use_openai {
            TTSProvider::OpenAI
        } else {
            TTSProvider::Sonata
        };
        let command = SpeechCommand::SetTTSProvider(provider);
        self.sender.lock().await.send(command).await.map_err(|e| Box::new(SpeechError::from(e)))?;
        Ok(())
    }
}

----
services/ragflow_service.rs
use reqwest::{Client, StatusCode};
use log::{error, info};
use crate::config::Settings;
use std::fmt;
use futures::stream::{Stream, StreamExt};
use std::pin::Pin;
use serde_json::json;
use std::sync::Arc;
use tokio::sync::RwLock;

#[derive(Debug)]
pub enum RAGFlowError {
    ReqwestError(reqwest::Error),
    StatusError(StatusCode, String),
    ParseError(String),
    IoError(std::io::Error),
}

impl fmt::Display for RAGFlowError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            RAGFlowError::ReqwestError(e) => write!(f, "Reqwest error: {}", e),
            RAGFlowError::StatusError(status, msg) => write!(f, "Status error ({}): {}", status, msg),
            RAGFlowError::ParseError(msg) => write!(f, "Parse error: {}", msg),
            RAGFlowError::IoError(e) => write!(f, "IO error: {}", e),
        }
    }
}

impl std::error::Error for RAGFlowError {}

impl From<reqwest::Error> for RAGFlowError {
    fn from(err: reqwest::Error) -> Self {
        RAGFlowError::ReqwestError(err)
    }
}

impl From<std::io::Error> for RAGFlowError {
    fn from(err: std::io::Error) -> Self {
        RAGFlowError::IoError(err)
    }
}

pub struct RAGFlowService {
    client: Client,
    api_key: String,
    base_url: String,
}

impl RAGFlowService {
    pub async fn new(settings: Arc<RwLock<Settings>>) -> Result<Self, RAGFlowError> {
        let client = Client::new();
        let settings = settings.read().await;

        Ok(RAGFlowService {
            client,
            api_key: settings.ragflow.api_key.clone(),
            base_url: settings.ragflow.base_url.clone(),
        })
    }

    pub async fn create_conversation(&self, user_id: String) -> Result<String, RAGFlowError> {
        info!("Creating conversation for user: {}", user_id);
        let url = format!("{}api/new_conversation", self.base_url);
        info!("Full URL for create_conversation: {}", url);
        
        let response = self.client.get(&url)
            .header("Authorization", format!("Bearer {}", self.api_key))
            .query(&[("user_id", user_id)])
            .send()
            .await?;

        let status = response.status();
        info!("Response status: {}", status);

        if status.is_success() {
            let result: serde_json::Value = response.json().await?;
            info!("Successful response: {:?}", result);
            Ok(result["data"]["id"].as_str().unwrap_or("").to_string())
        } else {
            let error_message = response.text().await?;
            error!("Failed to create conversation. Status: {}, Error: {}", status, error_message);
            Err(RAGFlowError::StatusError(status, error_message))
        }
    }

    pub async fn send_message(
        &self,
        conversation_id: String,
        message: String,
        quote: bool,
        doc_ids: Option<Vec<String>>,
        stream: bool,
    ) -> Result<Pin<Box<dyn Stream<Item = Result<String, RAGFlowError>> + Send + 'static>>, RAGFlowError> {
        info!("Sending message to conversation: {}", conversation_id);
        let url = format!("{}api/completion", self.base_url);
        info!("Full URL for send_message: {}", url);
        
        let mut request_body = json!({
            "conversation_id": conversation_id,
            "messages": [{"role": "user", "content": message}],
            "quote": quote,
            "stream": stream
        });

        if let Some(ids) = doc_ids {
            request_body["doc_ids"] = serde_json::json!(ids.join(","));
        }

        info!("Request body: {:?}", request_body);

        let response = self.client.post(&url)
            .header("Authorization", format!("Bearer {}", self.api_key))
            .header("Content-Type", "application/json")
            .json(&request_body)
            .send()
            .await?;

        let status = response.status();
        info!("Response status: {}", status);
       
        if status.is_success() {
            let stream = response.bytes_stream().map(move |chunk_result| {
                match chunk_result {
                    Ok(chunk) => {
                        match serde_json::from_slice::<serde_json::Value>(&chunk) {
                            Ok(json_response) => {
                                // Extract text answer from the response
                                match json_response["data"]["answer"].as_str()
                                    .or_else(|| json_response["answer"].as_str()) {
                                    Some(answer) => Ok(answer.to_string()),
                                    None => Err(RAGFlowError::ParseError("No answer found in response".to_string()))
                                }
                            },
                            Err(e) => Err(RAGFlowError::ParseError(format!("Failed to parse JSON response: {}", e))),
                        }
                    },
                    Err(e) => Err(RAGFlowError::ReqwestError(e)),
                }
            });

            Ok(Box::pin(stream))
        } else {
            let error_message = response.text().await?;
            error!("Failed to send message. Status: {}, Error: {}", status, error_message);
            Err(RAGFlowError::StatusError(status, error_message))
        }
    }

    pub async fn get_conversation_history(&self, conversation_id: String) -> Result<serde_json::Value, RAGFlowError> {
        let url = format!("{}api/conversation/{}", self.base_url, conversation_id);
        let response = self.client.get(&url)
            .header("Authorization", format!("Bearer {}", self.api_key))
            .send()
            .await?;

        let status = response.status();
        if status.is_success() {
            let history: serde_json::Value = response.json().await?;
            Ok(history)
        } else {
            let error_message = response.text().await?;
            error!("Failed to get conversation history. Status: {}, Error: {}", status, error_message);
            Err(RAGFlowError::StatusError(status, error_message))
        }
    }
}

impl Clone for RAGFlowService {
    fn clone(&self) -> Self {
        RAGFlowService {
            client: self.client.clone(),
            api_key: self.api_key.clone(),
            base_url: self.base_url.clone(),
        }
    }
}

----
services/github_service.rs
use reqwest::Client;
use serde::{Serialize, Deserialize};
use async_trait::async_trait;
use log::{info, error};
use std::error::Error;
use base64::{Engine as _, engine::general_purpose::STANDARD as BASE64};

#[derive(Debug)]
pub enum GitHubError {
    ApiError(String),
    NetworkError(reqwest::Error),
    SerializationError(serde_json::Error),
    ValidationError(String),
    Base64Error(base64::DecodeError),
}

impl std::fmt::Display for GitHubError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            GitHubError::ApiError(msg) => write!(f, "GitHub API error: {}", msg),
            GitHubError::NetworkError(e) => write!(f, "Network error: {}", e),
            GitHubError::SerializationError(e) => write!(f, "Serialization error: {}", e),
            GitHubError::ValidationError(msg) => write!(f, "Validation error: {}", msg),
            GitHubError::Base64Error(e) => write!(f, "Base64 encoding error: {}", e),
        }
    }
}

impl Error for GitHubError {}

impl From<reqwest::Error> for GitHubError {
    fn from(err: reqwest::Error) -> Self {
        GitHubError::NetworkError(err)
    }
}

impl From<serde_json::Error> for GitHubError {
    fn from(err: serde_json::Error) -> Self {
        GitHubError::SerializationError(err)
    }
}

impl From<base64::DecodeError> for GitHubError {
    fn from(err: base64::DecodeError) -> Self {
        GitHubError::Base64Error(err)
    }
}

#[derive(Debug, Serialize)]
struct CreateBranchRequest {
    pub ref_name: String,
    pub sha: String,
}

#[derive(Debug, Serialize)]
struct CreatePullRequest {
    pub title: String,
    pub head: String,
    pub base: String,
    pub body: String,
}

#[derive(Debug, Serialize)]
struct UpdateFileRequest {
    pub message: String,
    pub content: String,
    pub sha: String,
    pub branch: String,
}

#[derive(Debug, Deserialize)]
struct FileResponse {
    pub sha: String,
}

#[async_trait]
pub trait GitHubPRService: Send + Sync {
    async fn create_pull_request(
        &self,
        file_name: &str,
        content: &str,
        original_sha: &str,
    ) -> Result<String, Box<dyn Error + Send + Sync>>;
}

pub struct RealGitHubPRService {
    client: Client,
    token: String,
    owner: String,
    repo: String,
    base_path: String,
}

impl RealGitHubPRService {
    pub fn new(
        token: String,
        owner: String,
        repo: String,
        base_path: String,
    ) -> Result<Self, Box<dyn Error + Send + Sync>> {
        let client = Client::builder()
            .user_agent("rust-github-api")
            .build()
            .map_err(GitHubError::from)?;

        Ok(Self {
            client,
            token,
            owner,
            repo,
            base_path,
        })
    }

    async fn get_main_branch_sha(&self) -> Result<String, Box<dyn Error + Send + Sync>> {
        let url = format!(
            "https://api.github.com/repos/{}/{}/git/ref/heads/main",
            self.owner, self.repo
        );

        let response = self.client
            .get(&url)
            .header("Authorization", format!("Bearer {}", self.token))
            .header("Accept", "application/vnd.github+json")
            .send()
            .await
            .map_err(GitHubError::from)?;

        if !response.status().is_success() {
            let error_text = response.text().await.map_err(GitHubError::from)?;
            error!("Failed to get main branch SHA: {}", error_text);
            return Err(GitHubError::ApiError(error_text).into());
        }

        let response_json: serde_json::Value = response.json().await.map_err(GitHubError::from)?;
        Ok(response_json["object"]["sha"]
            .as_str()
            .ok_or_else(|| GitHubError::ValidationError("SHA not found".to_string()))?
            .to_string())
    }

    async fn create_branch(&self, branch_name: &str, sha: &str) -> Result<(), Box<dyn Error + Send + Sync>> {
        let url = format!(
            "https://api.github.com/repos/{}/{}/git/refs",
            self.owner, self.repo
        );

        let body = CreateBranchRequest {
            ref_name: format!("refs/heads/{}", branch_name),
            sha: sha.to_string(),
        };

        let response = self.client
            .post(&url)
            .header("Authorization", format!("Bearer {}", self.token))
            .header("Accept", "application/vnd.github+json")
            .json(&body)
            .send()
            .await
            .map_err(GitHubError::from)?;

        if !response.status().is_success() {
            let error_text = response.text().await.map_err(GitHubError::from)?;
            error!("Failed to create branch: {}", error_text);
            return Err(GitHubError::ApiError(error_text).into());
        }

        Ok(())
    }

    async fn update_file(
        &self,
        file_path: &str,
        content: &str,
        branch_name: &str,
        original_sha: &str,
    ) -> Result<String, Box<dyn Error + Send + Sync>> {
        let url = format!(
            "https://api.github.com/repos/{}/{}/contents/{}",
            self.owner, self.repo, file_path
        );

        let encoded_content = BASE64.encode(content);
        
        let body = UpdateFileRequest {
            message: format!("Update {} with Perplexity-enhanced content", file_path),
            content: encoded_content,
            sha: original_sha.to_string(),
            branch: branch_name.to_string(),
        };

        let response = self.client
            .put(&url)
            .header("Authorization", format!("Bearer {}", self.token))
            .header("Accept", "application/vnd.github+json")
            .json(&body)
            .send()
            .await
            .map_err(GitHubError::from)?;

        if !response.status().is_success() {
            let error_text = response.text().await.map_err(GitHubError::from)?;
            error!("Failed to update file: {}", error_text);
            return Err(GitHubError::ApiError(error_text).into());
        }

        let file_response: FileResponse = response.json().await.map_err(GitHubError::from)?;
        Ok(file_response.sha)
    }
}

#[async_trait]
impl GitHubPRService for RealGitHubPRService {
    async fn create_pull_request(
        &self,
        file_name: &str,
        content: &str,
        original_sha: &str,
    ) -> Result<String, Box<dyn Error + Send + Sync>> {
        let timestamp = chrono::Utc::now().timestamp();
        let branch_name = format!("perplexity-update-{}-{}", file_name.replace(".md", ""), timestamp);
        
        let main_sha = self.get_main_branch_sha().await?;
        self.create_branch(&branch_name, &main_sha).await?;
        
        let file_path = format!("{}/{}", self.base_path, file_name);
        let new_sha = self.update_file(&file_path, content, &branch_name, original_sha).await?;
        
        let url = format!(
            "https://api.github.com/repos/{}/{}/pulls",
            self.owner, self.repo
        );

        let pr_body = CreatePullRequest {
            title: format!("Perplexity Enhancement: {}", file_name),
            head: branch_name,
            base: "main".to_string(),
            body: format!(
                "This PR contains Perplexity-enhanced content for {}.\n\nOriginal SHA: {}\nNew SHA: {}",
                file_name, original_sha, new_sha
            ),
        };

        let response = self.client
            .post(&url)
            .header("Authorization", format!("Bearer {}", self.token))
            .header("Accept", "application/vnd.github+json")
            .json(&pr_body)
            .send()
            .await
            .map_err(GitHubError::from)?;

        if !response.status().is_success() {
            let error_text = response.text().await.map_err(GitHubError::from)?;
            error!("Failed to create PR: {}", error_text);
            return Err(GitHubError::ApiError(error_text).into());
        }

        let pr_response: serde_json::Value = response.json().await.map_err(GitHubError::from)?;
        let pr_url = pr_response["html_url"]
            .as_str()
            .ok_or_else(|| GitHubError::ValidationError("PR URL not found".to_string()))?
            .to_string();

        info!("Created PR: {}", pr_url);
        Ok(pr_url)
    }
}

--END--The following text represents a project with code. The structure of the text consists of sections beginning with ----, followed by a single line containing the file path and file name, and then a variable number of lines containing the file contents. The text representing the project ends when the symbols --END-- are encountered. Any further text beyond --END-- is meant to be interpreted as instructions using the aforementioned project as context.
----
index.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>LogseqXR Graph Visualization</title>
  <link rel="stylesheet" href="/ui/ControlPanel.css">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      overflow: hidden;
      font-family: Arial, sans-serif;
      background-color: #000;
      color: #fff;
    }

    #canvas-container {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }

    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.9);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 2000;
    }

    .loading-overlay .spinner {
      width: 50px;
      height: 50px;
      border: 3px solid rgba(255, 255, 255, 0.1);
      border-radius: 50%;
      border-top-color: #4a90e2;
      animation: spin 1s ease-in-out infinite;
    }

    @keyframes spin {
      to { transform: rotate(360deg); }
    }

    .error-message {
      position: fixed;
      top: 20px;
      right: 20px;
      background: rgba(255, 59, 48, 0.9);
      color: white;
      padding: 12px 20px;
      border-radius: 6px;
      font-size: 14px;
      z-index: 2001;
      animation: fadeIn 0.3s ease;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-10px); }
      to { opacity: 1; transform: translateY(0); }
    }
  </style>
</head>
<body>
  <div class="loading-overlay">
    <div class="spinner"></div>
  </div>
  <div id="canvas-container">
    <canvas id="main-canvas"></canvas>
  </div>
  <script type="module" src="/index.ts"></script>
</body>
</html>

----
tsconfig.json
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "module": "ESNext",
    "lib": [
      "es2020",
      "dom",
      "dom.iterable",
      "webworker",
      "webworker.importscripts",
      "webworker.iterable"
    ],
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitAny": true,
    "noImplicitThis": true,
    "noImplicitReturns": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "strictBindCallApply": true,
    "strictPropertyInitialization": true,
    "allowJs": true,
    "checkJs": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": ["**/*.ts", "**/*.d.ts"],
  "exclude": ["node_modules"]
}

----
implementationPlan.md
# Implementation Plan

This new implementation should be best in class "mixed reality first" app structure, leaning heavily into the meta quest 3. The desktop interface remains important for managing settings through a clean TypeScript-based UI, while keeping the Meta Quest AR interface focused and uncluttered.

High-Level Goals:

Mixed Reality First, Desktop Second: ✓
- Optimal Meta Quest 3 experience
- Clean AR interface without control panels
- Desktop UI for settings management
- Unified codebase

Clean, Modern Architecture: ✓
- Pure TypeScript implementation
- Three.js for rendering
- No Vue.js dependencies
- Simple, efficient state management

Unified Settings Management: ✓
Settings are stored on the server in settings.toml. The desktop interface allows users to adjust these settings and save them back to the server. The Quest version reads and applies these same settings.
- ✓ Core settings types and interfaces
- ✓ Settings state management
- ✓ REST endpoints for settings (GET/PUT)
- ✓ Settings integration with rendering
- ✓ Desktop settings panel UI
- ✓ Settings persistence and save functionality

Architecture Overview:
```
client/
  ├─ core/              # Core types, constants, utilities ✓
  │  ├─ types.ts        # Core interfaces and types ✓
  │  ├─ constants.ts    # Shared constants ✓
  │  └─ utils.ts        # Helper functions ✓
  │
  ├─ state/             # Centralized state (settings, graph data) ✓
  │  ├─ settings.ts     # Settings management ✓
  │  └─ graphData.ts    # Graph data management ✓
  │
  ├─ rendering/         # Three.js scene, nodes/edges, text rendering ✓
  │  ├─ scene.ts        # Scene management ✓
  │  ├─ nodes.ts        # Node and edge rendering ✓
  │  └─ textRenderer.ts # Text label rendering ✓
  │
  ├─ xr/                # XR integration (Quest 3 focus, extends scene) ✓
  │  ├─ xrSessionManager.ts  # XR session handling ✓
  │  └─ xrInteraction.ts     # XR input and interaction ✓
  │
  ├─ platform/          # Platform abstraction (detect Quest vs Desktop) ✓
  │  └─ platformManager.ts    # Platform detection and capabilities ✓
  │
  ├─ websocket/         # WebSocket service and message handling ✓
  │  └─ websocketService.ts   # Real-time communication ✓
  │
  ├─ types/             # TypeScript declarations for Three.js and WebXR ✓
  │  ├─ three.d.ts      # Three.js type definitions ✓
  │  └─ webxr.d.ts      # WebXR type definitions ✓
  │
  ├─ ui/                # Minimal UI components (desktop settings panel) ✓
  │  ├─ ControlPanel.ts     # Settings panel UI ✓
  │  └─ ControlPanel.css    # Settings panel styles ✓
  │
  └─ main.ts            # Application entry point (initializes everything) ✓
```

Protocol Separation: ✓
- Settings Management (REST):
  * GET /api/visualization/settings for loading
  * PUT /api/visualization/settings for saving
  * Clean error handling
  * Settings persistence to settings.toml

- Graph Data:
  * Initial load via REST
  * Real-time updates via WebSocket
  * Binary format for efficiency
  * Type-safe data handling

Implementation Status:

1. Core Components: ✓
- Types and interfaces
- Constants and utilities
- Vector3 standardization
- Error handling

2. State Management: ✓
- Settings via REST
- Graph data hybrid approach
- Clean protocol separation
- Type-safe operations

3. UI Components: ✓
- TypeScript-based control panel
- Modern, responsive design
- Desktop-only display
- Clean Meta Quest interface

4. XR Integration: ✓
- Meta Quest 3 optimized
- Spatial awareness features
- Hand tracking and gestures
- Environment-aware lighting

5. Architecture: ✓
- Pure TypeScript
- No Vue.js dependencies
- Clean protocol separation
- Efficient data handling

Next Steps:
1. Testing and validation
2. Performance optimization
3. Documentation updates
4. User feedback integration

The implementation provides:
- Best-in-class mixed reality experience
- Clean desktop management interface
- Efficient data handling
- Type safety throughout
- Clear separation of concerns

----
index.ts
/**
 * LogseqXR Application Entry Point
 */

import { platformManager } from './platform/platformManager';
import { settingsManager } from './state/settings';
import { graphDataManager } from './state/graphData';
import { WebSocketService } from './websocket/websocketService';
import { SceneManager } from './rendering/scene';
import { NodeManager } from './rendering/nodes';
import { TextRenderer } from './rendering/textRenderer';
import { XRSessionManager } from './xr/xrSessionManager';
import { XRInteraction } from './xr/xrInteraction';
import { createLogger } from './core/utils';
import { WS_URL } from './core/constants';
import { BinaryPositionUpdateMessage } from './core/types';
import { ControlPanel } from './ui';

const logger = createLogger('Application');

class Application {
    private webSocket!: WebSocketService;
    private sceneManager!: SceneManager;
    private nodeManager!: NodeManager;
    private textRenderer!: TextRenderer;
    private xrManager: XRSessionManager | null = null;
    private xrInteraction: XRInteraction | null = null;

    constructor() {
        this.initializeApplication();
    }

    private async initializeApplication(): Promise<void> {
        try {
            // Initialize platform manager
            await platformManager.initialize();

            // Initialize scene first so we can render nodes when data arrives
            this.initializeScene();

            // Load initial graph data from REST endpoint
            await graphDataManager.loadGraphData();
            
            // Load settings from REST endpoint
            await settingsManager.loadSettings();

            // Initialize WebSocket for real-time updates
            this.initializeWebSocket();

            // Initialize XR if supported
            await this.initializeXR();

            // Initialize UI components after settings are loaded
            new ControlPanel();

            // Setup UI event listeners
            this.setupUIEventListeners();

            // Hide loading overlay
            this.hideLoadingOverlay();

            logger.log('Application initialized successfully');
        } catch (error) {
            logger.error('Failed to initialize application:', error);
            this.showError('Failed to initialize application');
        }
    }

    private initializeWebSocket(): void {
        // Create WebSocket service with environment-aware URL
        this.webSocket = new WebSocketService(WS_URL);

        // Setup WebSocket event handler for binary position updates
        this.webSocket.on('binaryPositionUpdate', (data: BinaryPositionUpdateMessage['data']) => {
            if (data && data.nodes) {
                // Convert nodes data to ArrayBuffer for position updates
                const buffer = new ArrayBuffer(data.nodes.length * 24); // 6 floats per node
                const floatArray = new Float32Array(buffer);
                
                data.nodes.forEach((node, index) => {
                    const baseIndex = index * 6;
                    const pos = node.data.position;
                    const vel = node.data.velocity;
                    
                    // Position
                    floatArray[baseIndex] = pos.x;
                    floatArray[baseIndex + 1] = pos.y;
                    floatArray[baseIndex + 2] = pos.z;
                    // Velocity
                    floatArray[baseIndex + 3] = vel.x;
                    floatArray[baseIndex + 4] = vel.y;
                    floatArray[baseIndex + 5] = vel.z;
                });

                // Update graph data and visual representation
                graphDataManager.updatePositions(buffer);
                this.nodeManager.updatePositions(floatArray);
            }
        });

        // Connect to server
        this.webSocket.connect();
    }

    private initializeScene(): void {
        // Get canvas element
        const container = document.getElementById('canvas-container');
        if (!container) {
            throw new Error('Canvas container not found');
        }

        // Create canvas
        const canvas = document.createElement('canvas');
        container.appendChild(canvas);

        // Initialize scene manager
        this.sceneManager = SceneManager.getInstance(canvas);

        // Initialize node manager
        this.nodeManager = NodeManager.getInstance(this.sceneManager);

        // Initialize text renderer
        this.textRenderer = TextRenderer.getInstance(
            this.sceneManager.getScene(),
            this.sceneManager.getCamera()
        );

        // Start rendering
        this.sceneManager.start();
    }

    private async initializeXR(): Promise<void> {
        if (platformManager.getCapabilities().xrSupported) {
            // Initialize XR manager
            this.xrManager = XRSessionManager.getInstance(this.sceneManager);

            // Initialize XR interaction
            if (this.xrManager && this.nodeManager) {
                this.xrInteraction = XRInteraction.getInstance(this.xrManager, this.nodeManager);
            }

            // Setup XR button
            const xrButton = document.getElementById('xr-button');
            if (xrButton) {
                xrButton.style.display = 'block';
                xrButton.addEventListener('click', () => this.toggleXRSession());
            }
        }
    }

    private setupUIEventListeners(): void {
        // Settings panel save button
        const saveButton = document.getElementById('save-settings');
        if (saveButton) {
            saveButton.addEventListener('click', () => this.saveSettings());
        }

        // Settings inputs
        this.setupSettingsInputListeners();
    }

    private setupSettingsInputListeners(): void {
        // Node appearance settings
        this.setupSettingInput('nodeSize', 'number');
        this.setupSettingInput('nodeColor', 'color');
        this.setupSettingInput('nodeOpacity', 'number');

        // Edge appearance settings
        this.setupSettingInput('edgeWidth', 'number');
        this.setupSettingInput('edgeColor', 'color');
        this.setupSettingInput('edgeOpacity', 'number');

        // Visual effects settings
        this.setupSettingInput('enableBloom', 'checkbox');
        this.setupSettingInput('bloomIntensity', 'number');
    }

    private setupSettingInput(id: string, type: 'number' | 'color' | 'checkbox'): void {
        const input = document.getElementById(id) as HTMLInputElement;
        if (input) {
            input.addEventListener('change', () => {
                const value = type === 'checkbox' ? input.checked :
                            type === 'number' ? parseFloat(input.value) :
                            input.value;
                // Update settings and save to server via REST endpoint
                settingsManager.updateSettings({ [id]: value });
            });
        }
    }

    private async saveSettings(): Promise<void> {
        try {
            await settingsManager.saveSettings();
            logger.log('Settings saved successfully');
        } catch (error) {
            logger.error('Failed to save settings:', error);
            this.showError('Failed to save settings');
        }
    }

    private async toggleXRSession(): Promise<void> {
        if (!this.xrManager) return;

        try {
            if (this.xrManager.isXRPresenting()) {
                await this.xrManager.endXRSession();
            } else {
                await this.xrManager.initXRSession();
            }
        } catch (error) {
            logger.error('Failed to toggle XR session:', error);
            this.showError('Failed to start XR session');
        }
    }

    private hideLoadingOverlay(): void {
        const overlay = document.querySelector('.loading-overlay');
        if (overlay) {
            overlay.remove();
        }
    }

    private showError(message: string): void {
        logger.error(message);
        const errorDiv = document.createElement('div');
        errorDiv.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(255, 0, 0, 0.8);
            color: white;
            padding: 15px;
            border-radius: 5px;
            z-index: 1000;
        `;
        errorDiv.textContent = message;
        document.body.appendChild(errorDiv);
        setTimeout(() => errorDiv.remove(), 5000);
    }

    dispose(): void {
        // Dispose of managers in reverse order of initialization
        settingsManager.dispose();
        this.xrInteraction?.dispose();
        this.xrManager?.dispose();
        this.textRenderer.dispose();
        this.nodeManager.dispose();
        this.sceneManager.dispose();

        // Stop rendering
        this.sceneManager.stop();

        // Close WebSocket connection
        this.webSocket.disconnect();
    }
}

// Create application instance
const app = new Application();

// Handle window unload
window.addEventListener('unload', () => {
    app.dispose();
});

// Log application start
console.info('LogseqXR application starting...');

----
websocket/websocketService.ts
/**
 * WebSocket service for real-time communication
 */

import { 
  WebSocketMessage,
  RawWebSocketMessage,
  MessageType,
  InitialDataMessage,
  RawInitialDataMessage,
  BinaryPositionUpdateMessage,
  RawBinaryPositionUpdateMessage,
  RequestInitialDataMessage,
  EnableBinaryUpdatesMessage,
  PingMessage,
  transformGraphData,
} from '../core/types';
import { WS_RECONNECT_INTERVAL, WS_MESSAGE_QUEUE_SIZE } from '../core/constants';
import { createLogger } from '../core/utils';

const logger = createLogger('WebSocketService');

// Server configuration
const HEARTBEAT_INTERVAL = 15000; // 15 seconds
const BINARY_VERSION = 1.0;
const FLOATS_PER_NODE = 6; // x, y, z, vx, vy, vz
const VERSION_OFFSET = 1; // Skip version float

type MessageHandler = (data: any) => void;
type ErrorHandler = (error: Error) => void;
type ConnectionHandler = (connected: boolean) => void;
type NetworkMessage = string | ArrayBuffer | Float32Array;

// Network debug panel
class NetworkDebugPanel {
  private container: HTMLDivElement;
  private messageList: HTMLUListElement;
  private maxMessages = 50;
  private binaryMessageCount = 0;

  constructor() {
    this.container = document.createElement('div');
    this.container.style.cssText = `
      position: fixed;
      top: 10px;
      left: 10px;
      background: rgba(0, 0, 0, 0.8);
      color: #00ff00;
      padding: 10px;
      border-radius: 5px;
      font-family: monospace;
      font-size: 12px;
      max-height: 300px;
      overflow-y: auto;
      z-index: 1000;
      display: none;
    `;

    const title = document.createElement('div');
    title.textContent = 'Network Messages';
    title.style.marginBottom = '5px';
    this.container.appendChild(title);

    this.messageList = document.createElement('ul');
    this.messageList.style.cssText = `
      list-style: none;
      margin: 0;
      padding: 0;
    `;
    this.container.appendChild(this.messageList);

    document.body.appendChild(this.container);
  }

  addMessage(direction: 'in' | 'out', message: NetworkMessage): void {
    const item = document.createElement('li');
    const timestamp = new Date().toISOString().split('T')[1].slice(0, -1);
    const arrow = direction === 'in' ? '←' : '→';
    let displayMessage: string;

    if (message instanceof ArrayBuffer || message instanceof Float32Array) {
      this.binaryMessageCount++;
      const byteLength = message instanceof ArrayBuffer ? message.byteLength : message.buffer.byteLength;
      const nodeCount = Math.floor((byteLength / 4 - VERSION_OFFSET) / FLOATS_PER_NODE);
      displayMessage = `Binary update #${this.binaryMessageCount} (${nodeCount} nodes, ${byteLength} bytes)`;
    } else if (typeof message === 'string') {
      try {
        const parsed = JSON.parse(message);
        displayMessage = `${parsed.type} ${JSON.stringify(parsed.data || {}, null, 0)}`;
      } catch {
        displayMessage = message;
      }
    } else {
      displayMessage = JSON.stringify(message, null, 0);
    }

    item.textContent = `${timestamp} ${arrow} ${displayMessage}`;
    item.style.marginBottom = '2px';
    item.style.wordBreak = 'break-all';

    this.messageList.insertBefore(item, this.messageList.firstChild);

    while (this.messageList.children.length > this.maxMessages) {
      this.messageList.removeChild(this.messageList.lastChild!);
    }
  }
}

export class WebSocketService {
  private ws: WebSocket | null = null;
  private url: string;
  private reconnectTimeout: number | null = null;
  private heartbeatInterval: number | null = null;
  private messageQueue: WebSocketMessage[] = [];
  private messageHandlers: Map<MessageType, MessageHandler[]> = new Map();
  private errorHandlers: ErrorHandler[] = [];
  private connectionHandlers: ConnectionHandler[] = [];
  private isConnected: boolean = false;
  private debugPanel: NetworkDebugPanel | null = null;
  private expectedNodeCount: number = 0;

  constructor(url: string) {
    this.url = url;
    this.initializeHandlers();
    // Debug panel is now created but hidden by default
    this.debugPanel = new NetworkDebugPanel();
  }

  private initializeHandlers(): void {
    const messageTypes: MessageType[] = [
      'initialData',
      'requestInitialData',
      'binaryPositionUpdate',
      'settingsUpdated',
      'enableBinaryUpdates',
      'ping',
      'pong'
    ];
    messageTypes.forEach(type => this.messageHandlers.set(type, []));
  }

  connect(): void {
    if (this.ws) {
      this.ws.close();
    }

    try {
      this.ws = new WebSocket(this.url);
      this.setupWebSocket();
    } catch (error) {
      logger.error('Failed to create WebSocket connection:', error);
      this.scheduleReconnect();
    }
  }

  private setupWebSocket(): void {
    if (!this.ws) return;

    this.ws.binaryType = 'arraybuffer';

    this.ws.onopen = () => {
      logger.log('WebSocket connected');
      this.isConnected = true;
      this.notifyConnectionHandlers(true);
      this.startHeartbeat();
      
      const requestInitialData: RequestInitialDataMessage = { type: 'requestInitialData' };
      this.send(requestInitialData);
      
      this.processMessageQueue();
    };

    this.ws.onclose = () => {
      logger.warn('WebSocket disconnected');
      this.isConnected = false;
      this.notifyConnectionHandlers(false);
      this.cleanup();
      this.scheduleReconnect();
    };

    this.ws.onerror = (event) => {
      logger.error('WebSocket error:', event);
      this.notifyErrorHandlers(new Error('WebSocket error occurred'));
    };

    this.ws.onmessage = (event) => {
      if (this.debugPanel) {
        this.debugPanel.addMessage('in', event.data);
      }
      this.handleMessage(event);
    };
  }

  private handleMessage(event: MessageEvent): void {
    try {
      if (event.data instanceof ArrayBuffer) {
        this.handleBinaryMessage(event.data);
      } else {
        this.handleJsonMessage(event.data);
      }
    } catch (error) {
      logger.error('Error handling message:', error);
      this.notifyErrorHandlers(new Error('Failed to process message'));
    }
  }

  private handleBinaryMessage(data: ArrayBuffer): void {
    const floatArray = new Float32Array(data);
    
    // Validate binary version
    const version = floatArray[0];
    if (version !== BINARY_VERSION) {
      logger.error(`Invalid binary version: ${version}`);
      return;
    }

    // Calculate and validate node count
    const nodeCount = Math.floor((floatArray.length - VERSION_OFFSET) / FLOATS_PER_NODE);
    if (nodeCount === 0 || nodeCount > this.expectedNodeCount) {
      logger.error(`Invalid node count: ${nodeCount}`);
      return;
    }

    // Pass the Float32Array directly to handlers
    this.notifyHandlers('binaryPositionUpdate', floatArray);
  }

  private handleJsonMessage(data: string): void {
    const rawMessage = JSON.parse(data) as RawWebSocketMessage;
    
    switch (rawMessage.type) {
      case 'initialData': {
        const initialData = rawMessage as RawInitialDataMessage;
        const transformedData = {
          type: 'initialData' as const,
          data: {
            graph: transformGraphData(initialData.data.graph)
          }
        };
        this.expectedNodeCount = initialData.data.graph.nodes.length;
        this.handleInitialData(transformedData);
        break;
      }
      case 'binaryPositionUpdate': {
        const binaryUpdate = rawMessage as RawBinaryPositionUpdateMessage;
        const transformedData = this.transformBinaryData(binaryUpdate);
        this.handleBinaryUpdate(transformedData);
        break;
      }
      case 'settingsUpdated':
        this.notifyHandlers('settingsUpdated', rawMessage.data);
        break;
      case 'ping':
      case 'pong':
        this.notifyHandlers(rawMessage.type, null);
        break;
      default:
        logger.warn(`Unknown message type: ${(rawMessage as any).type}`);
    }
  }

  private transformBinaryData(data: any): BinaryPositionUpdateMessage {
    return {
      type: 'binaryPositionUpdate',
      data: {
        nodes: data.nodes.map((node: any) => ({
          nodeId: node.nodeId,
          data: {
            position: node.data.position,
            velocity: node.data.velocity
          }
        }))
      }
    };
  }

  private handleInitialData(message: InitialDataMessage): void {
    this.notifyHandlers('initialData', message.data);
    
    const enableBinaryUpdates: EnableBinaryUpdatesMessage = { type: 'enableBinaryUpdates' };
    this.send(enableBinaryUpdates);
  }

  private handleBinaryUpdate(message: BinaryPositionUpdateMessage): void {
    this.notifyHandlers('binaryPositionUpdate', message.data);
  }

  private notifyHandlers(type: MessageType, data: any): void {
    const handlers = this.messageHandlers.get(type);
    if (handlers) {
      handlers.forEach(handler => {
        try {
          handler(data);
        } catch (error) {
          logger.error(`Error in ${type} handler:`, error);
        }
      });
    }
  }

  private notifyErrorHandlers(error: Error): void {
    this.errorHandlers.forEach(handler => {
      try {
        handler(error);
      } catch (error) {
        logger.error('Error in error handler:', error);
      }
    });
  }

  private notifyConnectionHandlers(connected: boolean): void {
    this.connectionHandlers.forEach(handler => {
      try {
        handler(connected);
      } catch (error) {
        logger.error('Error in connection handler:', error);
      }
    });
  }

  private startHeartbeat(): void {
    this.stopHeartbeat();
    this.heartbeatInterval = window.setInterval(() => {
      if (this.isConnected && this.ws) {
        const ping: PingMessage = { type: 'ping' };
        this.send(ping);
      }
    }, HEARTBEAT_INTERVAL);
  }

  private stopHeartbeat(): void {
    if (this.heartbeatInterval !== null) {
      clearInterval(this.heartbeatInterval);
      this.heartbeatInterval = null;
    }
  }

  private scheduleReconnect(): void {
    if (this.reconnectTimeout === null) {
      this.reconnectTimeout = window.setTimeout(() => {
        this.reconnectTimeout = null;
        this.connect();
      }, WS_RECONNECT_INTERVAL);
    }
  }

  private cleanup(): void {
    this.stopHeartbeat();
    if (this.reconnectTimeout !== null) {
      clearTimeout(this.reconnectTimeout);
      this.reconnectTimeout = null;
    }
  }

  private processMessageQueue(): void {
    while (this.messageQueue.length > 0 && this.isConnected) {
      const message = this.messageQueue.shift();
      if (message) {
        this.send(message);
      }
    }
  }

  // Public API

  send(message: WebSocketMessage): void {
    if (!this.isConnected) {
      if (this.messageQueue.length < WS_MESSAGE_QUEUE_SIZE) {
        this.messageQueue.push(message);
      } else {
        logger.warn('Message queue full, dropping message');
      }
      return;
    }

    try {
      const messageStr = JSON.stringify(message);
      if (this.debugPanel) {
        this.debugPanel.addMessage('out', messageStr);
      }
      this.ws?.send(messageStr);
    } catch (error) {
      logger.error('Error sending message:', error);
      this.notifyErrorHandlers(new Error('Failed to send message'));
    }
  }

  sendBinary(data: ArrayBuffer | Float32Array): void {
    if (!this.isConnected) {
      logger.warn('Cannot send binary data while disconnected');
      return;
    }

    try {
      if (this.debugPanel) {
        this.debugPanel.addMessage('out', data);
      }
      this.ws?.send(data instanceof Float32Array ? data.buffer : data);
    } catch (error) {
      logger.error('Error sending binary data:', error);
      this.notifyErrorHandlers(new Error('Failed to send binary data'));
    }
  }

  on(type: MessageType, handler: MessageHandler): void {
    const handlers = this.messageHandlers.get(type);
    if (handlers) {
      handlers.push(handler);
    }
  }

  onError(handler: ErrorHandler): void {
    this.errorHandlers.push(handler);
  }

  onConnectionChange(handler: ConnectionHandler): void {
    this.connectionHandlers.push(handler);
    handler(this.isConnected);
  }

  off(type: MessageType, handler: MessageHandler): void {
    const handlers = this.messageHandlers.get(type);
    if (handlers) {
      const index = handlers.indexOf(handler);
      if (index !== -1) {
        handlers.splice(index, 1);
      }
    }
  }

  offError(handler: ErrorHandler): void {
    const index = this.errorHandlers.indexOf(handler);
    if (index !== -1) {
      this.errorHandlers.splice(index, 1);
    }
  }

  offConnectionChange(handler: ConnectionHandler): void {
    const index = this.connectionHandlers.indexOf(handler);
    if (index !== -1) {
      this.connectionHandlers.splice(index, 1);
    }
  }

  disconnect(): void {
    this.cleanup();
    this.ws?.close();
  }

  isConnectedToServer(): boolean {
    return this.isConnected;
  }
}

----
xr/xrTypes.ts
import * as THREE from 'three';

export interface XRHandWithHaptics {
    hand: {
        joints: {
            [key: string]: THREE.Object3D;
        };
    };
    hapticActuators: any[];
    pinchStrength: number;
    gripStrength: number;
}

export interface XRControllerState {
    position: THREE.Vector3;
    rotation: THREE.Quaternion;
    hapticActuator?: any;
}

export interface XRHandState {
    position: THREE.Vector3;
    joints: Map<string, THREE.Object3D>;
    pinchStrength: number;
    gripStrength: number;
}

----
xr/xrSessionManager.ts
/**
 * XR session management and rendering
 */

import * as THREE from 'three';
import { XRControllerModelFactory } from 'three/examples/jsm/webxr/XRControllerModelFactory';
import { createLogger } from '../core/utils';
import { platformManager } from '../platform/platformManager';
import { SceneManager } from '../rendering/scene';
import { BACKGROUND_COLOR } from '../core/constants';

const _logger = createLogger('XRSessionManager');

// Type guards for WebXR features
function hasLightEstimate(frame: XRFrame): frame is XRFrame & { getLightEstimate(): XRLightEstimate | null } {
  return 'getLightEstimate' in frame;
}

function hasHitTest(session: XRSession): session is XRSession & { requestHitTestSource(options: XRHitTestOptionsInit): Promise<XRHitTestSource> } {
  return 'requestHitTestSource' in session;
}

export class XRSessionManager {
  private static instance: XRSessionManager;
  private sceneManager: SceneManager;
  private session: XRSession | null = null;
  private referenceSpace: XRReferenceSpace | null = null;
  private isPresenting: boolean = false;

  // XR specific objects
  private cameraRig: THREE.Group;
  private arGroup: THREE.Group; // New group for AR elements
  private controllers: THREE.Group[];
  private controllerGrips: THREE.Group[];
  private controllerModelFactory: XRControllerModelFactory;

  // AR specific objects
  private gridHelper: THREE.GridHelper;
  private groundPlane: THREE.Mesh;
  private hitTestMarker: THREE.Mesh;
  private arLight: THREE.DirectionalLight;
  private hitTestSource: XRHitTestSource | null = null;
  private hitTestSourceRequested = false;

  // Event handlers
  private xrSessionStartCallback: (() => void) | null = null;
  private xrSessionEndCallback: (() => void) | null = null;
  private xrAnimationFrameCallback: ((frame: XRFrame) => void) | null = null;
  private controllerAddedCallback: ((controller: THREE.Group) => void) | null = null;
  private controllerRemovedCallback: ((controller: THREE.Group) => void) | null = null;

  private constructor(sceneManager: SceneManager) {
    this.sceneManager = sceneManager;
    
    // Initialize XR objects
    this.cameraRig = new THREE.Group();
    this.arGroup = new THREE.Group(); // Initialize AR group
    this.controllers = [new THREE.Group(), new THREE.Group()];
    this.controllerGrips = [new THREE.Group(), new THREE.Group()];
    this.controllerModelFactory = new XRControllerModelFactory();

    // Initialize AR objects
    this.gridHelper = this.createGridHelper();
    this.groundPlane = this.createGroundPlane();
    this.hitTestMarker = this.createHitTestMarker();
    this.arLight = this.createARLight();

    this.setupXRObjects();
  }

  static getInstance(sceneManager: SceneManager): XRSessionManager {
    if (!XRSessionManager.instance) {
      XRSessionManager.instance = new XRSessionManager(sceneManager);
    }
    return XRSessionManager.instance;
  }

  private createGridHelper(): THREE.GridHelper {
    const grid = new THREE.GridHelper(10, 10, 0x808080, 0x808080);
    grid.material.transparent = true;
    grid.material.opacity = 0.5;
    grid.position.y = -0.01; // Slightly below ground to avoid z-fighting
    grid.visible = false; // Start hidden until AR session begins
    grid.layers.set(1); // Set to AR layer
    return grid;
  }

  private createGroundPlane(): THREE.Mesh {
    const geometry = new THREE.PlaneGeometry(10, 10);
    const material = new THREE.MeshPhongMaterial({
      color: 0x999999,
      transparent: true,
      opacity: 0.3,
      side: THREE.DoubleSide
    });
    const plane = new THREE.Mesh(geometry, material);
    plane.rotateX(-Math.PI / 2);
    plane.position.y = -0.02; // Below grid
    plane.visible = false; // Start hidden until AR session begins
    plane.layers.set(1); // Set to AR layer
    return plane;
  }

  private createHitTestMarker(): THREE.Mesh {
    const geometry = new THREE.RingGeometry(0.15, 0.2, 32);
    const material = new THREE.MeshBasicMaterial({
      color: 0xffffff,
      transparent: true,
      opacity: 0.8,
      side: THREE.DoubleSide
    });
    const marker = new THREE.Mesh(geometry, material);
    marker.rotateX(-Math.PI / 2);
    marker.visible = false;
    marker.layers.set(1); // Set to AR layer
    return marker;
  }

  private createARLight(): THREE.DirectionalLight {
    const light = new THREE.DirectionalLight(0xffffff, 1);
    light.position.set(1, 1, 1);
    light.layers.set(1); // Set to AR layer
    return light;
  }

  private setupXRObjects(): void {
    const scene = this.sceneManager.getScene();
    
    // Add camera rig to scene
    scene.add(this.cameraRig);

    // Add AR group to camera rig
    this.cameraRig.add(this.arGroup);

    // Add AR objects to AR group
    this.arGroup.add(this.gridHelper);
    this.arGroup.add(this.groundPlane);
    this.arGroup.add(this.hitTestMarker);
    this.arGroup.add(this.arLight);

    // Setup controllers
    this.controllers.forEach((_controller, index) => {
      this.setupController(index);
    });

    // Setup controller grips
    this.controllerGrips.forEach(grip => {
      this.setupControllerGrip(grip);
    });
  }

  private setupController(index: number): void {
    const controller = this.controllers[index];
    const controllerGrip = this.controllerGrips[index];

    controller.addEventListener('connected', (event: any) => {
      const controllerModel = this.buildController(event.data);
      controller.add(controllerModel);
      this.notifyControllerAdded(controller);
    });

    controller.addEventListener('disconnected', () => {
      controller.remove(...controller.children);
      this.notifyControllerRemoved(controller);
    });

    this.cameraRig.add(controller);
    this.cameraRig.add(controllerGrip);
  }

  private setupControllerGrip(grip: THREE.Group): void {
    const controllerModel = this.controllerModelFactory.createControllerModel(grip);
    grip.add(controllerModel);
  }

  private buildController(_inputSource: XRInputSource): THREE.Group {
    const controller = new THREE.Group();
    const geometry = new THREE.SphereGeometry(0.1, 16, 16);
    const material = new THREE.MeshBasicMaterial({ color: 0xffffff });
    const sphere = new THREE.Mesh(geometry, material);
    controller.add(sphere);
    return controller;
  }

  /**
   * Initialize XR session
   */
  async initXRSession(): Promise<void> {
    if (this.isPresenting) {
      _logger.warn('XR session already active');
      return;
    }

    if (!platformManager.getCapabilities().xrSupported || !navigator.xr) {
      throw new Error('XR not supported on this platform');
    }

    try {
      const session = await navigator.xr.requestSession('immersive-ar', {
        requiredFeatures: ['local-floor', 'hit-test'],
        optionalFeatures: ['hand-tracking', 'layers', 'light-estimation']
      });

      if (!session) {
        throw new Error('Failed to create XR session');
      }

      this.session = session;

      // Setup XR rendering
      const renderer = this.sceneManager.getRenderer();
      await renderer.xr.setSession(this.session);
      
      // Configure renderer for AR
      renderer.xr.enabled = true;
      
      // Clear background for AR passthrough
      const scene = this.sceneManager.getScene();
      scene.background = null;
      
      // Get reference space
      this.referenceSpace = await this.session.requestReferenceSpace('local-floor');
      
      // Setup session event handlers
      this.session.addEventListener('end', this.onXRSessionEnd);

      // Enable AR layer for camera
      const camera = this.sceneManager.getCamera();
      camera.layers.enable(1);

      // Reset camera rig position
      this.cameraRig.position.set(0, 0, 0);
      this.cameraRig.quaternion.identity();

      // Show AR visualization elements after a short delay to ensure proper placement
      setTimeout(() => {
        this.gridHelper.visible = true;
        this.groundPlane.visible = true;
        this.arLight.visible = true;
      }, 1000);
      
      this.isPresenting = true;
      _logger.log('XR session initialized');

      // Notify session start
      if (this.xrSessionStartCallback) {
        this.xrSessionStartCallback();
      }
    } catch (error) {
      _logger.error('Failed to initialize XR session:', error);
      throw error;
    }
  }

  /**
   * End XR session
   */
  async endXRSession(): Promise<void> {
    if (this.session) {
      await this.session.end();
    }
  }

  private onXRSessionEnd = (): void => {
    if (this.hitTestSource) {
      this.hitTestSource.cancel();
      this.hitTestSource = null;
    }
    
    this.session = null;
    this.referenceSpace = null;
    this.hitTestSourceRequested = false;
    this.isPresenting = false;

    // Hide AR visualization elements
    this.gridHelper.visible = false;
    this.groundPlane.visible = false;
    this.hitTestMarker.visible = false;
    this.arLight.visible = false;

    // Reset camera rig
    this.cameraRig.position.set(0, 0, 0);
    this.cameraRig.quaternion.identity();

    // Reset scene background
    const scene = this.sceneManager.getScene();
    scene.background = new THREE.Color(BACKGROUND_COLOR);

    // Disable AR layer for camera
    const camera = this.sceneManager.getCamera();
    camera.layers.disable(1);

    // Reset renderer settings
    const renderer = this.sceneManager.getRenderer();
    renderer.xr.enabled = false;

    _logger.log('XR session ended');

    // Notify session end
    if (this.xrSessionEndCallback) {
      this.xrSessionEndCallback();
    }
  }

  /**
   * XR animation frame
   */
  onXRFrame(frame: XRFrame): void {
    if (!this.session || !this.referenceSpace) return;

    // Get pose
    const pose = frame.getViewerPose(this.referenceSpace);
    if (!pose) return;

    // Let Three.js handle camera updates through WebXRManager
    // Handle hit testing
    this.handleHitTest(frame);

    // Update controller poses
    this.controllers.forEach((controller) => {
      const inputSource = controller.userData.inputSource as XRInputSource;
      if (inputSource) {
        const targetRayPose = frame.getPose(inputSource.targetRaySpace, this.referenceSpace!);
        if (targetRayPose) {
          controller.matrix.fromArray(targetRayPose.transform.matrix);
          controller.matrix.decompose(controller.position, controller.quaternion, controller.scale);
        }
      }
    });

    // Update lighting if available
    if (hasLightEstimate(frame)) {
      const lightEstimate = frame.getLightEstimate();
      if (lightEstimate) {
        this.updateARLighting(lightEstimate);
      }
    }

    // Call animation frame callback
    if (this.xrAnimationFrameCallback) {
      this.xrAnimationFrameCallback(frame);
    }
  }

  private async handleHitTest(frame: XRFrame): Promise<void> {
    if (!this.hitTestSourceRequested && this.session && hasHitTest(this.session)) {
      try {
        const viewerSpace = await this.session.requestReferenceSpace('viewer');
        if (!viewerSpace) {
          throw new Error('Failed to get viewer reference space');
        }

        const hitTestSource = await this.session.requestHitTestSource({
          space: viewerSpace
        });

        if (hitTestSource) {
          this.hitTestSource = hitTestSource;
          this.hitTestSourceRequested = true;
        }
      } catch (error) {
        _logger.error('Failed to initialize hit test source:', error);
        this.hitTestSourceRequested = true; // Prevent further attempts
      }
    }

    if (this.hitTestSource && this.referenceSpace) {
      const hitTestResults = frame.getHitTestResults(this.hitTestSource);
      if (hitTestResults.length > 0) {
        const hit = hitTestResults[0];
        const pose = hit.getPose(this.referenceSpace);
        if (pose) {
          this.hitTestMarker.visible = true;
          this.hitTestMarker.position.set(
            pose.transform.position.x,
            pose.transform.position.y,
            pose.transform.position.z
          );

          // Update grid and ground plane position to match hit test
          this.gridHelper.position.y = pose.transform.position.y;
          this.groundPlane.position.y = pose.transform.position.y - 0.01;
        }
      } else {
        this.hitTestMarker.visible = false;
      }
    }
  }

  private updateARLighting(lightEstimate: XRLightEstimate): void {
    const intensity = lightEstimate.primaryLightIntensity?.value || 1;
    const direction = lightEstimate.primaryLightDirection;
    
    if (direction) {
      this.arLight.position.set(direction.x, direction.y, direction.z);
    }
    this.arLight.intensity = intensity;
  }

  /**
   * Set session event callbacks
   */
  setSessionCallbacks(
    onStart: () => void,
    onEnd: () => void,
    onFrame: (frame: XRFrame) => void
  ): void {
    this.xrSessionStartCallback = onStart;
    this.xrSessionEndCallback = onEnd;
    this.xrAnimationFrameCallback = onFrame;
  }

  public onControllerAdded(callback: (controller: THREE.Group) => void): void {
    this.controllerAddedCallback = callback;
  }

  public onControllerRemoved(callback: (controller: THREE.Group) => void): void {
    this.controllerRemovedCallback = callback;
  }

  private notifyControllerAdded(controller: THREE.Group): void {
    this.controllerAddedCallback?.(controller);
  }

  private notifyControllerRemoved(controller: THREE.Group): void {
    this.controllerRemovedCallback?.(controller);
  }

  /**
   * Get XR objects
   */
  getCameraRig(): THREE.Group {
    return this.cameraRig;
  }

  getControllers(): THREE.Group[] {
    return this.controllers;
  }

  getControllerGrips(): THREE.Group[] {
    return this.controllerGrips;
  }

  /**
   * Check if currently in XR session
   */
  isXRPresenting(): boolean {
    return this.isPresenting;
  }

  /**
   * Get current XR session
   */
  getSession(): XRSession | null {
    return this.session;
  }

  /**
   * Get reference space
   */
  getReferenceSpace(): XRReferenceSpace | null {
    return this.referenceSpace;
  }

  /**
   * Clean up resources
   */
  dispose(): void {
    if (this.session) {
      this.session.end().catch(console.error);
    }

    this.controllers.forEach(controller => {
      controller.removeEventListener('connected', (event: any) => {
        const controllerModel = this.buildController(event.data);
        controller.add(controllerModel);
        this.notifyControllerAdded(controller);
      });

      controller.removeEventListener('disconnected', () => {
        controller.remove(...controller.children);
        this.notifyControllerRemoved(controller);
      });
    });

    this.controllerGrips.forEach(grip => {
      grip.remove(...grip.children);
    });

    this.hitTestSource?.cancel();
    this.hitTestSource = null;
    this.hitTestSourceRequested = false;

    this.session = null;
    this.referenceSpace = null;
    this.isPresenting = false;
  }
}

----
xr/xrInteraction.ts
import * as THREE from 'three';
import { XRHandWithHaptics } from './xrTypes';
import { NodeManager } from '../rendering/nodes';
import { XRSessionManager } from './xrSessionManager';
import { VisualizationSettings } from '../core/types';

export class XRInteraction {
    private static instance: XRInteraction | null = null;
    private xrManager: XRSessionManager;
    private nodeManager: NodeManager;
    private controllers: THREE.Group[] = [];
    private lastInteractorPosition = new THREE.Vector3();
    private hands: XRHandWithHaptics[] = [];
    private settings: VisualizationSettings;

    private constructor(xrManager: XRSessionManager, nodeManager: NodeManager) {
        this.xrManager = xrManager;
        this.nodeManager = nodeManager;
        this.settings = {
            enableHandTracking: true,
            pinchThreshold: 0.015,
            dragThreshold: 0.04,
            enableHaptics: true,
            hapticIntensity: 0.7
        } as VisualizationSettings;
        
        this.setupXRControllers();
        this.setupHandTracking();
    }

    public static getInstance(xrManager: XRSessionManager, nodeManager: NodeManager): XRInteraction {
        if (!XRInteraction.instance) {
            XRInteraction.instance = new XRInteraction(xrManager, nodeManager);
        }
        return XRInteraction.instance;
    }

    private setupXRControllers(): void {
        this.xrManager.onControllerAdded((controller: THREE.Group) => {
            this.controllers.push(controller);
            if (controller.userData.hapticActuator) {
                this.triggerHapticFeedback(controller, 0.5, 50);
            }
        });

        this.xrManager.onControllerRemoved((controller: THREE.Group) => {
            const index = this.controllers.indexOf(controller);
            if (index !== -1) {
                this.controllers.splice(index, 1);
            }
        });
    }

    private setupHandTracking(): void {
        if (!this.settings.enableHandTracking) return;

        // Hand tracking is handled by the XRSessionManager directly
        this.hands = [];
    }

    public update(): void {
        if (!this.settings.enableHandTracking) return;

        // Update hand interactions
        this.hands.forEach(hand => {
            if (hand.pinchStrength > this.settings.pinchThreshold) {
                this.handlePinchGesture(hand);
            }
        });

        // Update controller interactions
        this.controllers.forEach(controller => {
            this.handleControllerInteraction(controller);
        });
    }

    private handlePinchGesture(hand: XRHandWithHaptics): void {
        const indexTip = hand.hand.joints['index-finger-tip'];
        if (!indexTip) return;

        const position = new THREE.Vector3();
        position.setFromMatrixPosition(indexTip.matrixWorld);

        // Calculate movement delta
        const delta = position.clone().sub(this.lastInteractorPosition);
        
        // Update node position based on hand movement
        if (delta.length() > this.settings.dragThreshold) {
            // Get all nodes and update their positions
            const nodes = this.nodeManager.getAllNodeMeshes();
            nodes.forEach(nodeMesh => {
                const currentPos = this.nodeManager.getNodePosition(nodeMesh.userData.nodeId);
                const newPos = currentPos.add(delta);
                this.nodeManager.updateNodePosition(nodeMesh.userData.nodeId, newPos);
            });

            if (this.settings.enableHaptics) {
                this.triggerHapticFeedback(hand, this.settings.hapticIntensity, 50);
            }
        }

        this.lastInteractorPosition.copy(position);
    }

    private handleControllerInteraction(controller: THREE.Group): void {
        const position = new THREE.Vector3();
        position.setFromMatrixPosition(controller.matrixWorld);

        // Calculate movement delta
        const delta = position.clone().sub(this.lastInteractorPosition);
        
        // Update node position based on controller movement
        if (delta.length() > this.settings.dragThreshold) {
            // Get all nodes and update their positions
            const nodes = this.nodeManager.getAllNodeMeshes();
            nodes.forEach(nodeMesh => {
                const currentPos = this.nodeManager.getNodePosition(nodeMesh.userData.nodeId);
                const newPos = currentPos.add(delta);
                this.nodeManager.updateNodePosition(nodeMesh.userData.nodeId, newPos);
            });

            if (this.settings.enableHaptics && controller.userData.hapticActuator) {
                this.triggerHapticFeedback(controller, this.settings.hapticIntensity, 50);
            }
        }

        this.lastInteractorPosition.copy(position);
    }

    private triggerHapticFeedback(device: THREE.Group | XRHandWithHaptics, intensity: number, duration: number): void {
        if (!this.settings.enableHaptics) return;

        if ('hapticActuators' in device) {
            device.hapticActuators.forEach(actuator => {
                actuator.pulse(intensity, duration);
            });
        } else if (device.userData.hapticActuator) {
            device.userData.hapticActuator.pulse(intensity, duration);
        }
    }

    public dispose(): void {
        this.controllers = [];
        this.hands = [];
        XRInteraction.instance = null;
    }
}

----
state/graphData.ts
/**
 * Graph data management with simplified binary updates
 */

import { GraphData, Node, Edge } from '../core/types';
import { createLogger } from '../core/utils';

const logger = createLogger('GraphDataManager');

// Constants
const THROTTLE_INTERVAL = 16;  // ~60fps max
const BINARY_VERSION = 1.0;
const NODE_POSITION_SIZE = 24;  // 6 floats * 4 bytes
const BINARY_HEADER_SIZE = 4;   // 1 float * 4 bytes

export class GraphDataManager {
  private static instance: GraphDataManager;
  private nodes: Map<string, Node>;
  private edges: Map<string, Edge>;
  private metadata: Record<string, any>;
  private updateListeners: Set<(data: GraphData) => void>;
  private positionUpdateListeners: Set<(positions: Float32Array) => void>;
  private lastUpdateTime: number;
  private binaryUpdatesEnabled: boolean = false;

  private constructor() {
    this.nodes = new Map();
    this.edges = new Map();
    this.metadata = {};
    this.updateListeners = new Set();
    this.positionUpdateListeners = new Set();
    this.lastUpdateTime = performance.now();
  }

  static getInstance(): GraphDataManager {
    if (!GraphDataManager.instance) {
      GraphDataManager.instance = new GraphDataManager();
    }
    return GraphDataManager.instance;
  }

  /**
   * Load initial graph data from REST endpoint
   */
  async loadGraphData(): Promise<void> {
    try {
      const response = await fetch('/api/graph/data');
      if (!response.ok) {
        throw new Error(`Failed to fetch graph data: ${response.status} ${response.statusText}`);
      }
      const data = await response.json();
      this.updateGraphData(data);
      logger.log('Initial graph data loaded from REST endpoint');
    } catch (error) {
      logger.error('Failed to load initial graph data:', error);
      throw error;
    }
  }

  /**
   * Initialize or update the graph data
   */
  updateGraphData(data: any): void {
    logger.log('Received graph data update');

    // Clear existing data
    this.nodes.clear();
    this.edges.clear();

    // Store nodes in Map for O(1) access
    if (data.nodes && Array.isArray(data.nodes)) {
      data.nodes.forEach((node: any) => {
        // Convert position array to object if needed
        let position;
        if (Array.isArray(node.position)) {
          position = {
            x: node.position[0] || 0,
            y: node.position[1] || 0,
            z: node.position[2] || 0
          };
        } else {
          position = node.position || { x: 0, y: 0, z: 0 };
        }

        logger.log(`Processing node ${node.id} with position:`, position);

        this.nodes.set(node.id, {
          ...node,
          position,
          label: node.label || node.id
        });
      });

      // Store edges in Map
      if (Array.isArray(data.edges)) {
        data.edges.forEach((edge: Edge) => {
          const edgeId = this.createEdgeId(edge.source, edge.target);
          this.edges.set(edgeId, edge);
        });
      }

      // Update metadata
      this.metadata = data.metadata || {};

      // Notify listeners
      this.notifyUpdateListeners();
      logger.log(`Updated graph data: ${this.nodes.size} nodes, ${this.edges.size} edges`);

      // Enable binary updates after initial data is received
      if (!this.binaryUpdatesEnabled) {
        this.enableBinaryUpdates();
      }
    } else {
      logger.warn('Invalid graph data format received');
    }
  }

  /**
   * Enable binary position updates
   */
  private enableBinaryUpdates(): void {
    // Send message to server to enable binary updates
    if (window.ws && window.ws.readyState === WebSocket.OPEN) {
      window.ws.send(JSON.stringify({ type: 'enableBinaryUpdates' }));
      this.binaryUpdatesEnabled = true;
      logger.log('Enabled binary updates');
    } else {
      logger.warn('WebSocket not ready, cannot enable binary updates');
    }
  }

  /**
   * Handle binary position updates with throttling
   */
  updatePositions(buffer: ArrayBuffer): void {
    const now = performance.now();
    const timeSinceLastUpdate = now - this.lastUpdateTime;

    if (timeSinceLastUpdate < THROTTLE_INTERVAL) {
      return;  // Skip update if too soon
    }

    try {
      const floatArray = new Float32Array(buffer);
      
      // Check binary version
      const version = floatArray[0];
      if (version !== BINARY_VERSION) {
        logger.warn(`Received binary data version ${version}, expected ${BINARY_VERSION}`);
      }

      // Verify data size
      const expectedSize = BINARY_HEADER_SIZE + Math.floor((buffer.byteLength - BINARY_HEADER_SIZE) / NODE_POSITION_SIZE) * NODE_POSITION_SIZE;
      if (buffer.byteLength !== expectedSize) {
        logger.error(`Invalid binary data length: ${buffer.byteLength} bytes (expected ${expectedSize})`);
        return;
      }

      this.notifyPositionUpdateListeners(floatArray);
      this.lastUpdateTime = now;
    } catch (error) {
      logger.error('Error processing binary position update:', error);
    }
  }

  /**
   * Get the current graph data
   */
  getGraphData(): GraphData {
    return {
      nodes: Array.from(this.nodes.values()),
      edges: Array.from(this.edges.values()),
      metadata: this.metadata
    };
  }

  /**
   * Get a specific node by ID
   */
  getNode(id: string): Node | undefined {
    return this.nodes.get(id);
  }

  /**
   * Subscribe to graph data updates
   */
  subscribe(listener: (data: GraphData) => void): () => void {
    this.updateListeners.add(listener);
    return () => {
      this.updateListeners.delete(listener);
    };
  }

  /**
   * Subscribe to position updates only
   */
  subscribeToPositionUpdates(
    listener: (positions: Float32Array) => void
  ): () => void {
    this.positionUpdateListeners.add(listener);
    return () => {
      this.positionUpdateListeners.delete(listener);
    };
  }

  /**
   * Clear all graph data
   */
  clear(): void {
    this.nodes.clear();
    this.edges.clear();
    this.metadata = {};
    this.notifyUpdateListeners();
  }

  private createEdgeId(source: string, target: string): string {
    return [source, target].sort().join('_');
  }

  private notifyUpdateListeners(): void {
    const data = this.getGraphData();
    this.updateListeners.forEach(listener => {
      try {
        listener(data);
      } catch (error) {
        logger.error('Error in graph update listener:', error);
      }
    });
  }

  private notifyPositionUpdateListeners(positions: Float32Array): void {
    this.positionUpdateListeners.forEach(listener => {
      try {
        listener(positions);
      } catch (error) {
        logger.error('Error in position update listener:', error);
      }
    });
  }
}

// Export a singleton instance
export const graphDataManager = GraphDataManager.getInstance();

// Declare WebSocket on window for TypeScript
declare global {
  interface Window {
    ws: WebSocket;
  }
}

----
state/settings.ts
/**
 * Settings management with simplified visualization configuration
 */

import { VisualizationSettings, ServerSettings } from '../core/types';
import { createLogger } from '../core/utils';

const logger = createLogger('SettingsManager');

// Default settings matching settings.toml exactly
export const DEFAULT_VISUALIZATION_SETTINGS: VisualizationSettings = {
    // Node Appearance
    nodeSize: 1.0,
    nodeColor: '#c3ab6f',
    nodeOpacity: 0.4,
    metalness: 0.3,
    roughness: 0.35,
    clearcoat: 1.0,
    enableInstancing: false,
    materialType: 'basic',
    sizeRange: [1, 5],
    sizeByConnections: true,
    highlightColor: '#822626',
    highlightDuration: 300,
    enableHoverEffect: true,
    hoverScale: 1.2,

    // Edge Appearance
    edgeWidth: 2.0,
    edgeColor: '#917f18',
    edgeOpacity: 0.6,
    edgeWidthRange: [1, 3],
    enableArrows: false,
    arrowSize: 0.15,

    // Physics Settings
    physicsEnabled: false,
    attractionStrength: 0.015,
    repulsionStrength: 1500.0,
    springStrength: 0.018,
    damping: 0.88,
    maxVelocity: 2.5,
    collisionRadius: 0.25,
    boundsSize: 12.0,
    enableBounds: true,
    iterations: 500,

    // Rendering Settings
    ambientLightIntensity: 0.7,
    directionalLightIntensity: 1.0,
    environmentIntensity: 1.2,
    enableAmbientOcclusion: false,
    enableAntialiasing: true,
    enableShadows: false,
    backgroundColor: '#000000',

    // Visual Effects
    enableBloom: false,
    bloomIntensity: 1.8,
    bloomRadius: 0.5,
    nodeBloomStrength: 0.2,
    edgeBloomStrength: 0.3,
    environmentBloomStrength: 0.5,
    enableNodeAnimations: false,
    enableMotionBlur: false,
    motionBlurStrength: 0.4,

    // Labels
    showLabels: true,
    labelSize: 1.0,
    labelColor: '#FFFFFF',

    // Performance
    maxFps: 60,

    // AR Settings
    enablePlaneDetection: true,
    enableSceneUnderstanding: true,
    showPlaneOverlay: true,
    planeOpacity: 0.3,
    planeColor: '#4A90E2',
    enableLightEstimation: true,
    enableHandTracking: true,
    handMeshEnabled: true,
    handMeshColor: '#FFD700',
    handMeshOpacity: 0.3,
    handRayEnabled: true,
    handRayColor: '#FFD700',
    handRayWidth: 0.002,
    handPointSize: 0.01,
    gestureSmoothing: 0.9,
    pinchThreshold: 0.015,
    dragThreshold: 0.04,
    rotationThreshold: 0.08,
    enableHaptics: true,
    hapticIntensity: 0.7,
    roomScale: true,
    snapToFloor: true,
    passthroughOpacity: 1.0,
    passthroughBrightness: 1.0,
    passthroughContrast: 1.0,
    enablePassthroughPortal: false,
    portalSize: 1.0,
    portalEdgeColor: '#FFD700',
    portalEdgeWidth: 0.02
};

export interface ThreeJSSettings {
    nodes: {
        size: number;
        color: string;
        opacity: number;
        metalness: number;
        roughness: number;
        clearcoat: number;
        materialType: string;
        highlightColor: string;
    };
    edges: {
        width: number;
        color: string;
        opacity: number;
    };
}

export class SettingsManager {
    private static instance: SettingsManager | null = null;
    private settings: VisualizationSettings;
    private settingsListeners: Set<(settings: VisualizationSettings) => void>;
    private connectionListeners: Set<(connected: boolean) => void>;
    private connected: boolean = false;
    private readonly API_BASE = '/api/visualization';

    private constructor() {
        this.settings = { ...DEFAULT_VISUALIZATION_SETTINGS };
        this.settingsListeners = new Set();
        this.connectionListeners = new Set();
        logger.log('Initialized with default settings');
    }

    static getInstance(): SettingsManager {
        if (!SettingsManager.instance) {
            SettingsManager.instance = new SettingsManager();
        }
        return SettingsManager.instance;
    }

    dispose(): void {
        this.settingsListeners.clear();
        this.connectionListeners.clear();
        SettingsManager.instance = null;
    }

    isConnected(): boolean {
        return this.connected;
    }

    onConnectionChange(listener: (connected: boolean) => void): void {
        this.connectionListeners.add(listener);
        listener(this.connected);
    }

    private setConnected(value: boolean): void {
        if (this.connected !== value) {
            this.connected = value;
            this.notifyConnectionListeners();
        }
    }

    private notifyConnectionListeners(): void {
        this.connectionListeners.forEach(listener => {
            try {
                listener(this.connected);
            } catch (error) {
                logger.error('Error in connection listener:', error);
            }
        });
    }

    private notifyListeners(): void {
        this.settingsListeners.forEach(listener => {
            try {
                listener(this.settings);
            } catch (error) {
                logger.error('Error in settings listener:', error);
            }
        });
    }

    getSettings(): VisualizationSettings {
        return { ...this.settings };
    }

    getThreeJSSettings(): ThreeJSSettings {
        return {
            nodes: {
                size: this.settings.nodeSize,
                color: this.settings.nodeColor,
                opacity: this.settings.nodeOpacity,
                metalness: this.settings.metalness,
                roughness: this.settings.roughness,
                clearcoat: this.settings.clearcoat,
                materialType: this.settings.materialType,
                highlightColor: this.settings.highlightColor
            },
            edges: {
                width: this.settings.edgeWidth,
                color: this.settings.edgeColor,
                opacity: this.settings.edgeOpacity
            }
        };
    }

    subscribe(listener: (settings: VisualizationSettings) => void): () => void {
        this.settingsListeners.add(listener);
        listener(this.settings);
        return () => this.settingsListeners.delete(listener);
    }

    addSettingsListener(listener: (settings: VisualizationSettings) => void): void {
        this.settingsListeners.add(listener);
        listener(this.settings);
    }

    removeSettingsListener(listener: (settings: VisualizationSettings) => void): void {
        this.settingsListeners.delete(listener);
    }

    resetToDefaults(): void {
        this.settings = { ...DEFAULT_VISUALIZATION_SETTINGS };
        this.notifyListeners();
        this.saveSettings().catch(error => {
            logger.error('Failed to save default settings:', error);
        });
    }

    async loadSettings(): Promise<void> {
        try {
            const response = await fetch(`${this.API_BASE}/settings`);
            if (!response.ok) {
                this.setConnected(false);
                throw new Error(`Failed to fetch settings: ${response.status} ${response.statusText}`);
            }
            const serverSettings = await response.json();
            this.settings = this.flattenSettings(serverSettings);
            this.notifyListeners();
            this.setConnected(true);
            logger.log('Settings loaded from server:', this.settings);
        } catch (error) {
            logger.error('Failed to load settings:', error);
            this.setConnected(false);
            this.settings = { ...DEFAULT_VISUALIZATION_SETTINGS };
            this.notifyListeners();
        }
    }

    async saveSettings(): Promise<void> {
        try {
            const serverSettings: ServerSettings = {
                nodes: {
                    base_size: this.settings.nodeSize,
                    base_color: this.settings.nodeColor,
                    opacity: this.settings.nodeOpacity,
                    metalness: this.settings.metalness,
                    roughness: this.settings.roughness,
                    clearcoat: this.settings.clearcoat,
                    enable_instancing: this.settings.enableInstancing,
                    material_type: this.settings.materialType,
                    size_range: this.settings.sizeRange,
                    size_by_connections: this.settings.sizeByConnections,
                    highlight_color: this.settings.highlightColor,
                    highlight_duration: this.settings.highlightDuration,
                    enable_hover_effect: this.settings.enableHoverEffect,
                    hover_scale: this.settings.hoverScale
                },
                edges: {
                    base_width: this.settings.edgeWidth,
                    color: this.settings.edgeColor,
                    opacity: this.settings.edgeOpacity,
                    width_range: this.settings.edgeWidthRange,
                    enable_arrows: this.settings.enableArrows,
                    arrow_size: this.settings.arrowSize
                },
                physics: {
                    enabled: this.settings.physicsEnabled,
                    attraction_strength: this.settings.attractionStrength,
                    repulsion_strength: this.settings.repulsionStrength,
                    spring_strength: this.settings.springStrength,
                    damping: this.settings.damping,
                    max_velocity: this.settings.maxVelocity,
                    collision_radius: this.settings.collisionRadius,
                    bounds_size: this.settings.boundsSize,
                    enable_bounds: this.settings.enableBounds,
                    iterations: this.settings.iterations
                },
                rendering: {
                    ambient_light_intensity: this.settings.ambientLightIntensity,
                    directional_light_intensity: this.settings.directionalLightIntensity,
                    environment_intensity: this.settings.environmentIntensity,
                    enable_ambient_occlusion: this.settings.enableAmbientOcclusion,
                    enable_antialiasing: this.settings.enableAntialiasing,
                    enable_shadows: this.settings.enableShadows,
                    background_color: this.settings.backgroundColor
                },
                bloom: {
                    enabled: this.settings.enableBloom,
                    strength: this.settings.bloomIntensity,
                    radius: this.settings.bloomRadius,
                    node_bloom_strength: this.settings.nodeBloomStrength,
                    edge_bloom_strength: this.settings.edgeBloomStrength,
                    environment_bloom_strength: this.settings.environmentBloomStrength
                },
                animations: {
                    enable_node_animations: this.settings.enableNodeAnimations,
                    enable_motion_blur: this.settings.enableMotionBlur,
                    motion_blur_strength: this.settings.motionBlurStrength
                },
                labels: {
                    enable_labels: this.settings.showLabels,
                    desktop_font_size: this.settings.labelSize * 48,
                    text_color: this.settings.labelColor
                },
                ar: {
                    enable_plane_detection: this.settings.enablePlaneDetection,
                    enable_scene_understanding: this.settings.enableSceneUnderstanding,
                    show_plane_overlay: this.settings.showPlaneOverlay,
                    plane_opacity: this.settings.planeOpacity,
                    plane_color: this.settings.planeColor,
                    enable_light_estimation: this.settings.enableLightEstimation,
                    enable_hand_tracking: this.settings.enableHandTracking,
                    hand_mesh_enabled: this.settings.handMeshEnabled,
                    hand_mesh_color: this.settings.handMeshColor,
                    hand_mesh_opacity: this.settings.handMeshOpacity,
                    hand_ray_enabled: this.settings.handRayEnabled,
                    hand_ray_color: this.settings.handRayColor,
                    hand_ray_width: this.settings.handRayWidth,
                    hand_point_size: this.settings.handPointSize,
                    gesture_smoothing: this.settings.gestureSmoothing,
                    pinch_threshold: this.settings.pinchThreshold,
                    drag_threshold: this.settings.dragThreshold,
                    rotation_threshold: this.settings.rotationThreshold,
                    enable_haptics: this.settings.enableHaptics,
                    haptic_intensity: this.settings.hapticIntensity,
                    room_scale: this.settings.roomScale,
                    snap_to_floor: this.settings.snapToFloor,
                    passthrough_opacity: this.settings.passthroughOpacity,
                    passthrough_brightness: this.settings.passthroughBrightness,
                    passthrough_contrast: this.settings.passthroughContrast,
                    enable_passthrough_portal: this.settings.enablePassthroughPortal,
                    portal_size: this.settings.portalSize,
                    portal_edge_color: this.settings.portalEdgeColor,
                    portal_edge_width: this.settings.portalEdgeWidth
                },
                audio: {
                    enable_ambient_sounds: false,
                    enable_interaction_sounds: false,
                    enable_spatial_audio: false
                }
            };

            const response = await fetch(`${this.API_BASE}/settings`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(serverSettings)
            });

            if (!response.ok) {
                this.setConnected(false);
                throw new Error(`Failed to save settings: ${response.status} ${response.statusText}`);
            }

            const updatedSettings = await response.json();
            this.settings = this.flattenSettings(updatedSettings);
            this.notifyListeners();
            this.setConnected(true);
            logger.log('Settings saved successfully');
        } catch (error) {
            this.setConnected(false);
            logger.error('Failed to save settings:', error);
            throw error;
        }
    }

    updateSettings(newSettings: Partial<VisualizationSettings>): void {
        this.settings = { ...this.settings, ...newSettings };
        logger.log('Updated settings locally');
        this.notifyListeners();
        this.saveSettings().catch(error => {
            logger.error('Failed to save settings to server:', error);
        });
    }

    private flattenSettings(serverSettings: ServerSettings): VisualizationSettings {
        return {
            // Node settings
            nodeSize: serverSettings.nodes.base_size,
            nodeColor: serverSettings.nodes.base_color,
            nodeOpacity: serverSettings.nodes.opacity,
            metalness: serverSettings.nodes.metalness,
            roughness: serverSettings.nodes.roughness,
            clearcoat: serverSettings.nodes.clearcoat,
            enableInstancing: serverSettings.nodes.enable_instancing,
            materialType: serverSettings.nodes.material_type,
            sizeRange: serverSettings.nodes.size_range,
            sizeByConnections: serverSettings.nodes.size_by_connections,
            highlightColor: serverSettings.nodes.highlight_color,
            highlightDuration: serverSettings.nodes.highlight_duration,
            enableHoverEffect: serverSettings.nodes.enable_hover_effect,
            hoverScale: serverSettings.nodes.hover_scale,

            // Edge settings
            edgeWidth: serverSettings.edges.base_width,
            edgeColor: serverSettings.edges.color,
            edgeOpacity: serverSettings.edges.opacity,
            edgeWidthRange: serverSettings.edges.width_range,
            enableArrows: serverSettings.edges.enable_arrows,
            arrowSize: serverSettings.edges.arrow_size,

            // Physics settings
            physicsEnabled: serverSettings.physics.enabled,
            attractionStrength: serverSettings.physics.attraction_strength,
            repulsionStrength: serverSettings.physics.repulsion_strength,
            springStrength: serverSettings.physics.spring_strength,
            damping: serverSettings.physics.damping,
            maxVelocity: serverSettings.physics.max_velocity,
            collisionRadius: serverSettings.physics.collision_radius,
            boundsSize: serverSettings.physics.bounds_size,
            enableBounds: serverSettings.physics.enable_bounds,
            iterations: serverSettings.physics.iterations,

            // Rendering settings
            ambientLightIntensity: serverSettings.rendering.ambient_light_intensity,
            directionalLightIntensity: serverSettings.rendering.directional_light_intensity,
            environmentIntensity: serverSettings.rendering.environment_intensity,
            enableAmbientOcclusion: serverSettings.rendering.enable_ambient_occlusion,
            enableAntialiasing: serverSettings.rendering.enable_antialiasing,
            enableShadows: serverSettings.rendering.enable_shadows,
            backgroundColor: serverSettings.rendering.background_color,

            // Bloom settings
            enableBloom: serverSettings.bloom.enabled,
            bloomIntensity: serverSettings.bloom.strength,
            bloomRadius: serverSettings.bloom.radius,
            nodeBloomStrength: serverSettings.bloom.node_bloom_strength,
            edgeBloomStrength: serverSettings.bloom.edge_bloom_strength,
            environmentBloomStrength: serverSettings.bloom.environment_bloom_strength,

            // Animation settings
            enableNodeAnimations: serverSettings.animations.enable_node_animations,
            enableMotionBlur: serverSettings.animations.enable_motion_blur,
            motionBlurStrength: serverSettings.animations.motion_blur_strength,

            // Label settings
            showLabels: serverSettings.labels.enable_labels,
            labelSize: serverSettings.labels.desktop_font_size / 48,
            labelColor: serverSettings.labels.text_color,

            // Performance settings
            maxFps: 60,

            // AR settings
            enablePlaneDetection: serverSettings.ar.enable_plane_detection,
            enableSceneUnderstanding: serverSettings.ar.enable_scene_understanding,
            showPlaneOverlay: serverSettings.ar.show_plane_overlay,
            planeOpacity: serverSettings.ar.plane_opacity,
            planeColor: serverSettings.ar.plane_color,
            enableLightEstimation: serverSettings.ar.enable_light_estimation,
            enableHandTracking: serverSettings.ar.enable_hand_tracking,
            handMeshEnabled: serverSettings.ar.hand_mesh_enabled,
            handMeshColor: serverSettings.ar.hand_mesh_color,
            handMeshOpacity: serverSettings.ar.hand_mesh_opacity,
            handRayEnabled: serverSettings.ar.hand_ray_enabled,
            handRayColor: serverSettings.ar.hand_ray_color,
            handRayWidth: serverSettings.ar.hand_ray_width,
            handPointSize: serverSettings.ar.hand_point_size,
            gestureSmoothing: serverSettings.ar.gesture_smoothing,
            pinchThreshold: serverSettings.ar.pinch_threshold,
            dragThreshold: serverSettings.ar.drag_threshold,
            rotationThreshold: serverSettings.ar.rotation_threshold,
            enableHaptics: serverSettings.ar.enable_haptics,
            hapticIntensity: serverSettings.ar.haptic_intensity,
            roomScale: serverSettings.ar.room_scale,
            snapToFloor: serverSettings.ar.snap_to_floor,
            passthroughOpacity: serverSettings.ar.passthrough_opacity,
            passthroughBrightness: serverSettings.ar.passthrough_brightness,
            passthroughContrast: serverSettings.ar.passthrough_contrast,
            enablePassthroughPortal: serverSettings.ar.enable_passthrough_portal,
            portalSize: serverSettings.ar.portal_size,
            portalEdgeColor: serverSettings.ar.portal_edge_color,
            portalEdgeWidth: serverSettings.ar.portal_edge_width
        };
    }
}

export const settingsManager = SettingsManager.getInstance();

----
ui/ControlPanel.css
/* Control Panel Styles */

.control-panel {
    position: fixed;
    top: 20px;
    right: 20px;
    width: 320px;
    max-width: calc(100vw - 40px);
    background: rgba(28, 28, 28, 0.95);
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    color: #ffffff;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    z-index: 1000;
    transition: transform 0.3s ease;
    transform: translateX(100%);
    overflow: visible;
}

/* Ensure panel stays within viewport */
@media (max-width: 360px) {
    .control-panel {
        right: 10px;
        width: calc(100% - 20px);
        max-width: 320px;
    }
}

.control-panel.expanded {
    transform: translateX(0);
}

.control-panel-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px 16px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.control-panel-header h3 {
    margin: 0;
    font-size: 16px;
    font-weight: 500;
}

.toggle-button {
    background: none;
    border: none;
    color: #ffffff;
    font-size: 20px;
    cursor: pointer;
    padding: 4px 8px;
    border-radius: 4px;
    transition: background-color 0.2s;
}

.toggle-button:hover {
    background: rgba(255, 255, 255, 0.1);
}

/* Ensure content stays within panel bounds */
.control-panel-content {
    max-height: calc(100vh - 200px);
    overflow-y: auto;
    overflow-x: hidden; /* Prevent horizontal scroll */
    padding: 16px;
}

/* Ensure inputs don't overflow */
.setting-item {
    margin-bottom: 12px;
    display: flex;
    align-items: center;
    gap: 12px;
    flex-wrap: wrap; /* Allow wrapping on small screens */
}

.setting-item label {
    flex: 1;
    min-width: 100px; /* Ensure labels have minimum width */
    font-size: 13px;
    color: #e0e0e0;
}

.setting-item input[type="range"] {
    flex: 2;
    min-width: 100px;
    max-width: 150px;
    height: 4px;
    -webkit-appearance: none;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 2px;
}

.setting-item input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    width: 12px;
    height: 12px;
    background: #ffffff;
    border-radius: 50%;
    cursor: pointer;
}

.setting-item input[type="color"] {
    width: 32px;
    height: 32px;
    padding: 0;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.setting-item input[type="checkbox"] {
    width: 16px;
    height: 16px;
    cursor: pointer;
}

.setting-item input[type="number"] {
    width: 60px;
    padding: 4px 8px;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 4px;
    color: #ffffff;
}

.setting-item select {
    padding: 4px 8px;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 4px;
    color: #ffffff;
    cursor: pointer;
    max-width: 150px; /* Prevent select from being too wide */
}

.setting-value {
    min-width: 40px;
    font-size: 12px;
    color: #a0a0a0;
    text-align: right;
}

.settings-group {
    margin-bottom: 24px;
}

.settings-group h4 {
    margin: 0 0 12px 0;
    font-size: 14px;
    font-weight: 500;
    color: #a0a0a0;
}

.settings-actions {
    display: flex;
    gap: 12px;
    margin-top: 24px;
    padding-top: 16px;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
}

.primary-button,
.secondary-button {
    flex: 1;
    padding: 8px 16px;
    border: none;
    border-radius: 4px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s;
    white-space: nowrap; /* Prevent button text from wrapping */
}

.primary-button {
    background: #4a90e2;
    color: #ffffff;
}

.primary-button:hover {
    background: #357abd;
}

.primary-button:disabled {
    background: #2c5c8f;
    cursor: not-allowed;
}

.secondary-button {
    background: rgba(255, 255, 255, 0.1);
    color: #ffffff;
}

.secondary-button:hover {
    background: rgba(255, 255, 255, 0.15);
}

.secondary-button:disabled {
    background: rgba(255, 255, 255, 0.05);
    cursor: not-allowed;
}

.settings-feedback {
    margin: 8px 0;
    padding: 8px 12px;
    border-radius: 4px;
    font-size: 13px;
    animation: fadeIn 0.3s ease;
}

.settings-feedback.success {
    background: rgba(39, 174, 96, 0.2);
    color: #2ecc71;
}

.settings-feedback.error {
    background: rgba(231, 76, 60, 0.2);
    color: #e74c3c;
}

.settings-feedback.fade-out {
    animation: fadeOut 0.3s ease;
}

.connection-status {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    margin-right: 8px;
}

.connection-status.connected {
    background: #2ecc71;
}

.connection-status.disconnected {
    background: #e74c3c;
}

/* Scrollbar Styles */
.control-panel-content::-webkit-scrollbar {
    width: 8px;
}

.control-panel-content::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 4px;
}

.control-panel-content::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.2);
    border-radius: 4px;
}

.control-panel-content::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.3);
}

/* Animations */
@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

@keyframes fadeOut {
    from { opacity: 1; transform: translateY(0); }
    to { opacity: 0; transform: translateY(10px); }
}

/* Tooltips */
.setting-item label[data-tooltip] {
    position: relative;
    display: inline-flex;
    align-items: center;
}

.setting-item label[data-tooltip]:hover::after {
    content: attr(data-tooltip);
    position: absolute;
    left: 0;
    top: 100%;
    background: rgba(0, 0, 0, 0.9);
    color: #fff;
    padding: 6px 10px;
    border-radius: 4px;
    font-size: 11px;
    white-space: nowrap;
    z-index: 10;
    pointer-events: none;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

/* Group headers */
.settings-group h4::after {
    content: '';
    flex: 1;
    height: 1px;
    background: rgba(255, 255, 255, 0.1);
    margin-left: 8px;
}

/* Disabled states */
.setting-item.disabled {
    opacity: 0.5;
    pointer-events: none;
}

/* Sub-settings indentation */
.sub-settings {
    margin-left: 16px;
    padding-left: 12px;
    border-left: 2px solid rgba(74, 144, 226, 0.2);
}

/* Input focus states */
.setting-item input:focus,
.setting-item select:focus {
    outline: none;
    border-color: #4a90e2;
}

/* Hover effects */
.setting-item:hover label {
    color: #fff;
}

.setting-item:hover .setting-value {
    color: #fff;
}

----
ui/ControlPanel.ts
/**
 * Control panel for visualization settings
 */

import { VisualizationSettings } from '../core/types';
import { settingsManager } from '../state/settings';
import { createLogger } from '../core/utils';

const logger = createLogger('ControlPanel');

export class ControlPanel {
    private container: HTMLDivElement;
    private settings: VisualizationSettings;
    private isExpanded = false;
    private feedbackTimeout: number | null = null;
    private statusIndicator: HTMLDivElement;
    
    constructor() {
        this.container = document.createElement('div');
        this.container.className = 'control-panel';
        this.settings = { ...settingsManager.getSettings() };
        
        // Create status indicator
        this.statusIndicator = document.createElement('div');
        this.statusIndicator.className = 'connection-status';
        this.container.appendChild(this.statusIndicator);
        
        this.initializeUI();
        this.setupEventListeners();
        
        // Subscribe to settings updates
        settingsManager.addSettingsListener(this.onSettingsUpdate.bind(this));
        
        // Monitor WebSocket connection
        this.monitorConnection();
    }

    private showFeedback(message: string, type: 'success' | 'error' = 'success'): void {
        // Clear any existing feedback
        if (this.feedbackTimeout) {
            clearTimeout(this.feedbackTimeout);
            const existingFeedback = this.container.querySelector('.settings-feedback');
            if (existingFeedback) {
                existingFeedback.remove();
            }
        }

        // Create feedback element
        const feedback = document.createElement('div');
        feedback.className = `settings-feedback ${type}`;
        feedback.textContent = message;

        // Add to container before actions
        const actionsGroup = this.container.querySelector('.settings-actions');
        if (actionsGroup) {
            actionsGroup.insertAdjacentElement('beforebegin', feedback);
        }

        // Auto-remove after delay
        this.feedbackTimeout = window.setTimeout(() => {
            feedback.classList.add('fade-out');
            setTimeout(() => feedback.remove(), 300);
            this.feedbackTimeout = null;
        }, 3000);
    }

    private monitorConnection(): void {
        const updateStatus = (connected: boolean) => {
            this.statusIndicator.className = `connection-status ${connected ? 'connected' : 'disconnected'}`;
            this.statusIndicator.title = connected ? 'Connected to server' : 'Disconnected from server';
        };

        // Initial status
        updateStatus(settingsManager.isConnected());

        // Listen for connection changes
        settingsManager.onConnectionChange((connected) => {
            updateStatus(connected);
            if (!connected) {
                this.showFeedback('Lost connection to server', 'error');
            }
        });
    }

    private onSettingsUpdate(newSettings: VisualizationSettings): void {
        this.settings = { ...newSettings };
        this.updateUIValues();
        logger.log('Settings updated from external source');
    }

    private initializeUI(): void {
        this.container.innerHTML = `
            <div class="control-panel-header">
                <h3>Graph Controls</h3>
                <button class="toggle-button">≡</button>
            </div>
            <div class="control-panel-content">
                <div class="settings-group">
                    <h4>Node Appearance</h4>
                    <div class="setting-item">
                        <label for="nodeSize">Node Size</label>
                        <input type="range" id="nodeSize" min="0.05" max="2" step="0.05" value="${this.settings.nodeSize}">
                        <span class="setting-value">${this.settings.nodeSize.toFixed(2)}</span>
                    </div>
                    <div class="setting-item">
                        <label for="nodeColor">Color</label>
                        <input type="color" id="nodeColor" value="${this.settings.nodeColor}">
                    </div>
                    <div class="setting-item">
                        <label for="nodeOpacity">Opacity</label>
                        <input type="range" id="nodeOpacity" min="0" max="1" step="0.1" value="${this.settings.nodeOpacity}">
                        <span class="setting-value">${this.settings.nodeOpacity.toFixed(1)}</span>
                    </div>
                    <div class="setting-item">
                        <label for="metalness">Metalness</label>
                        <input type="range" id="metalness" min="0" max="1" step="0.05" value="${this.settings.metalness}">
                        <span class="setting-value">${this.settings.metalness.toFixed(2)}</span>
                    </div>
                    <div class="setting-item">
                        <label for="roughness">Roughness</label>
                        <input type="range" id="roughness" min="0" max="1" step="0.05" value="${this.settings.roughness}">
                        <span class="setting-value">${this.settings.roughness.toFixed(2)}</span>
                    </div>
                    <div class="setting-item">
                        <label for="clearcoat">Clearcoat</label>
                        <input type="range" id="clearcoat" min="0" max="1" step="0.1" value="${this.settings.clearcoat}">
                        <span class="setting-value">${this.settings.clearcoat.toFixed(1)}</span>
                    </div>
                    <div class="setting-item">
                        <label for="enableInstancing">Enable Instancing</label>
                        <input type="checkbox" id="enableInstancing" ${this.settings.enableInstancing ? 'checked' : ''}>
                    </div>
                    <div class="setting-item">
                        <label for="materialType">Material Type</label>
                        <select id="materialType" value="${this.settings.materialType}">
                            <option value="physical">Physical</option>
                            <option value="basic">Basic</option>
                            <option value="phong">Phong</option>
                        </select>
                    </div>
                </div>

                <div class="settings-group">
                    <h4>Node Highlight</h4>
                    <div class="setting-item">
                        <label for="highlightColor">Highlight Color</label>
                        <input type="color" id="highlightColor" value="${this.settings.highlightColor}">
                    </div>
                    <div class="setting-item">
                        <label for="highlightDuration">Duration (ms)</label>
                        <input type="number" id="highlightDuration" min="0" max="2000" step="100" value="${this.settings.highlightDuration}">
                    </div>
                    <div class="setting-item">
                        <label for="enableHoverEffect">Enable Hover</label>
                        <input type="checkbox" id="enableHoverEffect" ${this.settings.enableHoverEffect ? 'checked' : ''}>
                    </div>
                    <div class="setting-item">
                        <label for="hoverScale">Hover Scale</label>
                        <input type="range" id="hoverScale" min="1" max="2" step="0.1" value="${this.settings.hoverScale}">
                        <span class="setting-value">${this.settings.hoverScale.toFixed(1)}</span>
                    </div>
                </div>

                <div class="settings-group">
                    <h4>Edge Appearance</h4>
                    <div class="setting-item">
                        <label for="edgeWidth">Edge Width</label>
                        <input type="range" id="edgeWidth" min="0.5" max="5" step="0.5" value="${this.settings.edgeWidth}">
                        <span class="setting-value">${this.settings.edgeWidth.toFixed(1)}</span>
                    </div>
                    <div class="setting-item">
                        <label for="edgeColor">Color</label>
                        <input type="color" id="edgeColor" value="${this.settings.edgeColor}">
                    </div>
                    <div class="setting-item">
                        <label for="edgeOpacity">Opacity</label>
                        <input type="range" id="edgeOpacity" min="0" max="1" step="0.1" value="${this.settings.edgeOpacity}">
                        <span class="setting-value">${this.settings.edgeOpacity.toFixed(1)}</span>
                    </div>
                    <div class="setting-item">
                        <label for="enableArrows">Enable Arrows</label>
                        <input type="checkbox" id="enableArrows" ${this.settings.enableArrows ? 'checked' : ''}>
                    </div>
                    <div class="setting-item">
                        <label for="arrowSize">Arrow Size</label>
                        <input type="range" id="arrowSize" min="0.05" max="0.5" step="0.05" value="${this.settings.arrowSize}">
                        <span class="setting-value">${this.settings.arrowSize.toFixed(2)}</span>
                    </div>
                </div>

                <div class="settings-group">
                    <h4>Physics Settings</h4>
                    <div class="setting-item">
                        <label for="physicsEnabled">Enable Physics</label>
                        <input type="checkbox" id="physicsEnabled" ${this.settings.physicsEnabled ? 'checked' : ''}>
                    </div>
                    <div class="setting-item">
                        <label for="attractionStrength">Attraction</label>
                        <input type="range" id="attractionStrength" min="0" max="0.05" step="0.001" value="${this.settings.attractionStrength}">
                        <span class="setting-value">${this.settings.attractionStrength.toFixed(3)}</span>
                    </div>
                    <div class="setting-item">
                        <label for="repulsionStrength">Repulsion</label>
                        <input type="range" id="repulsionStrength" min="0" max="3000" step="100" value="${this.settings.repulsionStrength}">
                        <span class="setting-value">${this.settings.repulsionStrength.toFixed(0)}</span>
                    </div>
                    <div class="setting-item">
                        <label for="springStrength">Spring</label>
                        <input type="range" id="springStrength" min="0" max="0.05" step="0.001" value="${this.settings.springStrength}">
                        <span class="setting-value">${this.settings.springStrength.toFixed(3)}</span>
                    </div>
                    <div class="setting-item">
                        <label for="damping">Damping</label>
                        <input type="range" id="damping" min="0" max="1" step="0.01" value="${this.settings.damping}">
                        <span class="setting-value">${this.settings.damping.toFixed(2)}</span>
                    </div>
                    <div class="setting-item">
                        <label for="maxVelocity">Max Velocity</label>
                        <input type="range" id="maxVelocity" min="0.5" max="5" step="0.5" value="${this.settings.maxVelocity}">
                        <span class="setting-value">${this.settings.maxVelocity.toFixed(1)}</span>
                    </div>
                    <div class="setting-item">
                        <label for="collisionRadius">Collision Radius</label>
                        <input type="range" id="collisionRadius" min="0.1" max="1" step="0.05" value="${this.settings.collisionRadius}">
                        <span class="setting-value">${this.settings.collisionRadius.toFixed(2)}</span>
                    </div>
                </div>

                <div class="settings-group">
                    <h4>Lighting</h4>
                    <div class="setting-item">
                        <label for="ambientLightIntensity">Ambient Light</label>
                        <input type="range" id="ambientLightIntensity" min="0" max="2" step="0.1" value="${this.settings.ambientLightIntensity}">
                        <span class="setting-value">${this.settings.ambientLightIntensity.toFixed(1)}</span>
                    </div>
                    <div class="setting-item">
                        <label for="directionalLightIntensity">Directional Light</label>
                        <input type="range" id="directionalLightIntensity" min="0" max="2" step="0.1" value="${this.settings.directionalLightIntensity}">
                        <span class="setting-value">${this.settings.directionalLightIntensity.toFixed(1)}</span>
                    </div>
                    <div class="setting-item">
                        <label for="environmentIntensity">Environment</label>
                        <input type="range" id="environmentIntensity" min="0" max="2" step="0.1" value="${this.settings.environmentIntensity}">
                        <span class="setting-value">${this.settings.environmentIntensity.toFixed(1)}</span>
                    </div>
                    <div class="setting-item">
                        <label for="backgroundColor">Background Color</label>
                        <input type="color" id="backgroundColor" value="${this.settings.backgroundColor}">
                    </div>
                    <div class="setting-item">
                        <label for="enableAmbientOcclusion">Ambient Occlusion</label>
                        <input type="checkbox" id="enableAmbientOcclusion" ${this.settings.enableAmbientOcclusion ? 'checked' : ''}>
                    </div>
                    <div class="setting-item">
                        <label for="enableShadows">Enable Shadows</label>
                        <input type="checkbox" id="enableShadows" ${this.settings.enableShadows ? 'checked' : ''}>
                    </div>
                </div>

                <div class="settings-group">
                    <h4>Visual Effects</h4>
                    <div class="setting-item">
                        <label for="enableBloom">Enable Bloom</label>
                        <input type="checkbox" id="enableBloom" ${this.settings.enableBloom ? 'checked' : ''}>
                    </div>
                    <div class="setting-item">
                        <label for="bloomIntensity">Bloom Intensity</label>
                        <input type="range" id="bloomIntensity" min="0" max="3" step="0.1" value="${this.settings.bloomIntensity}">
                        <span class="setting-value">${this.settings.bloomIntensity.toFixed(1)}</span>
                    </div>
                    <div class="setting-item">
                        <label for="bloomRadius">Bloom Radius</label>
                        <input type="range" id="bloomRadius" min="0" max="1" step="0.1" value="${this.settings.bloomRadius}">
                        <span class="setting-value">${this.settings.bloomRadius.toFixed(1)}</span>
                    </div>
                    <div class="setting-item">
                        <label for="nodeBloomStrength">Node Bloom</label>
                        <input type="range" id="nodeBloomStrength" min="0" max="1" step="0.1" value="${this.settings.nodeBloomStrength}">
                        <span class="setting-value">${this.settings.nodeBloomStrength.toFixed(1)}</span>
                    </div>
                    <div class="setting-item">
                        <label for="edgeBloomStrength">Edge Bloom</label>
                        <input type="range" id="edgeBloomStrength" min="0" max="1" step="0.1" value="${this.settings.edgeBloomStrength}">
                        <span class="setting-value">${this.settings.edgeBloomStrength.toFixed(1)}</span>
                    </div>
                </div>

                <div class="settings-group">
                    <h4>Motion & Animation</h4>
                    <div class="setting-item">
                        <label for="enableNodeAnimations">Node Animations</label>
                        <input type="checkbox" id="enableNodeAnimations" ${this.settings.enableNodeAnimations ? 'checked' : ''}>
                    </div>
                    <div class="setting-item">
                        <label for="enableMotionBlur">Motion Blur</label>
                        <input type="checkbox" id="enableMotionBlur" ${this.settings.enableMotionBlur ? 'checked' : ''}>
                    </div>
                    <div class="setting-item">
                        <label for="motionBlurStrength">Blur Strength</label>
                        <input type="range" id="motionBlurStrength" min="0" max="1" step="0.1" value="${this.settings.motionBlurStrength}">
                        <span class="setting-value">${this.settings.motionBlurStrength.toFixed(1)}</span>
                    </div>
                </div>

                <div class="settings-group">
                    <h4>Labels</h4>
                    <div class="setting-item">
                        <label for="showLabels">Show Labels</label>
                        <input type="checkbox" id="showLabels" ${this.settings.showLabels ? 'checked' : ''}>
                    </div>
                    <div class="setting-item">
                        <label for="labelSize">Label Size</label>
                        <input type="range" id="labelSize" min="0.5" max="2" step="0.1" value="${this.settings.labelSize}">
                        <span class="setting-value">${this.settings.labelSize.toFixed(1)}</span>
                    </div>
                    <div class="setting-item">
                        <label for="labelColor">Label Color</label>
                        <input type="color" id="labelColor" value="${this.settings.labelColor}">
                    </div>
                </div>

                <div class="settings-group">
                    <h4>Performance</h4>
                    <div class="setting-item">
                        <label for="maxFps">Max FPS</label>
                        <input type="number" id="maxFps" min="30" max="144" step="1" value="${this.settings.maxFps}">
                    </div>
                    <div class="setting-item">
                        <label for="enableAntialiasing">Antialiasing</label>
                        <input type="checkbox" id="enableAntialiasing" ${this.settings.enableAntialiasing ? 'checked' : ''}>
                    </div>
                </div>

                <div class="settings-actions">
                    <button id="saveSettings" class="primary-button">Save Settings</button>
                    <button id="resetSettings" class="secondary-button">Reset to Defaults</button>
                </div>
            </div>
        `;

        document.body.appendChild(this.container);
    }

    private setupEventListeners(): void {
        // Toggle panel
        const toggleButton = this.container.querySelector('.toggle-button');
        toggleButton?.addEventListener('click', () => {
            this.isExpanded = !this.isExpanded;
            this.container.classList.toggle('expanded', this.isExpanded);
        });

        // Save button
        const saveButton = this.container.querySelector('#saveSettings');
        saveButton?.addEventListener('click', () => this.saveSettings());

        // Reset button
        const resetButton = this.container.querySelector('#resetSettings');
        resetButton?.addEventListener('click', () => this.resetSettings());

        // Node appearance settings
        this.setupRangeListener('nodeSize', 'nodeSize');
        this.setupColorListener('nodeColor', 'nodeColor');
        this.setupRangeListener('nodeOpacity', 'nodeOpacity');
        this.setupRangeListener('metalness', 'metalness');
        this.setupRangeListener('roughness', 'roughness');
        this.setupRangeListener('clearcoat', 'clearcoat');
        this.setupCheckboxListener('enableInstancing', 'enableInstancing');
        this.setupSelectListener('materialType', 'materialType');

        // Node highlight settings
        this.setupColorListener('highlightColor', 'highlightColor');
        this.setupNumberListener('highlightDuration', 'highlightDuration');
        this.setupCheckboxListener('enableHoverEffect', 'enableHoverEffect');
        this.setupRangeListener('hoverScale', 'hoverScale');

        // Edge settings
        this.setupRangeListener('edgeWidth', 'edgeWidth');
        this.setupColorListener('edgeColor', 'edgeColor');
        this.setupRangeListener('edgeOpacity', 'edgeOpacity');
        this.setupCheckboxListener('enableArrows', 'enableArrows');
        this.setupRangeListener('arrowSize', 'arrowSize');

        // Physics settings
        this.setupCheckboxListener('physicsEnabled', 'physicsEnabled');
        this.setupRangeListener('attractionStrength', 'attractionStrength');
        this.setupRangeListener('repulsionStrength', 'repulsionStrength');
        this.setupRangeListener('springStrength', 'springStrength');
        this.setupRangeListener('damping', 'damping');
        this.setupRangeListener('maxVelocity', 'maxVelocity');
        this.setupRangeListener('collisionRadius', 'collisionRadius');

        // Lighting settings
        this.setupRangeListener('ambientLightIntensity', 'ambientLightIntensity');
        this.setupRangeListener('directionalLightIntensity', 'directionalLightIntensity');
        this.setupRangeListener('environmentIntensity', 'environmentIntensity');
        this.setupColorListener('backgroundColor', 'backgroundColor');
        this.setupCheckboxListener('enableAmbientOcclusion', 'enableAmbientOcclusion');
        this.setupCheckboxListener('enableShadows', 'enableShadows');

        // Visual effects settings
        this.setupCheckboxListener('enableBloom', 'enableBloom');
        this.setupRangeListener('bloomIntensity', 'bloomIntensity');
        this.setupRangeListener('bloomRadius', 'bloomRadius');
        this.setupRangeListener('nodeBloomStrength', 'nodeBloomStrength');
        this.setupRangeListener('edgeBloomStrength', 'edgeBloomStrength');

        // Motion & animation settings
        this.setupCheckboxListener('enableNodeAnimations', 'enableNodeAnimations');
        this.setupCheckboxListener('enableMotionBlur', 'enableMotionBlur');
        this.setupRangeListener('motionBlurStrength', 'motionBlurStrength');

        // Label settings
        this.setupCheckboxListener('showLabels', 'showLabels');
        this.setupRangeListener('labelSize', 'labelSize');
        this.setupColorListener('labelColor', 'labelColor');

        // Performance settings
        this.setupNumberListener('maxFps', 'maxFps');
        this.setupCheckboxListener('enableAntialiasing', 'enableAntialiasing');
    }

    private setupRangeListener(elementId: string, settingKey: keyof VisualizationSettings): void {
        const element = this.container.querySelector(`#${elementId}`) as HTMLInputElement;
        if (element) {
            element.addEventListener('input', () => {
                (this.settings[settingKey] as number) = parseFloat(element.value);
                const valueDisplay = element.parentElement?.querySelector('.setting-value');
                if (valueDisplay) {
                    valueDisplay.textContent = parseFloat(element.value).toFixed(
                        element.step.includes('.') ? element.step.split('.')[1].length : 0
                    );
                }
                settingsManager.updateSettings(this.settings);
            });
        }
    }

    private setupColorListener(elementId: string, settingKey: keyof VisualizationSettings): void {
        const element = this.container.querySelector(`#${elementId}`) as HTMLInputElement;
        if (element) {
            element.addEventListener('input', () => {
                (this.settings[settingKey] as string) = element.value;
                settingsManager.updateSettings(this.settings);
            });
        }
    }

    private setupCheckboxListener(elementId: string, settingKey: keyof VisualizationSettings): void {
        const element = this.container.querySelector(`#${elementId}`) as HTMLInputElement;
        if (element) {
            element.addEventListener('change', () => {
                (this.settings[settingKey] as boolean) = element.checked;
                settingsManager.updateSettings(this.settings);
            });
        }
    }

    private setupNumberListener(elementId: string, settingKey: keyof VisualizationSettings): void {
        const element = this.container.querySelector(`#${elementId}`) as HTMLInputElement;
        if (element) {
            element.addEventListener('input', () => {
                (this.settings[settingKey] as number) = parseInt(element.value);
                settingsManager.updateSettings(this.settings);
            });
        }
    }

    private setupSelectListener(elementId: string, settingKey: keyof VisualizationSettings): void {
        const element = this.container.querySelector(`#${elementId}`) as HTMLSelectElement;
        if (element) {
            element.addEventListener('change', () => {
                (this.settings[settingKey] as string) = element.value;
                settingsManager.updateSettings(this.settings);
            });
        }
    }

    private updateUIValues(): void {
        // Update all input values to match current settings
        Object.entries(this.settings).forEach(([key, value]) => {
            const element = this.container.querySelector(`#${key}`) as HTMLInputElement | HTMLSelectElement;
            if (element) {
                if (element instanceof HTMLInputElement) {
                    if (element.type === 'checkbox') {
                        element.checked = value as boolean;
                    } else if (element.type === 'range' || element.type === 'number') {
                        element.value = value.toString();
                        const valueDisplay = element.parentElement?.querySelector('.setting-value');
                        if (valueDisplay) {
                            valueDisplay.textContent = typeof value === 'number' 
                                ? value.toFixed(element.step.includes('.') ? element.step.split('.')[1].length : 0)
                                : value.toString();
                        }
                    } else {
                        element.value = value as string;
                    }
                } else {
                    element.value = value as string;
                }
            }
        });
    }

    private async saveSettings(): Promise<void> {
        const saveButton = this.container.querySelector('#saveSettings') as HTMLButtonElement;
        if (saveButton) {
            saveButton.disabled = true;
            saveButton.textContent = 'Saving...';
        }

        try {
            await settingsManager.saveSettings();
            this.showFeedback('Settings saved successfully');
            logger.log('Settings saved successfully');
        } catch (error) {
            this.showFeedback('Failed to save settings', 'error');
            logger.error('Failed to save settings:', error);
        } finally {
            if (saveButton) {
                saveButton.disabled = false;
                saveButton.textContent = 'Save Settings';
            }
        }
    }

    private resetSettings(): void {
        const resetButton = this.container.querySelector('#resetSettings') as HTMLButtonElement;
        if (resetButton) {
            resetButton.disabled = true;
            resetButton.textContent = 'Resetting...';
        }

        try {
            settingsManager.resetToDefaults();
            this.showFeedback('Settings reset to defaults');
            logger.log('Settings reset to defaults');
        } catch (error) {
            this.showFeedback('Failed to reset settings', 'error');
            logger.error('Failed to reset settings:', error);
        } finally {
            if (resetButton) {
                resetButton.disabled = false;
                resetButton.textContent = 'Reset to Defaults';
            }
        }
    }

    // ... [Rest of the code remains the same] ...
}

----
ui/index.ts
import { ControlPanel } from './ControlPanel';
import './ControlPanel.css';

export { ControlPanel };

----
public/fonts/Roboto-Regular.woff2
wOF2     =     t  =                       dd^`  T	<
|{
 6$ t I3%؋8&4Z|t 8D$uNEPEAk=x9Xz`IR#F+B`}RP|EZ\W[CQBmcm?FgQ3шpL2ٽ[̮!+@U^~ޣ D?jUcUl6{ mCD]htջQ8@PLc

+ZD2K:4{g:~  v  < H^R'8?;uyVW8="FÓ*	@EĴc= Iby8$a){ԶKiIW&Ӕ~}1wM{4!{FH5#Kt5wve; 'NJ	'(%;?DMCq,<=?f _VbA(37v+uYCb
w8AF3n-'U%2؟oٟl"^bj aoF!`
Aj'މ:Zu.[݂pGW:U%Ejq	:IC	SCsJe6Dқ<UM,
&hz} y|9
DᛯjnB$T¬׵?/Q=BC_f#:Bo@]T(vF+d" RRR!~AX>!`p¢,08 9Ό/茓
rQ Qpg\koC3Yyt'd9>#|3Ƹ?֌#$i
g5z֏秲S{3ɲSpS2бw6 Ӣf]﵋F]&^fM%A}؊)ZLUX.&qOq?$nV_[3hQ詎ְ$ڥcEv0CQ4a=jwn'&Vwz'
fxdjqv:ꡔVVF7:HZl*Тtj"O~ۿGJa1F~۷--J%MZ߱}:!%cV1&9עV5hUp}
ѾtS߼w?<=VEk-xƻ1xP@F'O!#LXdÖ{pƓ	&.XX
$4xǞhסSmq&G|O_ClNX\p@Ĉ/~q6A7^SsNjQ#-vV"qwq
a#hoa|'|k/}w0ܯ2"n<0BCPAzǥ
x>CEMTqXUX+SR٘xʀJ)X	2~8A/WѬdq9G
 !4m1I7?ۗν<	o8&0y8/JYc"#>3%ahv|8C%. }pha '|Ɨsи}DK*SY\S%P8'K[J2*f
"D ^ bt6220/:1F0cƁ+ܩIHDJC
Zn;&YxP?%GFN&M<<2db	,Yaéĉg\ʕ#[`
wTxD!PB`!(DDED%
Kh41b(RF45iEMm馛[< CO'g yFb$#|_h~KOdLLW[1Pec`R^rT2Sbt "O7)Q@yAQU)@)`j"[lq11vFVc4F IDfXa9O܉gfCԜ[#9 =371G~$v:H6T>@v"A!nٝfso;}|7
߻/ڊ<H(FІZ{&n2I-	-f[37D'"r?a3m -&J
Uj+jcHD-U<p#l&c:AVvf19g-V9]p%!F$Y0Y`0lTY"_}ܵ
 EHHQ)3{{"_aLb  :c<ˢ	eʹ|
,`}A 3䱪 \@nޤRj1)6jWB$T`~t1Ըd*2SzKw]lüea[=l2t̏k]9]LU)a?OU(>Ai#mÕ'ҥ@NϡՃP㐮ks7;g'~5zoZ2F)+Bbb,.HgsXl.إꠧ ;k1{P16C2E0-@b ٧BL÷d^<Pfdbp3󢑔ܣ/&<#tXTkD9Fίث
Vz倶(<Cl3_5JH6	>U)9NIac_XQO}h	~o~༰Vɕ[JށfK.rf0
^xy0Gռ	KFߛIf <ex2hI;iҰ_D^275 >(?
҅*G78BCXL8y	cA+ESs5Z!C
>!/bx3ڔi{nx[㉭!dS P@Y<˂U{֍Ug'YjbIЙ7rA2UZM%dvxȢ&Wp6պF|J
!:	Rhz oudQʫ#XXxBXa}+l^܊SH0Y	0	fTpV7O'1My$"B5SǛ0PVŜb]$WR
PkE	Lܰ9 E!CK3X;RqtH45Ik`wiLTo7E2%{yU~nVb}8^RNY+;3SٴF|T=JHEIBw	ˡPm;7jMIڐF_sM
U[t
'\y٨叶skHȡ^][!4p̬:"O[+5h %C*1b]|e{*ȹu.ٞHʁ:!/ya]
ܤkg1g=mCл0=SgMTHXV 9?D/[|!GϦ19@od_OW,
:pax^m@MKc+CD%(U+\i!7X
\r>}
Ҷv48?)
,yk
=V|0>sjgVUeȒReT\VHJ+bӯP37L&Yp<
ٮ7ݦ~L-z2=p+q23"s~pʩ
EV8?ެCAۧ=J8M8s+x*"(D(*:)"W}`;k|SUW253ttJ!5Cgu2R˖yD[ǵʷR8'Ul}ݬdPAڇt!':@eAFZI%ϙ}V4ITz_CQNͨT۷3'G˲]PV<>f[ˍ|: Qp	|Hnb^^شm	!4 ź*quk<BI=vK,<-v)y-&S^L⮙LzR<fR]%!V6u\4]
N}&'Y䅓Γ08ko^i_K5K\#)#seC\xL2joآ!IXc'm,*3(9ĮdGsТOt<u6$U(d轢{_'
~/`eKxwGe{?ޜB隑~
GnUkY[
:6xx|O< 녭RoĆNd 
p(!1-Jڲ{'3)MWpHBmg|SwF|qSi;[܆TNa%(˅Iy\:ڝYwEhlƥQVFiyU:RG(fQ!,E 9ۦO_lJ9?d#?JmSQCw~,J$iF..;벍Dm|dqs(MʘZWѥ)^׀
&uVEoZ5F
фS$xPE-~n*+\yd^C/:Wꋕ.Xv`fH$ǉPYrQ{hӐ&y<K"ޓ6Z;kQbyw.sjI
xWg$YW//W/x

Wӈ}$4QB½@@蛄tH53E5{^\Ã=J|Ҝ<JLj'7n/.~^$gw-Ǭ, <ESd/DabLޝ(=q opGU32qrꑌpFל]g[I,'zw؟pΞFtVt<?meE؟X%3V?\8B>&m5_-d7!Ӓ#ogZ(aBh(PLBy*t6gEgbtB+flaTpL0#-du	0sp%8dA*<'41/ހhFj!Ovs+1eҚ!-f7@6aIQ-dLBEץ'~x[
.FnVg62-Y6(;GLRq{OK:1|e,PUwǚFWƳ߃W]CjFc:'Tjx .Gs<u5B\coօTOm$ϳll3oWp_~DddYf*MG
կ0zbW`[ͫ4On37@W_yYk\#Z+qsJorӝȼX|EM>>Ϟֻ\ͦ?T$`@l$ p1G7_<M
(̘	>ˎ%չ% BN9ǁPqumO9G/۬of_z?u0v2K:K̬$ce^.FbgGNVxq/qiq^!b;=NJ+ 
e'dHbBt#[1YCw@z0>Bʟ%XLi \""''.*#Ƶ~씠=\I䋹sDU9ܗk3x\rSKٕ1O~~^l[6R)%JRS":
7

k
(t˸FTKTSD<+GLODhDBpO`xY@UiߐrD}=KoHY	 +,~&8z/k4>㺭51]),rj3=ǿ#dV<zot_Fn+L릟8!ݟݏݎ&SvnڑA|侦WAhRf-nw:1 tɱ۱5/S&[NTyUJ(x:sQo1"cED:3kLv׶I1Aȥf
p/z^Ee&A
v񜝯ʲ_
.W]"6@ԵD{	l vHs3
F-BBP:Y	ɰP9~~~cLiP!(}
?
ک 1r<8qrc>pLb		ȱh|,,=6=$5	a湩Rj玪KϭW--g=O>Zٕ06c-%ꠅb[# Se!/^bϝ9ih~wvo<LCu!N-raPV8yW@DF0٬?bbmԡM\}sW-r@6to]po2=4L,FÂ`dlxDECE]&)n/@X F} wF$jojǝc_	kUj*\Q?H^m-PʉES2""8NsK`nes(H-X~8|=/_tKAƀrH#@V`z(S1ZP']f2eyP`d\1n'ơ6ۮhΞkٽtS;K` ^gXdL`vIrMZc>d\?VK;ͺr	|?4[*KmxKw
<=\7`Xwbf.&wr{7OFns _?
)	-]o#t$2SjldJy˗rvV-ŏһe[owtOrm
]sc9%OV!ۢ[my|F|+L$/qqŻ.	%rwdKrn=SUknJ@2yڕ3ǚB<r}e,x94Y"i)p=^uIoʮCTQj=-YcQǿ+ .pqr#Qs
mNL p;T}LM>Ȟ~߰JjBrS/,-`%q_%[
Y|GM[-[y͏L훏OGc^_b4 xz
Xq(mˮY7e4=E^wT"{A^vZvKka}e=ZlY_
`	zR=U.XF;i5:e
t
A1fFFB:m(gwXYF?Mwp9$5My+6{&(KްfX氺q?vbA{5`e2Qs3I~_?AHoB_di7f$᧶O>!Rbor`rOU241}twS;{݊2eC	!ݍd`ht\%Ar<:ڿX6A2֋?=ܻGAm;ayrKť6a>ځAǸO1XgObu~(Y`(^NH=nYɭK2/vI"k-
Xui,q6PCX0 _>&J-F׺FSB3+nyT53;73\Y/!g斐(STTY9G
\))ȵɤՔ*:f2f #Dވ\,3n2N567MmM\zSrJ-z-fV9r27˅g繁X L^wk4ҫ*j oy~Jk""Lls۶EiϷ$lapS,I{5nGd8{4#:7Z^K]dV׶5J}<}RbP͏'|i]lh]noH	jKHA[̰9=ibkeX3:13%8؎PM5QQ=ܖ]Y/n|
0UOdeI?dCj-5Rm5~v(ld') ..53HpgF@ZP|"RK<RVRRVB
	%
[jhZT`6RD9L,Ϥ4	}202orEG(6Ԡ |!aa6EDN03my0kԼjTXUb#ՔN225RCg=:tIXY3	؝R7S~̇i-3pg>)tgǱqp%W[wz*$JiD0[[绐m@'hHhqz/dh3lBOEFS=Yڽ{=;h1mm=>(<<waT@7mͅǝPo[ؚ$$ۘ3.pSA	a
OGCYz~Ͽdekp_
#㡗ٙ&aʈ>IO?`)뮴p!JswcKvT7--c":Z8]7<Wɹl{%L͞$Gy߻yrбJ$~tPpеp	]}(|scT|KAE)o@GP/rlY+?^BVv	GD;o75wW}Nc4j74bff*D~RQ֣_^V.<{J$ܫn9>Nt1\u{:WCC:\{/޼,t%"Fz_3/M
ԧ(
q(K
̗
NED:vdFc'.mg&\t`%C">صSP/9J"dLЩBiDKl-OoEa޽8@Idҋ?oy5LMHaGDlZ= 6ks67Iy%pJy$F<exkJWr|{r`rAu'[lk=~:gQRxQKRn?ysnJ+	1"
`@|st<(B<p\,V#"`uKo5n[VkvAx˸FDxGFbYcZKXT *䯏&_x2}"x
YiϡkCNvuuhsZldr 2yh)B2!M,$F{|2{Ln7,'|x-n>_Mn`k )P{ᱧd].N ^

Y>q긢5dE(gɢ]\8{jaisarIgAgM'hxP`
e_/-V=8X77Tv9;UbBu@k jjx	Bל3z8&Aa$BPR'`Q,oaYJ+IA2
`ƺV0V4<V2!(1ZE7+-os/+VqFIO&ҾŦ{Lc		xMl
OCZ,QM&ǧqz0
eKtK
;#Ϣy}]m~PB~^zR=-3T&A'S|j;jkY:XX{CP~q(T\G92DqVY`󽩭mٰMMb¯{^ٺpe^p5`hVVnE c>[D;¸ψ;#XűW$4C
H&໼eZozrSZi`U-[P?t1,o4 !@dc ml[AA
-q.O)tLE ml `]LWƳ`^ȇ}H,:w_v[bև]hsQx<'ټI[<q^?X.7y]7٦M>mQ-9nII6F؇`'ֹIoKiD Ban\wo{rbJ诤P`yɰ~y%d3v\\=ՃO<8v7 	"]=#b Z$YtWAE$TXihb/5pR>weO_ڿGv3Do
=&'Z w;=UOUZ*KsrJ {>}i.C)J!1:E3 Z?&=,ŅD{^%DtK(2(`gih=|w
JaȝGCTʾqIòvFG7ٴEWIh$O>罖 7`.~ 5g^h_;~)A)ĥwlSj@#`lv[EwLΜ7cڰRjJ,zdp_([bދv6LӲVڢ.A#y%?`,'@:0uNBp(VLW￳.H yx&n	FE~}Y)7nӉGhZ'	cI)ae:tEƶ|Ff5xИ&qKQlVd(%rb@$V?TUaMݮGe%
az-W+M֌q"XaƿX@éKf>ެ4t:ێTͣg;v
Mx^[\f:o/KԥCU3jY5io~aVQ4 ԤbR<fxIɔ9S>D"x*yzETa| OI,]Ԁ0\6j"y)=XCi~2=%zڌ<:XSkZcrsD#0]y-5g݀z4Nظ1-za\ݨ՞}Qt4[ha2AFOdȋřa@Gwub`pƴX݃InKaXg92cQr,g&wjkȟn0B"AA#k0s/S
挷	rdNUexLenMpv_ä=;׭<7zxkxovwi}fB8"	%IZ*+id	ҵ
T!zB`"9d7Xr)g1ۄwM6ğm1ari}x~׊z2t[0z"<Ƴul< [  WO_շ:K>/q/U]-\G]!F_{0
>W28W+JJRf}1udXʢ`/r35@AhseHGm\nXhL}4dSZȡL V`%9",<i%³yJ \vQ%DRp`FWɹCRE0;YF@wќÑP^[kJ  YJ),۱6L$4fR$%W>eGN2tJ{i틭3e&/֊]:CH|g墶5D,hrV%͕Ӧ@*	229	:x#a3[G5[u v1#濑T֚XLB~[pS:<p?no#bݙcbqN{6D#FT|Hl,+Q@ďSMkI:A۠HCuCuH'bRV	^
CM#gn8V9ʓ¿uoկNTI3*dQa˓X=#ëi8CD |D1lQ3TIo82D
%rJkFbO#N|.VFqR_X;9׾U cƛTb],E?P;ѧ=BM&kF#eg"`9abePȣ\VMnrA@+uwe޺=q3:HH1<uo
I_Svkel
SP1,K-W=7Psx +9\
M2>YAG'1JLcrKm8Pi\v;ȝfoBs7]=G`udI@Idwgs*se-nZxcdiE)tfȤ\q()@By34גIaz[EYHTTVД+w`l0tA=wrֆM/CѓSH(рT-<m[IʲӴ"}E4eRB@H2sIdflcؒ
3;W}VtIzydwjh<޼,ۥ$D3Čіiډͳ~89|̥G }>ӆ5S >Myߙ=ۓ龼[?Е/B:\9ڠvYޜ6At2ûh>V%/lX_M@xng҅ی6U#׵3wOE}Z2L0;YVBXv+sAP (xw{2PWQW=`L^Ujݚ,IɜYL:o|p\·3yo@Bu7y1bviJ12n P>-u0;(BG=aqȊXlb{ΥMs!!*]Y]Vɰb3Q%,]u"_bȶȩؐh!PRYz')O8:	+9<nSDeXii=`o/<јRmɛI-}?.[NO5(ovRƶɘC=EXRBS_-YU U ma,kJ;x]]q)4?7cɍ2(ںe>-ɟ=Gwaa/a^.7vz89K_3/8M0̪siGf41z^l
MeOުu%ĩƝ+VaeA(lVj;t2+hKmy{%4O}']MvdY9wiej/xƂY}([G)ҚD(&}|`ʬf:.Ÿ>N(&Rí/c r@g,M}<KXCAV4Ișp34/Iz"'{ZX ](Mɹp"0@
QLp%رvZn#V=1p@+]YE}Dvi3P-z
і-.4!m=đben}0>C?i{
Rg;L;}\vgɱڵOVqA;'l#٦xWepg?B+yzm'`/ό{z) վr`XNT^Ӓc;HRS:e)qE:蕞8Xe3z0S4êe<Ɗ05FNHBAqme$do^'0Z`YK&#5Z,m<[-G=1?);Cd1{To=޼L1Z
sjOdت5h*i)U}	wg#՝Xd=o]<n^tbD4^].+;e2kRʴ4^ohO%G<%r_;:
	е(jd!\hYRjx+VKKkqKs"_<.Ё
}	hzL~o{4V(?Ge֗n8,\#噦,JǇv
l/"o"t-=g@Mm#4]qAi edR1F<D訉n?H{	gÄ<W>ԠfJ#SOb$A)g!* F( 	jZdYT8H?"x#qDɀ_[1^X$F	JDNbd0EkV!l(st;
t^9"yǕc8^q6g?~jNw,g09w`?3^JBKE5X?eAY*LӶ$ܵcPhe%(]
(#1CySEdH8ITVgyd4uZס9N c-nmsƮfۡVNSoQ9êYiFu. |B)6VsFnjh5 ");ԤĊMevjq&>Z}2:dq~/--U=:'zǉpk$ON RnHOz҉[/<Tom"TǥdLdmUWX;s;e%T_[Dl_;kuLJ:4KJmN%,8⬱%~j뤍Câ:cI
 m[=R\T]Zy̹\_ZU5mY嶈|d6fiVVsڏIdń b ?<o @fX"HXS+h3PK!{"/RԆu PIzvueN=M]jv@7_YӞ4yV$ZF9"G (!`&%
р+FQF3n&+i~ih\y).U"\,YU&\NF侞r$
A٪<JV$BE$LU,K"@tS6dd:G^Y$EJ#xyKe4$
,
rj{><5`6l6%ܤ3$|d/ѺxG\o_i궫Q'氃-lڊAIQ5%ϋI!崓A!p1䲏JtZCXdE#[VB
=aEXdcR	d1+s#]|QǘERSdŏ.
)   
----
platform/platformManager.ts
class BrowserEventEmitter {
  private listeners: { [event: string]: Function[] } = {};

  on(event: string, listener: Function): void {
    if (!this.listeners[event]) {
      this.listeners[event] = [];
    }
    this.listeners[event].push(listener);
  }

  emit(event: string, ...args: any[]): void {
    const eventListeners = this.listeners[event];
    if (eventListeners) {
      eventListeners.forEach(listener => listener(...args));
    }
  }

  removeAllListeners(): void {
    this.listeners = {};
  }
}

import { Platform, PlatformCapabilities } from '../core/types';
import { createLogger } from '../core/utils';

const logger = createLogger('PlatformManager');

declare global {
  interface Navigator {
    xr?: XRSystem;
  }
}

export class PlatformManager extends BrowserEventEmitter {
  private static instance: PlatformManager | null = null;
  private platform: Platform;
  private capabilities: PlatformCapabilities;
  private initialized: boolean = false;

  private constructor() {
    super();
    this.platform = 'desktop';
    this.capabilities = {
      xrSupported: false,
      webglSupported: false,
      websocketSupported: false,
      webxr: false,
      handTracking: false,
      planeDetection: false
    };
  }

  static getInstance(): PlatformManager {
    if (!PlatformManager.instance) {
      PlatformManager.instance = new PlatformManager();
    }
    return PlatformManager.instance;
  }

  async initialize(): Promise<void> {
    if (this.initialized) {
      return;
    }

    this.detectPlatform();
    await this.detectCapabilities();
    this.initialized = true;
    logger.log('Platform manager initialized');
  }

  private detectPlatform(): void {
    const userAgent = navigator.userAgent.toLowerCase();
    const isQuest = userAgent.includes('quest');
    
    if (isQuest) {
      this.platform = 'quest';
    } else if (userAgent.includes('chrome') || userAgent.includes('firefox') || userAgent.includes('safari')) {
      this.platform = 'browser';
    } else {
      this.platform = 'desktop';
    }
  }

  private async detectCapabilities(): Promise<void> {
    // WebXR support
    if ('xr' in navigator && navigator.xr) {
      try {
        this.capabilities.xrSupported = await navigator.xr.isSessionSupported('immersive-ar');
        this.capabilities.webxr = this.capabilities.xrSupported;
        this.capabilities.handTracking = this.capabilities.xrSupported;
        this.capabilities.planeDetection = this.capabilities.xrSupported;
      } catch (error) {
        logger.warn('WebXR not supported:', error);
        this.capabilities.xrSupported = false;
        this.capabilities.webxr = false;
        this.capabilities.handTracking = false;
        this.capabilities.planeDetection = false;
      }
    }

    // WebGL support
    try {
      const canvas = document.createElement('canvas');
      const gl = canvas.getContext('webgl2') || canvas.getContext('webgl');
      this.capabilities.webglSupported = !!gl;
    } catch (error) {
      logger.warn('WebGL not supported:', error);
      this.capabilities.webglSupported = false;
    }

    // WebSocket support
    this.capabilities.websocketSupported = 'WebSocket' in window;

    logger.log('Platform capabilities detected:', this.capabilities);
  }

  getPlatform(): Platform {
    return this.platform;
  }

  getCapabilities(): PlatformCapabilities {
    return { ...this.capabilities };
  }

  isDesktop(): boolean {
    return this.platform === 'desktop';
  }

  isQuest(): boolean {
    return this.platform === 'quest';
  }

  isBrowser(): boolean {
    return this.platform === 'browser';
  }

  isXRSupported(): boolean {
    return this.capabilities.xrSupported;
  }

  isWebGLSupported(): boolean {
    return this.capabilities.webglSupported;
  }

  isWebSocketSupported(): boolean {
    return this.capabilities.websocketSupported;
  }

  async requestXRSession(): Promise<XRSession | null> {
    if (!this.capabilities.xrSupported || !('xr' in navigator) || !navigator.xr) {
      logger.warn('WebXR not supported');
      return null;
    }

    try {
      const session = await navigator.xr.requestSession('immersive-ar', {
        requiredFeatures: ['local-floor', 'hit-test'],
        optionalFeatures: ['hand-tracking', 'plane-detection']
      });

      // Update capabilities based on session features
      session.addEventListener('end', () => {
        logger.log('XR session ended');
        this.emit('xrsessionend');
      });

      logger.log('XR session started');
      return session;
    } catch (error) {
      logger.error('Failed to start XR session:', error);
      return null;
    }
  }

  async checkXRSupport(): Promise<void> {
    if ('xr' in navigator && navigator.xr) {
      try {
        // Check for AR support
        const arSupported = await navigator.xr.isSessionSupported('immersive-ar');
        if (arSupported) {
          this.capabilities.xrSupported = true;
          this.capabilities.webxr = true;
          this.capabilities.handTracking = true;
          this.capabilities.planeDetection = true;
          this.emit('xrdevicechange', true);
          logger.log('WebXR AR supported');
        }
      } catch (error) {
        logger.warn('WebXR check failed:', error);
        this.capabilities.xrSupported = false;
        this.capabilities.webxr = false;
        this.capabilities.handTracking = false;
        this.capabilities.planeDetection = false;
        this.emit('xrdevicechange', false);
      }
    }
  }

  dispose(): void {
    this.removeAllListeners();
    this.initialized = false;
    PlatformManager.instance = null;
  }
}

export const platformManager = PlatformManager.getInstance();

----
core/utils.ts
/**
 * Core utilities for the LogseqXR visualization system
 */

import { Vector3 } from './types';
import { THROTTLE_INTERVAL } from './constants';

// Debug logging utility
export interface Logger {
  log: (message: string, ...args: any[]) => void;
  error: (message: string, ...args: any[]) => void;
  warn: (message: string, ...args: any[]) => void;
  debug: (message: string, ...args: any[]) => void;
  info: (message: string, ...args: any[]) => void;
}

export function createLogger(namespace: string): Logger {
  return {
    log: (message: string, ...args: any[]) => console.log(`[${namespace}] ${message}`, ...args),
    error: (message: string, ...args: any[]) => console.error(`[${namespace}] ${message}`, ...args),
    warn: (message: string, ...args: any[]) => console.warn(`[${namespace}] ${message}`, ...args),
    debug: (message: string, ...args: any[]) => console.debug(`[${namespace}] ${message}`, ...args),
    info: (message: string, ...args: any[]) => console.info(`[${namespace}] ${message}`, ...args)
  };
}

// Update throttler for performance optimization
export class UpdateThrottler {
  private lastUpdate: number = 0;
  private throttleInterval: number;

  constructor(throttleInterval: number = THROTTLE_INTERVAL) {
    this.throttleInterval = throttleInterval;
  }

  shouldUpdate(): boolean {
    const now = performance.now();
    if (now - this.lastUpdate >= this.throttleInterval) {
      this.lastUpdate = now;
      return true;
    }
    return false;
  }

  reset(): void {
    this.lastUpdate = 0;
  }
}

// Vector operations
export const vectorOps = {
  add: (a: Vector3, b: Vector3): Vector3 => ({
    x: a.x + b.x,
    y: a.y + b.y,
    z: a.z + b.z
  }),

  subtract: (a: Vector3, b: Vector3): Vector3 => ({
    x: a.x - b.x,
    y: a.y - b.y,
    z: a.z - b.z
  }),

  multiply: (v: Vector3, scalar: number): Vector3 => ({
    x: v.x * scalar,
    y: v.y * scalar,
    z: v.z * scalar
  }),

  divide: (v: Vector3, scalar: number): Vector3 => ({
    x: v.x / scalar,
    y: v.y / scalar,
    z: v.z / scalar
  }),

  length: (v: Vector3): number => 
    Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z),

  normalize: (v: Vector3): Vector3 => {
    const len = vectorOps.length(v);
    return len > 0 ? vectorOps.divide(v, len) : { x: 0, y: 0, z: 0 };
  },

  distance: (a: Vector3, b: Vector3): number => 
    vectorOps.length(vectorOps.subtract(a, b)),

  // Convert position array to Vector3
  fromArray: (arr: number[]): Vector3 => ({
    x: arr[0] || 0,
    y: arr[1] || 0,
    z: arr[2] || 0
  })
};

// Scale utilities
export const scaleOps = {
  // Normalize a value between min and max
  normalize: (value: number, min: number, max: number): number => {
    return Math.min(max, Math.max(min, value));
  },

  // Map a value from one range to another
  mapRange: (value: number, inMin: number, inMax: number, outMin: number, outMax: number): number => {
    // First normalize to 0-1
    const normalized = (value - inMin) / (inMax - inMin);
    // Then map to output range
    return outMin + normalized * (outMax - outMin);
  },

  // Scale node size from server range to visualization range
  normalizeNodeSize: (size: number, serverMin: number = 20, serverMax: number = 30, visMin: number = 0.15, visMax: number = 0.4): number => {
    return scaleOps.mapRange(size, serverMin, serverMax, visMin, visMax);
  }
};

// Data validation utilities
export const validateGraphData = (data: any): boolean => {
  if (!data || typeof data !== 'object') return false;
  if (!Array.isArray(data.nodes) || !Array.isArray(data.edges)) return false;
  
  // Validate nodes
  for (const node of data.nodes) {
    if (!node.id) return false;
    // Allow position to be either array or Vector3
    if (node.position) {
      if (Array.isArray(node.position)) {
        if (node.position.length !== 3 || 
            typeof node.position[0] !== 'number' ||
            typeof node.position[1] !== 'number' ||
            typeof node.position[2] !== 'number') {
          return false;
        }
      } else if (typeof node.position === 'object') {
        if (typeof node.position.x !== 'number' ||
            typeof node.position.y !== 'number' ||
            typeof node.position.z !== 'number') {
          return false;
        }
      } else {
        return false;
      }
    }
  }
  
  // Validate edges
  for (const edge of data.edges) {
    if (!edge.source || !edge.target) return false;
  }
  
  return true;
};

// Binary data helpers
export const binaryToFloat32Array = (buffer: ArrayBuffer): Float32Array => {
  return new Float32Array(buffer);
};

export const float32ArrayToPositions = (array: Float32Array): Vector3[] => {
  const positions: Vector3[] = [];
  for (let i = 0; i < array.length; i += 3) {
    positions.push({
      x: array[i],
      y: array[i + 1],
      z: array[i + 2]
    });
  }
  return positions;
};

// Error handling utility
export class VisualizationError extends Error {
  constructor(message: string, public code: string) {
    super(message);
    this.name = 'VisualizationError';
  }
}

// Performance monitoring
export class PerformanceMonitor {
  private frames: number = 0;
  private lastTime: number = performance.now();
  private fps: number = 0;

  update(): void {
    this.frames++;
    const now = performance.now();
    const delta = now - this.lastTime;

    if (delta >= 1000) {
      this.fps = (this.frames * 1000) / delta;
      this.frames = 0;
      this.lastTime = now;
    }
  }

  getFPS(): number {
    return Math.round(this.fps);
  }
}

----
core/constants.ts
/**
 * Application constants
 */

// Environment detection
export const IS_PRODUCTION = window.location.hostname === 'www.visionflow.info';
export const IS_DEVELOPMENT = !IS_PRODUCTION;

// WebSocket URLs
export const WS_URL = IS_PRODUCTION
  ? 'wss://www.visionflow.info/wss'
  : 'ws://localhost:3000/wss';  // Updated to match server port and path

// WebSocket configuration
export const WS_RECONNECT_INTERVAL = 5000;
export const WS_MESSAGE_QUEUE_SIZE = 100;

// Binary protocol configuration
export const BINARY_VERSION = 1.0;
export const FLOATS_PER_NODE = 6;  // x, y, z, vx, vy, vz
export const VERSION_OFFSET = 1;    // Skip version float
export const BINARY_CHUNK_SIZE = 1000; // Number of nodes to process in one chunk

// Performance configuration
export const THROTTLE_INTERVAL = 16; // ~60fps
export const EDGE_UPDATE_BATCH_INTERVAL = 16; // Batch edge updates at ~60fps

// Visualization constants
export const NODE_SIZE = 2.5;
export const NODE_SEGMENTS = 16;
export const EDGE_RADIUS = 0.25;
export const EDGE_SEGMENTS = 8;

// Font configuration
export const FONT_URL = '/fonts/Roboto-Regular.woff2';

// Colors
export const NODE_COLOR = 0x4CAF50;  // Material Design Green
export const NODE_HIGHLIGHT_COLOR = 0xff4444;  // Material Design Red
export const EDGE_COLOR = 0xE0E0E0;  // Material Design Grey 300
export const BACKGROUND_COLOR = 0x212121;  // Material Design Grey 900
export const LABEL_COLOR = 0xFFFFFF;  // White

// Default settings
export const DEFAULT_VISUALIZATION_SETTINGS = {
  // Node appearance
  nodeSize: NODE_SIZE,
  nodeColor: '#4CAF50',
  nodeOpacity: 0.7,
  nodeHighlightColor: '#ff4444',
  
  // Edge appearance
  edgeWidth: EDGE_RADIUS * 2,
  edgeColor: '#E0E0E0',
  edgeOpacity: 0.7,
  
  // Visual effects
  enableBloom: true,
  bloomIntensity: 1.5,
  bloomThreshold: 0.3,
  bloomRadius: 0.75,
  
  // Performance
  maxFps: 60,
  updateThrottle: THROTTLE_INTERVAL,

  // Labels
  showLabels: true,
  labelSize: 1.0,
  labelColor: '#FFFFFF',

  // XR specific
  xrControllerVibration: true,
  xrControllerHapticIntensity: 1.0
};

// Default bloom settings
export const DEFAULT_BLOOM_SETTINGS = {
  threshold: DEFAULT_VISUALIZATION_SETTINGS.bloomThreshold,
  strength: DEFAULT_VISUALIZATION_SETTINGS.bloomIntensity,
  radius: DEFAULT_VISUALIZATION_SETTINGS.bloomRadius,
};

// Debug configuration
export const DEBUG = {
  NETWORK_PANEL: {
    MAX_MESSAGES: 50,
    ENABLED: IS_DEVELOPMENT
  }
};

----
core/types.ts
// Core types for the application

export interface Vector3 {
  x: number;
  y: number;
  z: number;
}

export interface NodeData {
  position: Vector3;
  velocity: Vector3;
}

export interface Node {
  id: string;
  data: NodeData;
  color?: string;
  metadata?: any;
}

export interface Edge {
  source: string;
  target: string;
  weight?: number;
}

export interface GraphData {
  nodes: Node[];
  edges: Edge[];
  metadata?: any;
}

// Platform types
export type Platform = 'desktop' | 'quest' | 'browser';

export interface PlatformCapabilities {
  xrSupported: boolean;
  webglSupported: boolean;
  websocketSupported: boolean;
  webxr: boolean;
  handTracking: boolean;
  planeDetection: boolean;
}

// Integration Settings Types
export interface GithubSettings {
  basePath: string;
  owner: string;
  rateLimitEnabled: boolean;
  repo: string;
  token: string;
}

export interface OpenAISettings {
  apiKey: string;
  baseUrl: string;
  model: string;
  rateLimit: number;
  timeout: number;
}

export interface PerplexitySettings {
  apiKey: string;
  apiUrl: string;
  frequencyPenalty: number;
  maxTokens: number;
  model: string;
  presencePenalty: number;
  prompt: string;
  rateLimit: number;
  temperature: number;
  timeout: number;
  topP: number;
}

export interface RagFlowSettings {
  apiKey: string;
  baseUrl: string;
  maxRetries: number;
  timeout: number;
}

// Client-side visualization settings
export interface VisualizationSettings {
  // Node appearance
  nodeSize: number;
  nodeColor: string;
  nodeOpacity: number;
  metalness: number;
  roughness: number;
  clearcoat: number;
  enableInstancing: boolean;
  materialType: string;
  sizeRange: [number, number];
  sizeByConnections: boolean;
  highlightColor: string;
  highlightDuration: number;
  enableHoverEffect: boolean;
  hoverScale: number;

  // Edge appearance
  edgeWidth: number;
  edgeColor: string;
  edgeOpacity: number;
  edgeWidthRange: [number, number];
  enableArrows: boolean;
  arrowSize: number;

  // Physics settings
  physicsEnabled: boolean;
  attractionStrength: number;
  repulsionStrength: number;
  springStrength: number;
  damping: number;
  maxVelocity: number;
  collisionRadius: number;
  boundsSize: number;
  enableBounds: boolean;
  iterations: number;

  // Lighting and environment
  ambientLightIntensity: number;
  directionalLightIntensity: number;
  environmentIntensity: number;
  enableAmbientOcclusion: boolean;
  enableAntialiasing: boolean;
  enableShadows: boolean;
  backgroundColor: string;

  // Visual effects
  enableBloom: boolean;
  bloomIntensity: number;
  bloomRadius: number;
  nodeBloomStrength: number;
  edgeBloomStrength: number;
  environmentBloomStrength: number;
  enableNodeAnimations: boolean;
  enableMotionBlur: boolean;
  motionBlurStrength: number;

  // Labels
  showLabels: boolean;
  labelSize: number;
  labelColor: string;

  // Performance
  maxFps: number;

  // AR Settings
  enablePlaneDetection: boolean;
  enableSceneUnderstanding: boolean;
  showPlaneOverlay: boolean;
  planeOpacity: number;
  planeColor: string;
  enableLightEstimation: boolean;
  enableHandTracking: boolean;
  handMeshEnabled: boolean;
  handMeshColor: string;
  handMeshOpacity: number;
  handRayEnabled: boolean;
  handRayColor: string;
  handRayWidth: number;
  handPointSize: number;
  gestureSmoothing: number;
  pinchThreshold: number;
  dragThreshold: number;
  rotationThreshold: number;
  enableHaptics: boolean;
  hapticIntensity: number;
  roomScale: boolean;
  snapToFloor: boolean;
  passthroughOpacity: number;
  passthroughBrightness: number;
  passthroughContrast: number;
  enablePassthroughPortal: boolean;
  portalSize: number;
  portalEdgeColor: string;
  portalEdgeWidth: number;
}

// Server-side settings format
export interface ServerSettings {
  animations: {
    enable_motion_blur: boolean;
    enable_node_animations: boolean;
    motion_blur_strength: number;
  };
  ar: {
    drag_threshold: number;
    enable_hand_tracking: boolean;
    enable_haptics: boolean;
    enable_light_estimation: boolean;
    enable_passthrough_portal: boolean;
    enable_plane_detection: boolean;
    enable_scene_understanding: boolean;
    gesture_smoothing: number;
    hand_mesh_color: string;
    hand_mesh_enabled: boolean;
    hand_mesh_opacity: number;
    hand_point_size: number;
    hand_ray_color: string;
    hand_ray_enabled: boolean;
    hand_ray_width: number;
    haptic_intensity: number;
    passthrough_brightness: number;
    passthrough_contrast: number;
    passthrough_opacity: number;
    pinch_threshold: number;
    plane_color: string;
    plane_opacity: number;
    portal_edge_color: string;
    portal_edge_width: number;
    portal_size: number;
    room_scale: boolean;
    rotation_threshold: number;
    show_plane_overlay: boolean;
    snap_to_floor: boolean;
  };
  audio: {
    enable_ambient_sounds: boolean;
    enable_interaction_sounds: boolean;
    enable_spatial_audio: boolean;
  };
  bloom: {
    edge_bloom_strength: number;
    enabled: boolean;
    environment_bloom_strength: number;
    node_bloom_strength: number;
    radius: number;
    strength: number;
  };
  edges: {
    arrow_size: number;
    base_width: number;
    color: string;
    enable_arrows: boolean;
    opacity: number;
    width_range: [number, number];
  };
  labels: {
    desktop_font_size: number;
    enable_labels: boolean;
    text_color: string;
  };
  nodes: {
    base_color: string;
    base_size: number;
    clearcoat: number;
    enable_hover_effect: boolean;
    enable_instancing: boolean;
    highlight_color: string;
    highlight_duration: number;
    hover_scale: number;
    material_type: string;
    metalness: number;
    opacity: number;
    roughness: number;
    size_by_connections: boolean;
    size_range: [number, number];
  };
  physics: {
    attraction_strength: number;
    bounds_size: number;
    collision_radius: number;
    damping: number;
    enable_bounds: boolean;
    enabled: boolean;
    iterations: number;
    max_velocity: number;
    repulsion_strength: number;
    spring_strength: number;
  };
  rendering: {
    ambient_light_intensity: number;
    background_color: string;
    directional_light_intensity: number;
    enable_ambient_occlusion: boolean;
    enable_antialiasing: boolean;
    enable_shadows: boolean;
    environment_intensity: number;
  };
}

// Client-side visualization settings (mapped from server settings)
export interface VisualizationSettings {
  // Node Appearance
  nodeSize: number;  // maps from nodes.base_size
  nodeColor: string;  // maps from nodes.base_color
  nodeOpacity: number;  // maps from nodes.opacity
  metalness: number;
  roughness: number;
  clearcoat: number;
  enableInstancing: boolean;  // maps from nodes.enable_instancing
  materialType: string;  // maps from nodes.material_type
  sizeRange: [number, number];  // maps from nodes.size_range
  sizeByConnections: boolean;  // maps from nodes.size_by_connections
  highlightColor: string;  // maps from nodes.highlight_color
  highlightDuration: number;  // maps from nodes.highlight_duration
  enableHoverEffect: boolean;  // maps from nodes.enable_hover_effect
  hoverScale: number;  // maps from nodes.hover_scale

  // Edge Appearance
  edgeWidth: number;  // maps from edges.base_width
  edgeColor: string;  // maps from edges.color
  edgeOpacity: number;  // maps from edges.opacity
  edgeWidthRange: [number, number];  // maps from edges.width_range
  enableArrows: boolean;  // maps from edges.enable_arrows
  arrowSize: number;  // maps from edges.arrow_size

  // Physics Settings
  physicsEnabled: boolean;  // maps from physics.enabled
  attractionStrength: number;  // maps from physics.attraction_strength
  repulsionStrength: number;  // maps from physics.repulsion_strength
  springStrength: number;  // maps from physics.spring_strength
  damping: number;  // maps from physics.damping
  maxVelocity: number;  // maps from physics.max_velocity
  collisionRadius: number;  // maps from physics.collision_radius
  boundsSize: number;  // maps from physics.bounds_size
  enableBounds: boolean;  // maps from physics.enable_bounds
  iterations: number;  // maps from physics.iterations

  // Rendering Settings
  ambientLightIntensity: number;  // maps from rendering.ambient_light_intensity
  directionalLightIntensity: number;  // maps from rendering.directional_light_intensity
  environmentIntensity: number;  // maps from rendering.environment_intensity
  enableAmbientOcclusion: boolean;  // maps from rendering.enable_ambient_occlusion
  enableAntialiasing: boolean;  // maps from rendering.enable_antialiasing
  enableShadows: boolean;  // maps from rendering.enable_shadows
  backgroundColor: string;  // maps from rendering.background_color

  // Visual Effects
  enableBloom: boolean;  // maps from bloom.enabled
  bloomIntensity: number;  // maps from bloom.strength
  bloomRadius: number;  // maps from bloom.radius
  nodeBloomStrength: number;  // maps from bloom.node_bloom_strength
  edgeBloomStrength: number;  // maps from bloom.edge_bloom_strength
  environmentBloomStrength: number;  // maps from bloom.environment_bloom_strength
  enableNodeAnimations: boolean;  // maps from animations.enable_node_animations
  enableMotionBlur: boolean;  // maps from animations.enable_motion_blur
  motionBlurStrength: number;  // maps from animations.motion_blur_strength

  // Labels
  showLabels: boolean;  // maps from labels.enable_labels
  labelSize: number;  // maps from labels.desktop_font_size / 48
  labelColor: string;  // maps from labels.text_color

  // AR Settings
  enablePlaneDetection: boolean;  // maps from ar.enable_plane_detection
  enableSceneUnderstanding: boolean;  // maps from ar.enable_scene_understanding
  showPlaneOverlay: boolean;  // maps from ar.show_plane_overlay
  planeOpacity: number;  // maps from ar.plane_opacity
  planeColor: string;  // maps from ar.plane_color
  enableLightEstimation: boolean;  // maps from ar.enable_light_estimation
  enableHandTracking: boolean;  // maps from ar.enable_hand_tracking
  handMeshEnabled: boolean;  // maps from ar.hand_mesh_enabled
  handMeshColor: string;  // maps from ar.hand_mesh_color
  handMeshOpacity: number;  // maps from ar.hand_mesh_opacity
  handRayEnabled: boolean;  // maps from ar.hand_ray_enabled
  handRayColor: string;  // maps from ar.hand_ray_color
  handRayWidth: number;  // maps from ar.hand_ray_width
  handPointSize: number;  // maps from ar.hand_point_size
  gestureSmoothing: number;  // maps from ar.gesture_smoothing
  pinchThreshold: number;  // maps from ar.pinch_threshold
  dragThreshold: number;  // maps from ar.drag_threshold
  rotationThreshold: number;  // maps from ar.rotation_threshold
  enableHaptics: boolean;  // maps from ar.enable_haptics
  hapticIntensity: number;  // maps from ar.haptic_intensity
  roomScale: boolean;  // maps from ar.room_scale
  snapToFloor: boolean;  // maps from ar.snap_to_floor
  passthroughOpacity: number;  // maps from ar.passthrough_opacity
  passthroughBrightness: number;  // maps from ar.passthrough_brightness
  passthroughContrast: number;  // maps from ar.passthrough_contrast
  enablePassthroughPortal: boolean;  // maps from ar.enable_passthrough_portal
  portalSize: number;  // maps from ar.portal_size
  portalEdgeColor: string;  // maps from ar.portal_edge_color
  portalEdgeWidth: number;  // maps from ar.portal_edge_width
}

// WebSocket message types
export type MessageType = 
  | 'initialData'
  | 'graphUpdate'
  | 'positionUpdate'
  | 'binaryPositionUpdate'
  | 'updateSettings'
  | 'settingsUpdated'
  | 'requestInitialData'
  | 'enableBinaryUpdates'
  | 'connect'
  | 'disconnect'
  | 'ping'
  | 'pong';

export type BinaryNodeUpdate = {
  nodeId: string;
  data: NodeData;
};

// Base message types
export interface WebSocketMessage {
  type: MessageType;
  data?: any;
}

export interface RawWebSocketMessage {
  type: MessageType;
  data?: any;
}

// Initial data messages
export interface InitialDataMessage extends WebSocketMessage {
  type: 'initialData';
  data: {
    graph: GraphData;
  };
}

export interface RawInitialDataMessage extends RawWebSocketMessage {
  type: 'initialData';
  data: {
    graph: any;
  };
}

// Binary position update messages
export interface BinaryPositionUpdateMessage extends WebSocketMessage {
  type: 'binaryPositionUpdate';
  data: {
    nodes: BinaryNodeUpdate[];
  };
}

export interface RawBinaryPositionUpdateMessage extends RawWebSocketMessage {
  type: 'binaryPositionUpdate';
  data: {
    nodes: {
      nodeId: string;
      data: any;
    }[];
  };
}

// Other message types
export interface RequestInitialDataMessage extends WebSocketMessage {
  type: 'requestInitialData';
}

export interface EnableBinaryUpdatesMessage extends WebSocketMessage {
  type: 'enableBinaryUpdates';
}

export interface PingMessage extends WebSocketMessage {
  type: 'ping';
}

export interface PongMessage extends WebSocketMessage {
  type: 'pong';
}

// Settings messages
export interface UpdateSettingsMessage extends WebSocketMessage {
  type: 'updateSettings';
  data: {
    settings: ServerSettings;
  };
}

export interface SettingsUpdatedMessage extends WebSocketMessage {
  type: 'settingsUpdated';
  data: {
    settings: ServerSettings;
  };
}

// Logger interface
export interface Logger {
  log: (message: string, ...args: any[]) => void;
  error: (message: string, ...args: any[]) => void;
  warn: (message: string, ...args: any[]) => void;
  debug: (message: string, ...args: any[]) => void;
  info: (message: string, ...args: any[]) => void;
}

// Helper functions
export function transformGraphData(data: any): GraphData {
  return {
    nodes: data.nodes.map((node: any) => transformNodeData(node)),
    edges: data.edges,
    metadata: data.metadata
  };
}

export function transformNodeData(node: any): Node {
  return {
    id: node.id,
    data: {
      position: node.data.position,
      velocity: node.data.velocity || { x: 0, y: 0, z: 0 }
    },
    color: node.color,
    metadata: node.metadata
  };
}

----
types/webxr.d.ts
/**
 * WebXR API type extensions
 */

declare module 'three' {
  interface Object3DEventMap {
    connected: XRControllerEvent;
    disconnected: XRControllerEvent;
  }
}

interface XRControllerEvent extends THREE.Event {
  type: 'connected' | 'disconnected';
  data: XRInputSource;
}

interface XRLightEstimate {
  primaryLightIntensity?: { value: number };
  primaryLightDirection?: { x: number; y: number; z: number };
}

// Extend existing WebXR types
declare global {
  interface XRFrame {
    // Make getLightEstimate optional
    getLightEstimate?(): XRLightEstimate | null;
    getHitTestResults(hitTestSource: XRHitTestSource): XRHitTestResult[];
    getViewerPose(referenceSpace: XRReferenceSpace): XRViewerPose | null;
    getPose(space: XRSpace, baseSpace: XRReferenceSpace): XRPose | null;
  }

  interface XRSession {
    requestReferenceSpace(type: XRReferenceSpaceType): Promise<XRReferenceSpace>;
    // Make requestHitTestSource non-optional
    requestHitTestSource(options: XRHitTestOptionsInit): Promise<XRHitTestSource>;
    end(): Promise<void>;
    addEventListener(type: string, listener: EventListener): void;
    removeEventListener(type: string, listener: EventListener): void;
  }

  interface XRHitTestOptionsInit {
    space: XRSpace;
    offsetRay?: XRRay;
  }

  interface XRHitTestSource {
    cancel(): void;
  }

  interface XRHitTestResult {
    getPose(baseSpace: XRSpace): XRPose | null;
  }

  interface XRPose {
    transform: XRRigidTransform;
  }

  interface XRViewerPose extends XRPose {
    views: XRView[];
  }

  interface XRView {
    projectionMatrix: Float32Array;
    transform: XRRigidTransform;
  }

  interface XRRigidTransform {
    matrix: Float32Array;
    position: { x: number; y: number; z: number };
    orientation: { x: number; y: number; z: number; w: number };
  }

  interface XRReferenceSpace extends XRSpace {
    getOffsetReferenceSpace(originOffset: XRRigidTransform): XRReferenceSpace;
  }

  interface XRSpace {}

  interface XRRay {
    origin: DOMPointReadOnly;
    direction: DOMPointReadOnly;
    matrix: Float32Array;
  }

  type XRReferenceSpaceType = 
    | 'viewer'
    | 'local'
    | 'local-floor'
    | 'bounded-floor'
    | 'unbounded';

  interface XRInputSource {
    handedness: 'none' | 'left' | 'right';
    targetRayMode: 'gaze' | 'tracked-pointer' | 'screen';
    targetRaySpace: XRSpace;
    gripSpace?: XRSpace;
    profiles: string[];
    gamepad?: Gamepad;
    hand?: XRHand;
  }

  interface XRHand extends Map<XRHandJoint, XRJointSpace> {
    get(joint: XRHandJoint): XRJointSpace | undefined;
  }

  type XRHandJoint =
    | 'wrist'
    | 'thumb-metacarpal'
    | 'thumb-phalanx-proximal'
    | 'thumb-phalanx-distal'
    | 'thumb-tip'
    | 'index-finger-metacarpal'
    | 'index-finger-phalanx-proximal'
    | 'index-finger-phalanx-intermediate'
    | 'index-finger-phalanx-distal'
    | 'index-finger-tip';

  interface XRJointSpace extends XRSpace {
    jointRadius: number | undefined;
  }

  interface Navigator {
    xr?: {
      isSessionSupported(mode: string): Promise<boolean>;
      requestSession(mode: string, options?: XRSessionInit): Promise<XRSession>;
    };
  }

  interface XRSessionInit {
    requiredFeatures?: string[];
    optionalFeatures?: string[];
  }
}

// Prevent conflicts with @types/webxr
declare module '@types/webxr' {
  export {};
}

----
types/three-ext.d.ts
declare module 'three/examples/jsm/controls/OrbitControls' {
  import { Camera, EventDispatcher, MOUSE, TOUCH, Vector3 } from 'three';

  export class OrbitControls extends EventDispatcher {
    constructor(object: Camera, domElement?: HTMLElement);

    object: Camera;
    domElement: HTMLElement | HTMLDocument;

    enabled: boolean;
    target: Vector3;

    minDistance: number;
    maxDistance: number;

    minZoom: number;
    maxZoom: number;

    minPolarAngle: number;
    maxPolarAngle: number;

    minAzimuthAngle: number;
    maxAzimuthAngle: number;

    enableDamping: boolean;
    dampingFactor: number;

    enableZoom: boolean;
    zoomSpeed: number;

    enableRotate: boolean;
    rotateSpeed: number;

    enablePan: boolean;
    panSpeed: number;
    screenSpacePanning: boolean;
    keyPanSpeed: number;

    autoRotate: boolean;
    autoRotateSpeed: number;

    enableKeys: boolean;

    keys: { LEFT: number; UP: number; RIGHT: number; BOTTOM: number };
    mouseButtons: { LEFT: MOUSE; MIDDLE: MOUSE; RIGHT: MOUSE };
    touches: { ONE: TOUCH; TWO: TOUCH };

    update(): boolean;
    dispose(): void;
  }
}

declare module 'three/examples/jsm/webxr/XRControllerModelFactory' {
  import { Group, Texture } from 'three';

  export class XRControllerModelFactory {
    constructor();
    createControllerModel(controller: Group): Group;
  }
}

declare module 'three/examples/jsm/postprocessing/EffectComposer' {
  import { WebGLRenderer, WebGLRenderTarget } from 'three';

  export class Pass {
    enabled: boolean;
    needsSwap: boolean;
    clear: boolean;
    renderToScreen: boolean;

    setSize(width: number, height: number): void;
    render(renderer: WebGLRenderer, writeBuffer: WebGLRenderTarget, readBuffer: WebGLRenderTarget, deltaTime?: number, maskActive?: boolean): void;
  }

  export class EffectComposer {
    constructor(renderer: WebGLRenderer, renderTarget?: WebGLRenderTarget);
    
    renderTarget1: WebGLRenderTarget;
    renderTarget2: WebGLRenderTarget;
    writeBuffer: WebGLRenderTarget;
    readBuffer: WebGLRenderTarget;
    passes: Pass[];
    
    swapBuffers(): void;
    addPass(pass: Pass): void;
    insertPass(pass: Pass, __index: number): void;
    removePass(pass: Pass): void;
    render(deltaTime?: number): void;
    reset(renderTarget?: WebGLRenderTarget): void;
    setSize(width: number, height: number): void;
    dispose(): void;
  }
}

declare module 'three/examples/jsm/postprocessing/RenderPass' {
  import { Scene, Camera } from 'three';
  import { Pass } from 'three/examples/jsm/postprocessing/EffectComposer';

  export class RenderPass extends Pass {
    constructor(scene: Scene, camera: Camera);
    scene: Scene;
    camera: Camera;
  }
}

declare module 'three/examples/jsm/postprocessing/UnrealBloomPass' {
  import { Vector2 } from 'three';
  import { Pass } from 'three/examples/jsm/postprocessing/EffectComposer';

  export class UnrealBloomPass extends Pass {
    constructor(resolution: Vector2, strength?: number, radius?: number, threshold?: number);
    resolution: Vector2;
    strength: number;
    radius: number;
    threshold: number;
  }
}

----
types/three.d.ts
declare module 'three' {
  export interface Event {
    type: string;
    target: Group;
  }

  export interface XRControllerEvent extends Event {
    type: 'connected' | 'disconnected';
    target: Group;
    data: XRInputSource;
  }

  export interface Object3DEventMap {
    connected: XRControllerEvent;
    disconnected: XRControllerEvent;
  }

  export interface EventDispatcher<E extends Event = Event> {
    addEventListener<T extends E['type']>(type: T, listener: (event: E & { type: T }) => void): void;
    removeEventListener<T extends E['type']>(type: T, listener: (event: E & { type: T }) => void): void;
    dispatchEvent(event: E): void;
  }

  export class Layers {
    mask: number;
    set(layer: number): void;
    enable(layer: number): void;
    disable(layer: number): void;
    toggle(layer: number): void;
    test(layers: Layers): boolean;
  }

  export class Object3D implements EventDispatcher<Event & XRControllerEvent> {
    position: Vector3;
    quaternion: Quaternion;
    scale: Vector3;
    matrix: Matrix4;
    matrixWorld: Matrix4;
    children: Object3D[];
    parent: Object3D | null;
    userData: any;
    visible: boolean;
    renderOrder: number;
    frustumCulled: boolean;
    matrixAutoUpdate: boolean;
    layers: Layers;
    add(...objects: Object3D[]): this;
    remove(...objects: Object3D[]): this;
    rotateX(angle: number): this;
    rotateY(angle: number): this;
    rotateZ(angle: number): this;
    updateMatrix(): void;
    updateMatrixWorld(force?: boolean): void;
    traverse(callback: (object: Object3D) => void): void;
    lookAt(x: number | Vector3, y?: number, z?: number): void;
    addEventListener<K extends keyof Object3DEventMap>(
      type: K,
      listener: (event: Object3DEventMap[K]) => void
    ): void;
    addEventListener(
      type: string,
      listener: (event: Event) => void
    ): void;
    removeEventListener<K extends keyof Object3DEventMap>(
      type: K,
      listener: (event: Object3DEventMap[K]) => void
    ): void;
    removeEventListener(
      type: string,
      listener: (event: Event) => void
    ): void;
    dispatchEvent(event: Event): void;
  }

  export class Group extends Object3D {
    constructor();
  }

  export class Scene extends Object3D {
    constructor();
    fog: FogExp2 | null;
    background: Color | Texture | null;
  }

  export class Material {
    transparent: boolean;
    opacity: number;
    depthWrite: boolean;
    depthTest: boolean;
    side: Side;
    color: Color;
    dispose(): void;
  }

  export class Mesh extends Object3D {
    constructor(geometry: BufferGeometry, material: Material);
    geometry: BufferGeometry;
    material: Material;
  }

  export class GridHelper extends Object3D {
    constructor(size: number, divisions: number, color1?: ColorRepresentation, color2?: ColorRepresentation);
    material: Material;
    geometry: BufferGeometry;
  }

  export class Light extends Object3D {
    constructor(color?: ColorRepresentation, intensity?: number);
    intensity: number;
  }

  export class DirectionalLight extends Light {
    constructor(color?: ColorRepresentation, intensity?: number);
    intensity: number;
  }

  export class AmbientLight extends Light {
    constructor(color?: ColorRepresentation, intensity?: number);
  }

  export class BufferAttribute {
    array: ArrayLike<number>;
    itemSize: number;
    count: number;
    normalized: boolean;
    needsUpdate: boolean;
    constructor(array: ArrayLike<number>, itemSize: number, normalized?: boolean);
    setX(index: number, x: number): this;
    setY(index: number, y: number): this;
    setZ(index: number, z: number): this;
    setW(index: number, w: number): this;
    setXY(index: number, x: number, y: number): this;
    setXYZ(index: number, x: number, y: number, z: number): this;
    setXYZW(index: number, x: number, y: number, z: number, w: number): this;
  }

  export class InstancedBufferAttribute extends BufferAttribute {
    constructor(array: ArrayLike<number>, itemSize: number, normalized?: boolean, meshPerAttribute?: number);
    meshPerAttribute: number;
  }

  export class InstancedMesh extends Mesh {
    constructor(geometry: BufferGeometry, material: Material | Material[], count: number);
    count: number;
    instanceMatrix: InstancedBufferAttribute;
    instanceColor: InstancedBufferAttribute | null;
    frustumCulled: boolean;
    setColorAt(index: number, color: Color): void;
    setMatrixAt(index: number, matrix: Matrix4): void;
    getMatrixAt(index: number, matrix: Matrix4): void;
    getColorAt(index: number, color: Color): void;
    dispose(): void;
  }

  export class MeshBasicMaterial extends Material {
    constructor(parameters?: MeshBasicMaterialParameters);
  }

  export class MeshPhongMaterial extends Material {
    constructor(parameters?: MeshPhongMaterialParameters);
    shininess: number;
    specular: Color;
  }

  export class SpriteMaterial extends Material {
    constructor(parameters?: SpriteMaterialParameters);
    map: Texture | null;
    color: Color;
    sizeAttenuation: boolean;
    rotation: number;
  }

  export class BufferGeometry {
    dispose(): void;
    rotateX(angle: number): this;
    rotateY(angle: number): this;
    rotateZ(angle: number): this;
  }

  export class PlaneGeometry extends BufferGeometry {
    constructor(width?: number, height?: number, widthSegments?: number, heightSegments?: number);
  }

  export class SphereGeometry extends BufferGeometry {
    constructor(radius?: number, widthSegments?: number, heightSegments?: number);
  }

  export class CylinderGeometry extends BufferGeometry {
    constructor(
      radiusTop?: number,
      radiusBottom?: number,
      height?: number,
      radialSegments?: number
    );
  }

  export class RingGeometry extends BufferGeometry {
    constructor(
      innerRadius?: number,
      outerRadius?: number,
      thetaSegments?: number
    );
  }

  export class Vector2 {
    x: number;
    y: number;
    constructor(x?: number, y?: number);
    set(x: number, y: number): this;
  }

  export class Vector3 {
    x: number;
    y: number;
    z: number;
    constructor(x?: number, y?: number, z?: number);
    set(x: number, y: number, z: number): this;
    copy(v: Vector3): this;
    add(v: Vector3): this;
    sub(v: Vector3): this;
    multiply(v: Vector3): this;
    multiplyScalar(s: number): this;
    normalize(): this;
    dot(v: Vector3): number;
    cross(v: Vector3): this;
    length(): number;
    lengthSq(): number;
    clone(): Vector3;
    fromArray(array: number[] | ArrayLike<number>, offset?: number): this;
    subVectors(a: Vector3, b: Vector3): this;
    addVectors(a: Vector3, b: Vector3): this;
    crossVectors(a: Vector3, b: Vector3): this;
    setFromMatrixPosition(m: Matrix4): this;
    distanceTo(v: Vector3): number;
    applyMatrix4(m: Matrix4): this;
    lookAt(v: Vector3): this;
  }

  export class Matrix4 {
    elements: number[];
    constructor();
    set(...elements: number[]): this;
    identity(): this;
    copy(m: Matrix4): this;
    compose(position: Vector3, quaternion: Quaternion, scale: Vector3): this;
    decompose(position: Vector3, quaternion: Quaternion, scale: Vector3): this;
    fromArray(array: ArrayLike<number>, offset?: number): this;
    extractRotation(m: Matrix4): this;
    makeRotationFromQuaternion(q: Quaternion): this;
  }

  export class Quaternion {
    x: number;
    y: number;
    z: number;
    w: number;
    constructor(x?: number, y?: number, z?: number, w?: number);
    setFromAxisAngle(axis: Vector3, angle: number): this;
    identity(): this;
  }

  export class Color {
    constructor(color?: ColorRepresentation);
    set(color: ColorRepresentation): this;
  }

  export class Sprite extends Object3D {
    constructor(material: SpriteMaterial);
    material: SpriteMaterial;
  }

  export class Raycaster {
    constructor();
    ray: Ray;
    near: number;
    far: number;
    camera: Camera;
    params: {
      Mesh?: {},
      Line?: {},
      LOD?: {},
      Points?: { threshold: number },
      Sprite?: {}
    };
    setFromCamera(coords: Vector2, camera: Camera): void;
    intersectObject(object: Object3D, recursive?: boolean, intersects?: Intersection[]): Intersection[];
    intersectObjects(objects: Object3D[], recursive?: boolean, intersects?: Intersection[]): Intersection[];
  }

  export class Ray {
    origin: Vector3;
    direction: Vector3;
    constructor(origin?: Vector3, direction?: Vector3);
  }

  export class WebGLRenderer {
    constructor(parameters?: WebGLRendererParameters);
    domElement: HTMLCanvasElement;
    setSize(width: number, height: number, updateStyle?: boolean): void;
    setPixelRatio(value: number): void;
    render(scene: Scene, camera: Camera): void;
    dispose(): void;
    xr: WebXRManager;
  }

  export class WebXRManager {
    enabled: boolean;
    setSession(session: XRSession): Promise<void>;
  }

  export class Camera extends Object3D {
    matrixWorldInverse: Matrix4;
    projectionMatrix: Matrix4;
    projectionMatrixInverse: Matrix4;
    layers: Layers;
    lookAt(target: Vector3 | number, y?: number, z?: number): void;
  }

  export class PerspectiveCamera extends Camera {
    constructor(fov?: number, aspect?: number, near?: number, far?: number);
    fov: number;
    aspect: number;
    near: number;
    far: number;
    updateProjectionMatrix(): void;
    lookAt(target: Vector3 | number, y?: number, z?: number): void;
  }

  export interface MaterialParameters {
    color?: ColorRepresentation;
    transparent?: boolean;
    opacity?: number;
    side?: Side;
    depthWrite?: boolean;
    depthTest?: boolean;
    map?: Texture;
  }

  export interface MeshBasicMaterialParameters extends MaterialParameters {}
  export interface MeshPhongMaterialParameters extends MaterialParameters {
    shininess?: number;
    specular?: ColorRepresentation;
  }
  export interface SpriteMaterialParameters extends MaterialParameters {
    sizeAttenuation?: boolean;
    rotation?: number;
  }

  export class Texture {
    constructor(image?: HTMLImageElement | HTMLCanvasElement);
    needsUpdate: boolean;
    dispose(): void;
  }

  export class FogExp2 {
    constructor(color: ColorRepresentation, density?: number);
    color: Color;
    density: number;
  }

  export interface Intersection {
    distance: number;
    point: Vector3;
    face: { normal: Vector3 } | null;
    object: Object3D;
  }

  export class MathUtils {
    static clamp(value: number, min: number, max: number): number;
    static degToRad(degrees: number): number;
    static radToDeg(radians: number): number;
    static lerp(x: number, y: number, t: number): number;
    static smoothstep(x: number, min: number, max: number): number;
  }

  export const DoubleSide: Side;
  export type Side = 0 | 1 | 2;
  export type ColorRepresentation = Color | string | number;
}

----
types/env.d.ts
/// <reference types="vite/client" />

interface ImportMetaEnv {
  readonly VITE_APP_TITLE: string;
  readonly DEV: boolean;
  readonly PROD: boolean;
  readonly MODE: string;
}

interface ImportMeta {
  readonly env: ImportMetaEnv;
}

----
rendering/textRenderer.ts
/**
 * Text rendering for node labels using sprites
 */

import * as THREE from 'three';
import { Vector3, VisualizationSettings } from '../core/types';
import { createLogger } from '../core/utils';
import { settingsManager } from '../state/settings';
import { FONT_URL } from '../core/constants';

// Logger will be used for debugging font loading and text rendering
const _logger = createLogger('TextRenderer');

// Add FontFace API type declarations
declare global {
  interface Document {
    fonts: FontFaceSet;
  }

  interface FontFaceSet extends Set<FontFace> {
    readonly ready: Promise<FontFaceSet>;
    readonly status: 'loading' | 'loaded';
    check(font: string, text?: string): boolean;
    load(font: string, text?: string): Promise<FontFace[]>;
  }
}

export class TextRenderer {
  private static instance: TextRenderer;
  private scene: THREE.Scene;
  private camera: THREE.Camera;
  
  // Font texture and canvas
  private canvas: HTMLCanvasElement;
  private context: CanvasRenderingContext2D;
  private fontLoaded: boolean = false;
  
  // Label management
  private labels: Map<string, THREE.Sprite>;
  private labelPool: THREE.Sprite[];
  private settings: VisualizationSettings;

  private constructor(scene: THREE.Scene, camera: THREE.Camera) {
    this.scene = scene;
    this.camera = camera;
    this.labels = new Map();
    this.labelPool = [];
    this.settings = settingsManager.getSettings();

    // Create canvas for text rendering
    this.canvas = document.createElement('canvas');
    const context = this.canvas.getContext('2d');
    if (!context) {
      throw new Error('Failed to get 2D context for text rendering');
    }
    this.context = context;

    this.initialize();
  }

  static getInstance(scene: THREE.Scene, camera: THREE.Camera): TextRenderer {
    if (!TextRenderer.instance) {
      TextRenderer.instance = new TextRenderer(scene, camera);
    }
    return TextRenderer.instance;
  }

  private async initialize(): Promise<void> {
    await this.loadFont();
    this.setupEventListeners();
  }

  private async loadFont(): Promise<void> {
    try {
      // Load font using FontFace API
      const font = new FontFace(
        'LabelFont',
        `url(${FONT_URL})`
      );

      const loadedFont = await font.load();
      document.fonts.add(loadedFont);
      this.fontLoaded = true;
      _logger.log('Font loaded successfully');
    } catch (error) {
      _logger.error('Failed to load font:', error);
      throw error;
    }
  }

  private setupEventListeners(): void {
    settingsManager.subscribe((settings: VisualizationSettings) => {
      this.settings = settings;
      this.updateAllLabels();
    });
  }

  private createTextTexture(text: string): THREE.Texture {
    // Set canvas size
    const fontSize = 48;
    this.context.font = `${fontSize}px LabelFont`;
    const metrics = this.context.measureText(text);
    const width = Math.ceil(metrics.width);
    const height = Math.ceil(fontSize * 1.4); // Add some padding

    this.canvas.width = width;
    this.canvas.height = height;

    // Clear canvas
    this.context.fillStyle = 'transparent';
    this.context.fillRect(0, 0, width, height);

    // Draw text
    this.context.font = `${fontSize}px LabelFont`;
    this.context.textAlign = 'center';
    this.context.textBaseline = 'middle';
    this.context.fillStyle = this.settings.labelColor;
    this.context.fillText(text, width / 2, height / 2);

    // Create texture
    const texture = new THREE.Texture(this.canvas);
    texture.needsUpdate = true;
    return texture;
  }

  private createLabelSprite(text: string): THREE.Sprite {
    // Reuse sprite from pool if available
    let sprite = this.labelPool.pop();
    
    if (!sprite) {
      const spriteMaterial = new THREE.SpriteMaterial({
        transparent: true,
        depthTest: false
      });
      sprite = new THREE.Sprite(spriteMaterial);
    }

    // Update sprite texture
    const texture = this.createTextTexture(text);
    (sprite.material as THREE.SpriteMaterial).map = texture;

    // Set sprite scale based on text dimensions
    const scale = this.settings.labelSize * 0.01;
    sprite.scale.set(
      this.canvas.width * scale,
      this.canvas.height * scale,
      1
    );

    return sprite;
  }

  /**
   * Create or update a label for a node
   */
  updateLabel(id: string, text: string, position: Vector3): void {
    if (!this.fontLoaded || !this.settings.showLabels) {
      return;
    }

    let label = this.labels.get(id);
    if (!label) {
      label = this.createLabelSprite(text);
      this.labels.set(id, label);
      this.scene.add(label);
    } else {
      // Update existing label
      const texture = this.createTextTexture(text);
      (label.material as THREE.SpriteMaterial).map?.dispose();
      (label.material as THREE.SpriteMaterial).map = texture;
    }

    // Update position
    label.position.set(position.x, position.y + 1.5, position.z); // Offset above node
    label.material.opacity = this.calculateOpacity(position);
  }

  /**
   * Remove a label
   */
  removeLabel(id: string): void {
    const label = this.labels.get(id);
    if (label) {
      this.scene.remove(label);
      (label.material as THREE.SpriteMaterial).map?.dispose();
      this.labelPool.push(label); // Return to pool for reuse
      this.labels.delete(id);
    }
  }

  /**
   * Update all labels (e.g., after settings change)
   */
  private updateAllLabels(): void {
    if (!this.fontLoaded || !this.settings.showLabels) {
      return;
    }

    this.labels.forEach((__label, id) => {
      const label = this.labels.get(id);
      if (label) {
        const opacity = this.calculateOpacity(label.position);
        label.material.opacity = opacity;
      }
    });
  }

  /**
   * Update label positions and visibility
   */
  update(): void {
    if (!this.fontLoaded || !this.settings.showLabels) {
      return;
    }

    // Update label opacity based on distance to camera
    this.labels.forEach((__label, id) => {
      const label = this.labels.get(id);
      if (label) {
        const opacity = this.calculateOpacity(label.position);
        label.material.opacity = opacity;
      }
    });
  }

  /**
   * Calculate label opacity based on distance to camera
   */
  private calculateOpacity(position: Vector3): number {
    const distance = this.camera.position.distanceTo(new THREE.Vector3(position.x, position.y, position.z));
    const maxDistance = 100;
    const minDistance = 10;
    
    if (distance > maxDistance) return 0;
    if (distance < minDistance) return 1;
    
    return 1 - ((distance - minDistance) / (maxDistance - minDistance));
  }

  /**
   * Clear all labels
   */
  clear(): void {
    this.labels.forEach((__label, id) => {
      this.removeLabel(id);
    });
  }

  /**
   * Dispose of resources
   */
  dispose(): void {
    this.clear();
    this.labels.forEach(label => {
      label.material.dispose();
      (label.material as THREE.SpriteMaterial).map?.dispose();
    });
    this.labelPool.forEach(label => {
      label.material.dispose();
      (label.material as THREE.SpriteMaterial).map?.dispose();
    });
    this.canvas.remove();
  }
}

----
rendering/scene.ts
/**
 * Three.js scene management with simplified setup
 */

import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';
import { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';
import { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';
import { createLogger } from '../core/utils';

const logger = createLogger('SceneManager');

// Constants
const BACKGROUND_COLOR = 0x212121;  // Material Design Grey 900

export class SceneManager {
  private static instance: SceneManager;
  
  // Three.js core components
  private scene: THREE.Scene;
  private camera: THREE.PerspectiveCamera;
  private renderer: THREE.WebGLRenderer;
  private controls: OrbitControls;
  
  // Post-processing
  private composer: EffectComposer;
  private bloomPass: UnrealBloomPass;
  
  // Animation
  private animationFrameId: number | null = null;
  private isRunning: boolean = false;

  private constructor(canvas: HTMLCanvasElement) {
    logger.log('Initializing SceneManager');
    
    // Create scene
    this.scene = new THREE.Scene();
    this.scene.background = new THREE.Color(BACKGROUND_COLOR);
    // Removed fog to ensure graph visibility

    // Create camera
    this.camera = new THREE.PerspectiveCamera(
      75,
      window.innerWidth / window.innerHeight,
      0.1,
      1000
    );
    this.camera.position.set(0, 5, 20); // Moved camera closer
    this.camera.lookAt(0, 0, 0);

    // Create renderer
    this.renderer = new THREE.WebGLRenderer({
      canvas,
      antialias: true,
      alpha: true,
      powerPreference: 'high-performance'
    });
    this.renderer.setSize(window.innerWidth, window.innerHeight);
    this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));

    // Create controls
    this.controls = new OrbitControls(this.camera, canvas);
    this.controls.enableDamping = true;
    this.controls.dampingFactor = 0.05;
    this.controls.screenSpacePanning = false;
    this.controls.minDistance = 5;  // Reduced min distance
    this.controls.maxDistance = 100; // Reduced max distance

    // Setup post-processing
    this.composer = new EffectComposer(this.renderer);
    const renderPass = new RenderPass(this.scene, this.camera);
    this.composer.addPass(renderPass);

    this.bloomPass = new UnrealBloomPass(
      new THREE.Vector2(window.innerWidth, window.innerHeight),
      1.5,  // Strength
      0.75, // Radius
      0.3   // Threshold
    );
    this.composer.addPass(this.bloomPass);

    // Setup basic lighting
    this.setupLighting();

    // Setup event listeners
    window.addEventListener('resize', this.handleResize.bind(this));

    logger.log('SceneManager initialization complete');
  }

  static getInstance(canvas: HTMLCanvasElement): SceneManager {
    if (!SceneManager.instance) {
      SceneManager.instance = new SceneManager(canvas);
    }
    return SceneManager.instance;
  }

  private setupLighting(): void {
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
    this.scene.add(ambientLight);

    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
    directionalLight.position.set(1, 1, 1).normalize();
    this.scene.add(directionalLight);

    // Add smaller grid helper
    const gridHelper = new THREE.GridHelper(50, 50); // Reduced grid size
    if (gridHelper.material instanceof THREE.Material) {
      gridHelper.material.transparent = true;
      gridHelper.material.opacity = 0.1;
    }
    this.scene.add(gridHelper);
  }

  private handleResize(): void {
    const width = window.innerWidth;
    const height = window.innerHeight;

    this.camera.aspect = width / height;
    this.camera.updateProjectionMatrix();

    this.renderer.setSize(width, height);
    this.composer.setSize(width, height);
  }

  start(): void {
    if (this.isRunning) return;
    this.isRunning = true;
    this.animate();
    logger.log('Scene rendering started');
  }

  stop(): void {
    this.isRunning = false;
    if (this.animationFrameId !== null) {
      cancelAnimationFrame(this.animationFrameId);
      this.animationFrameId = null;
    }
    logger.log('Scene rendering stopped');
  }

  private animate(): void {
    if (!this.isRunning) return;

    this.animationFrameId = requestAnimationFrame(this.animate.bind(this));
    this.controls.update();
    this.composer.render();
  }

  // Public getters
  getScene(): THREE.Scene {
    return this.scene;
  }

  getCamera(): THREE.PerspectiveCamera {
    return this.camera;
  }

  getRenderer(): THREE.WebGLRenderer {
    return this.renderer;
  }

  getControls(): OrbitControls {
    return this.controls;
  }

  // Scene management methods
  add(object: THREE.Object3D): void {
    this.scene.add(object);
  }

  remove(object: THREE.Object3D): void {
    this.scene.remove(object);
  }

  dispose(): void {
    this.stop();
    
    window.removeEventListener('resize', this.handleResize.bind(this));

    this.renderer.dispose();
    this.scene.traverse((object) => {
      if (object instanceof THREE.Mesh) {
        object.geometry.dispose();
        if (object.material instanceof THREE.Material) {
          object.material.dispose();
        }
      }
    });

    logger.log('Scene manager disposed');
  }
}

----
rendering/nodes.ts
/**
 * Node and edge rendering using InstancedMesh for both
 */

import {
  Vector3,
  Matrix4,
  Quaternion,
  Color,
  SphereGeometry,
  CylinderGeometry,
  MeshPhongMaterial,
  MeshBasicMaterial,
  Material,
  InstancedMesh,
  Object3D,
  MathUtils
} from 'three';
import { Node, Edge } from '../core/types';
import { SceneManager } from './scene';
import { createLogger } from '../core/utils';
import { settingsManager } from '../state/settings';
import { graphDataManager } from '../state/graphData';

const logger = createLogger('NodeManager');

// Constants for geometry
const NODE_SEGMENTS = 16;
const EDGE_SEGMENTS = 8;
const NODE_SIZE_MULTIPLIER = 1;

// Binary format constants
const BINARY_VERSION = 1.0;
const FLOATS_PER_NODE = 6;  // x, y, z, vx, vy, vz
const VERSION_OFFSET = 1;    // Skip version float

// Reusable objects for matrix calculations
const matrix = new Matrix4();
const quaternion = new Quaternion();
const position = new Vector3();
const scale = new Vector3(1, 1, 1);

// Edge calculation vectors (reused for efficiency)
const start = new Vector3();
const end = new Vector3();
const direction = new Vector3();
const center = new Vector3();
const UP = new Vector3(0, 1, 0);
const tempVector = new Vector3();
const rotationAxis = new Vector3(1, 0, 0);

export interface NodeMesh extends Object3D {
  userData: {
    nodeId: string;
  };
}

export class NodeManager {
  private static instance: NodeManager;
  private sceneManager: SceneManager;

  // Instanced meshes - initialized with dummy values, properly set in constructor
  private nodeInstances: InstancedMesh;
  private edgeInstances: InstancedMesh;

  // State tracking
  private currentNodes: Node[] = [];
  private currentEdges: Edge[] = [];
  private nodeIndices: Map<string, number> = new Map();
  private highlightedNode: string | null = null;
  
  // Edge update batching
  private dirtyEdges: Set<number> = new Set();
  private batchUpdateTimeout: number | null = null;

  // Unsubscribe function for position updates
  private unsubscribeFromPositionUpdates: (() => void) | null = null;

  private constructor(sceneManager: SceneManager) {
    this.sceneManager = sceneManager;
    
    // Get initial settings
    const threeSettings = settingsManager.getThreeJSSettings();
    
    // Initialize with proper geometries
    const nodeGeometry = new SphereGeometry(threeSettings.nodes.size * NODE_SIZE_MULTIPLIER, NODE_SEGMENTS, NODE_SEGMENTS);
    const nodeMaterial = new MeshPhongMaterial({
      color: new Color(threeSettings.nodes.color),
      shininess: 100,
      specular: new Color('#FFFFFF'),
      transparent: true,
      opacity: threeSettings.nodes.opacity
    });

    const edgeGeometry = new CylinderGeometry(
      threeSettings.edges.width / 4,
      threeSettings.edges.width / 4,
      1,
      EDGE_SEGMENTS
    );
    edgeGeometry.rotateX(Math.PI / 2);
    
    const edgeMaterial = new MeshBasicMaterial({
      color: new Color(threeSettings.edges.color),
      transparent: true,
      opacity: threeSettings.edges.opacity,
      depthWrite: false
    });

    this.nodeInstances = new InstancedMesh(nodeGeometry, nodeMaterial, 10000);
    this.edgeInstances = new InstancedMesh(edgeGeometry, edgeMaterial, 30000);
    
    this.initializeInstances();

    // Subscribe to settings changes
    settingsManager.subscribe(() => this.onSettingsChanged());

    // Subscribe to position updates from graphDataManager
    this.unsubscribeFromPositionUpdates = graphDataManager.subscribeToPositionUpdates(
      (positions: Float32Array) => this.updatePositions(positions)
    );
    
    logger.log('NodeManager initialized with settings:', threeSettings);
  }

  private onSettingsChanged(): void {
    const threeSettings = settingsManager.getThreeJSSettings();

    // Update node geometry with new size
    const nodeGeometry = new SphereGeometry(threeSettings.nodes.size * NODE_SIZE_MULTIPLIER, NODE_SEGMENTS, NODE_SEGMENTS);
    this.nodeInstances.geometry.dispose();
    this.nodeInstances.geometry = nodeGeometry;

    // Update node material
    const nodeMaterial = this.nodeInstances.material as MeshPhongMaterial;
    nodeMaterial.color.set(threeSettings.nodes.color);
    nodeMaterial.opacity = threeSettings.nodes.opacity;
    nodeMaterial.shininess = 100;
    nodeMaterial.specular.set('#FFFFFF');

    // Update edge material
    const edgeMaterial = this.edgeInstances.material as MeshBasicMaterial;
    edgeMaterial.color.set(threeSettings.edges.color);
    edgeMaterial.opacity = threeSettings.edges.opacity;

    // Update all node positions to account for new size
    this.currentNodes.forEach((node, index) => {
      position.set(
        node.data.position.x,
        node.data.position.y,
        node.data.position.z
      );
      matrix.compose(position, quaternion, scale);
      this.nodeInstances.setMatrixAt(index, matrix);
    });
    this.nodeInstances.instanceMatrix.needsUpdate = true;

    // Update all edges to account for new node size
    this.currentEdges.forEach((edge, index) => {
      const sourceNode = this.currentNodes.find(n => n.id === edge.source);
      const targetNode = this.currentNodes.find(n => n.id === edge.target);
      if (sourceNode && targetNode) {
        this.updateEdgeInstance(index, sourceNode, targetNode);
      }
    });
    this.edgeInstances.instanceMatrix.needsUpdate = true;

    logger.log('Visual settings updated:', threeSettings);
  }

  static getInstance(sceneManager: SceneManager): NodeManager {
    if (!NodeManager.instance) {
      NodeManager.instance = new NodeManager(sceneManager);
    }
    return NodeManager.instance;
  }

  private initializeInstances(): void {
    // Initialize node instances
    this.nodeInstances.count = 0;
    this.nodeInstances.frustumCulled = false;

    // Initialize edge instances
    this.edgeInstances.count = 0;
    this.edgeInstances.frustumCulled = false;
    this.edgeInstances.renderOrder = 1;

    // Add to scene
    this.sceneManager.add(this.nodeInstances);
    this.sceneManager.add(this.edgeInstances);

    logger.log('Instances initialized');
  }

  getAllNodeMeshes(): NodeMesh[] {
    return [this.nodeInstances as unknown as NodeMesh];
  }

  getNodePosition(nodeId: string): Vector3 {
    const node = this.currentNodes.find(n => n.id === nodeId);
    if (!node) {
      throw new Error(`Node ${nodeId} not found`);
    }
    return new Vector3(
      node.data.position.x,
      node.data.position.y,
      node.data.position.z
    );
  }

  updateNodePosition(nodeId: string, newPosition: Vector3): void {
    const index = this.nodeIndices.get(nodeId);
    if (index === undefined) {
      throw new Error(`Node ${nodeId} not found`);
    }

    // Update node position in current nodes array
    const node = this.currentNodes[index];
    if (node) {
      node.data.position = { x: newPosition.x, y: newPosition.y, z: newPosition.z };
    }

    // Update instance matrix
    position.copy(newPosition);
    matrix.compose(position, quaternion, scale);
    this.nodeInstances.setMatrixAt(index, matrix);
    this.nodeInstances.instanceMatrix.needsUpdate = true;

    // Mark connected edges for update
    this.currentEdges.forEach((edge, edgeIndex) => {
      if (edge.source === nodeId || edge.target === nodeId) {
        this.dirtyEdges.add(edgeIndex);
      }
    });

    // Schedule batch edge update
    this.scheduleBatchEdgeUpdate();
  }

  private scheduleBatchEdgeUpdate(): void {
    if (this.batchUpdateTimeout !== null) return;

    this.batchUpdateTimeout = window.setTimeout(() => {
      this.processBatchEdgeUpdate();
      this.batchUpdateTimeout = null;
    }, 16); // Batch updates at ~60fps
  }

  private processBatchEdgeUpdate(): void {
    if (this.dirtyEdges.size === 0) return;

    for (const edgeIndex of this.dirtyEdges) {
      const edge = this.currentEdges[edgeIndex];
      const sourceNode = this.currentNodes.find(n => n.id === edge.source);
      const targetNode = this.currentNodes.find(n => n.id === edge.target);

      if (sourceNode && targetNode) {
        this.updateEdgeInstance(edgeIndex, sourceNode, targetNode);
      }
    }

    this.dirtyEdges.clear();
    this.edgeInstances.instanceMatrix.needsUpdate = true;
  }

  highlightNode(nodeId: string | null): void {
    if (this.highlightedNode === nodeId) return;

    const color = new Color();
    const threeSettings = settingsManager.getThreeJSSettings();

    if (this.highlightedNode) {
      const prevIndex = this.nodeIndices.get(this.highlightedNode);
      if (prevIndex !== undefined) {
        const node = this.currentNodes[prevIndex];
        color.set(node?.color || threeSettings.nodes.color);
        this.nodeInstances.setColorAt(prevIndex, color);
      }
    }

    if (nodeId) {
      const index = this.nodeIndices.get(nodeId);
      if (index !== undefined) {
        color.set(threeSettings.nodes.highlightColor);
        this.nodeInstances.setColorAt(index, color);
      }
    }

    this.highlightedNode = nodeId;
    if (this.nodeInstances.instanceColor) {
      this.nodeInstances.instanceColor.needsUpdate = true;
    }
  }

  updateGraph(nodes: Node[], edges: Edge[]): void {
    this.currentNodes = nodes;
    this.currentEdges = edges;
    this.nodeIndices.clear();
    this.dirtyEdges.clear();

    // Get current settings
    const threeSettings = settingsManager.getThreeJSSettings();

    // Update node instances count and matrices
    this.nodeInstances.count = nodes.length;
    nodes.forEach((node, index) => {
      this.nodeIndices.set(node.id, index);
      
      position.set(
        node.data.position.x,
        node.data.position.y,
        node.data.position.z
      );

      matrix.compose(position, quaternion, scale);
      this.nodeInstances.setMatrixAt(index, matrix);

      // Set node color based on settings
      const color = new Color(node.color || threeSettings.nodes.color);
      this.nodeInstances.setColorAt(index, color);
    });

    this.nodeInstances.instanceMatrix.needsUpdate = true;
    if (this.nodeInstances.instanceColor) {
      this.nodeInstances.instanceColor.needsUpdate = true;
    }

    // Update edge instances
    this.edgeInstances.count = edges.length;
    edges.forEach((edge, index) => {
      const sourceNode = nodes.find(n => n.id === edge.source);
      const targetNode = nodes.find(n => n.id === edge.target);

      if (sourceNode && targetNode) {
        this.updateEdgeInstance(index, sourceNode, targetNode);
      }
    });

    this.edgeInstances.instanceMatrix.needsUpdate = true;

    logger.log(`Updated graph: ${nodes.length} nodes, ${edges.length} edges`);
  }

  private updateEdgeInstance(index: number, sourceNode: Node, targetNode: Node): void {
    const sourcePos = sourceNode.data.position;
    const targetPos = targetNode.data.position;

    start.set(sourcePos.x, sourcePos.y, sourcePos.z);
    end.set(targetPos.x, targetPos.y, targetPos.z);

    direction.subVectors(end, start);
    const length = direction.length();
    
    if (length < 0.001) return;

    center.addVectors(start, end).multiplyScalar(0.5);
    position.copy(center);

    direction.normalize();
    const angle = Math.acos(MathUtils.clamp(direction.dot(UP), -1, 1));
    tempVector.crossVectors(UP, direction).normalize();
    
    if (tempVector.lengthSq() < 0.001) {
      quaternion.setFromAxisAngle(rotationAxis, direction.dot(UP) > 0 ? 0 : Math.PI);
    } else {
      quaternion.setFromAxisAngle(tempVector, angle);
    }

    // Get current settings
    const threeSettings = settingsManager.getThreeJSSettings();
    const nodeVisualOffset = threeSettings.nodes.size * NODE_SIZE_MULTIPLIER;

    scale.set(nodeVisualOffset, nodeVisualOffset, nodeVisualOffset);

    matrix.compose(position, quaternion, scale);
    this.edgeInstances.setMatrixAt(index, matrix);
  }

  updatePositions(floatArray: Float32Array): void {
    // Check binary version
    const version = floatArray[0];
    if (version !== BINARY_VERSION) {
      logger.warn(`Received binary data version ${version}, expected ${BINARY_VERSION}`);
      return;
    }

    // Calculate number of nodes from array length
    const nodeCount = Math.floor((floatArray.length - VERSION_OFFSET) / FLOATS_PER_NODE);
    
    if (nodeCount > this.currentNodes.length) {
      logger.warn(`Received more nodes than currently tracked: ${nodeCount} > ${this.currentNodes.length}`);
      return;
    }

    // Process node updates in chunks for better performance
    const CHUNK_SIZE = 1000;
    for (let i = 0; i < nodeCount; i += CHUNK_SIZE) {
      const endIndex = Math.min(i + CHUNK_SIZE, nodeCount);
      this.processNodeChunk(floatArray, i, endIndex);
    }

    // Trigger matrix updates
    this.nodeInstances.instanceMatrix.needsUpdate = true;
    
    // Process batched edge updates
    this.processBatchEdgeUpdate();

    logger.debug(`Updated positions for ${nodeCount} nodes`);
  }

  private processNodeChunk(floatArray: Float32Array, startIndex: number, endIndex: number): void {
    // Reset quaternion to identity
    quaternion.identity();
    
    for (let i = startIndex; i < endIndex; i++) {
      const baseIndex = VERSION_OFFSET + (i * FLOATS_PER_NODE);
      
      // Extract position
      position.set(
        floatArray[baseIndex],
        floatArray[baseIndex + 1],
        floatArray[baseIndex + 2]
      );

      // Keep uniform scale of 1 for position updates
      scale.set(1, 1, 1);
      
      // Create matrix with uniform scaling
      matrix.compose(position, quaternion, scale);
      this.nodeInstances.setMatrixAt(i, matrix);

      // Update node data
      const node = this.currentNodes[i];
      if (node) {
        node.data.position.x = floatArray[baseIndex];
        node.data.position.y = floatArray[baseIndex + 1];
        node.data.position.z = floatArray[baseIndex + 2];
        
        node.data.velocity.x = floatArray[baseIndex + 3];
        node.data.velocity.y = floatArray[baseIndex + 4];
        node.data.velocity.z = floatArray[baseIndex + 5];

        // Mark connected edges for update
        this.currentEdges.forEach((edge, edgeIndex) => {
          if (edge.source === node.id || edge.target === node.id) {
            this.dirtyEdges.add(edgeIndex);
          }
        });
      }
    }
  }

  dispose(): void {
    if (this.batchUpdateTimeout !== null) {
      clearTimeout(this.batchUpdateTimeout);
    }

    // Unsubscribe from position updates
    if (this.unsubscribeFromPositionUpdates) {
      this.unsubscribeFromPositionUpdates();
      this.unsubscribeFromPositionUpdates = null;
    }

    this.nodeInstances.geometry.dispose();
    (this.nodeInstances.material as Material).dispose();
    this.sceneManager.remove(this.nodeInstances);

    this.edgeInstances.geometry.dispose();
    (this.edgeInstances.material as Material).dispose();
    this.sceneManager.remove(this.edgeInstances);

    this.dirtyEdges.clear();
    logger.log('NodeManager disposed');
  }
}

--END--